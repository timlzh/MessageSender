
L4Test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d298  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001140  0800d428  0800d428  0001d428  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800e568  0800e568  00021280  2**0
                  CONTENTS
  4 .ARM          00000008  0800e568  0800e568  0001e568  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800e570  0800e570  00021280  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800e570  0800e570  0001e570  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800e574  0800e574  0001e574  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00001280  20000000  0800e578  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000b18  20001280  0800f7f8  00021280  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20001d98  0800f7f8  00021d98  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00021280  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001a4a6  00000000  00000000  000212b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000356a  00000000  00000000  0003b756  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001870  00000000  00000000  0003ecc0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000017a8  00000000  00000000  00040530  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00024049  00000000  00000000  00041cd8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001a0c5  00000000  00000000  00065d21  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d6746  00000000  00000000  0007fde6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0015652c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007ea8  00000000  00000000  0015657c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20001280 	.word	0x20001280
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800d410 	.word	0x0800d410

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20001284 	.word	0x20001284
 80001cc:	0800d410 	.word	0x0800d410

080001d0 <strcmp>:
 80001d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d8:	2a01      	cmp	r2, #1
 80001da:	bf28      	it	cs
 80001dc:	429a      	cmpcs	r2, r3
 80001de:	d0f7      	beq.n	80001d0 <strcmp>
 80001e0:	1ad0      	subs	r0, r2, r3
 80001e2:	4770      	bx	lr

080001e4 <strlen>:
 80001e4:	4603      	mov	r3, r0
 80001e6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ea:	2a00      	cmp	r2, #0
 80001ec:	d1fb      	bne.n	80001e6 <strlen+0x2>
 80001ee:	1a18      	subs	r0, r3, r0
 80001f0:	3801      	subs	r0, #1
 80001f2:	4770      	bx	lr
	...

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	; 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	3c01      	subs	r4, #1
 80003dc:	bf28      	it	cs
 80003de:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003e2:	d2e9      	bcs.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_dmul>:
 8000618:	b570      	push	{r4, r5, r6, lr}
 800061a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800061e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000622:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000626:	bf1d      	ittte	ne
 8000628:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800062c:	ea94 0f0c 	teqne	r4, ip
 8000630:	ea95 0f0c 	teqne	r5, ip
 8000634:	f000 f8de 	bleq	80007f4 <__aeabi_dmul+0x1dc>
 8000638:	442c      	add	r4, r5
 800063a:	ea81 0603 	eor.w	r6, r1, r3
 800063e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000642:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000646:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800064a:	bf18      	it	ne
 800064c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000650:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000654:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000658:	d038      	beq.n	80006cc <__aeabi_dmul+0xb4>
 800065a:	fba0 ce02 	umull	ip, lr, r0, r2
 800065e:	f04f 0500 	mov.w	r5, #0
 8000662:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000666:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800066a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800066e:	f04f 0600 	mov.w	r6, #0
 8000672:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000676:	f09c 0f00 	teq	ip, #0
 800067a:	bf18      	it	ne
 800067c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000680:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000684:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000688:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800068c:	d204      	bcs.n	8000698 <__aeabi_dmul+0x80>
 800068e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000692:	416d      	adcs	r5, r5
 8000694:	eb46 0606 	adc.w	r6, r6, r6
 8000698:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800069c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ac:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006b0:	bf88      	it	hi
 80006b2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006b6:	d81e      	bhi.n	80006f6 <__aeabi_dmul+0xde>
 80006b8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006bc:	bf08      	it	eq
 80006be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006c2:	f150 0000 	adcs.w	r0, r0, #0
 80006c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006d0:	ea46 0101 	orr.w	r1, r6, r1
 80006d4:	ea40 0002 	orr.w	r0, r0, r2
 80006d8:	ea81 0103 	eor.w	r1, r1, r3
 80006dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e0:	bfc2      	ittt	gt
 80006e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	popgt	{r4, r5, r6, pc}
 80006ec:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006f0:	f04f 0e00 	mov.w	lr, #0
 80006f4:	3c01      	subs	r4, #1
 80006f6:	f300 80ab 	bgt.w	8000850 <__aeabi_dmul+0x238>
 80006fa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006fe:	bfde      	ittt	le
 8000700:	2000      	movle	r0, #0
 8000702:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000706:	bd70      	pople	{r4, r5, r6, pc}
 8000708:	f1c4 0400 	rsb	r4, r4, #0
 800070c:	3c20      	subs	r4, #32
 800070e:	da35      	bge.n	800077c <__aeabi_dmul+0x164>
 8000710:	340c      	adds	r4, #12
 8000712:	dc1b      	bgt.n	800074c <__aeabi_dmul+0x134>
 8000714:	f104 0414 	add.w	r4, r4, #20
 8000718:	f1c4 0520 	rsb	r5, r4, #32
 800071c:	fa00 f305 	lsl.w	r3, r0, r5
 8000720:	fa20 f004 	lsr.w	r0, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea40 0002 	orr.w	r0, r0, r2
 800072c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000734:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000738:	fa21 f604 	lsr.w	r6, r1, r4
 800073c:	eb42 0106 	adc.w	r1, r2, r6
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 040c 	rsb	r4, r4, #12
 8000750:	f1c4 0520 	rsb	r5, r4, #32
 8000754:	fa00 f304 	lsl.w	r3, r0, r4
 8000758:	fa20 f005 	lsr.w	r0, r0, r5
 800075c:	fa01 f204 	lsl.w	r2, r1, r4
 8000760:	ea40 0002 	orr.w	r0, r0, r2
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000768:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800076c:	f141 0100 	adc.w	r1, r1, #0
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 0520 	rsb	r5, r4, #32
 8000780:	fa00 f205 	lsl.w	r2, r0, r5
 8000784:	ea4e 0e02 	orr.w	lr, lr, r2
 8000788:	fa20 f304 	lsr.w	r3, r0, r4
 800078c:	fa01 f205 	lsl.w	r2, r1, r5
 8000790:	ea43 0302 	orr.w	r3, r3, r2
 8000794:	fa21 f004 	lsr.w	r0, r1, r4
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800079c:	fa21 f204 	lsr.w	r2, r1, r4
 80007a0:	ea20 0002 	bic.w	r0, r0, r2
 80007a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ac:	bf08      	it	eq
 80007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b2:	bd70      	pop	{r4, r5, r6, pc}
 80007b4:	f094 0f00 	teq	r4, #0
 80007b8:	d10f      	bne.n	80007da <__aeabi_dmul+0x1c2>
 80007ba:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007be:	0040      	lsls	r0, r0, #1
 80007c0:	eb41 0101 	adc.w	r1, r1, r1
 80007c4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3c01      	subeq	r4, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1a6>
 80007ce:	ea41 0106 	orr.w	r1, r1, r6
 80007d2:	f095 0f00 	teq	r5, #0
 80007d6:	bf18      	it	ne
 80007d8:	4770      	bxne	lr
 80007da:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007de:	0052      	lsls	r2, r2, #1
 80007e0:	eb43 0303 	adc.w	r3, r3, r3
 80007e4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3d01      	subeq	r5, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1c6>
 80007ee:	ea43 0306 	orr.w	r3, r3, r6
 80007f2:	4770      	bx	lr
 80007f4:	ea94 0f0c 	teq	r4, ip
 80007f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007fc:	bf18      	it	ne
 80007fe:	ea95 0f0c 	teqne	r5, ip
 8000802:	d00c      	beq.n	800081e <__aeabi_dmul+0x206>
 8000804:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000808:	bf18      	it	ne
 800080a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080e:	d1d1      	bne.n	80007b4 <__aeabi_dmul+0x19c>
 8000810:	ea81 0103 	eor.w	r1, r1, r3
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000818:	f04f 0000 	mov.w	r0, #0
 800081c:	bd70      	pop	{r4, r5, r6, pc}
 800081e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000822:	bf06      	itte	eq
 8000824:	4610      	moveq	r0, r2
 8000826:	4619      	moveq	r1, r3
 8000828:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082c:	d019      	beq.n	8000862 <__aeabi_dmul+0x24a>
 800082e:	ea94 0f0c 	teq	r4, ip
 8000832:	d102      	bne.n	800083a <__aeabi_dmul+0x222>
 8000834:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000838:	d113      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800083a:	ea95 0f0c 	teq	r5, ip
 800083e:	d105      	bne.n	800084c <__aeabi_dmul+0x234>
 8000840:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000844:	bf1c      	itt	ne
 8000846:	4610      	movne	r0, r2
 8000848:	4619      	movne	r1, r3
 800084a:	d10a      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800084c:	ea81 0103 	eor.w	r1, r1, r3
 8000850:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000854:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000858:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800085c:	f04f 0000 	mov.w	r0, #0
 8000860:	bd70      	pop	{r4, r5, r6, pc}
 8000862:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000866:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800086a:	bd70      	pop	{r4, r5, r6, pc}

0800086c <__aeabi_ddiv>:
 800086c:	b570      	push	{r4, r5, r6, lr}
 800086e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000872:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000876:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800087a:	bf1d      	ittte	ne
 800087c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000880:	ea94 0f0c 	teqne	r4, ip
 8000884:	ea95 0f0c 	teqne	r5, ip
 8000888:	f000 f8a7 	bleq	80009da <__aeabi_ddiv+0x16e>
 800088c:	eba4 0405 	sub.w	r4, r4, r5
 8000890:	ea81 0e03 	eor.w	lr, r1, r3
 8000894:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000898:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800089c:	f000 8088 	beq.w	80009b0 <__aeabi_ddiv+0x144>
 80008a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008a4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008c4:	429d      	cmp	r5, r3
 80008c6:	bf08      	it	eq
 80008c8:	4296      	cmpeq	r6, r2
 80008ca:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ce:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008d2:	d202      	bcs.n	80008da <__aeabi_ddiv+0x6e>
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	1ab6      	subs	r6, r6, r2
 80008dc:	eb65 0503 	sbc.w	r5, r5, r3
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ea:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000948:	ea55 0e06 	orrs.w	lr, r5, r6
 800094c:	d018      	beq.n	8000980 <__aeabi_ddiv+0x114>
 800094e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000952:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000956:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800095a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800095e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000962:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000966:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800096a:	d1c0      	bne.n	80008ee <__aeabi_ddiv+0x82>
 800096c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000970:	d10b      	bne.n	800098a <__aeabi_ddiv+0x11e>
 8000972:	ea41 0100 	orr.w	r1, r1, r0
 8000976:	f04f 0000 	mov.w	r0, #0
 800097a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800097e:	e7b6      	b.n	80008ee <__aeabi_ddiv+0x82>
 8000980:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000984:	bf04      	itt	eq
 8000986:	4301      	orreq	r1, r0
 8000988:	2000      	moveq	r0, #0
 800098a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800098e:	bf88      	it	hi
 8000990:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000994:	f63f aeaf 	bhi.w	80006f6 <__aeabi_dmul+0xde>
 8000998:	ebb5 0c03 	subs.w	ip, r5, r3
 800099c:	bf04      	itt	eq
 800099e:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009a6:	f150 0000 	adcs.w	r0, r0, #0
 80009aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	pop	{r4, r5, r6, pc}
 80009b0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009bc:	bfc2      	ittt	gt
 80009be:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	popgt	{r4, r5, r6, pc}
 80009c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009cc:	f04f 0e00 	mov.w	lr, #0
 80009d0:	3c01      	subs	r4, #1
 80009d2:	e690      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009d4:	ea45 0e06 	orr.w	lr, r5, r6
 80009d8:	e68d      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009de:	ea94 0f0c 	teq	r4, ip
 80009e2:	bf08      	it	eq
 80009e4:	ea95 0f0c 	teqeq	r5, ip
 80009e8:	f43f af3b 	beq.w	8000862 <__aeabi_dmul+0x24a>
 80009ec:	ea94 0f0c 	teq	r4, ip
 80009f0:	d10a      	bne.n	8000a08 <__aeabi_ddiv+0x19c>
 80009f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009f6:	f47f af34 	bne.w	8000862 <__aeabi_dmul+0x24a>
 80009fa:	ea95 0f0c 	teq	r5, ip
 80009fe:	f47f af25 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a02:	4610      	mov	r0, r2
 8000a04:	4619      	mov	r1, r3
 8000a06:	e72c      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a08:	ea95 0f0c 	teq	r5, ip
 8000a0c:	d106      	bne.n	8000a1c <__aeabi_ddiv+0x1b0>
 8000a0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a12:	f43f aefd 	beq.w	8000810 <__aeabi_dmul+0x1f8>
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	e722      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a20:	bf18      	it	ne
 8000a22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a26:	f47f aec5 	bne.w	80007b4 <__aeabi_dmul+0x19c>
 8000a2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a2e:	f47f af0d 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a36:	f47f aeeb 	bne.w	8000810 <__aeabi_dmul+0x1f8>
 8000a3a:	e712      	b.n	8000862 <__aeabi_dmul+0x24a>

08000a3c <__gedf2>:
 8000a3c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a40:	e006      	b.n	8000a50 <__cmpdf2+0x4>
 8000a42:	bf00      	nop

08000a44 <__ledf2>:
 8000a44:	f04f 0c01 	mov.w	ip, #1
 8000a48:	e002      	b.n	8000a50 <__cmpdf2+0x4>
 8000a4a:	bf00      	nop

08000a4c <__cmpdf2>:
 8000a4c:	f04f 0c01 	mov.w	ip, #1
 8000a50:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a54:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a66:	d01b      	beq.n	8000aa0 <__cmpdf2+0x54>
 8000a68:	b001      	add	sp, #4
 8000a6a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a6e:	bf0c      	ite	eq
 8000a70:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a74:	ea91 0f03 	teqne	r1, r3
 8000a78:	bf02      	ittt	eq
 8000a7a:	ea90 0f02 	teqeq	r0, r2
 8000a7e:	2000      	moveq	r0, #0
 8000a80:	4770      	bxeq	lr
 8000a82:	f110 0f00 	cmn.w	r0, #0
 8000a86:	ea91 0f03 	teq	r1, r3
 8000a8a:	bf58      	it	pl
 8000a8c:	4299      	cmppl	r1, r3
 8000a8e:	bf08      	it	eq
 8000a90:	4290      	cmpeq	r0, r2
 8000a92:	bf2c      	ite	cs
 8000a94:	17d8      	asrcs	r0, r3, #31
 8000a96:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a9a:	f040 0001 	orr.w	r0, r0, #1
 8000a9e:	4770      	bx	lr
 8000aa0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d102      	bne.n	8000ab0 <__cmpdf2+0x64>
 8000aaa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aae:	d107      	bne.n	8000ac0 <__cmpdf2+0x74>
 8000ab0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d1d6      	bne.n	8000a68 <__cmpdf2+0x1c>
 8000aba:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000abe:	d0d3      	beq.n	8000a68 <__cmpdf2+0x1c>
 8000ac0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdrcmple>:
 8000ac8:	4684      	mov	ip, r0
 8000aca:	4610      	mov	r0, r2
 8000acc:	4662      	mov	r2, ip
 8000ace:	468c      	mov	ip, r1
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	4663      	mov	r3, ip
 8000ad4:	e000      	b.n	8000ad8 <__aeabi_cdcmpeq>
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdcmpeq>:
 8000ad8:	b501      	push	{r0, lr}
 8000ada:	f7ff ffb7 	bl	8000a4c <__cmpdf2>
 8000ade:	2800      	cmp	r0, #0
 8000ae0:	bf48      	it	mi
 8000ae2:	f110 0f00 	cmnmi.w	r0, #0
 8000ae6:	bd01      	pop	{r0, pc}

08000ae8 <__aeabi_dcmpeq>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff fff4 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000af0:	bf0c      	ite	eq
 8000af2:	2001      	moveq	r0, #1
 8000af4:	2000      	movne	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmplt>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff ffea 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b04:	bf34      	ite	cc
 8000b06:	2001      	movcc	r0, #1
 8000b08:	2000      	movcs	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmple>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff ffe0 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b18:	bf94      	ite	ls
 8000b1a:	2001      	movls	r0, #1
 8000b1c:	2000      	movhi	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmpge>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffce 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b2c:	bf94      	ite	ls
 8000b2e:	2001      	movls	r0, #1
 8000b30:	2000      	movhi	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmpgt>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffc4 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b40:	bf34      	ite	cc
 8000b42:	2001      	movcc	r0, #1
 8000b44:	2000      	movcs	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_d2iz>:
 8000b4c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b50:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b54:	d215      	bcs.n	8000b82 <__aeabi_d2iz+0x36>
 8000b56:	d511      	bpl.n	8000b7c <__aeabi_d2iz+0x30>
 8000b58:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b5c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b60:	d912      	bls.n	8000b88 <__aeabi_d2iz+0x3c>
 8000b62:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b66:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b6a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b6e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b72:	fa23 f002 	lsr.w	r0, r3, r2
 8000b76:	bf18      	it	ne
 8000b78:	4240      	negne	r0, r0
 8000b7a:	4770      	bx	lr
 8000b7c:	f04f 0000 	mov.w	r0, #0
 8000b80:	4770      	bx	lr
 8000b82:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b86:	d105      	bne.n	8000b94 <__aeabi_d2iz+0x48>
 8000b88:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b8c:	bf08      	it	eq
 8000b8e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b92:	4770      	bx	lr
 8000b94:	f04f 0000 	mov.w	r0, #0
 8000b98:	4770      	bx	lr
 8000b9a:	bf00      	nop

08000b9c <__aeabi_d2uiz>:
 8000b9c:	004a      	lsls	r2, r1, #1
 8000b9e:	d211      	bcs.n	8000bc4 <__aeabi_d2uiz+0x28>
 8000ba0:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ba4:	d211      	bcs.n	8000bca <__aeabi_d2uiz+0x2e>
 8000ba6:	d50d      	bpl.n	8000bc4 <__aeabi_d2uiz+0x28>
 8000ba8:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bac:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bb0:	d40e      	bmi.n	8000bd0 <__aeabi_d2uiz+0x34>
 8000bb2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bba:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	4770      	bx	lr
 8000bc4:	f04f 0000 	mov.w	r0, #0
 8000bc8:	4770      	bx	lr
 8000bca:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bce:	d102      	bne.n	8000bd6 <__aeabi_d2uiz+0x3a>
 8000bd0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000bd4:	4770      	bx	lr
 8000bd6:	f04f 0000 	mov.w	r0, #0
 8000bda:	4770      	bx	lr

08000bdc <__aeabi_uldivmod>:
 8000bdc:	b953      	cbnz	r3, 8000bf4 <__aeabi_uldivmod+0x18>
 8000bde:	b94a      	cbnz	r2, 8000bf4 <__aeabi_uldivmod+0x18>
 8000be0:	2900      	cmp	r1, #0
 8000be2:	bf08      	it	eq
 8000be4:	2800      	cmpeq	r0, #0
 8000be6:	bf1c      	itt	ne
 8000be8:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000bec:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000bf0:	f000 b9aa 	b.w	8000f48 <__aeabi_idiv0>
 8000bf4:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bf8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bfc:	f000 f83c 	bl	8000c78 <__udivmoddi4>
 8000c00:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c04:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c08:	b004      	add	sp, #16
 8000c0a:	4770      	bx	lr

08000c0c <__aeabi_d2lz>:
 8000c0c:	b538      	push	{r3, r4, r5, lr}
 8000c0e:	2200      	movs	r2, #0
 8000c10:	2300      	movs	r3, #0
 8000c12:	4604      	mov	r4, r0
 8000c14:	460d      	mov	r5, r1
 8000c16:	f7ff ff71 	bl	8000afc <__aeabi_dcmplt>
 8000c1a:	b928      	cbnz	r0, 8000c28 <__aeabi_d2lz+0x1c>
 8000c1c:	4620      	mov	r0, r4
 8000c1e:	4629      	mov	r1, r5
 8000c20:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000c24:	f000 b80a 	b.w	8000c3c <__aeabi_d2ulz>
 8000c28:	4620      	mov	r0, r4
 8000c2a:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000c2e:	f000 f805 	bl	8000c3c <__aeabi_d2ulz>
 8000c32:	4240      	negs	r0, r0
 8000c34:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c38:	bd38      	pop	{r3, r4, r5, pc}
 8000c3a:	bf00      	nop

08000c3c <__aeabi_d2ulz>:
 8000c3c:	b5d0      	push	{r4, r6, r7, lr}
 8000c3e:	4b0c      	ldr	r3, [pc, #48]	; (8000c70 <__aeabi_d2ulz+0x34>)
 8000c40:	2200      	movs	r2, #0
 8000c42:	4606      	mov	r6, r0
 8000c44:	460f      	mov	r7, r1
 8000c46:	f7ff fce7 	bl	8000618 <__aeabi_dmul>
 8000c4a:	f7ff ffa7 	bl	8000b9c <__aeabi_d2uiz>
 8000c4e:	4604      	mov	r4, r0
 8000c50:	f7ff fc68 	bl	8000524 <__aeabi_ui2d>
 8000c54:	4b07      	ldr	r3, [pc, #28]	; (8000c74 <__aeabi_d2ulz+0x38>)
 8000c56:	2200      	movs	r2, #0
 8000c58:	f7ff fcde 	bl	8000618 <__aeabi_dmul>
 8000c5c:	4602      	mov	r2, r0
 8000c5e:	460b      	mov	r3, r1
 8000c60:	4630      	mov	r0, r6
 8000c62:	4639      	mov	r1, r7
 8000c64:	f7ff fb20 	bl	80002a8 <__aeabi_dsub>
 8000c68:	f7ff ff98 	bl	8000b9c <__aeabi_d2uiz>
 8000c6c:	4621      	mov	r1, r4
 8000c6e:	bdd0      	pop	{r4, r6, r7, pc}
 8000c70:	3df00000 	.word	0x3df00000
 8000c74:	41f00000 	.word	0x41f00000

08000c78 <__udivmoddi4>:
 8000c78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c7c:	9d08      	ldr	r5, [sp, #32]
 8000c7e:	4604      	mov	r4, r0
 8000c80:	468e      	mov	lr, r1
 8000c82:	2b00      	cmp	r3, #0
 8000c84:	d14d      	bne.n	8000d22 <__udivmoddi4+0xaa>
 8000c86:	428a      	cmp	r2, r1
 8000c88:	4694      	mov	ip, r2
 8000c8a:	d969      	bls.n	8000d60 <__udivmoddi4+0xe8>
 8000c8c:	fab2 f282 	clz	r2, r2
 8000c90:	b152      	cbz	r2, 8000ca8 <__udivmoddi4+0x30>
 8000c92:	fa01 f302 	lsl.w	r3, r1, r2
 8000c96:	f1c2 0120 	rsb	r1, r2, #32
 8000c9a:	fa20 f101 	lsr.w	r1, r0, r1
 8000c9e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ca2:	ea41 0e03 	orr.w	lr, r1, r3
 8000ca6:	4094      	lsls	r4, r2
 8000ca8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000cac:	0c21      	lsrs	r1, r4, #16
 8000cae:	fbbe f6f8 	udiv	r6, lr, r8
 8000cb2:	fa1f f78c 	uxth.w	r7, ip
 8000cb6:	fb08 e316 	mls	r3, r8, r6, lr
 8000cba:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000cbe:	fb06 f107 	mul.w	r1, r6, r7
 8000cc2:	4299      	cmp	r1, r3
 8000cc4:	d90a      	bls.n	8000cdc <__udivmoddi4+0x64>
 8000cc6:	eb1c 0303 	adds.w	r3, ip, r3
 8000cca:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000cce:	f080 811f 	bcs.w	8000f10 <__udivmoddi4+0x298>
 8000cd2:	4299      	cmp	r1, r3
 8000cd4:	f240 811c 	bls.w	8000f10 <__udivmoddi4+0x298>
 8000cd8:	3e02      	subs	r6, #2
 8000cda:	4463      	add	r3, ip
 8000cdc:	1a5b      	subs	r3, r3, r1
 8000cde:	b2a4      	uxth	r4, r4
 8000ce0:	fbb3 f0f8 	udiv	r0, r3, r8
 8000ce4:	fb08 3310 	mls	r3, r8, r0, r3
 8000ce8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000cec:	fb00 f707 	mul.w	r7, r0, r7
 8000cf0:	42a7      	cmp	r7, r4
 8000cf2:	d90a      	bls.n	8000d0a <__udivmoddi4+0x92>
 8000cf4:	eb1c 0404 	adds.w	r4, ip, r4
 8000cf8:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000cfc:	f080 810a 	bcs.w	8000f14 <__udivmoddi4+0x29c>
 8000d00:	42a7      	cmp	r7, r4
 8000d02:	f240 8107 	bls.w	8000f14 <__udivmoddi4+0x29c>
 8000d06:	4464      	add	r4, ip
 8000d08:	3802      	subs	r0, #2
 8000d0a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d0e:	1be4      	subs	r4, r4, r7
 8000d10:	2600      	movs	r6, #0
 8000d12:	b11d      	cbz	r5, 8000d1c <__udivmoddi4+0xa4>
 8000d14:	40d4      	lsrs	r4, r2
 8000d16:	2300      	movs	r3, #0
 8000d18:	e9c5 4300 	strd	r4, r3, [r5]
 8000d1c:	4631      	mov	r1, r6
 8000d1e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d22:	428b      	cmp	r3, r1
 8000d24:	d909      	bls.n	8000d3a <__udivmoddi4+0xc2>
 8000d26:	2d00      	cmp	r5, #0
 8000d28:	f000 80ef 	beq.w	8000f0a <__udivmoddi4+0x292>
 8000d2c:	2600      	movs	r6, #0
 8000d2e:	e9c5 0100 	strd	r0, r1, [r5]
 8000d32:	4630      	mov	r0, r6
 8000d34:	4631      	mov	r1, r6
 8000d36:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d3a:	fab3 f683 	clz	r6, r3
 8000d3e:	2e00      	cmp	r6, #0
 8000d40:	d14a      	bne.n	8000dd8 <__udivmoddi4+0x160>
 8000d42:	428b      	cmp	r3, r1
 8000d44:	d302      	bcc.n	8000d4c <__udivmoddi4+0xd4>
 8000d46:	4282      	cmp	r2, r0
 8000d48:	f200 80f9 	bhi.w	8000f3e <__udivmoddi4+0x2c6>
 8000d4c:	1a84      	subs	r4, r0, r2
 8000d4e:	eb61 0303 	sbc.w	r3, r1, r3
 8000d52:	2001      	movs	r0, #1
 8000d54:	469e      	mov	lr, r3
 8000d56:	2d00      	cmp	r5, #0
 8000d58:	d0e0      	beq.n	8000d1c <__udivmoddi4+0xa4>
 8000d5a:	e9c5 4e00 	strd	r4, lr, [r5]
 8000d5e:	e7dd      	b.n	8000d1c <__udivmoddi4+0xa4>
 8000d60:	b902      	cbnz	r2, 8000d64 <__udivmoddi4+0xec>
 8000d62:	deff      	udf	#255	; 0xff
 8000d64:	fab2 f282 	clz	r2, r2
 8000d68:	2a00      	cmp	r2, #0
 8000d6a:	f040 8092 	bne.w	8000e92 <__udivmoddi4+0x21a>
 8000d6e:	eba1 010c 	sub.w	r1, r1, ip
 8000d72:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d76:	fa1f fe8c 	uxth.w	lr, ip
 8000d7a:	2601      	movs	r6, #1
 8000d7c:	0c20      	lsrs	r0, r4, #16
 8000d7e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000d82:	fb07 1113 	mls	r1, r7, r3, r1
 8000d86:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d8a:	fb0e f003 	mul.w	r0, lr, r3
 8000d8e:	4288      	cmp	r0, r1
 8000d90:	d908      	bls.n	8000da4 <__udivmoddi4+0x12c>
 8000d92:	eb1c 0101 	adds.w	r1, ip, r1
 8000d96:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000d9a:	d202      	bcs.n	8000da2 <__udivmoddi4+0x12a>
 8000d9c:	4288      	cmp	r0, r1
 8000d9e:	f200 80cb 	bhi.w	8000f38 <__udivmoddi4+0x2c0>
 8000da2:	4643      	mov	r3, r8
 8000da4:	1a09      	subs	r1, r1, r0
 8000da6:	b2a4      	uxth	r4, r4
 8000da8:	fbb1 f0f7 	udiv	r0, r1, r7
 8000dac:	fb07 1110 	mls	r1, r7, r0, r1
 8000db0:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000db4:	fb0e fe00 	mul.w	lr, lr, r0
 8000db8:	45a6      	cmp	lr, r4
 8000dba:	d908      	bls.n	8000dce <__udivmoddi4+0x156>
 8000dbc:	eb1c 0404 	adds.w	r4, ip, r4
 8000dc0:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000dc4:	d202      	bcs.n	8000dcc <__udivmoddi4+0x154>
 8000dc6:	45a6      	cmp	lr, r4
 8000dc8:	f200 80bb 	bhi.w	8000f42 <__udivmoddi4+0x2ca>
 8000dcc:	4608      	mov	r0, r1
 8000dce:	eba4 040e 	sub.w	r4, r4, lr
 8000dd2:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000dd6:	e79c      	b.n	8000d12 <__udivmoddi4+0x9a>
 8000dd8:	f1c6 0720 	rsb	r7, r6, #32
 8000ddc:	40b3      	lsls	r3, r6
 8000dde:	fa22 fc07 	lsr.w	ip, r2, r7
 8000de2:	ea4c 0c03 	orr.w	ip, ip, r3
 8000de6:	fa20 f407 	lsr.w	r4, r0, r7
 8000dea:	fa01 f306 	lsl.w	r3, r1, r6
 8000dee:	431c      	orrs	r4, r3
 8000df0:	40f9      	lsrs	r1, r7
 8000df2:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000df6:	fa00 f306 	lsl.w	r3, r0, r6
 8000dfa:	fbb1 f8f9 	udiv	r8, r1, r9
 8000dfe:	0c20      	lsrs	r0, r4, #16
 8000e00:	fa1f fe8c 	uxth.w	lr, ip
 8000e04:	fb09 1118 	mls	r1, r9, r8, r1
 8000e08:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e0c:	fb08 f00e 	mul.w	r0, r8, lr
 8000e10:	4288      	cmp	r0, r1
 8000e12:	fa02 f206 	lsl.w	r2, r2, r6
 8000e16:	d90b      	bls.n	8000e30 <__udivmoddi4+0x1b8>
 8000e18:	eb1c 0101 	adds.w	r1, ip, r1
 8000e1c:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000e20:	f080 8088 	bcs.w	8000f34 <__udivmoddi4+0x2bc>
 8000e24:	4288      	cmp	r0, r1
 8000e26:	f240 8085 	bls.w	8000f34 <__udivmoddi4+0x2bc>
 8000e2a:	f1a8 0802 	sub.w	r8, r8, #2
 8000e2e:	4461      	add	r1, ip
 8000e30:	1a09      	subs	r1, r1, r0
 8000e32:	b2a4      	uxth	r4, r4
 8000e34:	fbb1 f0f9 	udiv	r0, r1, r9
 8000e38:	fb09 1110 	mls	r1, r9, r0, r1
 8000e3c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000e40:	fb00 fe0e 	mul.w	lr, r0, lr
 8000e44:	458e      	cmp	lr, r1
 8000e46:	d908      	bls.n	8000e5a <__udivmoddi4+0x1e2>
 8000e48:	eb1c 0101 	adds.w	r1, ip, r1
 8000e4c:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000e50:	d26c      	bcs.n	8000f2c <__udivmoddi4+0x2b4>
 8000e52:	458e      	cmp	lr, r1
 8000e54:	d96a      	bls.n	8000f2c <__udivmoddi4+0x2b4>
 8000e56:	3802      	subs	r0, #2
 8000e58:	4461      	add	r1, ip
 8000e5a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000e5e:	fba0 9402 	umull	r9, r4, r0, r2
 8000e62:	eba1 010e 	sub.w	r1, r1, lr
 8000e66:	42a1      	cmp	r1, r4
 8000e68:	46c8      	mov	r8, r9
 8000e6a:	46a6      	mov	lr, r4
 8000e6c:	d356      	bcc.n	8000f1c <__udivmoddi4+0x2a4>
 8000e6e:	d053      	beq.n	8000f18 <__udivmoddi4+0x2a0>
 8000e70:	b15d      	cbz	r5, 8000e8a <__udivmoddi4+0x212>
 8000e72:	ebb3 0208 	subs.w	r2, r3, r8
 8000e76:	eb61 010e 	sbc.w	r1, r1, lr
 8000e7a:	fa01 f707 	lsl.w	r7, r1, r7
 8000e7e:	fa22 f306 	lsr.w	r3, r2, r6
 8000e82:	40f1      	lsrs	r1, r6
 8000e84:	431f      	orrs	r7, r3
 8000e86:	e9c5 7100 	strd	r7, r1, [r5]
 8000e8a:	2600      	movs	r6, #0
 8000e8c:	4631      	mov	r1, r6
 8000e8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e92:	f1c2 0320 	rsb	r3, r2, #32
 8000e96:	40d8      	lsrs	r0, r3
 8000e98:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e9c:	fa21 f303 	lsr.w	r3, r1, r3
 8000ea0:	4091      	lsls	r1, r2
 8000ea2:	4301      	orrs	r1, r0
 8000ea4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ea8:	fa1f fe8c 	uxth.w	lr, ip
 8000eac:	fbb3 f0f7 	udiv	r0, r3, r7
 8000eb0:	fb07 3610 	mls	r6, r7, r0, r3
 8000eb4:	0c0b      	lsrs	r3, r1, #16
 8000eb6:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000eba:	fb00 f60e 	mul.w	r6, r0, lr
 8000ebe:	429e      	cmp	r6, r3
 8000ec0:	fa04 f402 	lsl.w	r4, r4, r2
 8000ec4:	d908      	bls.n	8000ed8 <__udivmoddi4+0x260>
 8000ec6:	eb1c 0303 	adds.w	r3, ip, r3
 8000eca:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000ece:	d22f      	bcs.n	8000f30 <__udivmoddi4+0x2b8>
 8000ed0:	429e      	cmp	r6, r3
 8000ed2:	d92d      	bls.n	8000f30 <__udivmoddi4+0x2b8>
 8000ed4:	3802      	subs	r0, #2
 8000ed6:	4463      	add	r3, ip
 8000ed8:	1b9b      	subs	r3, r3, r6
 8000eda:	b289      	uxth	r1, r1
 8000edc:	fbb3 f6f7 	udiv	r6, r3, r7
 8000ee0:	fb07 3316 	mls	r3, r7, r6, r3
 8000ee4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ee8:	fb06 f30e 	mul.w	r3, r6, lr
 8000eec:	428b      	cmp	r3, r1
 8000eee:	d908      	bls.n	8000f02 <__udivmoddi4+0x28a>
 8000ef0:	eb1c 0101 	adds.w	r1, ip, r1
 8000ef4:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000ef8:	d216      	bcs.n	8000f28 <__udivmoddi4+0x2b0>
 8000efa:	428b      	cmp	r3, r1
 8000efc:	d914      	bls.n	8000f28 <__udivmoddi4+0x2b0>
 8000efe:	3e02      	subs	r6, #2
 8000f00:	4461      	add	r1, ip
 8000f02:	1ac9      	subs	r1, r1, r3
 8000f04:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000f08:	e738      	b.n	8000d7c <__udivmoddi4+0x104>
 8000f0a:	462e      	mov	r6, r5
 8000f0c:	4628      	mov	r0, r5
 8000f0e:	e705      	b.n	8000d1c <__udivmoddi4+0xa4>
 8000f10:	4606      	mov	r6, r0
 8000f12:	e6e3      	b.n	8000cdc <__udivmoddi4+0x64>
 8000f14:	4618      	mov	r0, r3
 8000f16:	e6f8      	b.n	8000d0a <__udivmoddi4+0x92>
 8000f18:	454b      	cmp	r3, r9
 8000f1a:	d2a9      	bcs.n	8000e70 <__udivmoddi4+0x1f8>
 8000f1c:	ebb9 0802 	subs.w	r8, r9, r2
 8000f20:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000f24:	3801      	subs	r0, #1
 8000f26:	e7a3      	b.n	8000e70 <__udivmoddi4+0x1f8>
 8000f28:	4646      	mov	r6, r8
 8000f2a:	e7ea      	b.n	8000f02 <__udivmoddi4+0x28a>
 8000f2c:	4620      	mov	r0, r4
 8000f2e:	e794      	b.n	8000e5a <__udivmoddi4+0x1e2>
 8000f30:	4640      	mov	r0, r8
 8000f32:	e7d1      	b.n	8000ed8 <__udivmoddi4+0x260>
 8000f34:	46d0      	mov	r8, sl
 8000f36:	e77b      	b.n	8000e30 <__udivmoddi4+0x1b8>
 8000f38:	3b02      	subs	r3, #2
 8000f3a:	4461      	add	r1, ip
 8000f3c:	e732      	b.n	8000da4 <__udivmoddi4+0x12c>
 8000f3e:	4630      	mov	r0, r6
 8000f40:	e709      	b.n	8000d56 <__udivmoddi4+0xde>
 8000f42:	4464      	add	r4, ip
 8000f44:	3802      	subs	r0, #2
 8000f46:	e742      	b.n	8000dce <__udivmoddi4+0x156>

08000f48 <__aeabi_idiv0>:
 8000f48:	4770      	bx	lr
 8000f4a:	bf00      	nop

08000f4c <OLED_Delay>:
 * @name: OLED_Delay
 * @description: 延时函数
 * @return {*}NONE
 */
static void OLED_Delay()
{
 8000f4c:	b480      	push	{r7}
 8000f4e:	b083      	sub	sp, #12
 8000f50:	af00      	add	r7, sp, #0
    uint16_t time=20;
 8000f52:	2314      	movs	r3, #20
 8000f54:	80fb      	strh	r3, [r7, #6]
    volatile uint16_t t=0;
 8000f56:	2300      	movs	r3, #0
 8000f58:	80bb      	strh	r3, [r7, #4]
    for(;time>0;time--) t++;
 8000f5a:	e007      	b.n	8000f6c <OLED_Delay+0x20>
 8000f5c:	88bb      	ldrh	r3, [r7, #4]
 8000f5e:	b29b      	uxth	r3, r3
 8000f60:	3301      	adds	r3, #1
 8000f62:	b29b      	uxth	r3, r3
 8000f64:	80bb      	strh	r3, [r7, #4]
 8000f66:	88fb      	ldrh	r3, [r7, #6]
 8000f68:	3b01      	subs	r3, #1
 8000f6a:	80fb      	strh	r3, [r7, #6]
 8000f6c:	88fb      	ldrh	r3, [r7, #6]
 8000f6e:	2b00      	cmp	r3, #0
 8000f70:	d1f4      	bne.n	8000f5c <OLED_Delay+0x10>
}
 8000f72:	bf00      	nop
 8000f74:	bf00      	nop
 8000f76:	370c      	adds	r7, #12
 8000f78:	46bd      	mov	sp, r7
 8000f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f7e:	4770      	bx	lr

08000f80 <IIC_Start>:
 * @name: IIC_Start
 * @description: CPU发起I2C总线启动信号
 * @return {*}
 */
static void IIC_Start()
{
 8000f80:	b580      	push	{r7, lr}
 8000f82:	af00      	add	r7, sp, #0
    //SCL和SDA拉高的情况下，SDA拉低发送开始信号
    OLED_SCL_1();
 8000f84:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000f88:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000f8c:	619a      	str	r2, [r3, #24]
    OLED_SDA_1();
 8000f8e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000f92:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000f96:	619a      	str	r2, [r3, #24]
    OLED_Delay();
 8000f98:	f7ff ffd8 	bl	8000f4c <OLED_Delay>
    OLED_SDA_0();
 8000f9c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000fa0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8000fa4:	619a      	str	r2, [r3, #24]
    OLED_Delay();
 8000fa6:	f7ff ffd1 	bl	8000f4c <OLED_Delay>
    OLED_SCL_0();
 8000faa:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000fae:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8000fb2:	619a      	str	r2, [r3, #24]
    
}
 8000fb4:	bf00      	nop
 8000fb6:	bd80      	pop	{r7, pc}

08000fb8 <IIC_Stop>:
 * @name: IIC_Stop
 * @description: CPU发起I2C总线停止信号
 * @return {*}
 */
static void IIC_Stop()
{
 8000fb8:	b580      	push	{r7, lr}
 8000fba:	af00      	add	r7, sp, #0
    //SCL拉高时，SDA从低变高，发送停止信号
    OLED_SDA_0();
 8000fbc:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000fc0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8000fc4:	619a      	str	r2, [r3, #24]
    OLED_SCL_1();
 8000fc6:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000fca:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000fce:	619a      	str	r2, [r3, #24]
    OLED_Delay();
 8000fd0:	f7ff ffbc 	bl	8000f4c <OLED_Delay>
    OLED_SDA_1();
 8000fd4:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000fd8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000fdc:	619a      	str	r2, [r3, #24]
}
 8000fde:	bf00      	nop
 8000fe0:	bd80      	pop	{r7, pc}

08000fe2 <IIC_SendByte>:
 * @description: CPU向I2C总线设备发送8bit数据,不带S和P信号
 * @param {uint8_t} byte 等待发送的字节
 * @return {*}
 */
static void IIC_SendByte(uint8_t byte)
{
 8000fe2:	b580      	push	{r7, lr}
 8000fe4:	b084      	sub	sp, #16
 8000fe6:	af00      	add	r7, sp, #0
 8000fe8:	4603      	mov	r3, r0
 8000fea:	71fb      	strb	r3, [r7, #7]
    //初始状态SCL为0，当SCL低，改变SDA；当SCL高，发送SDA值
    for(uint8_t i=0;i<8;i++)//高位先发送
 8000fec:	2300      	movs	r3, #0
 8000fee:	73fb      	strb	r3, [r7, #15]
 8000ff0:	e02a      	b.n	8001048 <IIC_SendByte+0x66>
    {
        if(byte & 0x80) OLED_SDA_1();
 8000ff2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ff6:	2b00      	cmp	r3, #0
 8000ff8:	da05      	bge.n	8001006 <IIC_SendByte+0x24>
 8000ffa:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000ffe:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001002:	619a      	str	r2, [r3, #24]
 8001004:	e004      	b.n	8001010 <IIC_SendByte+0x2e>
        else OLED_SDA_0();
 8001006:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800100a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800100e:	619a      	str	r2, [r3, #24]
				
        OLED_SCL_1();
 8001010:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8001014:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001018:	619a      	str	r2, [r3, #24]
        OLED_Delay();
 800101a:	f7ff ff97 	bl	8000f4c <OLED_Delay>
        byte <<=1;
 800101e:	79fb      	ldrb	r3, [r7, #7]
 8001020:	005b      	lsls	r3, r3, #1
 8001022:	71fb      	strb	r3, [r7, #7]
        OLED_SCL_0();
 8001024:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8001028:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 800102c:	619a      	str	r2, [r3, #24]
        OLED_Delay();
 800102e:	f7ff ff8d 	bl	8000f4c <OLED_Delay>

        if(i==7) OLED_SDA_1();//空闲时SDA高电平
 8001032:	7bfb      	ldrb	r3, [r7, #15]
 8001034:	2b07      	cmp	r3, #7
 8001036:	d104      	bne.n	8001042 <IIC_SendByte+0x60>
 8001038:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800103c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001040:	619a      	str	r2, [r3, #24]
    for(uint8_t i=0;i<8;i++)//高位先发送
 8001042:	7bfb      	ldrb	r3, [r7, #15]
 8001044:	3301      	adds	r3, #1
 8001046:	73fb      	strb	r3, [r7, #15]
 8001048:	7bfb      	ldrb	r3, [r7, #15]
 800104a:	2b07      	cmp	r3, #7
 800104c:	d9d1      	bls.n	8000ff2 <IIC_SendByte+0x10>
        
    }
}
 800104e:	bf00      	nop
 8001050:	bf00      	nop
 8001052:	3710      	adds	r7, #16
 8001054:	46bd      	mov	sp, r7
 8001056:	bd80      	pop	{r7, pc}

08001058 <IIC_WaitAck>:
 * @name: IIC_WaitAck
 * @description: CPU产生一个时钟，并读取器件的ACK应答信号
 * @return {uint8_t}返回0表示正确应答，1表示无器件响应
 */
static uint8_t IIC_WaitAck()
{
 8001058:	b580      	push	{r7, lr}
 800105a:	b082      	sub	sp, #8
 800105c:	af00      	add	r7, sp, #0
    //初态SCL为0，SDA无所谓。先拉高SDA（即释放SDA），再将SCL拉高，读取SDA值，SDA为0为应答，否则非应答
    uint8_t rec;

    OLED_SDA_1();
 800105e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8001062:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001066:	619a      	str	r2, [r3, #24]
    OLED_SCL_1();
 8001068:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800106c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001070:	619a      	str	r2, [r3, #24]
    OLED_Delay();
 8001072:	f7ff ff6b 	bl	8000f4c <OLED_Delay>
    if(OLED_READ()) rec=1;
 8001076:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800107a:	691b      	ldr	r3, [r3, #16]
 800107c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001080:	2b00      	cmp	r3, #0
 8001082:	d002      	beq.n	800108a <IIC_WaitAck+0x32>
 8001084:	2301      	movs	r3, #1
 8001086:	71fb      	strb	r3, [r7, #7]
 8001088:	e001      	b.n	800108e <IIC_WaitAck+0x36>
    else rec=0;
 800108a:	2300      	movs	r3, #0
 800108c:	71fb      	strb	r3, [r7, #7]
    OLED_SCL_0();
 800108e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8001092:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8001096:	619a      	str	r2, [r3, #24]

    return rec;
 8001098:	79fb      	ldrb	r3, [r7, #7]
}
 800109a:	4618      	mov	r0, r3
 800109c:	3708      	adds	r7, #8
 800109e:	46bd      	mov	sp, r7
 80010a0:	bd80      	pop	{r7, pc}

080010a2 <OLED_Check>:
 * @name: OLED_Check
 * @description: 检测I2C总线设备，CPU向发送设备地址，然后读取设备应答来判断该设备是否存在
 * @return {uint8_t}1:OK 0:ERROR
 */
static uint8_t OLED_Check()
{
 80010a2:	b580      	push	{r7, lr}
 80010a4:	b082      	sub	sp, #8
 80010a6:	af00      	add	r7, sp, #0
    uint8_t re;
    IIC_Start();
 80010a8:	f7ff ff6a 	bl	8000f80 <IIC_Start>
    IIC_SendByte(OLED_ADDRESS);
 80010ac:	2078      	movs	r0, #120	; 0x78
 80010ae:	f7ff ff98 	bl	8000fe2 <IIC_SendByte>
    re=IIC_WaitAck();
 80010b2:	f7ff ffd1 	bl	8001058 <IIC_WaitAck>
 80010b6:	4603      	mov	r3, r0
 80010b8:	71fb      	strb	r3, [r7, #7]
    IIC_Stop();
 80010ba:	f7ff ff7d 	bl	8000fb8 <IIC_Stop>

    return !re;
 80010be:	79fb      	ldrb	r3, [r7, #7]
 80010c0:	2b00      	cmp	r3, #0
 80010c2:	bf0c      	ite	eq
 80010c4:	2301      	moveq	r3, #1
 80010c6:	2300      	movne	r3, #0
 80010c8:	b2db      	uxtb	r3, r3
} 
 80010ca:	4618      	mov	r0, r3
 80010cc:	3708      	adds	r7, #8
 80010ce:	46bd      	mov	sp, r7
 80010d0:	bd80      	pop	{r7, pc}

080010d2 <OLED_SendCmd>:
 * @description: 向OLED发送一串命令，不带开始和结束信号
 * @param {uint8_t} cmd 要发送的命令
 * @return {uint8_t} 发送成功返回1:发送失败返回0
 */
static uint8_t OLED_SendCmd(uint8_t cmd)
{
 80010d2:	b580      	push	{r7, lr}
 80010d4:	b082      	sub	sp, #8
 80010d6:	af00      	add	r7, sp, #0
 80010d8:	4603      	mov	r3, r0
 80010da:	71fb      	strb	r3, [r7, #7]
    IIC_Start();
 80010dc:	f7ff ff50 	bl	8000f80 <IIC_Start>

    IIC_SendByte(OLED_ADDRESS);
 80010e0:	2078      	movs	r0, #120	; 0x78
 80010e2:	f7ff ff7e 	bl	8000fe2 <IIC_SendByte>
    if(IIC_WaitAck()) return 0;
 80010e6:	f7ff ffb7 	bl	8001058 <IIC_WaitAck>
 80010ea:	4603      	mov	r3, r0
 80010ec:	2b00      	cmp	r3, #0
 80010ee:	d001      	beq.n	80010f4 <OLED_SendCmd+0x22>
 80010f0:	2300      	movs	r3, #0
 80010f2:	e017      	b.n	8001124 <OLED_SendCmd+0x52>
    IIC_SendByte(OLED_CMD);
 80010f4:	2000      	movs	r0, #0
 80010f6:	f7ff ff74 	bl	8000fe2 <IIC_SendByte>
    if(IIC_WaitAck()) return 0;//没有收到回应即炸了
 80010fa:	f7ff ffad 	bl	8001058 <IIC_WaitAck>
 80010fe:	4603      	mov	r3, r0
 8001100:	2b00      	cmp	r3, #0
 8001102:	d001      	beq.n	8001108 <OLED_SendCmd+0x36>
 8001104:	2300      	movs	r3, #0
 8001106:	e00d      	b.n	8001124 <OLED_SendCmd+0x52>

    IIC_SendByte(cmd);
 8001108:	79fb      	ldrb	r3, [r7, #7]
 800110a:	4618      	mov	r0, r3
 800110c:	f7ff ff69 	bl	8000fe2 <IIC_SendByte>
    if(IIC_WaitAck()) return 0;
 8001110:	f7ff ffa2 	bl	8001058 <IIC_WaitAck>
 8001114:	4603      	mov	r3, r0
 8001116:	2b00      	cmp	r3, #0
 8001118:	d001      	beq.n	800111e <OLED_SendCmd+0x4c>
 800111a:	2300      	movs	r3, #0
 800111c:	e002      	b.n	8001124 <OLED_SendCmd+0x52>

    IIC_Stop();
 800111e:	f7ff ff4b 	bl	8000fb8 <IIC_Stop>
    return 1;
 8001122:	2301      	movs	r3, #1
}
 8001124:	4618      	mov	r0, r3
 8001126:	3708      	adds	r7, #8
 8001128:	46bd      	mov	sp, r7
 800112a:	bd80      	pop	{r7, pc}

0800112c <OLED_SendData>:
 * @description: 向OLED发送一串数据，不带开始和结束信号
 * @param {uint8_t} data 要发送的数据
 * @return {uint8_t}发送成功返回1:发送失败返回0
 */
static uint8_t OLED_SendData(uint8_t data)
{
 800112c:	b580      	push	{r7, lr}
 800112e:	b082      	sub	sp, #8
 8001130:	af00      	add	r7, sp, #0
 8001132:	4603      	mov	r3, r0
 8001134:	71fb      	strb	r3, [r7, #7]
    IIC_Start();
 8001136:	f7ff ff23 	bl	8000f80 <IIC_Start>

    IIC_SendByte(OLED_ADDRESS);
 800113a:	2078      	movs	r0, #120	; 0x78
 800113c:	f7ff ff51 	bl	8000fe2 <IIC_SendByte>
    if(IIC_WaitAck()) return 0;
 8001140:	f7ff ff8a 	bl	8001058 <IIC_WaitAck>
 8001144:	4603      	mov	r3, r0
 8001146:	2b00      	cmp	r3, #0
 8001148:	d001      	beq.n	800114e <OLED_SendData+0x22>
 800114a:	2300      	movs	r3, #0
 800114c:	e017      	b.n	800117e <OLED_SendData+0x52>
    IIC_SendByte(OLED_DATA);
 800114e:	2040      	movs	r0, #64	; 0x40
 8001150:	f7ff ff47 	bl	8000fe2 <IIC_SendByte>
    if(IIC_WaitAck()) return 0;//没有收到回应即炸了
 8001154:	f7ff ff80 	bl	8001058 <IIC_WaitAck>
 8001158:	4603      	mov	r3, r0
 800115a:	2b00      	cmp	r3, #0
 800115c:	d001      	beq.n	8001162 <OLED_SendData+0x36>
 800115e:	2300      	movs	r3, #0
 8001160:	e00d      	b.n	800117e <OLED_SendData+0x52>

    IIC_SendByte(data);
 8001162:	79fb      	ldrb	r3, [r7, #7]
 8001164:	4618      	mov	r0, r3
 8001166:	f7ff ff3c 	bl	8000fe2 <IIC_SendByte>
    if(IIC_WaitAck()) return 0;
 800116a:	f7ff ff75 	bl	8001058 <IIC_WaitAck>
 800116e:	4603      	mov	r3, r0
 8001170:	2b00      	cmp	r3, #0
 8001172:	d001      	beq.n	8001178 <OLED_SendData+0x4c>
 8001174:	2300      	movs	r3, #0
 8001176:	e002      	b.n	800117e <OLED_SendData+0x52>

    IIC_Stop();
 8001178:	f7ff ff1e 	bl	8000fb8 <IIC_Stop>
    return 1;
 800117c:	2301      	movs	r3, #1
}
 800117e:	4618      	mov	r0, r3
 8001180:	3708      	adds	r7, #8
 8001182:	46bd      	mov	sp, r7
 8001184:	bd80      	pop	{r7, pc}

08001186 <OLED_SetPos>:
 * @param {uint8_t} x 列地址,0-127
 * @param {uint8_t} y 页地址,0-7
 * @return {*}NONE
 */
static void OLED_SetPos(uint8_t x,uint8_t y)
{
 8001186:	b580      	push	{r7, lr}
 8001188:	b082      	sub	sp, #8
 800118a:	af00      	add	r7, sp, #0
 800118c:	4603      	mov	r3, r0
 800118e:	460a      	mov	r2, r1
 8001190:	71fb      	strb	r3, [r7, #7]
 8001192:	4613      	mov	r3, r2
 8001194:	71bb      	strb	r3, [r7, #6]
    OLED_SendCmd(OLED_CMD_SetPage+y);
 8001196:	79bb      	ldrb	r3, [r7, #6]
 8001198:	3b50      	subs	r3, #80	; 0x50
 800119a:	b2db      	uxtb	r3, r3
 800119c:	4618      	mov	r0, r3
 800119e:	f7ff ff98 	bl	80010d2 <OLED_SendCmd>

    OLED_SendCmd((x & 0xF0) >> 4 | OLED_CMD_SetLineH);//设置列高四位
 80011a2:	79fb      	ldrb	r3, [r7, #7]
 80011a4:	091b      	lsrs	r3, r3, #4
 80011a6:	b2db      	uxtb	r3, r3
 80011a8:	f043 0310 	orr.w	r3, r3, #16
 80011ac:	b2db      	uxtb	r3, r3
 80011ae:	4618      	mov	r0, r3
 80011b0:	f7ff ff8f 	bl	80010d2 <OLED_SendCmd>
    OLED_SendCmd((x & 0x0F) | OLED_CMD_SetLineL);//设置列低四位
 80011b4:	79fb      	ldrb	r3, [r7, #7]
 80011b6:	f003 030f 	and.w	r3, r3, #15
 80011ba:	b2db      	uxtb	r3, r3
 80011bc:	4618      	mov	r0, r3
 80011be:	f7ff ff88 	bl	80010d2 <OLED_SendCmd>
}
 80011c2:	bf00      	nop
 80011c4:	3708      	adds	r7, #8
 80011c6:	46bd      	mov	sp, r7
 80011c8:	bd80      	pop	{r7, pc}

080011ca <OLED_Init>:
}
/****************************用户函数1********************************/


uint8_t OLED_Init()
{
 80011ca:	b580      	push	{r7, lr}
 80011cc:	af00      	add	r7, sp, #0

    OLED_SendCmd(OLED_CMD_StopShow);//关闭显示
 80011ce:	20ae      	movs	r0, #174	; 0xae
 80011d0:	f7ff ff7f 	bl	80010d2 <OLED_SendCmd>

    OLED_SendCmd(OLED_CMD_SetMultiRatio);OLED_SendCmd(0x3F);//设置使用64行
 80011d4:	20a8      	movs	r0, #168	; 0xa8
 80011d6:	f7ff ff7c 	bl	80010d2 <OLED_SendCmd>
 80011da:	203f      	movs	r0, #63	; 0x3f
 80011dc:	f7ff ff79 	bl	80010d2 <OLED_SendCmd>
    OLED_SendCmd(OLED_CMD_SetDisplayOffset);OLED_SendCmd(0x00);//设置垂直偏移0行
 80011e0:	20d3      	movs	r0, #211	; 0xd3
 80011e2:	f7ff ff76 	bl	80010d2 <OLED_SendCmd>
 80011e6:	2000      	movs	r0, #0
 80011e8:	f7ff ff73 	bl	80010d2 <OLED_SendCmd>
    OLED_SendCmd(OLED_CMD_SetSegRemap_1);//不左右反转
 80011ec:	20a1      	movs	r0, #161	; 0xa1
 80011ee:	f7ff ff70 	bl	80010d2 <OLED_SendCmd>
    OLED_SendCmd(OLED_CMD_SetScanDirREM);//不上下反转
 80011f2:	20c8      	movs	r0, #200	; 0xc8
 80011f4:	f7ff ff6d 	bl	80010d2 <OLED_SendCmd>
    OLED_SendCmd(OLED_CMD_SetCOMPin);OLED_SendCmd(0x12);//COM引脚不反置
 80011f8:	20da      	movs	r0, #218	; 0xda
 80011fa:	f7ff ff6a 	bl	80010d2 <OLED_SendCmd>
 80011fe:	2012      	movs	r0, #18
 8001200:	f7ff ff67 	bl	80010d2 <OLED_SendCmd>
    OLED_SendCmd(OLED_CMD_SetDisplayStartLine);//设置起始显示行为0
 8001204:	2040      	movs	r0, #64	; 0x40
 8001206:	f7ff ff64 	bl	80010d2 <OLED_SendCmd>
    OLED_SendCmd(OLED_CMD_SetAddMode);OLED_SendCmd(OLED_CMD_AddressHori);//设置水平寻址模式
 800120a:	2020      	movs	r0, #32
 800120c:	f7ff ff61 	bl	80010d2 <OLED_SendCmd>
 8001210:	2000      	movs	r0, #0
 8001212:	f7ff ff5e 	bl	80010d2 <OLED_SendCmd>

    OLED_SendCmd(OLED_CMD_SetContrast);OLED_SendCmd(0x7F);//设置127级对比度
 8001216:	2081      	movs	r0, #129	; 0x81
 8001218:	f7ff ff5b 	bl	80010d2 <OLED_SendCmd>
 800121c:	207f      	movs	r0, #127	; 0x7f
 800121e:	f7ff ff58 	bl	80010d2 <OLED_SendCmd>
    OLED_SendCmd(OLED_CMD_EntireDisplayOff);//关闭全显示
 8001222:	20a4      	movs	r0, #164	; 0xa4
 8001224:	f7ff ff55 	bl	80010d2 <OLED_SendCmd>
    OLED_SendCmd(OLED_CMD_RollBackShowOff);//关闭反转显示
 8001228:	20a6      	movs	r0, #166	; 0xa6
 800122a:	f7ff ff52 	bl	80010d2 <OLED_SendCmd>
    OLED_SendCmd(OLED_CMD_SetVcomh);OLED_SendCmd(0x30);// set Vcomh
 800122e:	20db      	movs	r0, #219	; 0xdb
 8001230:	f7ff ff4f 	bl	80010d2 <OLED_SendCmd>
 8001234:	2030      	movs	r0, #48	; 0x30
 8001236:	f7ff ff4c 	bl	80010d2 <OLED_SendCmd>
    OLED_SendCmd(OLED_CMD_SetPreCharge);OLED_SendCmd(0xF1);// Set Pre-Charge Period
 800123a:	20d9      	movs	r0, #217	; 0xd9
 800123c:	f7ff ff49 	bl	80010d2 <OLED_SendCmd>
 8001240:	20f1      	movs	r0, #241	; 0xf1
 8001242:	f7ff ff46 	bl	80010d2 <OLED_SendCmd>
    OLED_SendCmd(OLED_CMD_SetClock);OLED_SendCmd(0x80);//设置振荡器频率为默认值
 8001246:	20d5      	movs	r0, #213	; 0xd5
 8001248:	f7ff ff43 	bl	80010d2 <OLED_SendCmd>
 800124c:	2080      	movs	r0, #128	; 0x80
 800124e:	f7ff ff40 	bl	80010d2 <OLED_SendCmd>
    OLED_SendCmd(OLED_CMD_ChargePumpH);OLED_SendCmd(OLED_CMD_ChargePumpEN);//开启电荷泵
 8001252:	208d      	movs	r0, #141	; 0x8d
 8001254:	f7ff ff3d 	bl	80010d2 <OLED_SendCmd>
 8001258:	2014      	movs	r0, #20
 800125a:	f7ff ff3a 	bl	80010d2 <OLED_SendCmd>

    OLED_SendCmd(OLED_CMD_DISscroll);//停止滚动
 800125e:	202e      	movs	r0, #46	; 0x2e
 8001260:	f7ff ff37 	bl	80010d2 <OLED_SendCmd>

    OLED_ClearAll();
 8001264:	f000 f808 	bl	8001278 <OLED_ClearAll>

    OLED_SendCmd(OLED_CMD_StartShow);//开启显示
 8001268:	20af      	movs	r0, #175	; 0xaf
 800126a:	f7ff ff32 	bl	80010d2 <OLED_SendCmd>

    return OLED_Check();
 800126e:	f7ff ff18 	bl	80010a2 <OLED_Check>
 8001272:	4603      	mov	r3, r0
}
 8001274:	4618      	mov	r0, r3
 8001276:	bd80      	pop	{r7, pc}

08001278 <OLED_ClearAll>:
 * @name: OLED_ClearAll
 * @description: 清屏操作
 * @return {*}
 */
void OLED_ClearAll()
{
 8001278:	b580      	push	{r7, lr}
 800127a:	b082      	sub	sp, #8
 800127c:	af00      	add	r7, sp, #0
    //水平寻址模式
    for(uint8_t i=0;i<8;i++)
 800127e:	2300      	movs	r3, #0
 8001280:	71fb      	strb	r3, [r7, #7]
 8001282:	e00f      	b.n	80012a4 <OLED_ClearAll+0x2c>
        for(uint8_t j=0;j<128;j++)
 8001284:	2300      	movs	r3, #0
 8001286:	71bb      	strb	r3, [r7, #6]
 8001288:	e005      	b.n	8001296 <OLED_ClearAll+0x1e>
        {
            OLED_SendData(0x00);
 800128a:	2000      	movs	r0, #0
 800128c:	f7ff ff4e 	bl	800112c <OLED_SendData>
        for(uint8_t j=0;j<128;j++)
 8001290:	79bb      	ldrb	r3, [r7, #6]
 8001292:	3301      	adds	r3, #1
 8001294:	71bb      	strb	r3, [r7, #6]
 8001296:	f997 3006 	ldrsb.w	r3, [r7, #6]
 800129a:	2b00      	cmp	r3, #0
 800129c:	daf5      	bge.n	800128a <OLED_ClearAll+0x12>
    for(uint8_t i=0;i<8;i++)
 800129e:	79fb      	ldrb	r3, [r7, #7]
 80012a0:	3301      	adds	r3, #1
 80012a2:	71fb      	strb	r3, [r7, #7]
 80012a4:	79fb      	ldrb	r3, [r7, #7]
 80012a6:	2b07      	cmp	r3, #7
 80012a8:	d9ec      	bls.n	8001284 <OLED_ClearAll+0xc>
        }
}
 80012aa:	bf00      	nop
 80012ac:	bf00      	nop
 80012ae:	3708      	adds	r7, #8
 80012b0:	46bd      	mov	sp, r7
 80012b2:	bd80      	pop	{r7, pc}

080012b4 <OLED_ClearLine>:
 * @description: 清除指定行
 * @param {uint8_t} line 行数
 * @return {*}
 */
void OLED_ClearLine(uint8_t line)
{
 80012b4:	b580      	push	{r7, lr}
 80012b6:	b084      	sub	sp, #16
 80012b8:	af00      	add	r7, sp, #0
 80012ba:	4603      	mov	r3, r0
 80012bc:	71fb      	strb	r3, [r7, #7]
    OLED_SetPos(0,line);
 80012be:	79fb      	ldrb	r3, [r7, #7]
 80012c0:	4619      	mov	r1, r3
 80012c2:	2000      	movs	r0, #0
 80012c4:	f7ff ff5f 	bl	8001186 <OLED_SetPos>
    for(uint8_t i=0;i<128;i++) OLED_SendData(0x00);
 80012c8:	2300      	movs	r3, #0
 80012ca:	73fb      	strb	r3, [r7, #15]
 80012cc:	e005      	b.n	80012da <OLED_ClearLine+0x26>
 80012ce:	2000      	movs	r0, #0
 80012d0:	f7ff ff2c 	bl	800112c <OLED_SendData>
 80012d4:	7bfb      	ldrb	r3, [r7, #15]
 80012d6:	3301      	adds	r3, #1
 80012d8:	73fb      	strb	r3, [r7, #15]
 80012da:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80012de:	2b00      	cmp	r3, #0
 80012e0:	daf5      	bge.n	80012ce <OLED_ClearLine+0x1a>
}
 80012e2:	bf00      	nop
 80012e4:	bf00      	nop
 80012e6:	3710      	adds	r7, #16
 80012e8:	46bd      	mov	sp, r7
 80012ea:	bd80      	pop	{r7, pc}

080012ec <OLED_ShowChar>:
 * @param {uint8_t} Size 字体选择-16/8
 * @param {uint8_t} mode 0,反白显示;1,正常显示
 * @return {*}NONE
 */
void OLED_ShowChar(uint8_t x,uint8_t y,uint8_t chr,uint8_t Size,uint8_t mode)
{
 80012ec:	b590      	push	{r4, r7, lr}
 80012ee:	b085      	sub	sp, #20
 80012f0:	af00      	add	r7, sp, #0
 80012f2:	4604      	mov	r4, r0
 80012f4:	4608      	mov	r0, r1
 80012f6:	4611      	mov	r1, r2
 80012f8:	461a      	mov	r2, r3
 80012fa:	4623      	mov	r3, r4
 80012fc:	71fb      	strb	r3, [r7, #7]
 80012fe:	4603      	mov	r3, r0
 8001300:	71bb      	strb	r3, [r7, #6]
 8001302:	460b      	mov	r3, r1
 8001304:	717b      	strb	r3, [r7, #5]
 8001306:	4613      	mov	r3, r2
 8001308:	713b      	strb	r3, [r7, #4]
    uint8_t c=0;
 800130a:	2300      	movs	r3, #0
 800130c:	73fb      	strb	r3, [r7, #15]

    if(chr>= ' ') c=chr-' ';//得到偏移后的值，字模中第一个为‘ ’
 800130e:	797b      	ldrb	r3, [r7, #5]
 8001310:	2b1f      	cmp	r3, #31
 8001312:	d903      	bls.n	800131c <OLED_ShowChar+0x30>
 8001314:	797b      	ldrb	r3, [r7, #5]
 8001316:	3b20      	subs	r3, #32
 8001318:	73fb      	strb	r3, [r7, #15]
 800131a:	e002      	b.n	8001322 <OLED_ShowChar+0x36>
    else c=chr+16;
 800131c:	797b      	ldrb	r3, [r7, #5]
 800131e:	3310      	adds	r3, #16
 8001320:	73fb      	strb	r3, [r7, #15]

    if(x>127)//列数超限，转到下一行
 8001322:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001326:	2b00      	cmp	r3, #0
 8001328:	da04      	bge.n	8001334 <OLED_ShowChar+0x48>
    {
        x=0;
 800132a:	2300      	movs	r3, #0
 800132c:	71fb      	strb	r3, [r7, #7]
        y=y+2;
 800132e:	79bb      	ldrb	r3, [r7, #6]
 8001330:	3302      	adds	r3, #2
 8001332:	71bb      	strb	r3, [r7, #6]
    }
    if(Size==16)//8*16,相当于画一个8*16的图
 8001334:	793b      	ldrb	r3, [r7, #4]
 8001336:	2b10      	cmp	r3, #16
 8001338:	d14e      	bne.n	80013d8 <OLED_ShowChar+0xec>
    {
        OLED_SetPos(x,y);
 800133a:	79ba      	ldrb	r2, [r7, #6]
 800133c:	79fb      	ldrb	r3, [r7, #7]
 800133e:	4611      	mov	r1, r2
 8001340:	4618      	mov	r0, r3
 8001342:	f7ff ff20 	bl	8001186 <OLED_SetPos>
        for(uint8_t i=0;i<8;i++) OLED_SendData(mode==1 ? F8X16[c*16+i]:~F8X16[c*16+i]);
 8001346:	2300      	movs	r3, #0
 8001348:	73bb      	strb	r3, [r7, #14]
 800134a:	e018      	b.n	800137e <OLED_ShowChar+0x92>
 800134c:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001350:	2b01      	cmp	r3, #1
 8001352:	d106      	bne.n	8001362 <OLED_ShowChar+0x76>
 8001354:	7bfb      	ldrb	r3, [r7, #15]
 8001356:	011a      	lsls	r2, r3, #4
 8001358:	7bbb      	ldrb	r3, [r7, #14]
 800135a:	4413      	add	r3, r2
 800135c:	4a37      	ldr	r2, [pc, #220]	; (800143c <OLED_ShowChar+0x150>)
 800135e:	5cd3      	ldrb	r3, [r2, r3]
 8001360:	e007      	b.n	8001372 <OLED_ShowChar+0x86>
 8001362:	7bfb      	ldrb	r3, [r7, #15]
 8001364:	011a      	lsls	r2, r3, #4
 8001366:	7bbb      	ldrb	r3, [r7, #14]
 8001368:	4413      	add	r3, r2
 800136a:	4a34      	ldr	r2, [pc, #208]	; (800143c <OLED_ShowChar+0x150>)
 800136c:	5cd3      	ldrb	r3, [r2, r3]
 800136e:	43db      	mvns	r3, r3
 8001370:	b2db      	uxtb	r3, r3
 8001372:	4618      	mov	r0, r3
 8001374:	f7ff feda 	bl	800112c <OLED_SendData>
 8001378:	7bbb      	ldrb	r3, [r7, #14]
 800137a:	3301      	adds	r3, #1
 800137c:	73bb      	strb	r3, [r7, #14]
 800137e:	7bbb      	ldrb	r3, [r7, #14]
 8001380:	2b07      	cmp	r3, #7
 8001382:	d9e3      	bls.n	800134c <OLED_ShowChar+0x60>
        OLED_SetPos(x,y+1);
 8001384:	79bb      	ldrb	r3, [r7, #6]
 8001386:	3301      	adds	r3, #1
 8001388:	b2da      	uxtb	r2, r3
 800138a:	79fb      	ldrb	r3, [r7, #7]
 800138c:	4611      	mov	r1, r2
 800138e:	4618      	mov	r0, r3
 8001390:	f7ff fef9 	bl	8001186 <OLED_SetPos>
        for(uint8_t i=0;i<8;i++) OLED_SendData(mode==1 ? F8X16[c*16+i+8]:~F8X16[c*16+i+8]);
 8001394:	2300      	movs	r3, #0
 8001396:	737b      	strb	r3, [r7, #13]
 8001398:	e01a      	b.n	80013d0 <OLED_ShowChar+0xe4>
 800139a:	f897 3020 	ldrb.w	r3, [r7, #32]
 800139e:	2b01      	cmp	r3, #1
 80013a0:	d107      	bne.n	80013b2 <OLED_ShowChar+0xc6>
 80013a2:	7bfb      	ldrb	r3, [r7, #15]
 80013a4:	011a      	lsls	r2, r3, #4
 80013a6:	7b7b      	ldrb	r3, [r7, #13]
 80013a8:	4413      	add	r3, r2
 80013aa:	3308      	adds	r3, #8
 80013ac:	4a23      	ldr	r2, [pc, #140]	; (800143c <OLED_ShowChar+0x150>)
 80013ae:	5cd3      	ldrb	r3, [r2, r3]
 80013b0:	e008      	b.n	80013c4 <OLED_ShowChar+0xd8>
 80013b2:	7bfb      	ldrb	r3, [r7, #15]
 80013b4:	011a      	lsls	r2, r3, #4
 80013b6:	7b7b      	ldrb	r3, [r7, #13]
 80013b8:	4413      	add	r3, r2
 80013ba:	3308      	adds	r3, #8
 80013bc:	4a1f      	ldr	r2, [pc, #124]	; (800143c <OLED_ShowChar+0x150>)
 80013be:	5cd3      	ldrb	r3, [r2, r3]
 80013c0:	43db      	mvns	r3, r3
 80013c2:	b2db      	uxtb	r3, r3
 80013c4:	4618      	mov	r0, r3
 80013c6:	f7ff feb1 	bl	800112c <OLED_SendData>
 80013ca:	7b7b      	ldrb	r3, [r7, #13]
 80013cc:	3301      	adds	r3, #1
 80013ce:	737b      	strb	r3, [r7, #13]
 80013d0:	7b7b      	ldrb	r3, [r7, #13]
 80013d2:	2b07      	cmp	r3, #7
 80013d4:	d9e1      	bls.n	800139a <OLED_ShowChar+0xae>
    else //6*8.相当于画一个6*8的图
    {
        OLED_SetPos(x,y);
        for(uint8_t i=0;i<6;i++) OLED_SendData(mode==1 ? F6x8[c*6+i]:~F6x8[c*6+i]);
    }
}
 80013d6:	e02c      	b.n	8001432 <OLED_ShowChar+0x146>
        OLED_SetPos(x,y);
 80013d8:	79ba      	ldrb	r2, [r7, #6]
 80013da:	79fb      	ldrb	r3, [r7, #7]
 80013dc:	4611      	mov	r1, r2
 80013de:	4618      	mov	r0, r3
 80013e0:	f7ff fed1 	bl	8001186 <OLED_SetPos>
        for(uint8_t i=0;i<6;i++) OLED_SendData(mode==1 ? F6x8[c*6+i]:~F6x8[c*6+i]);
 80013e4:	2300      	movs	r3, #0
 80013e6:	733b      	strb	r3, [r7, #12]
 80013e8:	e020      	b.n	800142c <OLED_ShowChar+0x140>
 80013ea:	f897 3020 	ldrb.w	r3, [r7, #32]
 80013ee:	2b01      	cmp	r3, #1
 80013f0:	d10a      	bne.n	8001408 <OLED_ShowChar+0x11c>
 80013f2:	7bfa      	ldrb	r2, [r7, #15]
 80013f4:	4613      	mov	r3, r2
 80013f6:	005b      	lsls	r3, r3, #1
 80013f8:	4413      	add	r3, r2
 80013fa:	005b      	lsls	r3, r3, #1
 80013fc:	461a      	mov	r2, r3
 80013fe:	7b3b      	ldrb	r3, [r7, #12]
 8001400:	4413      	add	r3, r2
 8001402:	4a0f      	ldr	r2, [pc, #60]	; (8001440 <OLED_ShowChar+0x154>)
 8001404:	5cd3      	ldrb	r3, [r2, r3]
 8001406:	e00b      	b.n	8001420 <OLED_ShowChar+0x134>
 8001408:	7bfa      	ldrb	r2, [r7, #15]
 800140a:	4613      	mov	r3, r2
 800140c:	005b      	lsls	r3, r3, #1
 800140e:	4413      	add	r3, r2
 8001410:	005b      	lsls	r3, r3, #1
 8001412:	461a      	mov	r2, r3
 8001414:	7b3b      	ldrb	r3, [r7, #12]
 8001416:	4413      	add	r3, r2
 8001418:	4a09      	ldr	r2, [pc, #36]	; (8001440 <OLED_ShowChar+0x154>)
 800141a:	5cd3      	ldrb	r3, [r2, r3]
 800141c:	43db      	mvns	r3, r3
 800141e:	b2db      	uxtb	r3, r3
 8001420:	4618      	mov	r0, r3
 8001422:	f7ff fe83 	bl	800112c <OLED_SendData>
 8001426:	7b3b      	ldrb	r3, [r7, #12]
 8001428:	3301      	adds	r3, #1
 800142a:	733b      	strb	r3, [r7, #12]
 800142c:	7b3b      	ldrb	r3, [r7, #12]
 800142e:	2b05      	cmp	r3, #5
 8001430:	d9db      	bls.n	80013ea <OLED_ShowChar+0xfe>
}
 8001432:	bf00      	nop
 8001434:	3714      	adds	r7, #20
 8001436:	46bd      	mov	sp, r7
 8001438:	bd90      	pop	{r4, r7, pc}
 800143a:	bf00      	nop
 800143c:	0800dae0 	.word	0x0800dae0
 8001440:	0800d8b8 	.word	0x0800d8b8

08001444 <OLED_ShowString>:
 * @param {uint8_t} Size 字体选择-16/8
 * @param {uint8_t} mode 0,反白显示;1,正常显示
 * @return {*}
 */
void OLED_ShowString(uint8_t x,uint8_t y,uint8_t* chr,uint8_t Size,uint8_t mode)
{
 8001444:	b590      	push	{r4, r7, lr}
 8001446:	b087      	sub	sp, #28
 8001448:	af02      	add	r7, sp, #8
 800144a:	603a      	str	r2, [r7, #0]
 800144c:	461a      	mov	r2, r3
 800144e:	4603      	mov	r3, r0
 8001450:	71fb      	strb	r3, [r7, #7]
 8001452:	460b      	mov	r3, r1
 8001454:	71bb      	strb	r3, [r7, #6]
 8001456:	4613      	mov	r3, r2
 8001458:	717b      	strb	r3, [r7, #5]
    uint8_t i=0;
 800145a:	2300      	movs	r3, #0
 800145c:	73fb      	strb	r3, [r7, #15]
    while (chr[i]!='\0')
 800145e:	e020      	b.n	80014a2 <OLED_ShowString+0x5e>
    {
        OLED_ShowChar(x,y,chr[i],Size,mode);
 8001460:	7bfb      	ldrb	r3, [r7, #15]
 8001462:	683a      	ldr	r2, [r7, #0]
 8001464:	4413      	add	r3, r2
 8001466:	781a      	ldrb	r2, [r3, #0]
 8001468:	797c      	ldrb	r4, [r7, #5]
 800146a:	79b9      	ldrb	r1, [r7, #6]
 800146c:	79f8      	ldrb	r0, [r7, #7]
 800146e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001472:	9300      	str	r3, [sp, #0]
 8001474:	4623      	mov	r3, r4
 8001476:	f7ff ff39 	bl	80012ec <OLED_ShowChar>
        x+=8;
 800147a:	79fb      	ldrb	r3, [r7, #7]
 800147c:	3308      	adds	r3, #8
 800147e:	71fb      	strb	r3, [r7, #7]
        if(x>120)//转到下一行
 8001480:	79fb      	ldrb	r3, [r7, #7]
 8001482:	2b78      	cmp	r3, #120	; 0x78
 8001484:	d90a      	bls.n	800149c <OLED_ShowString+0x58>
        {
            x=0;
 8001486:	2300      	movs	r3, #0
 8001488:	71fb      	strb	r3, [r7, #7]
            y+= (Size==16 ? 2:1);
 800148a:	797b      	ldrb	r3, [r7, #5]
 800148c:	2b10      	cmp	r3, #16
 800148e:	d101      	bne.n	8001494 <OLED_ShowString+0x50>
 8001490:	2202      	movs	r2, #2
 8001492:	e000      	b.n	8001496 <OLED_ShowString+0x52>
 8001494:	2201      	movs	r2, #1
 8001496:	79bb      	ldrb	r3, [r7, #6]
 8001498:	4413      	add	r3, r2
 800149a:	71bb      	strb	r3, [r7, #6]
        }
        i++;
 800149c:	7bfb      	ldrb	r3, [r7, #15]
 800149e:	3301      	adds	r3, #1
 80014a0:	73fb      	strb	r3, [r7, #15]
    while (chr[i]!='\0')
 80014a2:	7bfb      	ldrb	r3, [r7, #15]
 80014a4:	683a      	ldr	r2, [r7, #0]
 80014a6:	4413      	add	r3, r2
 80014a8:	781b      	ldrb	r3, [r3, #0]
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	d1d8      	bne.n	8001460 <OLED_ShowString+0x1c>
    }
    
}
 80014ae:	bf00      	nop
 80014b0:	bf00      	nop
 80014b2:	3714      	adds	r7, #20
 80014b4:	46bd      	mov	sp, r7
 80014b6:	bd90      	pop	{r4, r7, pc}

080014b8 <OLED_Printf>:
 * @param {uint8_t} mode 0,反白显示;1,正常显示
 * @param {char} *__format
 * @return {*}
 */
void OLED_Printf(uint8_t x,uint8_t y,uint8_t Size,uint8_t mode,const char *__format, ...)
{
 80014b8:	b590      	push	{r4, r7, lr}
 80014ba:	b087      	sub	sp, #28
 80014bc:	af02      	add	r7, sp, #8
 80014be:	4604      	mov	r4, r0
 80014c0:	4608      	mov	r0, r1
 80014c2:	4611      	mov	r1, r2
 80014c4:	461a      	mov	r2, r3
 80014c6:	4623      	mov	r3, r4
 80014c8:	71fb      	strb	r3, [r7, #7]
 80014ca:	4603      	mov	r3, r0
 80014cc:	71bb      	strb	r3, [r7, #6]
 80014ce:	460b      	mov	r3, r1
 80014d0:	717b      	strb	r3, [r7, #5]
 80014d2:	4613      	mov	r3, r2
 80014d4:	713b      	strb	r3, [r7, #4]
    va_list ap;
  va_start(ap, __format);
 80014d6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80014da:	60fb      	str	r3, [r7, #12]
  
  /* 清空发送缓冲区 */
  memset(TxBuf, 0x0, TX_BUF_LEN);
 80014dc:	22ff      	movs	r2, #255	; 0xff
 80014de:	2100      	movs	r1, #0
 80014e0:	480a      	ldr	r0, [pc, #40]	; (800150c <OLED_Printf+0x54>)
 80014e2:	f008 f9a7 	bl	8009834 <memset>
  
  /* 填充发送缓冲区 */
  vsnprintf((char*)TxBuf, TX_BUF_LEN, (const char *)__format, ap);
 80014e6:	68fb      	ldr	r3, [r7, #12]
 80014e8:	6a3a      	ldr	r2, [r7, #32]
 80014ea:	21ff      	movs	r1, #255	; 0xff
 80014ec:	4807      	ldr	r0, [pc, #28]	; (800150c <OLED_Printf+0x54>)
 80014ee:	f009 fa19 	bl	800a924 <vsniprintf>
  va_end(ap);
  
  OLED_ShowString(x,y,TxBuf,Size,mode);
 80014f2:	797a      	ldrb	r2, [r7, #5]
 80014f4:	79b9      	ldrb	r1, [r7, #6]
 80014f6:	79f8      	ldrb	r0, [r7, #7]
 80014f8:	793b      	ldrb	r3, [r7, #4]
 80014fa:	9300      	str	r3, [sp, #0]
 80014fc:	4613      	mov	r3, r2
 80014fe:	4a03      	ldr	r2, [pc, #12]	; (800150c <OLED_Printf+0x54>)
 8001500:	f7ff ffa0 	bl	8001444 <OLED_ShowString>
}
 8001504:	bf00      	nop
 8001506:	3714      	adds	r7, #20
 8001508:	46bd      	mov	sp, r7
 800150a:	bd90      	pop	{r4, r7, pc}
 800150c:	2000129c 	.word	0x2000129c

08001510 <beep_setFreq>:
#include "beeper.h"

void beep_setFreq(uint16_t freq, TIM_HandleTypeDef TIM)
{	
 8001510:	b084      	sub	sp, #16
 8001512:	b590      	push	{r4, r7, lr}
 8001514:	b085      	sub	sp, #20
 8001516:	af00      	add	r7, sp, #0
 8001518:	4604      	mov	r4, r0
 800151a:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800151e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
 8001522:	4623      	mov	r3, r4
 8001524:	80fb      	strh	r3, [r7, #6]
	uint32_t Period = 1000000 / freq;
 8001526:	88fb      	ldrh	r3, [r7, #6]
 8001528:	4a11      	ldr	r2, [pc, #68]	; (8001570 <beep_setFreq+0x60>)
 800152a:	fb92 f3f3 	sdiv	r3, r2, r3
 800152e:	60fb      	str	r3, [r7, #12]
	uint16_t Pulse  = Period  / 2;
 8001530:	68fb      	ldr	r3, [r7, #12]
 8001532:	085b      	lsrs	r3, r3, #1
 8001534:	817b      	strh	r3, [r7, #10]
	
	 HAL_TIM_PWM_Init(&TIM);// 初始化定时器的PWM模式
 8001536:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800153a:	4618      	mov	r0, r3
 800153c:	f005 fe9e 	bl	800727c <HAL_TIM_PWM_Init>
	
	 HAL_TIM_PWM_Start(&TIM,TIM_CHANNEL_1);// 启动定时器的PWM模式	
 8001540:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001544:	2100      	movs	r1, #0
 8001546:	4618      	mov	r0, r3
 8001548:	f005 fef0 	bl	800732c <HAL_TIM_PWM_Start>
	 
	/* Set the Autoreload value , frequency*/
	
	/*设置频率和占空比*/
	
	__HAL_TIM_SET_AUTORELOAD (&TIM, Period - 1);
 800154c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800154e:	68fa      	ldr	r2, [r7, #12]
 8001550:	3a01      	subs	r2, #1
 8001552:	62da      	str	r2, [r3, #44]	; 0x2c
 8001554:	68fb      	ldr	r3, [r7, #12]
 8001556:	3b01      	subs	r3, #1
 8001558:	633b      	str	r3, [r7, #48]	; 0x30
	
	__HAL_TIM_SET_COMPARE(&TIM,TIM_CHANNEL_1,Pulse);	
 800155a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800155c:	897a      	ldrh	r2, [r7, #10]
 800155e:	635a      	str	r2, [r3, #52]	; 0x34
}
 8001560:	bf00      	nop
 8001562:	3714      	adds	r7, #20
 8001564:	46bd      	mov	sp, r7
 8001566:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 800156a:	b004      	add	sp, #16
 800156c:	4770      	bx	lr
 800156e:	bf00      	nop
 8001570:	000f4240 	.word	0x000f4240

08001574 <beep_off>:

void beep_off(TIM_HandleTypeDef TIM)
{	
 8001574:	b084      	sub	sp, #16
 8001576:	b580      	push	{r7, lr}
 8001578:	af00      	add	r7, sp, #0
 800157a:	f107 0c08 	add.w	ip, r7, #8
 800157e:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	HAL_TIM_PWM_Stop(&TIM,TIM_CHANNEL_1);// 停止定时器的PWM输出
 8001582:	2100      	movs	r1, #0
 8001584:	f107 0008 	add.w	r0, r7, #8
 8001588:	f005 ffae 	bl	80074e8 <HAL_TIM_PWM_Stop>
}
 800158c:	bf00      	nop
 800158e:	46bd      	mov	sp, r7
 8001590:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001594:	b004      	add	sp, #16
 8001596:	4770      	bx	lr

08001598 <case_insensitive_strcmp>:
    return version;
}

/* Case insensitive string comparison, doesn't consider two NULL pointers equal though */
static int case_insensitive_strcmp(const unsigned char *string1, const unsigned char *string2)
{
 8001598:	b480      	push	{r7}
 800159a:	b085      	sub	sp, #20
 800159c:	af00      	add	r7, sp, #0
 800159e:	6078      	str	r0, [r7, #4]
 80015a0:	6039      	str	r1, [r7, #0]
    if ((string1 == NULL) || (string2 == NULL))
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	2b00      	cmp	r3, #0
 80015a6:	d002      	beq.n	80015ae <case_insensitive_strcmp+0x16>
 80015a8:	683b      	ldr	r3, [r7, #0]
 80015aa:	2b00      	cmp	r3, #0
 80015ac:	d101      	bne.n	80015b2 <case_insensitive_strcmp+0x1a>
    {
        return 1;
 80015ae:	2301      	movs	r3, #1
 80015b0:	e056      	b.n	8001660 <case_insensitive_strcmp+0xc8>
    }

    if (string1 == string2)
 80015b2:	687a      	ldr	r2, [r7, #4]
 80015b4:	683b      	ldr	r3, [r7, #0]
 80015b6:	429a      	cmp	r2, r3
 80015b8:	d10d      	bne.n	80015d6 <case_insensitive_strcmp+0x3e>
    {
        return 0;
 80015ba:	2300      	movs	r3, #0
 80015bc:	e050      	b.n	8001660 <case_insensitive_strcmp+0xc8>
    }

    for(; tolower(*string1) == tolower(*string2); (void)string1++, string2++)
    {
        if (*string1 == '\0')
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	781b      	ldrb	r3, [r3, #0]
 80015c2:	2b00      	cmp	r3, #0
 80015c4:	d101      	bne.n	80015ca <case_insensitive_strcmp+0x32>
        {
            return 0;
 80015c6:	2300      	movs	r3, #0
 80015c8:	e04a      	b.n	8001660 <case_insensitive_strcmp+0xc8>
    for(; tolower(*string1) == tolower(*string2); (void)string1++, string2++)
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	3301      	adds	r3, #1
 80015ce:	607b      	str	r3, [r7, #4]
 80015d0:	683b      	ldr	r3, [r7, #0]
 80015d2:	3301      	adds	r3, #1
 80015d4:	603b      	str	r3, [r7, #0]
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	781b      	ldrb	r3, [r3, #0]
 80015da:	73fb      	strb	r3, [r7, #15]
 80015dc:	7bfb      	ldrb	r3, [r7, #15]
 80015de:	3301      	adds	r3, #1
 80015e0:	4a22      	ldr	r2, [pc, #136]	; (800166c <case_insensitive_strcmp+0xd4>)
 80015e2:	4413      	add	r3, r2
 80015e4:	781b      	ldrb	r3, [r3, #0]
 80015e6:	f003 0303 	and.w	r3, r3, #3
 80015ea:	2b01      	cmp	r3, #1
 80015ec:	d103      	bne.n	80015f6 <case_insensitive_strcmp+0x5e>
 80015ee:	7bfb      	ldrb	r3, [r7, #15]
 80015f0:	f103 0220 	add.w	r2, r3, #32
 80015f4:	e000      	b.n	80015f8 <case_insensitive_strcmp+0x60>
 80015f6:	7bfa      	ldrb	r2, [r7, #15]
 80015f8:	683b      	ldr	r3, [r7, #0]
 80015fa:	781b      	ldrb	r3, [r3, #0]
 80015fc:	73bb      	strb	r3, [r7, #14]
 80015fe:	7bbb      	ldrb	r3, [r7, #14]
 8001600:	3301      	adds	r3, #1
 8001602:	491a      	ldr	r1, [pc, #104]	; (800166c <case_insensitive_strcmp+0xd4>)
 8001604:	440b      	add	r3, r1
 8001606:	781b      	ldrb	r3, [r3, #0]
 8001608:	f003 0303 	and.w	r3, r3, #3
 800160c:	2b01      	cmp	r3, #1
 800160e:	d102      	bne.n	8001616 <case_insensitive_strcmp+0x7e>
 8001610:	7bbb      	ldrb	r3, [r7, #14]
 8001612:	3320      	adds	r3, #32
 8001614:	e000      	b.n	8001618 <case_insensitive_strcmp+0x80>
 8001616:	7bbb      	ldrb	r3, [r7, #14]
 8001618:	429a      	cmp	r2, r3
 800161a:	d0d0      	beq.n	80015be <case_insensitive_strcmp+0x26>
        }
    }

    return tolower(*string1) - tolower(*string2);
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	781b      	ldrb	r3, [r3, #0]
 8001620:	737b      	strb	r3, [r7, #13]
 8001622:	7b7b      	ldrb	r3, [r7, #13]
 8001624:	3301      	adds	r3, #1
 8001626:	4a11      	ldr	r2, [pc, #68]	; (800166c <case_insensitive_strcmp+0xd4>)
 8001628:	4413      	add	r3, r2
 800162a:	781b      	ldrb	r3, [r3, #0]
 800162c:	f003 0303 	and.w	r3, r3, #3
 8001630:	2b01      	cmp	r3, #1
 8001632:	d103      	bne.n	800163c <case_insensitive_strcmp+0xa4>
 8001634:	7b7b      	ldrb	r3, [r7, #13]
 8001636:	f103 0220 	add.w	r2, r3, #32
 800163a:	e000      	b.n	800163e <case_insensitive_strcmp+0xa6>
 800163c:	7b7a      	ldrb	r2, [r7, #13]
 800163e:	683b      	ldr	r3, [r7, #0]
 8001640:	781b      	ldrb	r3, [r3, #0]
 8001642:	733b      	strb	r3, [r7, #12]
 8001644:	7b3b      	ldrb	r3, [r7, #12]
 8001646:	3301      	adds	r3, #1
 8001648:	4908      	ldr	r1, [pc, #32]	; (800166c <case_insensitive_strcmp+0xd4>)
 800164a:	440b      	add	r3, r1
 800164c:	781b      	ldrb	r3, [r3, #0]
 800164e:	f003 0303 	and.w	r3, r3, #3
 8001652:	2b01      	cmp	r3, #1
 8001654:	d102      	bne.n	800165c <case_insensitive_strcmp+0xc4>
 8001656:	7b3b      	ldrb	r3, [r7, #12]
 8001658:	3320      	adds	r3, #32
 800165a:	e000      	b.n	800165e <case_insensitive_strcmp+0xc6>
 800165c:	7b3b      	ldrb	r3, [r7, #12]
 800165e:	1ad3      	subs	r3, r2, r3
}
 8001660:	4618      	mov	r0, r3
 8001662:	3714      	adds	r7, #20
 8001664:	46bd      	mov	sp, r7
 8001666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800166a:	4770      	bx	lr
 800166c:	0800e118 	.word	0x0800e118

08001670 <cJSON_New_Item>:
    }
}

/* Internal constructor. */
static cJSON *cJSON_New_Item(const internal_hooks * const hooks)
{
 8001670:	b580      	push	{r7, lr}
 8001672:	b084      	sub	sp, #16
 8001674:	af00      	add	r7, sp, #0
 8001676:	6078      	str	r0, [r7, #4]
    cJSON* node = (cJSON*)hooks->allocate(sizeof(cJSON));
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	2028      	movs	r0, #40	; 0x28
 800167e:	4798      	blx	r3
 8001680:	60f8      	str	r0, [r7, #12]
    if (node)
 8001682:	68fb      	ldr	r3, [r7, #12]
 8001684:	2b00      	cmp	r3, #0
 8001686:	d004      	beq.n	8001692 <cJSON_New_Item+0x22>
    {
        memset(node, '\0', sizeof(cJSON));
 8001688:	2228      	movs	r2, #40	; 0x28
 800168a:	2100      	movs	r1, #0
 800168c:	68f8      	ldr	r0, [r7, #12]
 800168e:	f008 f8d1 	bl	8009834 <memset>
    }

    return node;
 8001692:	68fb      	ldr	r3, [r7, #12]
}
 8001694:	4618      	mov	r0, r3
 8001696:	3710      	adds	r7, #16
 8001698:	46bd      	mov	sp, r7
 800169a:	bd80      	pop	{r7, pc}

0800169c <cJSON_Delete>:

/* Delete a cJSON structure. */
CJSON_PUBLIC(void) cJSON_Delete(cJSON *item)
{
 800169c:	b580      	push	{r7, lr}
 800169e:	b084      	sub	sp, #16
 80016a0:	af00      	add	r7, sp, #0
 80016a2:	6078      	str	r0, [r7, #4]
    cJSON *next = NULL;
 80016a4:	2300      	movs	r3, #0
 80016a6:	60fb      	str	r3, [r7, #12]
    while (item != NULL)
 80016a8:	e037      	b.n	800171a <cJSON_Delete+0x7e>
    {
        next = item->next;
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	60fb      	str	r3, [r7, #12]
        if (!(item->type & cJSON_IsReference) && (item->child != NULL))
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	68db      	ldr	r3, [r3, #12]
 80016b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80016b8:	2b00      	cmp	r3, #0
 80016ba:	d108      	bne.n	80016ce <cJSON_Delete+0x32>
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	689b      	ldr	r3, [r3, #8]
 80016c0:	2b00      	cmp	r3, #0
 80016c2:	d004      	beq.n	80016ce <cJSON_Delete+0x32>
        {
            cJSON_Delete(item->child);
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	689b      	ldr	r3, [r3, #8]
 80016c8:	4618      	mov	r0, r3
 80016ca:	f7ff ffe7 	bl	800169c <cJSON_Delete>
        }
        if (!(item->type & cJSON_IsReference) && (item->valuestring != NULL))
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	68db      	ldr	r3, [r3, #12]
 80016d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80016d6:	2b00      	cmp	r3, #0
 80016d8:	d109      	bne.n	80016ee <cJSON_Delete+0x52>
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	691b      	ldr	r3, [r3, #16]
 80016de:	2b00      	cmp	r3, #0
 80016e0:	d005      	beq.n	80016ee <cJSON_Delete+0x52>
        {
            global_hooks.deallocate(item->valuestring);
 80016e2:	4b12      	ldr	r3, [pc, #72]	; (800172c <cJSON_Delete+0x90>)
 80016e4:	685b      	ldr	r3, [r3, #4]
 80016e6:	687a      	ldr	r2, [r7, #4]
 80016e8:	6912      	ldr	r2, [r2, #16]
 80016ea:	4610      	mov	r0, r2
 80016ec:	4798      	blx	r3
        }
        if (!(item->type & cJSON_StringIsConst) && (item->string != NULL))
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	68db      	ldr	r3, [r3, #12]
 80016f2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	d109      	bne.n	800170e <cJSON_Delete+0x72>
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	6a1b      	ldr	r3, [r3, #32]
 80016fe:	2b00      	cmp	r3, #0
 8001700:	d005      	beq.n	800170e <cJSON_Delete+0x72>
        {
            global_hooks.deallocate(item->string);
 8001702:	4b0a      	ldr	r3, [pc, #40]	; (800172c <cJSON_Delete+0x90>)
 8001704:	685b      	ldr	r3, [r3, #4]
 8001706:	687a      	ldr	r2, [r7, #4]
 8001708:	6a12      	ldr	r2, [r2, #32]
 800170a:	4610      	mov	r0, r2
 800170c:	4798      	blx	r3
        }
        global_hooks.deallocate(item);
 800170e:	4b07      	ldr	r3, [pc, #28]	; (800172c <cJSON_Delete+0x90>)
 8001710:	685b      	ldr	r3, [r3, #4]
 8001712:	6878      	ldr	r0, [r7, #4]
 8001714:	4798      	blx	r3
        item = next;
 8001716:	68fb      	ldr	r3, [r7, #12]
 8001718:	607b      	str	r3, [r7, #4]
    while (item != NULL)
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	2b00      	cmp	r3, #0
 800171e:	d1c4      	bne.n	80016aa <cJSON_Delete+0xe>
    }
}
 8001720:	bf00      	nop
 8001722:	bf00      	nop
 8001724:	3710      	adds	r7, #16
 8001726:	46bd      	mov	sp, r7
 8001728:	bd80      	pop	{r7, pc}
 800172a:	bf00      	nop
 800172c:	20000000 	.word	0x20000000

08001730 <get_decimal_point>:

/* get the decimal point character of the current locale */
static unsigned char get_decimal_point(void)
{
 8001730:	b480      	push	{r7}
 8001732:	af00      	add	r7, sp, #0
#ifdef ENABLE_LOCALES
    struct lconv *lconv = localeconv();
    return (unsigned char) lconv->decimal_point[0];
#else
    return '.';
 8001734:	232e      	movs	r3, #46	; 0x2e
#endif
}
 8001736:	4618      	mov	r0, r3
 8001738:	46bd      	mov	sp, r7
 800173a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800173e:	4770      	bx	lr

08001740 <parse_number>:
/* get a pointer to the buffer at the position */
#define buffer_at_offset(buffer) ((buffer)->content + (buffer)->offset)

/* Parse the input text to generate a number, and populate the result into item. */
static cJSON_bool parse_number(cJSON * const item, parse_buffer * const input_buffer)
{
 8001740:	b580      	push	{r7, lr}
 8001742:	b098      	sub	sp, #96	; 0x60
 8001744:	af00      	add	r7, sp, #0
 8001746:	6078      	str	r0, [r7, #4]
 8001748:	6039      	str	r1, [r7, #0]
    double number = 0;
 800174a:	f04f 0200 	mov.w	r2, #0
 800174e:	f04f 0300 	mov.w	r3, #0
 8001752:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
    unsigned char *after_end = NULL;
 8001756:	2300      	movs	r3, #0
 8001758:	64bb      	str	r3, [r7, #72]	; 0x48
    unsigned char number_c_string[64];
    unsigned char decimal_point = get_decimal_point();
 800175a:	f7ff ffe9 	bl	8001730 <get_decimal_point>
 800175e:	4603      	mov	r3, r0
 8001760:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
    size_t i = 0;
 8001764:	2300      	movs	r3, #0
 8001766:	65fb      	str	r3, [r7, #92]	; 0x5c

    if ((input_buffer == NULL) || (input_buffer->content == NULL))
 8001768:	683b      	ldr	r3, [r7, #0]
 800176a:	2b00      	cmp	r3, #0
 800176c:	d003      	beq.n	8001776 <parse_number+0x36>
 800176e:	683b      	ldr	r3, [r7, #0]
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	2b00      	cmp	r3, #0
 8001774:	d101      	bne.n	800177a <parse_number+0x3a>
    {
        return false;
 8001776:	2300      	movs	r3, #0
 8001778:	e0c6      	b.n	8001908 <parse_number+0x1c8>
    }

    /* copy the number into a temporary buffer and replace '.' with the decimal point
     * of the current locale (for strtod)
     * This also takes care of '\0' not necessarily being available for marking the end of the input */
    for (i = 0; (i < (sizeof(number_c_string) - 1)) && can_access_at_index(input_buffer, i); i++)
 800177a:	2300      	movs	r3, #0
 800177c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800177e:	e063      	b.n	8001848 <parse_number+0x108>
    {
        switch (buffer_at_offset(input_buffer)[i])
 8001780:	683b      	ldr	r3, [r7, #0]
 8001782:	681a      	ldr	r2, [r3, #0]
 8001784:	683b      	ldr	r3, [r7, #0]
 8001786:	6899      	ldr	r1, [r3, #8]
 8001788:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800178a:	440b      	add	r3, r1
 800178c:	4413      	add	r3, r2
 800178e:	781b      	ldrb	r3, [r3, #0]
 8001790:	2b45      	cmp	r3, #69	; 0x45
 8001792:	dc3d      	bgt.n	8001810 <parse_number+0xd0>
 8001794:	2b2b      	cmp	r3, #43	; 0x2b
 8001796:	db66      	blt.n	8001866 <parse_number+0x126>
 8001798:	3b2b      	subs	r3, #43	; 0x2b
 800179a:	2b1a      	cmp	r3, #26
 800179c:	d863      	bhi.n	8001866 <parse_number+0x126>
 800179e:	a201      	add	r2, pc, #4	; (adr r2, 80017a4 <parse_number+0x64>)
 80017a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80017a4:	08001815 	.word	0x08001815
 80017a8:	08001867 	.word	0x08001867
 80017ac:	08001815 	.word	0x08001815
 80017b0:	08001833 	.word	0x08001833
 80017b4:	08001867 	.word	0x08001867
 80017b8:	08001815 	.word	0x08001815
 80017bc:	08001815 	.word	0x08001815
 80017c0:	08001815 	.word	0x08001815
 80017c4:	08001815 	.word	0x08001815
 80017c8:	08001815 	.word	0x08001815
 80017cc:	08001815 	.word	0x08001815
 80017d0:	08001815 	.word	0x08001815
 80017d4:	08001815 	.word	0x08001815
 80017d8:	08001815 	.word	0x08001815
 80017dc:	08001815 	.word	0x08001815
 80017e0:	08001867 	.word	0x08001867
 80017e4:	08001867 	.word	0x08001867
 80017e8:	08001867 	.word	0x08001867
 80017ec:	08001867 	.word	0x08001867
 80017f0:	08001867 	.word	0x08001867
 80017f4:	08001867 	.word	0x08001867
 80017f8:	08001867 	.word	0x08001867
 80017fc:	08001867 	.word	0x08001867
 8001800:	08001867 	.word	0x08001867
 8001804:	08001867 	.word	0x08001867
 8001808:	08001867 	.word	0x08001867
 800180c:	08001815 	.word	0x08001815
 8001810:	2b65      	cmp	r3, #101	; 0x65
 8001812:	d128      	bne.n	8001866 <parse_number+0x126>
            case '9':
            case '+':
            case '-':
            case 'e':
            case 'E':
                number_c_string[i] = buffer_at_offset(input_buffer)[i];
 8001814:	683b      	ldr	r3, [r7, #0]
 8001816:	681a      	ldr	r2, [r3, #0]
 8001818:	683b      	ldr	r3, [r7, #0]
 800181a:	6899      	ldr	r1, [r3, #8]
 800181c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800181e:	440b      	add	r3, r1
 8001820:	4413      	add	r3, r2
 8001822:	7819      	ldrb	r1, [r3, #0]
 8001824:	f107 0208 	add.w	r2, r7, #8
 8001828:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800182a:	4413      	add	r3, r2
 800182c:	460a      	mov	r2, r1
 800182e:	701a      	strb	r2, [r3, #0]
                break;
 8001830:	e007      	b.n	8001842 <parse_number+0x102>

            case '.':
                number_c_string[i] = decimal_point;
 8001832:	f107 0208 	add.w	r2, r7, #8
 8001836:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001838:	4413      	add	r3, r2
 800183a:	f897 204f 	ldrb.w	r2, [r7, #79]	; 0x4f
 800183e:	701a      	strb	r2, [r3, #0]
                break;
 8001840:	bf00      	nop
    for (i = 0; (i < (sizeof(number_c_string) - 1)) && can_access_at_index(input_buffer, i); i++)
 8001842:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001844:	3301      	adds	r3, #1
 8001846:	65fb      	str	r3, [r7, #92]	; 0x5c
 8001848:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800184a:	2b3e      	cmp	r3, #62	; 0x3e
 800184c:	d80d      	bhi.n	800186a <parse_number+0x12a>
 800184e:	683b      	ldr	r3, [r7, #0]
 8001850:	2b00      	cmp	r3, #0
 8001852:	d00a      	beq.n	800186a <parse_number+0x12a>
 8001854:	683b      	ldr	r3, [r7, #0]
 8001856:	689a      	ldr	r2, [r3, #8]
 8001858:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800185a:	441a      	add	r2, r3
 800185c:	683b      	ldr	r3, [r7, #0]
 800185e:	685b      	ldr	r3, [r3, #4]
 8001860:	429a      	cmp	r2, r3
 8001862:	d38d      	bcc.n	8001780 <parse_number+0x40>

            default:
                goto loop_end;
        }
    }
loop_end:
 8001864:	e001      	b.n	800186a <parse_number+0x12a>
                goto loop_end;
 8001866:	bf00      	nop
 8001868:	e000      	b.n	800186c <parse_number+0x12c>
loop_end:
 800186a:	bf00      	nop
    number_c_string[i] = '\0';
 800186c:	f107 0208 	add.w	r2, r7, #8
 8001870:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001872:	4413      	add	r3, r2
 8001874:	2200      	movs	r2, #0
 8001876:	701a      	strb	r2, [r3, #0]

    number = strtod((const char*)number_c_string, (char**)&after_end);
 8001878:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800187c:	f107 0308 	add.w	r3, r7, #8
 8001880:	4611      	mov	r1, r2
 8001882:	4618      	mov	r0, r3
 8001884:	f009 f816 	bl	800a8b4 <strtod>
 8001888:	ed87 0b14 	vstr	d0, [r7, #80]	; 0x50
    if (number_c_string == after_end)
 800188c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800188e:	f107 0308 	add.w	r3, r7, #8
 8001892:	429a      	cmp	r2, r3
 8001894:	d101      	bne.n	800189a <parse_number+0x15a>
    {
        return false; /* parse_error */
 8001896:	2300      	movs	r3, #0
 8001898:	e036      	b.n	8001908 <parse_number+0x1c8>
    }

    item->valuedouble = number;
 800189a:	6879      	ldr	r1, [r7, #4]
 800189c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80018a0:	e9c1 2306 	strd	r2, r3, [r1, #24]

    /* use saturation in case of overflow */
    if (number >= INT_MAX)
 80018a4:	a31b      	add	r3, pc, #108	; (adr r3, 8001914 <parse_number+0x1d4>)
 80018a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018aa:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 80018ae:	f7ff f939 	bl	8000b24 <__aeabi_dcmpge>
 80018b2:	4603      	mov	r3, r0
 80018b4:	2b00      	cmp	r3, #0
 80018b6:	d004      	beq.n	80018c2 <parse_number+0x182>
    {
        item->valueint = INT_MAX;
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 80018be:	615a      	str	r2, [r3, #20]
 80018c0:	e015      	b.n	80018ee <parse_number+0x1ae>
    }
    else if (number <= (double)INT_MIN)
 80018c2:	f04f 0200 	mov.w	r2, #0
 80018c6:	4b12      	ldr	r3, [pc, #72]	; (8001910 <parse_number+0x1d0>)
 80018c8:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 80018cc:	f7ff f920 	bl	8000b10 <__aeabi_dcmple>
 80018d0:	4603      	mov	r3, r0
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	d004      	beq.n	80018e0 <parse_number+0x1a0>
    {
        item->valueint = INT_MIN;
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80018dc:	615a      	str	r2, [r3, #20]
 80018de:	e006      	b.n	80018ee <parse_number+0x1ae>
    }
    else
    {
        item->valueint = (int)number;
 80018e0:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 80018e4:	f7ff f932 	bl	8000b4c <__aeabi_d2iz>
 80018e8:	4602      	mov	r2, r0
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	615a      	str	r2, [r3, #20]
    }

    item->type = cJSON_Number;
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	2208      	movs	r2, #8
 80018f2:	60da      	str	r2, [r3, #12]

    input_buffer->offset += (size_t)(after_end - number_c_string);
 80018f4:	683b      	ldr	r3, [r7, #0]
 80018f6:	689b      	ldr	r3, [r3, #8]
 80018f8:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 80018fa:	f107 0208 	add.w	r2, r7, #8
 80018fe:	1a8a      	subs	r2, r1, r2
 8001900:	441a      	add	r2, r3
 8001902:	683b      	ldr	r3, [r7, #0]
 8001904:	609a      	str	r2, [r3, #8]
    return true;
 8001906:	2301      	movs	r3, #1
}
 8001908:	4618      	mov	r0, r3
 800190a:	3760      	adds	r7, #96	; 0x60
 800190c:	46bd      	mov	sp, r7
 800190e:	bd80      	pop	{r7, pc}
 8001910:	c1e00000 	.word	0xc1e00000
 8001914:	ffc00000 	.word	0xffc00000
 8001918:	41dfffff 	.word	0x41dfffff

0800191c <parse_hex4>:
    return true;
}

/* parse 4 digit hexadecimal number */
static unsigned parse_hex4(const unsigned char * const input)
{
 800191c:	b480      	push	{r7}
 800191e:	b085      	sub	sp, #20
 8001920:	af00      	add	r7, sp, #0
 8001922:	6078      	str	r0, [r7, #4]
    unsigned int h = 0;
 8001924:	2300      	movs	r3, #0
 8001926:	60fb      	str	r3, [r7, #12]
    size_t i = 0;
 8001928:	2300      	movs	r3, #0
 800192a:	60bb      	str	r3, [r7, #8]

    for (i = 0; i < 4; i++)
 800192c:	2300      	movs	r3, #0
 800192e:	60bb      	str	r3, [r7, #8]
 8001930:	e04c      	b.n	80019cc <parse_hex4+0xb0>
    {
        /* parse digit */
        if ((input[i] >= '0') && (input[i] <= '9'))
 8001932:	687a      	ldr	r2, [r7, #4]
 8001934:	68bb      	ldr	r3, [r7, #8]
 8001936:	4413      	add	r3, r2
 8001938:	781b      	ldrb	r3, [r3, #0]
 800193a:	2b2f      	cmp	r3, #47	; 0x2f
 800193c:	d90f      	bls.n	800195e <parse_hex4+0x42>
 800193e:	687a      	ldr	r2, [r7, #4]
 8001940:	68bb      	ldr	r3, [r7, #8]
 8001942:	4413      	add	r3, r2
 8001944:	781b      	ldrb	r3, [r3, #0]
 8001946:	2b39      	cmp	r3, #57	; 0x39
 8001948:	d809      	bhi.n	800195e <parse_hex4+0x42>
        {
            h += (unsigned int) input[i] - '0';
 800194a:	687a      	ldr	r2, [r7, #4]
 800194c:	68bb      	ldr	r3, [r7, #8]
 800194e:	4413      	add	r3, r2
 8001950:	781b      	ldrb	r3, [r3, #0]
 8001952:	461a      	mov	r2, r3
 8001954:	68fb      	ldr	r3, [r7, #12]
 8001956:	4413      	add	r3, r2
 8001958:	3b30      	subs	r3, #48	; 0x30
 800195a:	60fb      	str	r3, [r7, #12]
 800195c:	e02d      	b.n	80019ba <parse_hex4+0x9e>
        }
        else if ((input[i] >= 'A') && (input[i] <= 'F'))
 800195e:	687a      	ldr	r2, [r7, #4]
 8001960:	68bb      	ldr	r3, [r7, #8]
 8001962:	4413      	add	r3, r2
 8001964:	781b      	ldrb	r3, [r3, #0]
 8001966:	2b40      	cmp	r3, #64	; 0x40
 8001968:	d90f      	bls.n	800198a <parse_hex4+0x6e>
 800196a:	687a      	ldr	r2, [r7, #4]
 800196c:	68bb      	ldr	r3, [r7, #8]
 800196e:	4413      	add	r3, r2
 8001970:	781b      	ldrb	r3, [r3, #0]
 8001972:	2b46      	cmp	r3, #70	; 0x46
 8001974:	d809      	bhi.n	800198a <parse_hex4+0x6e>
        {
            h += (unsigned int) 10 + input[i] - 'A';
 8001976:	687a      	ldr	r2, [r7, #4]
 8001978:	68bb      	ldr	r3, [r7, #8]
 800197a:	4413      	add	r3, r2
 800197c:	781b      	ldrb	r3, [r3, #0]
 800197e:	461a      	mov	r2, r3
 8001980:	68fb      	ldr	r3, [r7, #12]
 8001982:	4413      	add	r3, r2
 8001984:	3b37      	subs	r3, #55	; 0x37
 8001986:	60fb      	str	r3, [r7, #12]
 8001988:	e017      	b.n	80019ba <parse_hex4+0x9e>
        }
        else if ((input[i] >= 'a') && (input[i] <= 'f'))
 800198a:	687a      	ldr	r2, [r7, #4]
 800198c:	68bb      	ldr	r3, [r7, #8]
 800198e:	4413      	add	r3, r2
 8001990:	781b      	ldrb	r3, [r3, #0]
 8001992:	2b60      	cmp	r3, #96	; 0x60
 8001994:	d90f      	bls.n	80019b6 <parse_hex4+0x9a>
 8001996:	687a      	ldr	r2, [r7, #4]
 8001998:	68bb      	ldr	r3, [r7, #8]
 800199a:	4413      	add	r3, r2
 800199c:	781b      	ldrb	r3, [r3, #0]
 800199e:	2b66      	cmp	r3, #102	; 0x66
 80019a0:	d809      	bhi.n	80019b6 <parse_hex4+0x9a>
        {
            h += (unsigned int) 10 + input[i] - 'a';
 80019a2:	687a      	ldr	r2, [r7, #4]
 80019a4:	68bb      	ldr	r3, [r7, #8]
 80019a6:	4413      	add	r3, r2
 80019a8:	781b      	ldrb	r3, [r3, #0]
 80019aa:	461a      	mov	r2, r3
 80019ac:	68fb      	ldr	r3, [r7, #12]
 80019ae:	4413      	add	r3, r2
 80019b0:	3b57      	subs	r3, #87	; 0x57
 80019b2:	60fb      	str	r3, [r7, #12]
 80019b4:	e001      	b.n	80019ba <parse_hex4+0x9e>
        }
        else /* invalid */
        {
            return 0;
 80019b6:	2300      	movs	r3, #0
 80019b8:	e00c      	b.n	80019d4 <parse_hex4+0xb8>
        }

        if (i < 3)
 80019ba:	68bb      	ldr	r3, [r7, #8]
 80019bc:	2b02      	cmp	r3, #2
 80019be:	d802      	bhi.n	80019c6 <parse_hex4+0xaa>
        {
            /* shift left to make place for the next nibble */
            h = h << 4;
 80019c0:	68fb      	ldr	r3, [r7, #12]
 80019c2:	011b      	lsls	r3, r3, #4
 80019c4:	60fb      	str	r3, [r7, #12]
    for (i = 0; i < 4; i++)
 80019c6:	68bb      	ldr	r3, [r7, #8]
 80019c8:	3301      	adds	r3, #1
 80019ca:	60bb      	str	r3, [r7, #8]
 80019cc:	68bb      	ldr	r3, [r7, #8]
 80019ce:	2b03      	cmp	r3, #3
 80019d0:	d9af      	bls.n	8001932 <parse_hex4+0x16>
        }
    }

    return h;
 80019d2:	68fb      	ldr	r3, [r7, #12]
}
 80019d4:	4618      	mov	r0, r3
 80019d6:	3714      	adds	r7, #20
 80019d8:	46bd      	mov	sp, r7
 80019da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019de:	4770      	bx	lr

080019e0 <utf16_literal_to_utf8>:

/* converts a UTF-16 literal to UTF-8
 * A literal can be one or two sequences of the form \uXXXX */
static unsigned char utf16_literal_to_utf8(const unsigned char * const input_pointer, const unsigned char * const input_end, unsigned char **output_pointer)
{
 80019e0:	b580      	push	{r7, lr}
 80019e2:	b08a      	sub	sp, #40	; 0x28
 80019e4:	af00      	add	r7, sp, #0
 80019e6:	60f8      	str	r0, [r7, #12]
 80019e8:	60b9      	str	r1, [r7, #8]
 80019ea:	607a      	str	r2, [r7, #4]
    long unsigned int codepoint = 0;
 80019ec:	2300      	movs	r3, #0
 80019ee:	627b      	str	r3, [r7, #36]	; 0x24
    unsigned int first_code = 0;
 80019f0:	2300      	movs	r3, #0
 80019f2:	61fb      	str	r3, [r7, #28]
    const unsigned char *first_sequence = input_pointer;
 80019f4:	68fb      	ldr	r3, [r7, #12]
 80019f6:	61bb      	str	r3, [r7, #24]
    unsigned char utf8_length = 0;
 80019f8:	2300      	movs	r3, #0
 80019fa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    unsigned char utf8_position = 0;
 80019fe:	2300      	movs	r3, #0
 8001a00:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
    unsigned char sequence_length = 0;
 8001a04:	2300      	movs	r3, #0
 8001a06:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
    unsigned char first_byte_mark = 0;
 8001a0a:	2300      	movs	r3, #0
 8001a0c:	f887 3020 	strb.w	r3, [r7, #32]

    if ((input_end - first_sequence) < 6)
 8001a10:	68ba      	ldr	r2, [r7, #8]
 8001a12:	69bb      	ldr	r3, [r7, #24]
 8001a14:	1ad3      	subs	r3, r2, r3
 8001a16:	2b05      	cmp	r3, #5
 8001a18:	f340 80b7 	ble.w	8001b8a <utf16_literal_to_utf8+0x1aa>
        /* input ends unexpectedly */
        goto fail;
    }

    /* get the first utf16 sequence */
    first_code = parse_hex4(first_sequence + 2);
 8001a1c:	69bb      	ldr	r3, [r7, #24]
 8001a1e:	3302      	adds	r3, #2
 8001a20:	4618      	mov	r0, r3
 8001a22:	f7ff ff7b 	bl	800191c <parse_hex4>
 8001a26:	61f8      	str	r0, [r7, #28]

    /* check that the code is valid */
    if (((first_code >= 0xDC00) && (first_code <= 0xDFFF)))
 8001a28:	69fb      	ldr	r3, [r7, #28]
 8001a2a:	f5b3 4f5c 	cmp.w	r3, #56320	; 0xdc00
 8001a2e:	d304      	bcc.n	8001a3a <utf16_literal_to_utf8+0x5a>
 8001a30:	69fb      	ldr	r3, [r7, #28]
 8001a32:	f5b3 4f60 	cmp.w	r3, #57344	; 0xe000
 8001a36:	f0c0 80aa 	bcc.w	8001b8e <utf16_literal_to_utf8+0x1ae>
    {
        goto fail;
    }

    /* UTF16 surrogate pair */
    if ((first_code >= 0xD800) && (first_code <= 0xDBFF))
 8001a3a:	69fb      	ldr	r3, [r7, #28]
 8001a3c:	f5b3 4f58 	cmp.w	r3, #55296	; 0xd800
 8001a40:	d337      	bcc.n	8001ab2 <utf16_literal_to_utf8+0xd2>
 8001a42:	69fb      	ldr	r3, [r7, #28]
 8001a44:	f5b3 4f5c 	cmp.w	r3, #56320	; 0xdc00
 8001a48:	d233      	bcs.n	8001ab2 <utf16_literal_to_utf8+0xd2>
    {
        const unsigned char *second_sequence = first_sequence + 6;
 8001a4a:	69bb      	ldr	r3, [r7, #24]
 8001a4c:	3306      	adds	r3, #6
 8001a4e:	617b      	str	r3, [r7, #20]
        unsigned int second_code = 0;
 8001a50:	2300      	movs	r3, #0
 8001a52:	613b      	str	r3, [r7, #16]
        sequence_length = 12; /* \uXXXX\uXXXX */
 8001a54:	230c      	movs	r3, #12
 8001a56:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21

        if ((input_end - second_sequence) < 6)
 8001a5a:	68ba      	ldr	r2, [r7, #8]
 8001a5c:	697b      	ldr	r3, [r7, #20]
 8001a5e:	1ad3      	subs	r3, r2, r3
 8001a60:	2b05      	cmp	r3, #5
 8001a62:	f340 8096 	ble.w	8001b92 <utf16_literal_to_utf8+0x1b2>
        {
            /* input ends unexpectedly */
            goto fail;
        }

        if ((second_sequence[0] != '\\') || (second_sequence[1] != 'u'))
 8001a66:	697b      	ldr	r3, [r7, #20]
 8001a68:	781b      	ldrb	r3, [r3, #0]
 8001a6a:	2b5c      	cmp	r3, #92	; 0x5c
 8001a6c:	f040 8093 	bne.w	8001b96 <utf16_literal_to_utf8+0x1b6>
 8001a70:	697b      	ldr	r3, [r7, #20]
 8001a72:	3301      	adds	r3, #1
 8001a74:	781b      	ldrb	r3, [r3, #0]
 8001a76:	2b75      	cmp	r3, #117	; 0x75
 8001a78:	f040 808d 	bne.w	8001b96 <utf16_literal_to_utf8+0x1b6>
            /* missing second half of the surrogate pair */
            goto fail;
        }

        /* get the second utf16 sequence */
        second_code = parse_hex4(second_sequence + 2);
 8001a7c:	697b      	ldr	r3, [r7, #20]
 8001a7e:	3302      	adds	r3, #2
 8001a80:	4618      	mov	r0, r3
 8001a82:	f7ff ff4b 	bl	800191c <parse_hex4>
 8001a86:	6138      	str	r0, [r7, #16]
        /* check that the code is valid */
        if ((second_code < 0xDC00) || (second_code > 0xDFFF))
 8001a88:	693b      	ldr	r3, [r7, #16]
 8001a8a:	f5b3 4f5c 	cmp.w	r3, #56320	; 0xdc00
 8001a8e:	f0c0 8084 	bcc.w	8001b9a <utf16_literal_to_utf8+0x1ba>
 8001a92:	693b      	ldr	r3, [r7, #16]
 8001a94:	f5b3 4f60 	cmp.w	r3, #57344	; 0xe000
 8001a98:	d27f      	bcs.n	8001b9a <utf16_literal_to_utf8+0x1ba>
            goto fail;
        }


        /* calculate the unicode codepoint from the surrogate pair */
        codepoint = 0x10000 + (((first_code & 0x3FF) << 10) | (second_code & 0x3FF));
 8001a9a:	69fb      	ldr	r3, [r7, #28]
 8001a9c:	029a      	lsls	r2, r3, #10
 8001a9e:	4b43      	ldr	r3, [pc, #268]	; (8001bac <utf16_literal_to_utf8+0x1cc>)
 8001aa0:	4013      	ands	r3, r2
 8001aa2:	693a      	ldr	r2, [r7, #16]
 8001aa4:	f3c2 0209 	ubfx	r2, r2, #0, #10
 8001aa8:	4313      	orrs	r3, r2
 8001aaa:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 8001aae:	627b      	str	r3, [r7, #36]	; 0x24
    {
 8001ab0:	e004      	b.n	8001abc <utf16_literal_to_utf8+0xdc>
    }
    else
    {
        sequence_length = 6; /* \uXXXX */
 8001ab2:	2306      	movs	r3, #6
 8001ab4:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
        codepoint = first_code;
 8001ab8:	69fb      	ldr	r3, [r7, #28]
 8001aba:	627b      	str	r3, [r7, #36]	; 0x24
    }

    /* encode as UTF-8
     * takes at maximum 4 bytes to encode:
     * 11110xxx 10xxxxxx 10xxxxxx 10xxxxxx */
    if (codepoint < 0x80)
 8001abc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001abe:	2b7f      	cmp	r3, #127	; 0x7f
 8001ac0:	d803      	bhi.n	8001aca <utf16_literal_to_utf8+0xea>
    {
        /* normal ascii, encoding 0xxxxxxx */
        utf8_length = 1;
 8001ac2:	2301      	movs	r3, #1
 8001ac4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8001ac8:	e01f      	b.n	8001b0a <utf16_literal_to_utf8+0x12a>
    }
    else if (codepoint < 0x800)
 8001aca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001acc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001ad0:	d206      	bcs.n	8001ae0 <utf16_literal_to_utf8+0x100>
    {
        /* two bytes, encoding 110xxxxx 10xxxxxx */
        utf8_length = 2;
 8001ad2:	2302      	movs	r3, #2
 8001ad4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        first_byte_mark = 0xC0; /* 11000000 */
 8001ad8:	23c0      	movs	r3, #192	; 0xc0
 8001ada:	f887 3020 	strb.w	r3, [r7, #32]
 8001ade:	e014      	b.n	8001b0a <utf16_literal_to_utf8+0x12a>
    }
    else if (codepoint < 0x10000)
 8001ae0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ae2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001ae6:	d206      	bcs.n	8001af6 <utf16_literal_to_utf8+0x116>
    {
        /* three bytes, encoding 1110xxxx 10xxxxxx 10xxxxxx */
        utf8_length = 3;
 8001ae8:	2303      	movs	r3, #3
 8001aea:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        first_byte_mark = 0xE0; /* 11100000 */
 8001aee:	23e0      	movs	r3, #224	; 0xe0
 8001af0:	f887 3020 	strb.w	r3, [r7, #32]
 8001af4:	e009      	b.n	8001b0a <utf16_literal_to_utf8+0x12a>
    }
    else if (codepoint <= 0x10FFFF)
 8001af6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001af8:	f5b3 1f88 	cmp.w	r3, #1114112	; 0x110000
 8001afc:	d24f      	bcs.n	8001b9e <utf16_literal_to_utf8+0x1be>
    {
        /* four bytes, encoding 1110xxxx 10xxxxxx 10xxxxxx 10xxxxxx */
        utf8_length = 4;
 8001afe:	2304      	movs	r3, #4
 8001b00:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        first_byte_mark = 0xF0; /* 11110000 */
 8001b04:	23f0      	movs	r3, #240	; 0xf0
 8001b06:	f887 3020 	strb.w	r3, [r7, #32]
        /* invalid unicode codepoint */
        goto fail;
    }

    /* encode as utf8 */
    for (utf8_position = (unsigned char)(utf8_length - 1); utf8_position > 0; utf8_position--)
 8001b0a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001b0e:	3b01      	subs	r3, #1
 8001b10:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8001b14:	e015      	b.n	8001b42 <utf16_literal_to_utf8+0x162>
    {
        /* 10xxxxxx */
        (*output_pointer)[utf8_position] = (unsigned char)((codepoint | 0x80) & 0xBF);
 8001b16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b18:	b2db      	uxtb	r3, r3
 8001b1a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001b1e:	b2da      	uxtb	r2, r3
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	6819      	ldr	r1, [r3, #0]
 8001b24:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8001b28:	440b      	add	r3, r1
 8001b2a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8001b2e:	b2d2      	uxtb	r2, r2
 8001b30:	701a      	strb	r2, [r3, #0]
        codepoint >>= 6;
 8001b32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b34:	099b      	lsrs	r3, r3, #6
 8001b36:	627b      	str	r3, [r7, #36]	; 0x24
    for (utf8_position = (unsigned char)(utf8_length - 1); utf8_position > 0; utf8_position--)
 8001b38:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8001b3c:	3b01      	subs	r3, #1
 8001b3e:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8001b42:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	d1e5      	bne.n	8001b16 <utf16_literal_to_utf8+0x136>
    }
    /* encode first byte */
    if (utf8_length > 1)
 8001b4a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001b4e:	2b01      	cmp	r3, #1
 8001b50:	d909      	bls.n	8001b66 <utf16_literal_to_utf8+0x186>
    {
        (*output_pointer)[0] = (unsigned char)((codepoint | first_byte_mark) & 0xFF);
 8001b52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b54:	b2d9      	uxtb	r1, r3
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	f897 2020 	ldrb.w	r2, [r7, #32]
 8001b5e:	430a      	orrs	r2, r1
 8001b60:	b2d2      	uxtb	r2, r2
 8001b62:	701a      	strb	r2, [r3, #0]
 8001b64:	e007      	b.n	8001b76 <utf16_literal_to_utf8+0x196>
    }
    else
    {
        (*output_pointer)[0] = (unsigned char)(codepoint & 0x7F);
 8001b66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b68:	b2da      	uxtb	r2, r3
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8001b72:	b2d2      	uxtb	r2, r2
 8001b74:	701a      	strb	r2, [r3, #0]
    }

    *output_pointer += utf8_length;
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	681a      	ldr	r2, [r3, #0]
 8001b7a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001b7e:	441a      	add	r2, r3
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	601a      	str	r2, [r3, #0]

    return sequence_length;
 8001b84:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8001b88:	e00b      	b.n	8001ba2 <utf16_literal_to_utf8+0x1c2>
        goto fail;
 8001b8a:	bf00      	nop
 8001b8c:	e008      	b.n	8001ba0 <utf16_literal_to_utf8+0x1c0>
        goto fail;
 8001b8e:	bf00      	nop
 8001b90:	e006      	b.n	8001ba0 <utf16_literal_to_utf8+0x1c0>
            goto fail;
 8001b92:	bf00      	nop
 8001b94:	e004      	b.n	8001ba0 <utf16_literal_to_utf8+0x1c0>
            goto fail;
 8001b96:	bf00      	nop
 8001b98:	e002      	b.n	8001ba0 <utf16_literal_to_utf8+0x1c0>
            goto fail;
 8001b9a:	bf00      	nop
 8001b9c:	e000      	b.n	8001ba0 <utf16_literal_to_utf8+0x1c0>
        goto fail;
 8001b9e:	bf00      	nop

fail:
    return 0;
 8001ba0:	2300      	movs	r3, #0
}
 8001ba2:	4618      	mov	r0, r3
 8001ba4:	3728      	adds	r7, #40	; 0x28
 8001ba6:	46bd      	mov	sp, r7
 8001ba8:	bd80      	pop	{r7, pc}
 8001baa:	bf00      	nop
 8001bac:	000ffc00 	.word	0x000ffc00

08001bb0 <parse_string>:

/* Parse the input text into an unescaped cinput, and populate item. */
static cJSON_bool parse_string(cJSON * const item, parse_buffer * const input_buffer)
{
 8001bb0:	b580      	push	{r7, lr}
 8001bb2:	b08a      	sub	sp, #40	; 0x28
 8001bb4:	af00      	add	r7, sp, #0
 8001bb6:	6078      	str	r0, [r7, #4]
 8001bb8:	6039      	str	r1, [r7, #0]
    const unsigned char *input_pointer = buffer_at_offset(input_buffer) + 1;
 8001bba:	683b      	ldr	r3, [r7, #0]
 8001bbc:	681a      	ldr	r2, [r3, #0]
 8001bbe:	683b      	ldr	r3, [r7, #0]
 8001bc0:	689b      	ldr	r3, [r3, #8]
 8001bc2:	3301      	adds	r3, #1
 8001bc4:	4413      	add	r3, r2
 8001bc6:	627b      	str	r3, [r7, #36]	; 0x24
    const unsigned char *input_end = buffer_at_offset(input_buffer) + 1;
 8001bc8:	683b      	ldr	r3, [r7, #0]
 8001bca:	681a      	ldr	r2, [r3, #0]
 8001bcc:	683b      	ldr	r3, [r7, #0]
 8001bce:	689b      	ldr	r3, [r3, #8]
 8001bd0:	3301      	adds	r3, #1
 8001bd2:	4413      	add	r3, r2
 8001bd4:	623b      	str	r3, [r7, #32]
    unsigned char *output_pointer = NULL;
 8001bd6:	2300      	movs	r3, #0
 8001bd8:	60fb      	str	r3, [r7, #12]
    unsigned char *output = NULL;
 8001bda:	2300      	movs	r3, #0
 8001bdc:	61fb      	str	r3, [r7, #28]

    /* not a string */
    if (buffer_at_offset(input_buffer)[0] != '\"')
 8001bde:	683b      	ldr	r3, [r7, #0]
 8001be0:	681a      	ldr	r2, [r3, #0]
 8001be2:	683b      	ldr	r3, [r7, #0]
 8001be4:	689b      	ldr	r3, [r3, #8]
 8001be6:	4413      	add	r3, r2
 8001be8:	781b      	ldrb	r3, [r3, #0]
 8001bea:	2b22      	cmp	r3, #34	; 0x22
 8001bec:	f040 8102 	bne.w	8001df4 <parse_string+0x244>
        goto fail;
    }

    {
        /* calculate approximate size of the output (overestimate) */
        size_t allocation_length = 0;
 8001bf0:	2300      	movs	r3, #0
 8001bf2:	613b      	str	r3, [r7, #16]
        size_t skipped_bytes = 0;
 8001bf4:	2300      	movs	r3, #0
 8001bf6:	61bb      	str	r3, [r7, #24]
        while (((size_t)(input_end - input_buffer->content) < input_buffer->length) && (*input_end != '\"'))
 8001bf8:	e017      	b.n	8001c2a <parse_string+0x7a>
        {
            /* is escape sequence */
            if (input_end[0] == '\\')
 8001bfa:	6a3b      	ldr	r3, [r7, #32]
 8001bfc:	781b      	ldrb	r3, [r3, #0]
 8001bfe:	2b5c      	cmp	r3, #92	; 0x5c
 8001c00:	d110      	bne.n	8001c24 <parse_string+0x74>
            {
                if ((size_t)(input_end + 1 - input_buffer->content) >= input_buffer->length)
 8001c02:	6a3b      	ldr	r3, [r7, #32]
 8001c04:	1c5a      	adds	r2, r3, #1
 8001c06:	683b      	ldr	r3, [r7, #0]
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	1ad3      	subs	r3, r2, r3
 8001c0c:	461a      	mov	r2, r3
 8001c0e:	683b      	ldr	r3, [r7, #0]
 8001c10:	685b      	ldr	r3, [r3, #4]
 8001c12:	429a      	cmp	r2, r3
 8001c14:	f080 80f0 	bcs.w	8001df8 <parse_string+0x248>
                {
                    /* prevent buffer overflow when last input character is a backslash */
                    goto fail;
                }
                skipped_bytes++;
 8001c18:	69bb      	ldr	r3, [r7, #24]
 8001c1a:	3301      	adds	r3, #1
 8001c1c:	61bb      	str	r3, [r7, #24]
                input_end++;
 8001c1e:	6a3b      	ldr	r3, [r7, #32]
 8001c20:	3301      	adds	r3, #1
 8001c22:	623b      	str	r3, [r7, #32]
            }
            input_end++;
 8001c24:	6a3b      	ldr	r3, [r7, #32]
 8001c26:	3301      	adds	r3, #1
 8001c28:	623b      	str	r3, [r7, #32]
        while (((size_t)(input_end - input_buffer->content) < input_buffer->length) && (*input_end != '\"'))
 8001c2a:	683b      	ldr	r3, [r7, #0]
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	6a3a      	ldr	r2, [r7, #32]
 8001c30:	1ad3      	subs	r3, r2, r3
 8001c32:	461a      	mov	r2, r3
 8001c34:	683b      	ldr	r3, [r7, #0]
 8001c36:	685b      	ldr	r3, [r3, #4]
 8001c38:	429a      	cmp	r2, r3
 8001c3a:	d203      	bcs.n	8001c44 <parse_string+0x94>
 8001c3c:	6a3b      	ldr	r3, [r7, #32]
 8001c3e:	781b      	ldrb	r3, [r3, #0]
 8001c40:	2b22      	cmp	r3, #34	; 0x22
 8001c42:	d1da      	bne.n	8001bfa <parse_string+0x4a>
        }
        if (((size_t)(input_end - input_buffer->content) >= input_buffer->length) || (*input_end != '\"'))
 8001c44:	683b      	ldr	r3, [r7, #0]
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	6a3a      	ldr	r2, [r7, #32]
 8001c4a:	1ad3      	subs	r3, r2, r3
 8001c4c:	461a      	mov	r2, r3
 8001c4e:	683b      	ldr	r3, [r7, #0]
 8001c50:	685b      	ldr	r3, [r3, #4]
 8001c52:	429a      	cmp	r2, r3
 8001c54:	f080 80d2 	bcs.w	8001dfc <parse_string+0x24c>
 8001c58:	6a3b      	ldr	r3, [r7, #32]
 8001c5a:	781b      	ldrb	r3, [r3, #0]
 8001c5c:	2b22      	cmp	r3, #34	; 0x22
 8001c5e:	f040 80cd 	bne.w	8001dfc <parse_string+0x24c>
        {
            goto fail; /* string ended unexpectedly */
        }

        /* This is at most how much we need for the output */
        allocation_length = (size_t) (input_end - buffer_at_offset(input_buffer)) - skipped_bytes;
 8001c62:	683b      	ldr	r3, [r7, #0]
 8001c64:	681a      	ldr	r2, [r3, #0]
 8001c66:	683b      	ldr	r3, [r7, #0]
 8001c68:	689b      	ldr	r3, [r3, #8]
 8001c6a:	4413      	add	r3, r2
 8001c6c:	6a3a      	ldr	r2, [r7, #32]
 8001c6e:	1ad3      	subs	r3, r2, r3
 8001c70:	461a      	mov	r2, r3
 8001c72:	69bb      	ldr	r3, [r7, #24]
 8001c74:	1ad3      	subs	r3, r2, r3
 8001c76:	613b      	str	r3, [r7, #16]
        output = (unsigned char*)input_buffer->hooks.allocate(allocation_length + sizeof(""));
 8001c78:	683b      	ldr	r3, [r7, #0]
 8001c7a:	691b      	ldr	r3, [r3, #16]
 8001c7c:	693a      	ldr	r2, [r7, #16]
 8001c7e:	3201      	adds	r2, #1
 8001c80:	4610      	mov	r0, r2
 8001c82:	4798      	blx	r3
 8001c84:	61f8      	str	r0, [r7, #28]
        if (output == NULL)
 8001c86:	69fb      	ldr	r3, [r7, #28]
 8001c88:	2b00      	cmp	r3, #0
 8001c8a:	f000 80b9 	beq.w	8001e00 <parse_string+0x250>
        {
            goto fail; /* allocation failure */
        }
    }

    output_pointer = output;
 8001c8e:	69fb      	ldr	r3, [r7, #28]
 8001c90:	60fb      	str	r3, [r7, #12]
    /* loop through the string literal */
    while (input_pointer < input_end)
 8001c92:	e093      	b.n	8001dbc <parse_string+0x20c>
    {
        if (*input_pointer != '\\')
 8001c94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c96:	781b      	ldrb	r3, [r3, #0]
 8001c98:	2b5c      	cmp	r3, #92	; 0x5c
 8001c9a:	d008      	beq.n	8001cae <parse_string+0xfe>
        {
            *output_pointer++ = *input_pointer++;
 8001c9c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001c9e:	1c53      	adds	r3, r2, #1
 8001ca0:	627b      	str	r3, [r7, #36]	; 0x24
 8001ca2:	68fb      	ldr	r3, [r7, #12]
 8001ca4:	1c59      	adds	r1, r3, #1
 8001ca6:	60f9      	str	r1, [r7, #12]
 8001ca8:	7812      	ldrb	r2, [r2, #0]
 8001caa:	701a      	strb	r2, [r3, #0]
 8001cac:	e086      	b.n	8001dbc <parse_string+0x20c>
        }
        /* escape sequence */
        else
        {
            unsigned char sequence_length = 2;
 8001cae:	2302      	movs	r3, #2
 8001cb0:	75fb      	strb	r3, [r7, #23]
            if ((input_end - input_pointer) < 1)
 8001cb2:	6a3a      	ldr	r2, [r7, #32]
 8001cb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cb6:	1ad3      	subs	r3, r2, r3
 8001cb8:	2b00      	cmp	r3, #0
 8001cba:	f340 80a3 	ble.w	8001e04 <parse_string+0x254>
            {
                goto fail;
            }

            switch (input_pointer[1])
 8001cbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cc0:	3301      	adds	r3, #1
 8001cc2:	781b      	ldrb	r3, [r3, #0]
 8001cc4:	2b75      	cmp	r3, #117	; 0x75
 8001cc6:	f300 809f 	bgt.w	8001e08 <parse_string+0x258>
 8001cca:	2b5c      	cmp	r3, #92	; 0x5c
 8001ccc:	da04      	bge.n	8001cd8 <parse_string+0x128>
 8001cce:	2b22      	cmp	r3, #34	; 0x22
 8001cd0:	d05c      	beq.n	8001d8c <parse_string+0x1dc>
 8001cd2:	2b2f      	cmp	r3, #47	; 0x2f
 8001cd4:	d05a      	beq.n	8001d8c <parse_string+0x1dc>
                        goto fail;
                    }
                    break;

                default:
                    goto fail;
 8001cd6:	e097      	b.n	8001e08 <parse_string+0x258>
            switch (input_pointer[1])
 8001cd8:	3b5c      	subs	r3, #92	; 0x5c
 8001cda:	2b19      	cmp	r3, #25
 8001cdc:	f200 8094 	bhi.w	8001e08 <parse_string+0x258>
 8001ce0:	a201      	add	r2, pc, #4	; (adr r2, 8001ce8 <parse_string+0x138>)
 8001ce2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001ce6:	bf00      	nop
 8001ce8:	08001d8d 	.word	0x08001d8d
 8001cec:	08001e09 	.word	0x08001e09
 8001cf0:	08001e09 	.word	0x08001e09
 8001cf4:	08001e09 	.word	0x08001e09
 8001cf8:	08001e09 	.word	0x08001e09
 8001cfc:	08001e09 	.word	0x08001e09
 8001d00:	08001d51 	.word	0x08001d51
 8001d04:	08001e09 	.word	0x08001e09
 8001d08:	08001e09 	.word	0x08001e09
 8001d0c:	08001e09 	.word	0x08001e09
 8001d10:	08001d5d 	.word	0x08001d5d
 8001d14:	08001e09 	.word	0x08001e09
 8001d18:	08001e09 	.word	0x08001e09
 8001d1c:	08001e09 	.word	0x08001e09
 8001d20:	08001e09 	.word	0x08001e09
 8001d24:	08001e09 	.word	0x08001e09
 8001d28:	08001e09 	.word	0x08001e09
 8001d2c:	08001e09 	.word	0x08001e09
 8001d30:	08001d69 	.word	0x08001d69
 8001d34:	08001e09 	.word	0x08001e09
 8001d38:	08001e09 	.word	0x08001e09
 8001d3c:	08001e09 	.word	0x08001e09
 8001d40:	08001d75 	.word	0x08001d75
 8001d44:	08001e09 	.word	0x08001e09
 8001d48:	08001d81 	.word	0x08001d81
 8001d4c:	08001d9b 	.word	0x08001d9b
                    *output_pointer++ = '\b';
 8001d50:	68fb      	ldr	r3, [r7, #12]
 8001d52:	1c5a      	adds	r2, r3, #1
 8001d54:	60fa      	str	r2, [r7, #12]
 8001d56:	2208      	movs	r2, #8
 8001d58:	701a      	strb	r2, [r3, #0]
                    break;
 8001d5a:	e02b      	b.n	8001db4 <parse_string+0x204>
                    *output_pointer++ = '\f';
 8001d5c:	68fb      	ldr	r3, [r7, #12]
 8001d5e:	1c5a      	adds	r2, r3, #1
 8001d60:	60fa      	str	r2, [r7, #12]
 8001d62:	220c      	movs	r2, #12
 8001d64:	701a      	strb	r2, [r3, #0]
                    break;
 8001d66:	e025      	b.n	8001db4 <parse_string+0x204>
                    *output_pointer++ = '\n';
 8001d68:	68fb      	ldr	r3, [r7, #12]
 8001d6a:	1c5a      	adds	r2, r3, #1
 8001d6c:	60fa      	str	r2, [r7, #12]
 8001d6e:	220a      	movs	r2, #10
 8001d70:	701a      	strb	r2, [r3, #0]
                    break;
 8001d72:	e01f      	b.n	8001db4 <parse_string+0x204>
                    *output_pointer++ = '\r';
 8001d74:	68fb      	ldr	r3, [r7, #12]
 8001d76:	1c5a      	adds	r2, r3, #1
 8001d78:	60fa      	str	r2, [r7, #12]
 8001d7a:	220d      	movs	r2, #13
 8001d7c:	701a      	strb	r2, [r3, #0]
                    break;
 8001d7e:	e019      	b.n	8001db4 <parse_string+0x204>
                    *output_pointer++ = '\t';
 8001d80:	68fb      	ldr	r3, [r7, #12]
 8001d82:	1c5a      	adds	r2, r3, #1
 8001d84:	60fa      	str	r2, [r7, #12]
 8001d86:	2209      	movs	r2, #9
 8001d88:	701a      	strb	r2, [r3, #0]
                    break;
 8001d8a:	e013      	b.n	8001db4 <parse_string+0x204>
                    *output_pointer++ = input_pointer[1];
 8001d8c:	68fb      	ldr	r3, [r7, #12]
 8001d8e:	1c5a      	adds	r2, r3, #1
 8001d90:	60fa      	str	r2, [r7, #12]
 8001d92:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001d94:	7852      	ldrb	r2, [r2, #1]
 8001d96:	701a      	strb	r2, [r3, #0]
                    break;
 8001d98:	e00c      	b.n	8001db4 <parse_string+0x204>
                    sequence_length = utf16_literal_to_utf8(input_pointer, input_end, &output_pointer);
 8001d9a:	f107 030c 	add.w	r3, r7, #12
 8001d9e:	461a      	mov	r2, r3
 8001da0:	6a39      	ldr	r1, [r7, #32]
 8001da2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8001da4:	f7ff fe1c 	bl	80019e0 <utf16_literal_to_utf8>
 8001da8:	4603      	mov	r3, r0
 8001daa:	75fb      	strb	r3, [r7, #23]
                    if (sequence_length == 0)
 8001dac:	7dfb      	ldrb	r3, [r7, #23]
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	d02c      	beq.n	8001e0c <parse_string+0x25c>
                    break;
 8001db2:	bf00      	nop
            }
            input_pointer += sequence_length;
 8001db4:	7dfb      	ldrb	r3, [r7, #23]
 8001db6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001db8:	4413      	add	r3, r2
 8001dba:	627b      	str	r3, [r7, #36]	; 0x24
    while (input_pointer < input_end)
 8001dbc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001dbe:	6a3b      	ldr	r3, [r7, #32]
 8001dc0:	429a      	cmp	r2, r3
 8001dc2:	f4ff af67 	bcc.w	8001c94 <parse_string+0xe4>
        }
    }

    /* zero terminate the output */
    *output_pointer = '\0';
 8001dc6:	68fb      	ldr	r3, [r7, #12]
 8001dc8:	2200      	movs	r2, #0
 8001dca:	701a      	strb	r2, [r3, #0]

    item->type = cJSON_String;
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	2210      	movs	r2, #16
 8001dd0:	60da      	str	r2, [r3, #12]
    item->valuestring = (char*)output;
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	69fa      	ldr	r2, [r7, #28]
 8001dd6:	611a      	str	r2, [r3, #16]

    input_buffer->offset = (size_t) (input_end - input_buffer->content);
 8001dd8:	683b      	ldr	r3, [r7, #0]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	6a3a      	ldr	r2, [r7, #32]
 8001dde:	1ad3      	subs	r3, r2, r3
 8001de0:	461a      	mov	r2, r3
 8001de2:	683b      	ldr	r3, [r7, #0]
 8001de4:	609a      	str	r2, [r3, #8]
    input_buffer->offset++;
 8001de6:	683b      	ldr	r3, [r7, #0]
 8001de8:	689b      	ldr	r3, [r3, #8]
 8001dea:	1c5a      	adds	r2, r3, #1
 8001dec:	683b      	ldr	r3, [r7, #0]
 8001dee:	609a      	str	r2, [r3, #8]

    return true;
 8001df0:	2301      	movs	r3, #1
 8001df2:	e01e      	b.n	8001e32 <parse_string+0x282>
        goto fail;
 8001df4:	bf00      	nop
 8001df6:	e00a      	b.n	8001e0e <parse_string+0x25e>
                    goto fail;
 8001df8:	bf00      	nop
 8001dfa:	e008      	b.n	8001e0e <parse_string+0x25e>
            goto fail; /* string ended unexpectedly */
 8001dfc:	bf00      	nop
 8001dfe:	e006      	b.n	8001e0e <parse_string+0x25e>
            goto fail; /* allocation failure */
 8001e00:	bf00      	nop
 8001e02:	e004      	b.n	8001e0e <parse_string+0x25e>
                goto fail;
 8001e04:	bf00      	nop
 8001e06:	e002      	b.n	8001e0e <parse_string+0x25e>
                    goto fail;
 8001e08:	bf00      	nop
 8001e0a:	e000      	b.n	8001e0e <parse_string+0x25e>
                        goto fail;
 8001e0c:	bf00      	nop

fail:
    if (output != NULL)
 8001e0e:	69fb      	ldr	r3, [r7, #28]
 8001e10:	2b00      	cmp	r3, #0
 8001e12:	d003      	beq.n	8001e1c <parse_string+0x26c>
    {
        input_buffer->hooks.deallocate(output);
 8001e14:	683b      	ldr	r3, [r7, #0]
 8001e16:	695b      	ldr	r3, [r3, #20]
 8001e18:	69f8      	ldr	r0, [r7, #28]
 8001e1a:	4798      	blx	r3
    }

    if (input_pointer != NULL)
 8001e1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	d006      	beq.n	8001e30 <parse_string+0x280>
    {
        input_buffer->offset = (size_t)(input_pointer - input_buffer->content);
 8001e22:	683b      	ldr	r3, [r7, #0]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001e28:	1ad3      	subs	r3, r2, r3
 8001e2a:	461a      	mov	r2, r3
 8001e2c:	683b      	ldr	r3, [r7, #0]
 8001e2e:	609a      	str	r2, [r3, #8]
    }

    return false;
 8001e30:	2300      	movs	r3, #0
}
 8001e32:	4618      	mov	r0, r3
 8001e34:	3728      	adds	r7, #40	; 0x28
 8001e36:	46bd      	mov	sp, r7
 8001e38:	bd80      	pop	{r7, pc}
 8001e3a:	bf00      	nop

08001e3c <buffer_skip_whitespace>:
static cJSON_bool parse_object(cJSON * const item, parse_buffer * const input_buffer);
static cJSON_bool print_object(const cJSON * const item, printbuffer * const output_buffer);

/* Utility to jump whitespace and cr/lf */
static parse_buffer *buffer_skip_whitespace(parse_buffer * const buffer)
{
 8001e3c:	b480      	push	{r7}
 8001e3e:	b083      	sub	sp, #12
 8001e40:	af00      	add	r7, sp, #0
 8001e42:	6078      	str	r0, [r7, #4]
    if ((buffer == NULL) || (buffer->content == NULL))
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	d003      	beq.n	8001e52 <buffer_skip_whitespace+0x16>
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	d101      	bne.n	8001e56 <buffer_skip_whitespace+0x1a>
    {
        return NULL;
 8001e52:	2300      	movs	r3, #0
 8001e54:	e02c      	b.n	8001eb0 <buffer_skip_whitespace+0x74>
    }

    if (cannot_access_at_index(buffer, 0))
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	d005      	beq.n	8001e68 <buffer_skip_whitespace+0x2c>
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	689a      	ldr	r2, [r3, #8]
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	685b      	ldr	r3, [r3, #4]
 8001e64:	429a      	cmp	r2, r3
 8001e66:	d306      	bcc.n	8001e76 <buffer_skip_whitespace+0x3a>
    {
        return buffer;
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	e021      	b.n	8001eb0 <buffer_skip_whitespace+0x74>
    }

    while (can_access_at_index(buffer, 0) && (buffer_at_offset(buffer)[0] <= 32))
    {
       buffer->offset++;
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	689b      	ldr	r3, [r3, #8]
 8001e70:	1c5a      	adds	r2, r3, #1
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	609a      	str	r2, [r3, #8]
    while (can_access_at_index(buffer, 0) && (buffer_at_offset(buffer)[0] <= 32))
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	2b00      	cmp	r3, #0
 8001e7a:	d00d      	beq.n	8001e98 <buffer_skip_whitespace+0x5c>
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	689a      	ldr	r2, [r3, #8]
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	685b      	ldr	r3, [r3, #4]
 8001e84:	429a      	cmp	r2, r3
 8001e86:	d207      	bcs.n	8001e98 <buffer_skip_whitespace+0x5c>
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	681a      	ldr	r2, [r3, #0]
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	689b      	ldr	r3, [r3, #8]
 8001e90:	4413      	add	r3, r2
 8001e92:	781b      	ldrb	r3, [r3, #0]
 8001e94:	2b20      	cmp	r3, #32
 8001e96:	d9e9      	bls.n	8001e6c <buffer_skip_whitespace+0x30>
    }

    if (buffer->offset == buffer->length)
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	689a      	ldr	r2, [r3, #8]
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	685b      	ldr	r3, [r3, #4]
 8001ea0:	429a      	cmp	r2, r3
 8001ea2:	d104      	bne.n	8001eae <buffer_skip_whitespace+0x72>
    {
        buffer->offset--;
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	689b      	ldr	r3, [r3, #8]
 8001ea8:	1e5a      	subs	r2, r3, #1
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	609a      	str	r2, [r3, #8]
    }

    return buffer;
 8001eae:	687b      	ldr	r3, [r7, #4]
}
 8001eb0:	4618      	mov	r0, r3
 8001eb2:	370c      	adds	r7, #12
 8001eb4:	46bd      	mov	sp, r7
 8001eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eba:	4770      	bx	lr

08001ebc <skip_utf8_bom>:

/* skip the UTF-8 BOM (byte order mark) if it is at the beginning of a buffer */
static parse_buffer *skip_utf8_bom(parse_buffer * const buffer)
{
 8001ebc:	b580      	push	{r7, lr}
 8001ebe:	b082      	sub	sp, #8
 8001ec0:	af00      	add	r7, sp, #0
 8001ec2:	6078      	str	r0, [r7, #4]
    if ((buffer == NULL) || (buffer->content == NULL) || (buffer->offset != 0))
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	d007      	beq.n	8001eda <skip_utf8_bom+0x1e>
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d003      	beq.n	8001eda <skip_utf8_bom+0x1e>
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	689b      	ldr	r3, [r3, #8]
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d001      	beq.n	8001ede <skip_utf8_bom+0x22>
    {
        return NULL;
 8001eda:	2300      	movs	r3, #0
 8001edc:	e01c      	b.n	8001f18 <skip_utf8_bom+0x5c>
    }

    if (can_access_at_index(buffer, 4) && (strncmp((const char*)buffer_at_offset(buffer), "\xEF\xBB\xBF", 3) == 0))
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	2b00      	cmp	r3, #0
 8001ee2:	d018      	beq.n	8001f16 <skip_utf8_bom+0x5a>
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	689b      	ldr	r3, [r3, #8]
 8001ee8:	1d1a      	adds	r2, r3, #4
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	685b      	ldr	r3, [r3, #4]
 8001eee:	429a      	cmp	r2, r3
 8001ef0:	d211      	bcs.n	8001f16 <skip_utf8_bom+0x5a>
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	681a      	ldr	r2, [r3, #0]
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	689b      	ldr	r3, [r3, #8]
 8001efa:	4413      	add	r3, r2
 8001efc:	2203      	movs	r2, #3
 8001efe:	4908      	ldr	r1, [pc, #32]	; (8001f20 <skip_utf8_bom+0x64>)
 8001f00:	4618      	mov	r0, r3
 8001f02:	f007 fe9e 	bl	8009c42 <strncmp>
 8001f06:	4603      	mov	r3, r0
 8001f08:	2b00      	cmp	r3, #0
 8001f0a:	d104      	bne.n	8001f16 <skip_utf8_bom+0x5a>
    {
        buffer->offset += 3;
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	689b      	ldr	r3, [r3, #8]
 8001f10:	1cda      	adds	r2, r3, #3
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	609a      	str	r2, [r3, #8]
    }

    return buffer;
 8001f16:	687b      	ldr	r3, [r7, #4]
}
 8001f18:	4618      	mov	r0, r3
 8001f1a:	3708      	adds	r7, #8
 8001f1c:	46bd      	mov	sp, r7
 8001f1e:	bd80      	pop	{r7, pc}
 8001f20:	0800d460 	.word	0x0800d460

08001f24 <cJSON_ParseWithOpts>:

CJSON_PUBLIC(cJSON *) cJSON_ParseWithOpts(const char *value, const char **return_parse_end, cJSON_bool require_null_terminated)
{
 8001f24:	b580      	push	{r7, lr}
 8001f26:	b086      	sub	sp, #24
 8001f28:	af00      	add	r7, sp, #0
 8001f2a:	60f8      	str	r0, [r7, #12]
 8001f2c:	60b9      	str	r1, [r7, #8]
 8001f2e:	607a      	str	r2, [r7, #4]
    size_t buffer_length;

    if (NULL == value)
 8001f30:	68fb      	ldr	r3, [r7, #12]
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	d101      	bne.n	8001f3a <cJSON_ParseWithOpts+0x16>
    {
        return NULL;
 8001f36:	2300      	movs	r3, #0
 8001f38:	e00c      	b.n	8001f54 <cJSON_ParseWithOpts+0x30>
    }

    /* Adding null character size due to require_null_terminated. */
    buffer_length = strlen(value) + sizeof("");
 8001f3a:	68f8      	ldr	r0, [r7, #12]
 8001f3c:	f7fe f952 	bl	80001e4 <strlen>
 8001f40:	4603      	mov	r3, r0
 8001f42:	3301      	adds	r3, #1
 8001f44:	617b      	str	r3, [r7, #20]

    return cJSON_ParseWithLengthOpts(value, buffer_length, return_parse_end, require_null_terminated);
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	68ba      	ldr	r2, [r7, #8]
 8001f4a:	6979      	ldr	r1, [r7, #20]
 8001f4c:	68f8      	ldr	r0, [r7, #12]
 8001f4e:	f000 f805 	bl	8001f5c <cJSON_ParseWithLengthOpts>
 8001f52:	4603      	mov	r3, r0
}
 8001f54:	4618      	mov	r0, r3
 8001f56:	3718      	adds	r7, #24
 8001f58:	46bd      	mov	sp, r7
 8001f5a:	bd80      	pop	{r7, pc}

08001f5c <cJSON_ParseWithLengthOpts>:

/* Parse an object - create a new root, and populate. */
CJSON_PUBLIC(cJSON *) cJSON_ParseWithLengthOpts(const char *value, size_t buffer_length, const char **return_parse_end, cJSON_bool require_null_terminated)
{
 8001f5c:	b580      	push	{r7, lr}
 8001f5e:	b08e      	sub	sp, #56	; 0x38
 8001f60:	af00      	add	r7, sp, #0
 8001f62:	60f8      	str	r0, [r7, #12]
 8001f64:	60b9      	str	r1, [r7, #8]
 8001f66:	607a      	str	r2, [r7, #4]
 8001f68:	603b      	str	r3, [r7, #0]
    parse_buffer buffer = { 0, 0, 0, 0, { 0, 0, 0 } };
 8001f6a:	f107 0318 	add.w	r3, r7, #24
 8001f6e:	2200      	movs	r2, #0
 8001f70:	601a      	str	r2, [r3, #0]
 8001f72:	605a      	str	r2, [r3, #4]
 8001f74:	609a      	str	r2, [r3, #8]
 8001f76:	60da      	str	r2, [r3, #12]
 8001f78:	611a      	str	r2, [r3, #16]
 8001f7a:	615a      	str	r2, [r3, #20]
 8001f7c:	619a      	str	r2, [r3, #24]
    cJSON *item = NULL;
 8001f7e:	2300      	movs	r3, #0
 8001f80:	637b      	str	r3, [r7, #52]	; 0x34

    /* reset error position */
    global_error.json = NULL;
 8001f82:	4b41      	ldr	r3, [pc, #260]	; (8002088 <cJSON_ParseWithLengthOpts+0x12c>)
 8001f84:	2200      	movs	r2, #0
 8001f86:	601a      	str	r2, [r3, #0]
    global_error.position = 0;
 8001f88:	4b3f      	ldr	r3, [pc, #252]	; (8002088 <cJSON_ParseWithLengthOpts+0x12c>)
 8001f8a:	2200      	movs	r2, #0
 8001f8c:	605a      	str	r2, [r3, #4]

    if (value == NULL || 0 == buffer_length)
 8001f8e:	68fb      	ldr	r3, [r7, #12]
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	d042      	beq.n	800201a <cJSON_ParseWithLengthOpts+0xbe>
 8001f94:	68bb      	ldr	r3, [r7, #8]
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	d03f      	beq.n	800201a <cJSON_ParseWithLengthOpts+0xbe>
    {
        goto fail;
    }

    buffer.content = (const unsigned char*)value;
 8001f9a:	68fb      	ldr	r3, [r7, #12]
 8001f9c:	61bb      	str	r3, [r7, #24]
    buffer.length = buffer_length;
 8001f9e:	68bb      	ldr	r3, [r7, #8]
 8001fa0:	61fb      	str	r3, [r7, #28]
    buffer.offset = 0;
 8001fa2:	2300      	movs	r3, #0
 8001fa4:	623b      	str	r3, [r7, #32]
    buffer.hooks = global_hooks;
 8001fa6:	4a39      	ldr	r2, [pc, #228]	; (800208c <cJSON_ParseWithLengthOpts+0x130>)
 8001fa8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001fac:	ca07      	ldmia	r2, {r0, r1, r2}
 8001fae:	e883 0007 	stmia.w	r3, {r0, r1, r2}

    item = cJSON_New_Item(&global_hooks);
 8001fb2:	4836      	ldr	r0, [pc, #216]	; (800208c <cJSON_ParseWithLengthOpts+0x130>)
 8001fb4:	f7ff fb5c 	bl	8001670 <cJSON_New_Item>
 8001fb8:	6378      	str	r0, [r7, #52]	; 0x34
    if (item == NULL) /* memory fail */
 8001fba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	d02e      	beq.n	800201e <cJSON_ParseWithLengthOpts+0xc2>
    {
        goto fail;
    }

    if (!parse_value(item, buffer_skip_whitespace(skip_utf8_bom(&buffer))))
 8001fc0:	f107 0318 	add.w	r3, r7, #24
 8001fc4:	4618      	mov	r0, r3
 8001fc6:	f7ff ff79 	bl	8001ebc <skip_utf8_bom>
 8001fca:	4603      	mov	r3, r0
 8001fcc:	4618      	mov	r0, r3
 8001fce:	f7ff ff35 	bl	8001e3c <buffer_skip_whitespace>
 8001fd2:	4603      	mov	r3, r0
 8001fd4:	4619      	mov	r1, r3
 8001fd6:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8001fd8:	f000 f868 	bl	80020ac <parse_value>
 8001fdc:	4603      	mov	r3, r0
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d01f      	beq.n	8002022 <cJSON_ParseWithLengthOpts+0xc6>
        /* parse failure. ep is set. */
        goto fail;
    }

    /* if we require null-terminated JSON without appended garbage, skip and then check for a null terminator */
    if (require_null_terminated)
 8001fe2:	683b      	ldr	r3, [r7, #0]
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	d00e      	beq.n	8002006 <cJSON_ParseWithLengthOpts+0xaa>
    {
        buffer_skip_whitespace(&buffer);
 8001fe8:	f107 0318 	add.w	r3, r7, #24
 8001fec:	4618      	mov	r0, r3
 8001fee:	f7ff ff25 	bl	8001e3c <buffer_skip_whitespace>
        if ((buffer.offset >= buffer.length) || buffer_at_offset(&buffer)[0] != '\0')
 8001ff2:	6a3a      	ldr	r2, [r7, #32]
 8001ff4:	69fb      	ldr	r3, [r7, #28]
 8001ff6:	429a      	cmp	r2, r3
 8001ff8:	d215      	bcs.n	8002026 <cJSON_ParseWithLengthOpts+0xca>
 8001ffa:	69ba      	ldr	r2, [r7, #24]
 8001ffc:	6a3b      	ldr	r3, [r7, #32]
 8001ffe:	4413      	add	r3, r2
 8002000:	781b      	ldrb	r3, [r3, #0]
 8002002:	2b00      	cmp	r3, #0
 8002004:	d10f      	bne.n	8002026 <cJSON_ParseWithLengthOpts+0xca>
        {
            goto fail;
        }
    }
    if (return_parse_end)
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	2b00      	cmp	r3, #0
 800200a:	d004      	beq.n	8002016 <cJSON_ParseWithLengthOpts+0xba>
    {
        *return_parse_end = (const char*)buffer_at_offset(&buffer);
 800200c:	69ba      	ldr	r2, [r7, #24]
 800200e:	6a3b      	ldr	r3, [r7, #32]
 8002010:	441a      	add	r2, r3
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	601a      	str	r2, [r3, #0]
    }

    return item;
 8002016:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002018:	e031      	b.n	800207e <cJSON_ParseWithLengthOpts+0x122>
        goto fail;
 800201a:	bf00      	nop
 800201c:	e004      	b.n	8002028 <cJSON_ParseWithLengthOpts+0xcc>
        goto fail;
 800201e:	bf00      	nop
 8002020:	e002      	b.n	8002028 <cJSON_ParseWithLengthOpts+0xcc>
        goto fail;
 8002022:	bf00      	nop
 8002024:	e000      	b.n	8002028 <cJSON_ParseWithLengthOpts+0xcc>
            goto fail;
 8002026:	bf00      	nop

fail:
    if (item != NULL)
 8002028:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800202a:	2b00      	cmp	r3, #0
 800202c:	d002      	beq.n	8002034 <cJSON_ParseWithLengthOpts+0xd8>
    {
        cJSON_Delete(item);
 800202e:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8002030:	f7ff fb34 	bl	800169c <cJSON_Delete>
    }

    if (value != NULL)
 8002034:	68fb      	ldr	r3, [r7, #12]
 8002036:	2b00      	cmp	r3, #0
 8002038:	d020      	beq.n	800207c <cJSON_ParseWithLengthOpts+0x120>
    {
        error local_error;
        local_error.json = (const unsigned char*)value;
 800203a:	68fb      	ldr	r3, [r7, #12]
 800203c:	613b      	str	r3, [r7, #16]
        local_error.position = 0;
 800203e:	2300      	movs	r3, #0
 8002040:	617b      	str	r3, [r7, #20]

        if (buffer.offset < buffer.length)
 8002042:	6a3a      	ldr	r2, [r7, #32]
 8002044:	69fb      	ldr	r3, [r7, #28]
 8002046:	429a      	cmp	r2, r3
 8002048:	d202      	bcs.n	8002050 <cJSON_ParseWithLengthOpts+0xf4>
        {
            local_error.position = buffer.offset;
 800204a:	6a3b      	ldr	r3, [r7, #32]
 800204c:	617b      	str	r3, [r7, #20]
 800204e:	e005      	b.n	800205c <cJSON_ParseWithLengthOpts+0x100>
        }
        else if (buffer.length > 0)
 8002050:	69fb      	ldr	r3, [r7, #28]
 8002052:	2b00      	cmp	r3, #0
 8002054:	d002      	beq.n	800205c <cJSON_ParseWithLengthOpts+0x100>
        {
            local_error.position = buffer.length - 1;
 8002056:	69fb      	ldr	r3, [r7, #28]
 8002058:	3b01      	subs	r3, #1
 800205a:	617b      	str	r3, [r7, #20]
        }

        if (return_parse_end != NULL)
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	2b00      	cmp	r3, #0
 8002060:	d004      	beq.n	800206c <cJSON_ParseWithLengthOpts+0x110>
        {
            *return_parse_end = (const char*)local_error.json + local_error.position;
 8002062:	693a      	ldr	r2, [r7, #16]
 8002064:	697b      	ldr	r3, [r7, #20]
 8002066:	441a      	add	r2, r3
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	601a      	str	r2, [r3, #0]
        }

        global_error = local_error;
 800206c:	4b06      	ldr	r3, [pc, #24]	; (8002088 <cJSON_ParseWithLengthOpts+0x12c>)
 800206e:	461a      	mov	r2, r3
 8002070:	f107 0310 	add.w	r3, r7, #16
 8002074:	e893 0003 	ldmia.w	r3, {r0, r1}
 8002078:	e882 0003 	stmia.w	r2, {r0, r1}
    }

    return NULL;
 800207c:	2300      	movs	r3, #0
}
 800207e:	4618      	mov	r0, r3
 8002080:	3738      	adds	r7, #56	; 0x38
 8002082:	46bd      	mov	sp, r7
 8002084:	bd80      	pop	{r7, pc}
 8002086:	bf00      	nop
 8002088:	2000139c 	.word	0x2000139c
 800208c:	20000000 	.word	0x20000000

08002090 <cJSON_Parse>:

/* Default options for cJSON_Parse */
CJSON_PUBLIC(cJSON *) cJSON_Parse(const char *value)
{
 8002090:	b580      	push	{r7, lr}
 8002092:	b082      	sub	sp, #8
 8002094:	af00      	add	r7, sp, #0
 8002096:	6078      	str	r0, [r7, #4]
    return cJSON_ParseWithOpts(value, 0, 0);
 8002098:	2200      	movs	r2, #0
 800209a:	2100      	movs	r1, #0
 800209c:	6878      	ldr	r0, [r7, #4]
 800209e:	f7ff ff41 	bl	8001f24 <cJSON_ParseWithOpts>
 80020a2:	4603      	mov	r3, r0
}
 80020a4:	4618      	mov	r0, r3
 80020a6:	3708      	adds	r7, #8
 80020a8:	46bd      	mov	sp, r7
 80020aa:	bd80      	pop	{r7, pc}

080020ac <parse_value>:
    return print_value(item, &p);
}

/* Parser core - when encountering text, process appropriately. */
static cJSON_bool parse_value(cJSON * const item, parse_buffer * const input_buffer)
{
 80020ac:	b580      	push	{r7, lr}
 80020ae:	b082      	sub	sp, #8
 80020b0:	af00      	add	r7, sp, #0
 80020b2:	6078      	str	r0, [r7, #4]
 80020b4:	6039      	str	r1, [r7, #0]
    if ((input_buffer == NULL) || (input_buffer->content == NULL))
 80020b6:	683b      	ldr	r3, [r7, #0]
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	d003      	beq.n	80020c4 <parse_value+0x18>
 80020bc:	683b      	ldr	r3, [r7, #0]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	d101      	bne.n	80020c8 <parse_value+0x1c>
    {
        return false; /* no input */
 80020c4:	2300      	movs	r3, #0
 80020c6:	e0d2      	b.n	800226e <parse_value+0x1c2>
    }

    /* parse the different types of values */
    /* null */
    if (can_read(input_buffer, 4) && (strncmp((const char*)buffer_at_offset(input_buffer), "null", 4) == 0))
 80020c8:	683b      	ldr	r3, [r7, #0]
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	d01d      	beq.n	800210a <parse_value+0x5e>
 80020ce:	683b      	ldr	r3, [r7, #0]
 80020d0:	689b      	ldr	r3, [r3, #8]
 80020d2:	1d1a      	adds	r2, r3, #4
 80020d4:	683b      	ldr	r3, [r7, #0]
 80020d6:	685b      	ldr	r3, [r3, #4]
 80020d8:	429a      	cmp	r2, r3
 80020da:	d816      	bhi.n	800210a <parse_value+0x5e>
 80020dc:	683b      	ldr	r3, [r7, #0]
 80020de:	681a      	ldr	r2, [r3, #0]
 80020e0:	683b      	ldr	r3, [r7, #0]
 80020e2:	689b      	ldr	r3, [r3, #8]
 80020e4:	4413      	add	r3, r2
 80020e6:	2204      	movs	r2, #4
 80020e8:	4963      	ldr	r1, [pc, #396]	; (8002278 <parse_value+0x1cc>)
 80020ea:	4618      	mov	r0, r3
 80020ec:	f007 fda9 	bl	8009c42 <strncmp>
 80020f0:	4603      	mov	r3, r0
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	d109      	bne.n	800210a <parse_value+0x5e>
    {
        item->type = cJSON_NULL;
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	2204      	movs	r2, #4
 80020fa:	60da      	str	r2, [r3, #12]
        input_buffer->offset += 4;
 80020fc:	683b      	ldr	r3, [r7, #0]
 80020fe:	689b      	ldr	r3, [r3, #8]
 8002100:	1d1a      	adds	r2, r3, #4
 8002102:	683b      	ldr	r3, [r7, #0]
 8002104:	609a      	str	r2, [r3, #8]
        return true;
 8002106:	2301      	movs	r3, #1
 8002108:	e0b1      	b.n	800226e <parse_value+0x1c2>
    }
    /* false */
    if (can_read(input_buffer, 5) && (strncmp((const char*)buffer_at_offset(input_buffer), "false", 5) == 0))
 800210a:	683b      	ldr	r3, [r7, #0]
 800210c:	2b00      	cmp	r3, #0
 800210e:	d01d      	beq.n	800214c <parse_value+0xa0>
 8002110:	683b      	ldr	r3, [r7, #0]
 8002112:	689b      	ldr	r3, [r3, #8]
 8002114:	1d5a      	adds	r2, r3, #5
 8002116:	683b      	ldr	r3, [r7, #0]
 8002118:	685b      	ldr	r3, [r3, #4]
 800211a:	429a      	cmp	r2, r3
 800211c:	d816      	bhi.n	800214c <parse_value+0xa0>
 800211e:	683b      	ldr	r3, [r7, #0]
 8002120:	681a      	ldr	r2, [r3, #0]
 8002122:	683b      	ldr	r3, [r7, #0]
 8002124:	689b      	ldr	r3, [r3, #8]
 8002126:	4413      	add	r3, r2
 8002128:	2205      	movs	r2, #5
 800212a:	4954      	ldr	r1, [pc, #336]	; (800227c <parse_value+0x1d0>)
 800212c:	4618      	mov	r0, r3
 800212e:	f007 fd88 	bl	8009c42 <strncmp>
 8002132:	4603      	mov	r3, r0
 8002134:	2b00      	cmp	r3, #0
 8002136:	d109      	bne.n	800214c <parse_value+0xa0>
    {
        item->type = cJSON_False;
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	2201      	movs	r2, #1
 800213c:	60da      	str	r2, [r3, #12]
        input_buffer->offset += 5;
 800213e:	683b      	ldr	r3, [r7, #0]
 8002140:	689b      	ldr	r3, [r3, #8]
 8002142:	1d5a      	adds	r2, r3, #5
 8002144:	683b      	ldr	r3, [r7, #0]
 8002146:	609a      	str	r2, [r3, #8]
        return true;
 8002148:	2301      	movs	r3, #1
 800214a:	e090      	b.n	800226e <parse_value+0x1c2>
    }
    /* true */
    if (can_read(input_buffer, 4) && (strncmp((const char*)buffer_at_offset(input_buffer), "true", 4) == 0))
 800214c:	683b      	ldr	r3, [r7, #0]
 800214e:	2b00      	cmp	r3, #0
 8002150:	d020      	beq.n	8002194 <parse_value+0xe8>
 8002152:	683b      	ldr	r3, [r7, #0]
 8002154:	689b      	ldr	r3, [r3, #8]
 8002156:	1d1a      	adds	r2, r3, #4
 8002158:	683b      	ldr	r3, [r7, #0]
 800215a:	685b      	ldr	r3, [r3, #4]
 800215c:	429a      	cmp	r2, r3
 800215e:	d819      	bhi.n	8002194 <parse_value+0xe8>
 8002160:	683b      	ldr	r3, [r7, #0]
 8002162:	681a      	ldr	r2, [r3, #0]
 8002164:	683b      	ldr	r3, [r7, #0]
 8002166:	689b      	ldr	r3, [r3, #8]
 8002168:	4413      	add	r3, r2
 800216a:	2204      	movs	r2, #4
 800216c:	4944      	ldr	r1, [pc, #272]	; (8002280 <parse_value+0x1d4>)
 800216e:	4618      	mov	r0, r3
 8002170:	f007 fd67 	bl	8009c42 <strncmp>
 8002174:	4603      	mov	r3, r0
 8002176:	2b00      	cmp	r3, #0
 8002178:	d10c      	bne.n	8002194 <parse_value+0xe8>
    {
        item->type = cJSON_True;
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	2202      	movs	r2, #2
 800217e:	60da      	str	r2, [r3, #12]
        item->valueint = 1;
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	2201      	movs	r2, #1
 8002184:	615a      	str	r2, [r3, #20]
        input_buffer->offset += 4;
 8002186:	683b      	ldr	r3, [r7, #0]
 8002188:	689b      	ldr	r3, [r3, #8]
 800218a:	1d1a      	adds	r2, r3, #4
 800218c:	683b      	ldr	r3, [r7, #0]
 800218e:	609a      	str	r2, [r3, #8]
        return true;
 8002190:	2301      	movs	r3, #1
 8002192:	e06c      	b.n	800226e <parse_value+0x1c2>
    }
    /* string */
    if (can_access_at_index(input_buffer, 0) && (buffer_at_offset(input_buffer)[0] == '\"'))
 8002194:	683b      	ldr	r3, [r7, #0]
 8002196:	2b00      	cmp	r3, #0
 8002198:	d013      	beq.n	80021c2 <parse_value+0x116>
 800219a:	683b      	ldr	r3, [r7, #0]
 800219c:	689a      	ldr	r2, [r3, #8]
 800219e:	683b      	ldr	r3, [r7, #0]
 80021a0:	685b      	ldr	r3, [r3, #4]
 80021a2:	429a      	cmp	r2, r3
 80021a4:	d20d      	bcs.n	80021c2 <parse_value+0x116>
 80021a6:	683b      	ldr	r3, [r7, #0]
 80021a8:	681a      	ldr	r2, [r3, #0]
 80021aa:	683b      	ldr	r3, [r7, #0]
 80021ac:	689b      	ldr	r3, [r3, #8]
 80021ae:	4413      	add	r3, r2
 80021b0:	781b      	ldrb	r3, [r3, #0]
 80021b2:	2b22      	cmp	r3, #34	; 0x22
 80021b4:	d105      	bne.n	80021c2 <parse_value+0x116>
    {
        return parse_string(item, input_buffer);
 80021b6:	6839      	ldr	r1, [r7, #0]
 80021b8:	6878      	ldr	r0, [r7, #4]
 80021ba:	f7ff fcf9 	bl	8001bb0 <parse_string>
 80021be:	4603      	mov	r3, r0
 80021c0:	e055      	b.n	800226e <parse_value+0x1c2>
    }
    /* number */
    if (can_access_at_index(input_buffer, 0) && ((buffer_at_offset(input_buffer)[0] == '-') || ((buffer_at_offset(input_buffer)[0] >= '0') && (buffer_at_offset(input_buffer)[0] <= '9'))))
 80021c2:	683b      	ldr	r3, [r7, #0]
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	d023      	beq.n	8002210 <parse_value+0x164>
 80021c8:	683b      	ldr	r3, [r7, #0]
 80021ca:	689a      	ldr	r2, [r3, #8]
 80021cc:	683b      	ldr	r3, [r7, #0]
 80021ce:	685b      	ldr	r3, [r3, #4]
 80021d0:	429a      	cmp	r2, r3
 80021d2:	d21d      	bcs.n	8002210 <parse_value+0x164>
 80021d4:	683b      	ldr	r3, [r7, #0]
 80021d6:	681a      	ldr	r2, [r3, #0]
 80021d8:	683b      	ldr	r3, [r7, #0]
 80021da:	689b      	ldr	r3, [r3, #8]
 80021dc:	4413      	add	r3, r2
 80021de:	781b      	ldrb	r3, [r3, #0]
 80021e0:	2b2d      	cmp	r3, #45	; 0x2d
 80021e2:	d00f      	beq.n	8002204 <parse_value+0x158>
 80021e4:	683b      	ldr	r3, [r7, #0]
 80021e6:	681a      	ldr	r2, [r3, #0]
 80021e8:	683b      	ldr	r3, [r7, #0]
 80021ea:	689b      	ldr	r3, [r3, #8]
 80021ec:	4413      	add	r3, r2
 80021ee:	781b      	ldrb	r3, [r3, #0]
 80021f0:	2b2f      	cmp	r3, #47	; 0x2f
 80021f2:	d90d      	bls.n	8002210 <parse_value+0x164>
 80021f4:	683b      	ldr	r3, [r7, #0]
 80021f6:	681a      	ldr	r2, [r3, #0]
 80021f8:	683b      	ldr	r3, [r7, #0]
 80021fa:	689b      	ldr	r3, [r3, #8]
 80021fc:	4413      	add	r3, r2
 80021fe:	781b      	ldrb	r3, [r3, #0]
 8002200:	2b39      	cmp	r3, #57	; 0x39
 8002202:	d805      	bhi.n	8002210 <parse_value+0x164>
    {
        return parse_number(item, input_buffer);
 8002204:	6839      	ldr	r1, [r7, #0]
 8002206:	6878      	ldr	r0, [r7, #4]
 8002208:	f7ff fa9a 	bl	8001740 <parse_number>
 800220c:	4603      	mov	r3, r0
 800220e:	e02e      	b.n	800226e <parse_value+0x1c2>
    }
    /* array */
    if (can_access_at_index(input_buffer, 0) && (buffer_at_offset(input_buffer)[0] == '['))
 8002210:	683b      	ldr	r3, [r7, #0]
 8002212:	2b00      	cmp	r3, #0
 8002214:	d013      	beq.n	800223e <parse_value+0x192>
 8002216:	683b      	ldr	r3, [r7, #0]
 8002218:	689a      	ldr	r2, [r3, #8]
 800221a:	683b      	ldr	r3, [r7, #0]
 800221c:	685b      	ldr	r3, [r3, #4]
 800221e:	429a      	cmp	r2, r3
 8002220:	d20d      	bcs.n	800223e <parse_value+0x192>
 8002222:	683b      	ldr	r3, [r7, #0]
 8002224:	681a      	ldr	r2, [r3, #0]
 8002226:	683b      	ldr	r3, [r7, #0]
 8002228:	689b      	ldr	r3, [r3, #8]
 800222a:	4413      	add	r3, r2
 800222c:	781b      	ldrb	r3, [r3, #0]
 800222e:	2b5b      	cmp	r3, #91	; 0x5b
 8002230:	d105      	bne.n	800223e <parse_value+0x192>
    {
        return parse_array(item, input_buffer);
 8002232:	6839      	ldr	r1, [r7, #0]
 8002234:	6878      	ldr	r0, [r7, #4]
 8002236:	f000 f825 	bl	8002284 <parse_array>
 800223a:	4603      	mov	r3, r0
 800223c:	e017      	b.n	800226e <parse_value+0x1c2>
    }
    /* object */
    if (can_access_at_index(input_buffer, 0) && (buffer_at_offset(input_buffer)[0] == '{'))
 800223e:	683b      	ldr	r3, [r7, #0]
 8002240:	2b00      	cmp	r3, #0
 8002242:	d013      	beq.n	800226c <parse_value+0x1c0>
 8002244:	683b      	ldr	r3, [r7, #0]
 8002246:	689a      	ldr	r2, [r3, #8]
 8002248:	683b      	ldr	r3, [r7, #0]
 800224a:	685b      	ldr	r3, [r3, #4]
 800224c:	429a      	cmp	r2, r3
 800224e:	d20d      	bcs.n	800226c <parse_value+0x1c0>
 8002250:	683b      	ldr	r3, [r7, #0]
 8002252:	681a      	ldr	r2, [r3, #0]
 8002254:	683b      	ldr	r3, [r7, #0]
 8002256:	689b      	ldr	r3, [r3, #8]
 8002258:	4413      	add	r3, r2
 800225a:	781b      	ldrb	r3, [r3, #0]
 800225c:	2b7b      	cmp	r3, #123	; 0x7b
 800225e:	d105      	bne.n	800226c <parse_value+0x1c0>
    {
        return parse_object(item, input_buffer);
 8002260:	6839      	ldr	r1, [r7, #0]
 8002262:	6878      	ldr	r0, [r7, #4]
 8002264:	f000 f8d2 	bl	800240c <parse_object>
 8002268:	4603      	mov	r3, r0
 800226a:	e000      	b.n	800226e <parse_value+0x1c2>
    }

    return false;
 800226c:	2300      	movs	r3, #0
}
 800226e:	4618      	mov	r0, r3
 8002270:	3708      	adds	r7, #8
 8002272:	46bd      	mov	sp, r7
 8002274:	bd80      	pop	{r7, pc}
 8002276:	bf00      	nop
 8002278:	0800d434 	.word	0x0800d434
 800227c:	0800d464 	.word	0x0800d464
 8002280:	0800d46c 	.word	0x0800d46c

08002284 <parse_array>:
    }
}

/* Build an array from input text. */
static cJSON_bool parse_array(cJSON * const item, parse_buffer * const input_buffer)
{
 8002284:	b580      	push	{r7, lr}
 8002286:	b086      	sub	sp, #24
 8002288:	af00      	add	r7, sp, #0
 800228a:	6078      	str	r0, [r7, #4]
 800228c:	6039      	str	r1, [r7, #0]
    cJSON *head = NULL; /* head of the linked list */
 800228e:	2300      	movs	r3, #0
 8002290:	617b      	str	r3, [r7, #20]
    cJSON *current_item = NULL;
 8002292:	2300      	movs	r3, #0
 8002294:	613b      	str	r3, [r7, #16]

    if (input_buffer->depth >= CJSON_NESTING_LIMIT)
 8002296:	683b      	ldr	r3, [r7, #0]
 8002298:	68db      	ldr	r3, [r3, #12]
 800229a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800229e:	d301      	bcc.n	80022a4 <parse_array+0x20>
    {
        return false; /* to deeply nested */
 80022a0:	2300      	movs	r3, #0
 80022a2:	e0af      	b.n	8002404 <parse_array+0x180>
    }
    input_buffer->depth++;
 80022a4:	683b      	ldr	r3, [r7, #0]
 80022a6:	68db      	ldr	r3, [r3, #12]
 80022a8:	1c5a      	adds	r2, r3, #1
 80022aa:	683b      	ldr	r3, [r7, #0]
 80022ac:	60da      	str	r2, [r3, #12]

    if (buffer_at_offset(input_buffer)[0] != '[')
 80022ae:	683b      	ldr	r3, [r7, #0]
 80022b0:	681a      	ldr	r2, [r3, #0]
 80022b2:	683b      	ldr	r3, [r7, #0]
 80022b4:	689b      	ldr	r3, [r3, #8]
 80022b6:	4413      	add	r3, r2
 80022b8:	781b      	ldrb	r3, [r3, #0]
 80022ba:	2b5b      	cmp	r3, #91	; 0x5b
 80022bc:	f040 8094 	bne.w	80023e8 <parse_array+0x164>
    {
        /* not an array */
        goto fail;
    }

    input_buffer->offset++;
 80022c0:	683b      	ldr	r3, [r7, #0]
 80022c2:	689b      	ldr	r3, [r3, #8]
 80022c4:	1c5a      	adds	r2, r3, #1
 80022c6:	683b      	ldr	r3, [r7, #0]
 80022c8:	609a      	str	r2, [r3, #8]
    buffer_skip_whitespace(input_buffer);
 80022ca:	6838      	ldr	r0, [r7, #0]
 80022cc:	f7ff fdb6 	bl	8001e3c <buffer_skip_whitespace>
    if (can_access_at_index(input_buffer, 0) && (buffer_at_offset(input_buffer)[0] == ']'))
 80022d0:	683b      	ldr	r3, [r7, #0]
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d00d      	beq.n	80022f2 <parse_array+0x6e>
 80022d6:	683b      	ldr	r3, [r7, #0]
 80022d8:	689a      	ldr	r2, [r3, #8]
 80022da:	683b      	ldr	r3, [r7, #0]
 80022dc:	685b      	ldr	r3, [r3, #4]
 80022de:	429a      	cmp	r2, r3
 80022e0:	d207      	bcs.n	80022f2 <parse_array+0x6e>
 80022e2:	683b      	ldr	r3, [r7, #0]
 80022e4:	681a      	ldr	r2, [r3, #0]
 80022e6:	683b      	ldr	r3, [r7, #0]
 80022e8:	689b      	ldr	r3, [r3, #8]
 80022ea:	4413      	add	r3, r2
 80022ec:	781b      	ldrb	r3, [r3, #0]
 80022ee:	2b5d      	cmp	r3, #93	; 0x5d
 80022f0:	d061      	beq.n	80023b6 <parse_array+0x132>
        /* empty array */
        goto success;
    }

    /* check if we skipped to the end of the buffer */
    if (cannot_access_at_index(input_buffer, 0))
 80022f2:	683b      	ldr	r3, [r7, #0]
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	d005      	beq.n	8002304 <parse_array+0x80>
 80022f8:	683b      	ldr	r3, [r7, #0]
 80022fa:	689a      	ldr	r2, [r3, #8]
 80022fc:	683b      	ldr	r3, [r7, #0]
 80022fe:	685b      	ldr	r3, [r3, #4]
 8002300:	429a      	cmp	r2, r3
 8002302:	d305      	bcc.n	8002310 <parse_array+0x8c>
    {
        input_buffer->offset--;
 8002304:	683b      	ldr	r3, [r7, #0]
 8002306:	689b      	ldr	r3, [r3, #8]
 8002308:	1e5a      	subs	r2, r3, #1
 800230a:	683b      	ldr	r3, [r7, #0]
 800230c:	609a      	str	r2, [r3, #8]
        goto fail;
 800230e:	e072      	b.n	80023f6 <parse_array+0x172>
    }

    /* step back to character in front of the first element */
    input_buffer->offset--;
 8002310:	683b      	ldr	r3, [r7, #0]
 8002312:	689b      	ldr	r3, [r3, #8]
 8002314:	1e5a      	subs	r2, r3, #1
 8002316:	683b      	ldr	r3, [r7, #0]
 8002318:	609a      	str	r2, [r3, #8]
    /* loop through the comma separated array elements */
    do
    {
        /* allocate next item */
        cJSON *new_item = cJSON_New_Item(&(input_buffer->hooks));
 800231a:	683b      	ldr	r3, [r7, #0]
 800231c:	3310      	adds	r3, #16
 800231e:	4618      	mov	r0, r3
 8002320:	f7ff f9a6 	bl	8001670 <cJSON_New_Item>
 8002324:	60f8      	str	r0, [r7, #12]
        if (new_item == NULL)
 8002326:	68fb      	ldr	r3, [r7, #12]
 8002328:	2b00      	cmp	r3, #0
 800232a:	d05f      	beq.n	80023ec <parse_array+0x168>
        {
            goto fail; /* allocation failure */
        }

        /* attach next item to list */
        if (head == NULL)
 800232c:	697b      	ldr	r3, [r7, #20]
 800232e:	2b00      	cmp	r3, #0
 8002330:	d104      	bne.n	800233c <parse_array+0xb8>
        {
            /* start the linked list */
            current_item = head = new_item;
 8002332:	68fb      	ldr	r3, [r7, #12]
 8002334:	617b      	str	r3, [r7, #20]
 8002336:	697b      	ldr	r3, [r7, #20]
 8002338:	613b      	str	r3, [r7, #16]
 800233a:	e007      	b.n	800234c <parse_array+0xc8>
        }
        else
        {
            /* add to the end and advance */
            current_item->next = new_item;
 800233c:	693b      	ldr	r3, [r7, #16]
 800233e:	68fa      	ldr	r2, [r7, #12]
 8002340:	601a      	str	r2, [r3, #0]
            new_item->prev = current_item;
 8002342:	68fb      	ldr	r3, [r7, #12]
 8002344:	693a      	ldr	r2, [r7, #16]
 8002346:	605a      	str	r2, [r3, #4]
            current_item = new_item;
 8002348:	68fb      	ldr	r3, [r7, #12]
 800234a:	613b      	str	r3, [r7, #16]
        }

        /* parse next value */
        input_buffer->offset++;
 800234c:	683b      	ldr	r3, [r7, #0]
 800234e:	689b      	ldr	r3, [r3, #8]
 8002350:	1c5a      	adds	r2, r3, #1
 8002352:	683b      	ldr	r3, [r7, #0]
 8002354:	609a      	str	r2, [r3, #8]
        buffer_skip_whitespace(input_buffer);
 8002356:	6838      	ldr	r0, [r7, #0]
 8002358:	f7ff fd70 	bl	8001e3c <buffer_skip_whitespace>
        if (!parse_value(current_item, input_buffer))
 800235c:	6839      	ldr	r1, [r7, #0]
 800235e:	6938      	ldr	r0, [r7, #16]
 8002360:	f7ff fea4 	bl	80020ac <parse_value>
 8002364:	4603      	mov	r3, r0
 8002366:	2b00      	cmp	r3, #0
 8002368:	d042      	beq.n	80023f0 <parse_array+0x16c>
        {
            goto fail; /* failed to parse value */
        }
        buffer_skip_whitespace(input_buffer);
 800236a:	6838      	ldr	r0, [r7, #0]
 800236c:	f7ff fd66 	bl	8001e3c <buffer_skip_whitespace>
    }
    while (can_access_at_index(input_buffer, 0) && (buffer_at_offset(input_buffer)[0] == ','));
 8002370:	683b      	ldr	r3, [r7, #0]
 8002372:	2b00      	cmp	r3, #0
 8002374:	d00d      	beq.n	8002392 <parse_array+0x10e>
 8002376:	683b      	ldr	r3, [r7, #0]
 8002378:	689a      	ldr	r2, [r3, #8]
 800237a:	683b      	ldr	r3, [r7, #0]
 800237c:	685b      	ldr	r3, [r3, #4]
 800237e:	429a      	cmp	r2, r3
 8002380:	d207      	bcs.n	8002392 <parse_array+0x10e>
 8002382:	683b      	ldr	r3, [r7, #0]
 8002384:	681a      	ldr	r2, [r3, #0]
 8002386:	683b      	ldr	r3, [r7, #0]
 8002388:	689b      	ldr	r3, [r3, #8]
 800238a:	4413      	add	r3, r2
 800238c:	781b      	ldrb	r3, [r3, #0]
 800238e:	2b2c      	cmp	r3, #44	; 0x2c
 8002390:	d0c3      	beq.n	800231a <parse_array+0x96>

    if (cannot_access_at_index(input_buffer, 0) || buffer_at_offset(input_buffer)[0] != ']')
 8002392:	683b      	ldr	r3, [r7, #0]
 8002394:	2b00      	cmp	r3, #0
 8002396:	d02d      	beq.n	80023f4 <parse_array+0x170>
 8002398:	683b      	ldr	r3, [r7, #0]
 800239a:	689a      	ldr	r2, [r3, #8]
 800239c:	683b      	ldr	r3, [r7, #0]
 800239e:	685b      	ldr	r3, [r3, #4]
 80023a0:	429a      	cmp	r2, r3
 80023a2:	d227      	bcs.n	80023f4 <parse_array+0x170>
 80023a4:	683b      	ldr	r3, [r7, #0]
 80023a6:	681a      	ldr	r2, [r3, #0]
 80023a8:	683b      	ldr	r3, [r7, #0]
 80023aa:	689b      	ldr	r3, [r3, #8]
 80023ac:	4413      	add	r3, r2
 80023ae:	781b      	ldrb	r3, [r3, #0]
 80023b0:	2b5d      	cmp	r3, #93	; 0x5d
 80023b2:	d11f      	bne.n	80023f4 <parse_array+0x170>
    {
        goto fail; /* expected end of array */
    }

success:
 80023b4:	e000      	b.n	80023b8 <parse_array+0x134>
        goto success;
 80023b6:	bf00      	nop
    input_buffer->depth--;
 80023b8:	683b      	ldr	r3, [r7, #0]
 80023ba:	68db      	ldr	r3, [r3, #12]
 80023bc:	1e5a      	subs	r2, r3, #1
 80023be:	683b      	ldr	r3, [r7, #0]
 80023c0:	60da      	str	r2, [r3, #12]

    if (head != NULL) {
 80023c2:	697b      	ldr	r3, [r7, #20]
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	d002      	beq.n	80023ce <parse_array+0x14a>
        head->prev = current_item;
 80023c8:	697b      	ldr	r3, [r7, #20]
 80023ca:	693a      	ldr	r2, [r7, #16]
 80023cc:	605a      	str	r2, [r3, #4]
    }

    item->type = cJSON_Array;
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	2220      	movs	r2, #32
 80023d2:	60da      	str	r2, [r3, #12]
    item->child = head;
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	697a      	ldr	r2, [r7, #20]
 80023d8:	609a      	str	r2, [r3, #8]

    input_buffer->offset++;
 80023da:	683b      	ldr	r3, [r7, #0]
 80023dc:	689b      	ldr	r3, [r3, #8]
 80023de:	1c5a      	adds	r2, r3, #1
 80023e0:	683b      	ldr	r3, [r7, #0]
 80023e2:	609a      	str	r2, [r3, #8]

    return true;
 80023e4:	2301      	movs	r3, #1
 80023e6:	e00d      	b.n	8002404 <parse_array+0x180>
        goto fail;
 80023e8:	bf00      	nop
 80023ea:	e004      	b.n	80023f6 <parse_array+0x172>
            goto fail; /* allocation failure */
 80023ec:	bf00      	nop
 80023ee:	e002      	b.n	80023f6 <parse_array+0x172>
            goto fail; /* failed to parse value */
 80023f0:	bf00      	nop
 80023f2:	e000      	b.n	80023f6 <parse_array+0x172>
        goto fail; /* expected end of array */
 80023f4:	bf00      	nop

fail:
    if (head != NULL)
 80023f6:	697b      	ldr	r3, [r7, #20]
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	d002      	beq.n	8002402 <parse_array+0x17e>
    {
        cJSON_Delete(head);
 80023fc:	6978      	ldr	r0, [r7, #20]
 80023fe:	f7ff f94d 	bl	800169c <cJSON_Delete>
    }

    return false;
 8002402:	2300      	movs	r3, #0
}
 8002404:	4618      	mov	r0, r3
 8002406:	3718      	adds	r7, #24
 8002408:	46bd      	mov	sp, r7
 800240a:	bd80      	pop	{r7, pc}

0800240c <parse_object>:
    return true;
}

/* Build an object from the text. */
static cJSON_bool parse_object(cJSON * const item, parse_buffer * const input_buffer)
{
 800240c:	b580      	push	{r7, lr}
 800240e:	b086      	sub	sp, #24
 8002410:	af00      	add	r7, sp, #0
 8002412:	6078      	str	r0, [r7, #4]
 8002414:	6039      	str	r1, [r7, #0]
    cJSON *head = NULL; /* linked list head */
 8002416:	2300      	movs	r3, #0
 8002418:	617b      	str	r3, [r7, #20]
    cJSON *current_item = NULL;
 800241a:	2300      	movs	r3, #0
 800241c:	613b      	str	r3, [r7, #16]

    if (input_buffer->depth >= CJSON_NESTING_LIMIT)
 800241e:	683b      	ldr	r3, [r7, #0]
 8002420:	68db      	ldr	r3, [r3, #12]
 8002422:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002426:	d301      	bcc.n	800242c <parse_object+0x20>
    {
        return false; /* to deeply nested */
 8002428:	2300      	movs	r3, #0
 800242a:	e0ea      	b.n	8002602 <parse_object+0x1f6>
    }
    input_buffer->depth++;
 800242c:	683b      	ldr	r3, [r7, #0]
 800242e:	68db      	ldr	r3, [r3, #12]
 8002430:	1c5a      	adds	r2, r3, #1
 8002432:	683b      	ldr	r3, [r7, #0]
 8002434:	60da      	str	r2, [r3, #12]

    if (cannot_access_at_index(input_buffer, 0) || (buffer_at_offset(input_buffer)[0] != '{'))
 8002436:	683b      	ldr	r3, [r7, #0]
 8002438:	2b00      	cmp	r3, #0
 800243a:	f000 80d0 	beq.w	80025de <parse_object+0x1d2>
 800243e:	683b      	ldr	r3, [r7, #0]
 8002440:	689a      	ldr	r2, [r3, #8]
 8002442:	683b      	ldr	r3, [r7, #0]
 8002444:	685b      	ldr	r3, [r3, #4]
 8002446:	429a      	cmp	r2, r3
 8002448:	f080 80c9 	bcs.w	80025de <parse_object+0x1d2>
 800244c:	683b      	ldr	r3, [r7, #0]
 800244e:	681a      	ldr	r2, [r3, #0]
 8002450:	683b      	ldr	r3, [r7, #0]
 8002452:	689b      	ldr	r3, [r3, #8]
 8002454:	4413      	add	r3, r2
 8002456:	781b      	ldrb	r3, [r3, #0]
 8002458:	2b7b      	cmp	r3, #123	; 0x7b
 800245a:	f040 80c0 	bne.w	80025de <parse_object+0x1d2>
    {
        goto fail; /* not an object */
    }

    input_buffer->offset++;
 800245e:	683b      	ldr	r3, [r7, #0]
 8002460:	689b      	ldr	r3, [r3, #8]
 8002462:	1c5a      	adds	r2, r3, #1
 8002464:	683b      	ldr	r3, [r7, #0]
 8002466:	609a      	str	r2, [r3, #8]
    buffer_skip_whitespace(input_buffer);
 8002468:	6838      	ldr	r0, [r7, #0]
 800246a:	f7ff fce7 	bl	8001e3c <buffer_skip_whitespace>
    if (can_access_at_index(input_buffer, 0) && (buffer_at_offset(input_buffer)[0] == '}'))
 800246e:	683b      	ldr	r3, [r7, #0]
 8002470:	2b00      	cmp	r3, #0
 8002472:	d00e      	beq.n	8002492 <parse_object+0x86>
 8002474:	683b      	ldr	r3, [r7, #0]
 8002476:	689a      	ldr	r2, [r3, #8]
 8002478:	683b      	ldr	r3, [r7, #0]
 800247a:	685b      	ldr	r3, [r3, #4]
 800247c:	429a      	cmp	r2, r3
 800247e:	d208      	bcs.n	8002492 <parse_object+0x86>
 8002480:	683b      	ldr	r3, [r7, #0]
 8002482:	681a      	ldr	r2, [r3, #0]
 8002484:	683b      	ldr	r3, [r7, #0]
 8002486:	689b      	ldr	r3, [r3, #8]
 8002488:	4413      	add	r3, r2
 800248a:	781b      	ldrb	r3, [r3, #0]
 800248c:	2b7d      	cmp	r3, #125	; 0x7d
 800248e:	f000 808d 	beq.w	80025ac <parse_object+0x1a0>
    {
        goto success; /* empty object */
    }

    /* check if we skipped to the end of the buffer */
    if (cannot_access_at_index(input_buffer, 0))
 8002492:	683b      	ldr	r3, [r7, #0]
 8002494:	2b00      	cmp	r3, #0
 8002496:	d005      	beq.n	80024a4 <parse_object+0x98>
 8002498:	683b      	ldr	r3, [r7, #0]
 800249a:	689a      	ldr	r2, [r3, #8]
 800249c:	683b      	ldr	r3, [r7, #0]
 800249e:	685b      	ldr	r3, [r3, #4]
 80024a0:	429a      	cmp	r2, r3
 80024a2:	d305      	bcc.n	80024b0 <parse_object+0xa4>
    {
        input_buffer->offset--;
 80024a4:	683b      	ldr	r3, [r7, #0]
 80024a6:	689b      	ldr	r3, [r3, #8]
 80024a8:	1e5a      	subs	r2, r3, #1
 80024aa:	683b      	ldr	r3, [r7, #0]
 80024ac:	609a      	str	r2, [r3, #8]
        goto fail;
 80024ae:	e0a1      	b.n	80025f4 <parse_object+0x1e8>
    }

    /* step back to character in front of the first element */
    input_buffer->offset--;
 80024b0:	683b      	ldr	r3, [r7, #0]
 80024b2:	689b      	ldr	r3, [r3, #8]
 80024b4:	1e5a      	subs	r2, r3, #1
 80024b6:	683b      	ldr	r3, [r7, #0]
 80024b8:	609a      	str	r2, [r3, #8]
    /* loop through the comma separated array elements */
    do
    {
        /* allocate next item */
        cJSON *new_item = cJSON_New_Item(&(input_buffer->hooks));
 80024ba:	683b      	ldr	r3, [r7, #0]
 80024bc:	3310      	adds	r3, #16
 80024be:	4618      	mov	r0, r3
 80024c0:	f7ff f8d6 	bl	8001670 <cJSON_New_Item>
 80024c4:	60f8      	str	r0, [r7, #12]
        if (new_item == NULL)
 80024c6:	68fb      	ldr	r3, [r7, #12]
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	f000 808a 	beq.w	80025e2 <parse_object+0x1d6>
        {
            goto fail; /* allocation failure */
        }

        /* attach next item to list */
        if (head == NULL)
 80024ce:	697b      	ldr	r3, [r7, #20]
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	d104      	bne.n	80024de <parse_object+0xd2>
        {
            /* start the linked list */
            current_item = head = new_item;
 80024d4:	68fb      	ldr	r3, [r7, #12]
 80024d6:	617b      	str	r3, [r7, #20]
 80024d8:	697b      	ldr	r3, [r7, #20]
 80024da:	613b      	str	r3, [r7, #16]
 80024dc:	e007      	b.n	80024ee <parse_object+0xe2>
        }
        else
        {
            /* add to the end and advance */
            current_item->next = new_item;
 80024de:	693b      	ldr	r3, [r7, #16]
 80024e0:	68fa      	ldr	r2, [r7, #12]
 80024e2:	601a      	str	r2, [r3, #0]
            new_item->prev = current_item;
 80024e4:	68fb      	ldr	r3, [r7, #12]
 80024e6:	693a      	ldr	r2, [r7, #16]
 80024e8:	605a      	str	r2, [r3, #4]
            current_item = new_item;
 80024ea:	68fb      	ldr	r3, [r7, #12]
 80024ec:	613b      	str	r3, [r7, #16]
        }

        /* parse the name of the child */
        input_buffer->offset++;
 80024ee:	683b      	ldr	r3, [r7, #0]
 80024f0:	689b      	ldr	r3, [r3, #8]
 80024f2:	1c5a      	adds	r2, r3, #1
 80024f4:	683b      	ldr	r3, [r7, #0]
 80024f6:	609a      	str	r2, [r3, #8]
        buffer_skip_whitespace(input_buffer);
 80024f8:	6838      	ldr	r0, [r7, #0]
 80024fa:	f7ff fc9f 	bl	8001e3c <buffer_skip_whitespace>
        if (!parse_string(current_item, input_buffer))
 80024fe:	6839      	ldr	r1, [r7, #0]
 8002500:	6938      	ldr	r0, [r7, #16]
 8002502:	f7ff fb55 	bl	8001bb0 <parse_string>
 8002506:	4603      	mov	r3, r0
 8002508:	2b00      	cmp	r3, #0
 800250a:	d06c      	beq.n	80025e6 <parse_object+0x1da>
        {
            goto fail; /* failed to parse name */
        }
        buffer_skip_whitespace(input_buffer);
 800250c:	6838      	ldr	r0, [r7, #0]
 800250e:	f7ff fc95 	bl	8001e3c <buffer_skip_whitespace>

        /* swap valuestring and string, because we parsed the name */
        current_item->string = current_item->valuestring;
 8002512:	693b      	ldr	r3, [r7, #16]
 8002514:	691a      	ldr	r2, [r3, #16]
 8002516:	693b      	ldr	r3, [r7, #16]
 8002518:	621a      	str	r2, [r3, #32]
        current_item->valuestring = NULL;
 800251a:	693b      	ldr	r3, [r7, #16]
 800251c:	2200      	movs	r2, #0
 800251e:	611a      	str	r2, [r3, #16]

        if (cannot_access_at_index(input_buffer, 0) || (buffer_at_offset(input_buffer)[0] != ':'))
 8002520:	683b      	ldr	r3, [r7, #0]
 8002522:	2b00      	cmp	r3, #0
 8002524:	d061      	beq.n	80025ea <parse_object+0x1de>
 8002526:	683b      	ldr	r3, [r7, #0]
 8002528:	689a      	ldr	r2, [r3, #8]
 800252a:	683b      	ldr	r3, [r7, #0]
 800252c:	685b      	ldr	r3, [r3, #4]
 800252e:	429a      	cmp	r2, r3
 8002530:	d25b      	bcs.n	80025ea <parse_object+0x1de>
 8002532:	683b      	ldr	r3, [r7, #0]
 8002534:	681a      	ldr	r2, [r3, #0]
 8002536:	683b      	ldr	r3, [r7, #0]
 8002538:	689b      	ldr	r3, [r3, #8]
 800253a:	4413      	add	r3, r2
 800253c:	781b      	ldrb	r3, [r3, #0]
 800253e:	2b3a      	cmp	r3, #58	; 0x3a
 8002540:	d153      	bne.n	80025ea <parse_object+0x1de>
        {
            goto fail; /* invalid object */
        }

        /* parse the value */
        input_buffer->offset++;
 8002542:	683b      	ldr	r3, [r7, #0]
 8002544:	689b      	ldr	r3, [r3, #8]
 8002546:	1c5a      	adds	r2, r3, #1
 8002548:	683b      	ldr	r3, [r7, #0]
 800254a:	609a      	str	r2, [r3, #8]
        buffer_skip_whitespace(input_buffer);
 800254c:	6838      	ldr	r0, [r7, #0]
 800254e:	f7ff fc75 	bl	8001e3c <buffer_skip_whitespace>
        if (!parse_value(current_item, input_buffer))
 8002552:	6839      	ldr	r1, [r7, #0]
 8002554:	6938      	ldr	r0, [r7, #16]
 8002556:	f7ff fda9 	bl	80020ac <parse_value>
 800255a:	4603      	mov	r3, r0
 800255c:	2b00      	cmp	r3, #0
 800255e:	d046      	beq.n	80025ee <parse_object+0x1e2>
        {
            goto fail; /* failed to parse value */
        }
        buffer_skip_whitespace(input_buffer);
 8002560:	6838      	ldr	r0, [r7, #0]
 8002562:	f7ff fc6b 	bl	8001e3c <buffer_skip_whitespace>
    }
    while (can_access_at_index(input_buffer, 0) && (buffer_at_offset(input_buffer)[0] == ','));
 8002566:	683b      	ldr	r3, [r7, #0]
 8002568:	2b00      	cmp	r3, #0
 800256a:	d00d      	beq.n	8002588 <parse_object+0x17c>
 800256c:	683b      	ldr	r3, [r7, #0]
 800256e:	689a      	ldr	r2, [r3, #8]
 8002570:	683b      	ldr	r3, [r7, #0]
 8002572:	685b      	ldr	r3, [r3, #4]
 8002574:	429a      	cmp	r2, r3
 8002576:	d207      	bcs.n	8002588 <parse_object+0x17c>
 8002578:	683b      	ldr	r3, [r7, #0]
 800257a:	681a      	ldr	r2, [r3, #0]
 800257c:	683b      	ldr	r3, [r7, #0]
 800257e:	689b      	ldr	r3, [r3, #8]
 8002580:	4413      	add	r3, r2
 8002582:	781b      	ldrb	r3, [r3, #0]
 8002584:	2b2c      	cmp	r3, #44	; 0x2c
 8002586:	d098      	beq.n	80024ba <parse_object+0xae>

    if (cannot_access_at_index(input_buffer, 0) || (buffer_at_offset(input_buffer)[0] != '}'))
 8002588:	683b      	ldr	r3, [r7, #0]
 800258a:	2b00      	cmp	r3, #0
 800258c:	d031      	beq.n	80025f2 <parse_object+0x1e6>
 800258e:	683b      	ldr	r3, [r7, #0]
 8002590:	689a      	ldr	r2, [r3, #8]
 8002592:	683b      	ldr	r3, [r7, #0]
 8002594:	685b      	ldr	r3, [r3, #4]
 8002596:	429a      	cmp	r2, r3
 8002598:	d22b      	bcs.n	80025f2 <parse_object+0x1e6>
 800259a:	683b      	ldr	r3, [r7, #0]
 800259c:	681a      	ldr	r2, [r3, #0]
 800259e:	683b      	ldr	r3, [r7, #0]
 80025a0:	689b      	ldr	r3, [r3, #8]
 80025a2:	4413      	add	r3, r2
 80025a4:	781b      	ldrb	r3, [r3, #0]
 80025a6:	2b7d      	cmp	r3, #125	; 0x7d
 80025a8:	d123      	bne.n	80025f2 <parse_object+0x1e6>
    {
        goto fail; /* expected end of object */
    }

success:
 80025aa:	e000      	b.n	80025ae <parse_object+0x1a2>
        goto success; /* empty object */
 80025ac:	bf00      	nop
    input_buffer->depth--;
 80025ae:	683b      	ldr	r3, [r7, #0]
 80025b0:	68db      	ldr	r3, [r3, #12]
 80025b2:	1e5a      	subs	r2, r3, #1
 80025b4:	683b      	ldr	r3, [r7, #0]
 80025b6:	60da      	str	r2, [r3, #12]

    if (head != NULL) {
 80025b8:	697b      	ldr	r3, [r7, #20]
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	d002      	beq.n	80025c4 <parse_object+0x1b8>
        head->prev = current_item;
 80025be:	697b      	ldr	r3, [r7, #20]
 80025c0:	693a      	ldr	r2, [r7, #16]
 80025c2:	605a      	str	r2, [r3, #4]
    }

    item->type = cJSON_Object;
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	2240      	movs	r2, #64	; 0x40
 80025c8:	60da      	str	r2, [r3, #12]
    item->child = head;
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	697a      	ldr	r2, [r7, #20]
 80025ce:	609a      	str	r2, [r3, #8]

    input_buffer->offset++;
 80025d0:	683b      	ldr	r3, [r7, #0]
 80025d2:	689b      	ldr	r3, [r3, #8]
 80025d4:	1c5a      	adds	r2, r3, #1
 80025d6:	683b      	ldr	r3, [r7, #0]
 80025d8:	609a      	str	r2, [r3, #8]
    return true;
 80025da:	2301      	movs	r3, #1
 80025dc:	e011      	b.n	8002602 <parse_object+0x1f6>
        goto fail; /* not an object */
 80025de:	bf00      	nop
 80025e0:	e008      	b.n	80025f4 <parse_object+0x1e8>
            goto fail; /* allocation failure */
 80025e2:	bf00      	nop
 80025e4:	e006      	b.n	80025f4 <parse_object+0x1e8>
            goto fail; /* failed to parse name */
 80025e6:	bf00      	nop
 80025e8:	e004      	b.n	80025f4 <parse_object+0x1e8>
            goto fail; /* invalid object */
 80025ea:	bf00      	nop
 80025ec:	e002      	b.n	80025f4 <parse_object+0x1e8>
            goto fail; /* failed to parse value */
 80025ee:	bf00      	nop
 80025f0:	e000      	b.n	80025f4 <parse_object+0x1e8>
        goto fail; /* expected end of object */
 80025f2:	bf00      	nop

fail:
    if (head != NULL)
 80025f4:	697b      	ldr	r3, [r7, #20]
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d002      	beq.n	8002600 <parse_object+0x1f4>
    {
        cJSON_Delete(head);
 80025fa:	6978      	ldr	r0, [r7, #20]
 80025fc:	f7ff f84e 	bl	800169c <cJSON_Delete>
    }

    return false;
 8002600:	2300      	movs	r3, #0
}
 8002602:	4618      	mov	r0, r3
 8002604:	3718      	adds	r7, #24
 8002606:	46bd      	mov	sp, r7
 8002608:	bd80      	pop	{r7, pc}

0800260a <cJSON_GetArraySize>:
    return true;
}

/* Get Array size/item / object item. */
CJSON_PUBLIC(int) cJSON_GetArraySize(const cJSON *array)
{
 800260a:	b480      	push	{r7}
 800260c:	b085      	sub	sp, #20
 800260e:	af00      	add	r7, sp, #0
 8002610:	6078      	str	r0, [r7, #4]
    cJSON *child = NULL;
 8002612:	2300      	movs	r3, #0
 8002614:	60fb      	str	r3, [r7, #12]
    size_t size = 0;
 8002616:	2300      	movs	r3, #0
 8002618:	60bb      	str	r3, [r7, #8]

    if (array == NULL)
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	2b00      	cmp	r3, #0
 800261e:	d101      	bne.n	8002624 <cJSON_GetArraySize+0x1a>
    {
        return 0;
 8002620:	2300      	movs	r3, #0
 8002622:	e00d      	b.n	8002640 <cJSON_GetArraySize+0x36>
    }

    child = array->child;
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	689b      	ldr	r3, [r3, #8]
 8002628:	60fb      	str	r3, [r7, #12]

    while(child != NULL)
 800262a:	e005      	b.n	8002638 <cJSON_GetArraySize+0x2e>
    {
        size++;
 800262c:	68bb      	ldr	r3, [r7, #8]
 800262e:	3301      	adds	r3, #1
 8002630:	60bb      	str	r3, [r7, #8]
        child = child->next;
 8002632:	68fb      	ldr	r3, [r7, #12]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	60fb      	str	r3, [r7, #12]
    while(child != NULL)
 8002638:	68fb      	ldr	r3, [r7, #12]
 800263a:	2b00      	cmp	r3, #0
 800263c:	d1f6      	bne.n	800262c <cJSON_GetArraySize+0x22>
    }

    /* FIXME: Can overflow here. Cannot be fixed without breaking the API */

    return (int)size;
 800263e:	68bb      	ldr	r3, [r7, #8]
}
 8002640:	4618      	mov	r0, r3
 8002642:	3714      	adds	r7, #20
 8002644:	46bd      	mov	sp, r7
 8002646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800264a:	4770      	bx	lr

0800264c <get_array_item>:

static cJSON* get_array_item(const cJSON *array, size_t index)
{
 800264c:	b480      	push	{r7}
 800264e:	b085      	sub	sp, #20
 8002650:	af00      	add	r7, sp, #0
 8002652:	6078      	str	r0, [r7, #4]
 8002654:	6039      	str	r1, [r7, #0]
    cJSON *current_child = NULL;
 8002656:	2300      	movs	r3, #0
 8002658:	60fb      	str	r3, [r7, #12]

    if (array == NULL)
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	2b00      	cmp	r3, #0
 800265e:	d101      	bne.n	8002664 <get_array_item+0x18>
    {
        return NULL;
 8002660:	2300      	movs	r3, #0
 8002662:	e010      	b.n	8002686 <get_array_item+0x3a>
    }

    current_child = array->child;
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	689b      	ldr	r3, [r3, #8]
 8002668:	60fb      	str	r3, [r7, #12]
    while ((current_child != NULL) && (index > 0))
 800266a:	e005      	b.n	8002678 <get_array_item+0x2c>
    {
        index--;
 800266c:	683b      	ldr	r3, [r7, #0]
 800266e:	3b01      	subs	r3, #1
 8002670:	603b      	str	r3, [r7, #0]
        current_child = current_child->next;
 8002672:	68fb      	ldr	r3, [r7, #12]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	60fb      	str	r3, [r7, #12]
    while ((current_child != NULL) && (index > 0))
 8002678:	68fb      	ldr	r3, [r7, #12]
 800267a:	2b00      	cmp	r3, #0
 800267c:	d002      	beq.n	8002684 <get_array_item+0x38>
 800267e:	683b      	ldr	r3, [r7, #0]
 8002680:	2b00      	cmp	r3, #0
 8002682:	d1f3      	bne.n	800266c <get_array_item+0x20>
    }

    return current_child;
 8002684:	68fb      	ldr	r3, [r7, #12]
}
 8002686:	4618      	mov	r0, r3
 8002688:	3714      	adds	r7, #20
 800268a:	46bd      	mov	sp, r7
 800268c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002690:	4770      	bx	lr

08002692 <cJSON_GetArrayItem>:

CJSON_PUBLIC(cJSON *) cJSON_GetArrayItem(const cJSON *array, int index)
{
 8002692:	b580      	push	{r7, lr}
 8002694:	b082      	sub	sp, #8
 8002696:	af00      	add	r7, sp, #0
 8002698:	6078      	str	r0, [r7, #4]
 800269a:	6039      	str	r1, [r7, #0]
    if (index < 0)
 800269c:	683b      	ldr	r3, [r7, #0]
 800269e:	2b00      	cmp	r3, #0
 80026a0:	da01      	bge.n	80026a6 <cJSON_GetArrayItem+0x14>
    {
        return NULL;
 80026a2:	2300      	movs	r3, #0
 80026a4:	e005      	b.n	80026b2 <cJSON_GetArrayItem+0x20>
    }

    return get_array_item(array, (size_t)index);
 80026a6:	683b      	ldr	r3, [r7, #0]
 80026a8:	4619      	mov	r1, r3
 80026aa:	6878      	ldr	r0, [r7, #4]
 80026ac:	f7ff ffce 	bl	800264c <get_array_item>
 80026b0:	4603      	mov	r3, r0
}
 80026b2:	4618      	mov	r0, r3
 80026b4:	3708      	adds	r7, #8
 80026b6:	46bd      	mov	sp, r7
 80026b8:	bd80      	pop	{r7, pc}

080026ba <get_object_item>:

static cJSON *get_object_item(const cJSON * const object, const char * const name, const cJSON_bool case_sensitive)
{
 80026ba:	b580      	push	{r7, lr}
 80026bc:	b086      	sub	sp, #24
 80026be:	af00      	add	r7, sp, #0
 80026c0:	60f8      	str	r0, [r7, #12]
 80026c2:	60b9      	str	r1, [r7, #8]
 80026c4:	607a      	str	r2, [r7, #4]
    cJSON *current_element = NULL;
 80026c6:	2300      	movs	r3, #0
 80026c8:	617b      	str	r3, [r7, #20]

    if ((object == NULL) || (name == NULL))
 80026ca:	68fb      	ldr	r3, [r7, #12]
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	d002      	beq.n	80026d6 <get_object_item+0x1c>
 80026d0:	68bb      	ldr	r3, [r7, #8]
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d101      	bne.n	80026da <get_object_item+0x20>
    {
        return NULL;
 80026d6:	2300      	movs	r3, #0
 80026d8:	e033      	b.n	8002742 <get_object_item+0x88>
    }

    current_element = object->child;
 80026da:	68fb      	ldr	r3, [r7, #12]
 80026dc:	689b      	ldr	r3, [r3, #8]
 80026de:	617b      	str	r3, [r7, #20]
    if (case_sensitive)
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d017      	beq.n	8002716 <get_object_item+0x5c>
    {
        while ((current_element != NULL) && (current_element->string != NULL) && (strcmp(name, current_element->string) != 0))
 80026e6:	e002      	b.n	80026ee <get_object_item+0x34>
        {
            current_element = current_element->next;
 80026e8:	697b      	ldr	r3, [r7, #20]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	617b      	str	r3, [r7, #20]
        while ((current_element != NULL) && (current_element->string != NULL) && (strcmp(name, current_element->string) != 0))
 80026ee:	697b      	ldr	r3, [r7, #20]
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	d01c      	beq.n	800272e <get_object_item+0x74>
 80026f4:	697b      	ldr	r3, [r7, #20]
 80026f6:	6a1b      	ldr	r3, [r3, #32]
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	d018      	beq.n	800272e <get_object_item+0x74>
 80026fc:	697b      	ldr	r3, [r7, #20]
 80026fe:	6a1b      	ldr	r3, [r3, #32]
 8002700:	4619      	mov	r1, r3
 8002702:	68b8      	ldr	r0, [r7, #8]
 8002704:	f7fd fd64 	bl	80001d0 <strcmp>
 8002708:	4603      	mov	r3, r0
 800270a:	2b00      	cmp	r3, #0
 800270c:	d1ec      	bne.n	80026e8 <get_object_item+0x2e>
 800270e:	e00e      	b.n	800272e <get_object_item+0x74>
    }
    else
    {
        while ((current_element != NULL) && (case_insensitive_strcmp((const unsigned char*)name, (const unsigned char*)(current_element->string)) != 0))
        {
            current_element = current_element->next;
 8002710:	697b      	ldr	r3, [r7, #20]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	617b      	str	r3, [r7, #20]
        while ((current_element != NULL) && (case_insensitive_strcmp((const unsigned char*)name, (const unsigned char*)(current_element->string)) != 0))
 8002716:	697b      	ldr	r3, [r7, #20]
 8002718:	2b00      	cmp	r3, #0
 800271a:	d008      	beq.n	800272e <get_object_item+0x74>
 800271c:	697b      	ldr	r3, [r7, #20]
 800271e:	6a1b      	ldr	r3, [r3, #32]
 8002720:	4619      	mov	r1, r3
 8002722:	68b8      	ldr	r0, [r7, #8]
 8002724:	f7fe ff38 	bl	8001598 <case_insensitive_strcmp>
 8002728:	4603      	mov	r3, r0
 800272a:	2b00      	cmp	r3, #0
 800272c:	d1f0      	bne.n	8002710 <get_object_item+0x56>
        }
    }

    if ((current_element == NULL) || (current_element->string == NULL)) {
 800272e:	697b      	ldr	r3, [r7, #20]
 8002730:	2b00      	cmp	r3, #0
 8002732:	d003      	beq.n	800273c <get_object_item+0x82>
 8002734:	697b      	ldr	r3, [r7, #20]
 8002736:	6a1b      	ldr	r3, [r3, #32]
 8002738:	2b00      	cmp	r3, #0
 800273a:	d101      	bne.n	8002740 <get_object_item+0x86>
        return NULL;
 800273c:	2300      	movs	r3, #0
 800273e:	e000      	b.n	8002742 <get_object_item+0x88>
    }

    return current_element;
 8002740:	697b      	ldr	r3, [r7, #20]
}
 8002742:	4618      	mov	r0, r3
 8002744:	3718      	adds	r7, #24
 8002746:	46bd      	mov	sp, r7
 8002748:	bd80      	pop	{r7, pc}

0800274a <cJSON_GetObjectItem>:

CJSON_PUBLIC(cJSON *) cJSON_GetObjectItem(const cJSON * const object, const char * const string)
{
 800274a:	b580      	push	{r7, lr}
 800274c:	b082      	sub	sp, #8
 800274e:	af00      	add	r7, sp, #0
 8002750:	6078      	str	r0, [r7, #4]
 8002752:	6039      	str	r1, [r7, #0]
    return get_object_item(object, string, false);
 8002754:	2200      	movs	r2, #0
 8002756:	6839      	ldr	r1, [r7, #0]
 8002758:	6878      	ldr	r0, [r7, #4]
 800275a:	f7ff ffae 	bl	80026ba <get_object_item>
 800275e:	4603      	mov	r3, r0
}
 8002760:	4618      	mov	r0, r3
 8002762:	3708      	adds	r7, #8
 8002764:	46bd      	mov	sp, r7
 8002766:	bd80      	pop	{r7, pc}

08002768 <__io_putchar>:
#ifdef __GNUC__
#define PUTCHAR_PROTOTYPE int __io_putchar(int ch)
#else
#define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *stream)
#endif
PUTCHAR_PROTOTYPE {
 8002768:	b580      	push	{r7, lr}
 800276a:	b082      	sub	sp, #8
 800276c:	af00      	add	r7, sp, #0
 800276e:	6078      	str	r0, [r7, #4]
    HAL_UART_Transmit(&huart1, &ch, 1, 1000);  // 发送串口，不同的单片机函数和串口命名不同，替换对于的函数串口名字即可实现不同库和不同单片机的重定向了
 8002770:	1d39      	adds	r1, r7, #4
 8002772:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002776:	2201      	movs	r2, #1
 8002778:	4803      	ldr	r0, [pc, #12]	; (8002788 <__io_putchar+0x20>)
 800277a:	f005 fd73 	bl	8008264 <HAL_UART_Transmit>
    return ch;
 800277e:	687b      	ldr	r3, [r7, #4]
}
 8002780:	4618      	mov	r0, r3
 8002782:	3708      	adds	r7, #8
 8002784:	46bd      	mov	sp, r7
 8002786:	bd80      	pop	{r7, pc}
 8002788:	200014c0 	.word	0x200014c0

0800278c <page_init>:
    HOME_PAGE,
    0,
    NULL,
    {&mainMenu}};

void page_init() {
 800278c:	b480      	push	{r7}
 800278e:	af00      	add	r7, sp, #0
    mainMenu.parent = &homeScreen;
 8002790:	4b1c      	ldr	r3, [pc, #112]	; (8002804 <page_init+0x78>)
 8002792:	4a1d      	ldr	r2, [pc, #116]	; (8002808 <page_init+0x7c>)
 8002794:	f8c3 20fc 	str.w	r2, [r3, #252]	; 0xfc
    messageHome.parent = settingPage.parent = &mainMenu;
 8002798:	4b1c      	ldr	r3, [pc, #112]	; (800280c <page_init+0x80>)
 800279a:	4a1a      	ldr	r2, [pc, #104]	; (8002804 <page_init+0x78>)
 800279c:	f8c3 20fc 	str.w	r2, [r3, #252]	; 0xfc
 80027a0:	4b1a      	ldr	r3, [pc, #104]	; (800280c <page_init+0x80>)
 80027a2:	f8d3 30fc 	ldr.w	r3, [r3, #252]	; 0xfc
 80027a6:	4a1a      	ldr	r2, [pc, #104]	; (8002810 <page_init+0x84>)
 80027a8:	f8c2 30fc 	str.w	r3, [r2, #252]	; 0xfc
    sendMessagePage.parent = inboxPage.parent = outboxPage.parent = &messageHome;
 80027ac:	4b19      	ldr	r3, [pc, #100]	; (8002814 <page_init+0x88>)
 80027ae:	4a18      	ldr	r2, [pc, #96]	; (8002810 <page_init+0x84>)
 80027b0:	f8c3 20fc 	str.w	r2, [r3, #252]	; 0xfc
 80027b4:	4b17      	ldr	r3, [pc, #92]	; (8002814 <page_init+0x88>)
 80027b6:	f8d3 30fc 	ldr.w	r3, [r3, #252]	; 0xfc
 80027ba:	4a17      	ldr	r2, [pc, #92]	; (8002818 <page_init+0x8c>)
 80027bc:	f8c2 30fc 	str.w	r3, [r2, #252]	; 0xfc
 80027c0:	4b15      	ldr	r3, [pc, #84]	; (8002818 <page_init+0x8c>)
 80027c2:	f8d3 30fc 	ldr.w	r3, [r3, #252]	; 0xfc
 80027c6:	4a15      	ldr	r2, [pc, #84]	; (800281c <page_init+0x90>)
 80027c8:	f8c2 30fc 	str.w	r3, [r2, #252]	; 0xfc
    setIDPage.parent = calibrateTimePage.parent = setTimePage.parent = setServerIPPage.parent = &settingPage;
 80027cc:	4b14      	ldr	r3, [pc, #80]	; (8002820 <page_init+0x94>)
 80027ce:	4a0f      	ldr	r2, [pc, #60]	; (800280c <page_init+0x80>)
 80027d0:	f8c3 20fc 	str.w	r2, [r3, #252]	; 0xfc
 80027d4:	4b12      	ldr	r3, [pc, #72]	; (8002820 <page_init+0x94>)
 80027d6:	f8d3 30fc 	ldr.w	r3, [r3, #252]	; 0xfc
 80027da:	4a12      	ldr	r2, [pc, #72]	; (8002824 <page_init+0x98>)
 80027dc:	f8c2 30fc 	str.w	r3, [r2, #252]	; 0xfc
 80027e0:	4b10      	ldr	r3, [pc, #64]	; (8002824 <page_init+0x98>)
 80027e2:	f8d3 30fc 	ldr.w	r3, [r3, #252]	; 0xfc
 80027e6:	4a10      	ldr	r2, [pc, #64]	; (8002828 <page_init+0x9c>)
 80027e8:	f8c2 30fc 	str.w	r3, [r2, #252]	; 0xfc
 80027ec:	4b0e      	ldr	r3, [pc, #56]	; (8002828 <page_init+0x9c>)
 80027ee:	f8d3 30fc 	ldr.w	r3, [r3, #252]	; 0xfc
 80027f2:	4a0e      	ldr	r2, [pc, #56]	; (800282c <page_init+0xa0>)
 80027f4:	f8c2 30fc 	str.w	r3, [r2, #252]	; 0xfc
}
 80027f8:	bf00      	nop
 80027fa:	46bd      	mov	sp, r7
 80027fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002800:	4770      	bx	lr
 8002802:	bf00      	nop
 8002804:	20000e28 	.word	0x20000e28
 8002808:	20000f64 	.word	0x20000f64
 800280c:	20000cec 	.word	0x20000cec
 8002810:	200007fc 	.word	0x200007fc
 8002814:	200006c0 	.word	0x200006c0
 8002818:	20000584 	.word	0x20000584
 800281c:	20000448 	.word	0x20000448
 8002820:	20000bb0 	.word	0x20000bb0
 8002824:	20000a74 	.word	0x20000a74
 8002828:	2000030c 	.word	0x2000030c
 800282c:	20000938 	.word	0x20000938

08002830 <page_back>:

void page_back() {
 8002830:	b580      	push	{r7, lr}
 8002832:	af00      	add	r7, sp, #0
    if (currentPage->parent != NULL) {
 8002834:	4b07      	ldr	r3, [pc, #28]	; (8002854 <page_back+0x24>)
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	f8d3 30fc 	ldr.w	r3, [r3, #252]	; 0xfc
 800283c:	2b00      	cmp	r3, #0
 800283e:	d006      	beq.n	800284e <page_back+0x1e>
        show_page(currentPage->parent);
 8002840:	4b04      	ldr	r3, [pc, #16]	; (8002854 <page_back+0x24>)
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	f8d3 30fc 	ldr.w	r3, [r3, #252]	; 0xfc
 8002848:	4618      	mov	r0, r3
 800284a:	f000 f805 	bl	8002858 <show_page>
    }
}
 800284e:	bf00      	nop
 8002850:	bd80      	pop	{r7, pc}
 8002852:	bf00      	nop
 8002854:	20001d7c 	.word	0x20001d7c

08002858 <show_page>:

void show_page(struct page *page) {
 8002858:	b580      	push	{r7, lr}
 800285a:	b082      	sub	sp, #8
 800285c:	af00      	add	r7, sp, #0
 800285e:	6078      	str	r0, [r7, #4]
    if (page == NULL) return;
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	2b00      	cmp	r3, #0
 8002864:	d05a      	beq.n	800291c <show_page+0xc4>
    switch (page->pageTypeID) {
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	f893 30f7 	ldrb.w	r3, [r3, #247]	; 0xf7
 800286c:	2b0a      	cmp	r3, #10
 800286e:	d856      	bhi.n	800291e <show_page+0xc6>
 8002870:	a201      	add	r2, pc, #4	; (adr r2, 8002878 <show_page+0x20>)
 8002872:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002876:	bf00      	nop
 8002878:	080028a5 	.word	0x080028a5
 800287c:	080028b1 	.word	0x080028b1
 8002880:	080028bf 	.word	0x080028bf
 8002884:	080028cb 	.word	0x080028cb
 8002888:	080028d7 	.word	0x080028d7
 800288c:	080028e3 	.word	0x080028e3
 8002890:	0800291f 	.word	0x0800291f
 8002894:	080028fd 	.word	0x080028fd
 8002898:	08002909 	.word	0x08002909
 800289c:	08002915 	.word	0x08002915
 80028a0:	080028ef 	.word	0x080028ef
        case HOME_PAGE:
            show_homeScreen();
 80028a4:	f000 fc16 	bl	80030d4 <show_homeScreen>
            currentPage = page;
 80028a8:	4a1e      	ldr	r2, [pc, #120]	; (8002924 <show_page+0xcc>)
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	6013      	str	r3, [r2, #0]
            break;
 80028ae:	e036      	b.n	800291e <show_page+0xc6>
        case MENU_PAGE:
            show_menu(page);
 80028b0:	6878      	ldr	r0, [r7, #4]
 80028b2:	f001 f8f3 	bl	8003a9c <show_menu>
            currentPage = page;
 80028b6:	4a1b      	ldr	r2, [pc, #108]	; (8002924 <show_page+0xcc>)
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	6013      	str	r3, [r2, #0]
            break;
 80028bc:	e02f      	b.n	800291e <show_page+0xc6>
        case MSG_SENDER_PAGE:
            currentPage = page;
 80028be:	4a19      	ldr	r2, [pc, #100]	; (8002924 <show_page+0xcc>)
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	6013      	str	r3, [r2, #0]
            show_msg_sender();
 80028c4:	f000 fe66 	bl	8003594 <show_msg_sender>
            break;
 80028c8:	e029      	b.n	800291e <show_page+0xc6>
        case MSG_INBOX_PAGE:
            currentPage = page;
 80028ca:	4a16      	ldr	r2, [pc, #88]	; (8002924 <show_page+0xcc>)
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	6013      	str	r3, [r2, #0]
            get_msg_inbox();
 80028d0:	f000 ff7c 	bl	80037cc <get_msg_inbox>
            break;
 80028d4:	e023      	b.n	800291e <show_page+0xc6>
        case MSG_OUTBOX_PAGE:
            currentPage = page;
 80028d6:	4a13      	ldr	r2, [pc, #76]	; (8002924 <show_page+0xcc>)
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	6013      	str	r3, [r2, #0]
            get_msg_outbox();
 80028dc:	f000 ff96 	bl	800380c <get_msg_outbox>
            break;
 80028e0:	e01d      	b.n	800291e <show_page+0xc6>
        case CAL_TIME_PAGE:
            currentPage = page;
 80028e2:	4a10      	ldr	r2, [pc, #64]	; (8002924 <show_page+0xcc>)
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	6013      	str	r3, [r2, #0]
            show_cal_time();
 80028e8:	f001 f93a 	bl	8003b60 <show_cal_time>
            break;
 80028ec:	e017      	b.n	800291e <show_page+0xc6>
        case SETTING_PAGE:
            currentPage = page;
 80028ee:	4a0d      	ldr	r2, [pc, #52]	; (8002924 <show_page+0xcc>)
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	6013      	str	r3, [r2, #0]
            show_menu(page);
 80028f4:	6878      	ldr	r0, [r7, #4]
 80028f6:	f001 f8d1 	bl	8003a9c <show_menu>
            break;
 80028fa:	e010      	b.n	800291e <show_page+0xc6>
        case SET_NUMBER_PAGE:
            currentPage = page;
 80028fc:	4a09      	ldr	r2, [pc, #36]	; (8002924 <show_page+0xcc>)
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	6013      	str	r3, [r2, #0]
            show_set_id();
 8002902:	f000 f8db 	bl	8002abc <show_set_id>
            break;
 8002906:	e00a      	b.n	800291e <show_page+0xc6>
        case SET_TIME_PAGE:
            currentPage = page;
 8002908:	4a06      	ldr	r2, [pc, #24]	; (8002924 <show_page+0xcc>)
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	6013      	str	r3, [r2, #0]
            show_set_time();
 800290e:	f000 f9c7 	bl	8002ca0 <show_set_time>
            break;
 8002912:	e004      	b.n	800291e <show_page+0xc6>
        case SET_SERVER_IP_PAGE:
            currentPage = page;
 8002914:	4a03      	ldr	r2, [pc, #12]	; (8002924 <show_page+0xcc>)
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	6013      	str	r3, [r2, #0]
            // show_set_server_ip();
            break;
 800291a:	e000      	b.n	800291e <show_page+0xc6>
    if (page == NULL) return;
 800291c:	bf00      	nop
    }
}
 800291e:	3708      	adds	r7, #8
 8002920:	46bd      	mov	sp, r7
 8002922:	bd80      	pop	{r7, pc}
 8002924:	20001d7c 	.word	0x20001d7c

08002928 <HAL_UART_RxCpltCallback>:

/*
    Callback functions
*/
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8002928:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800292c:	f6ad 0d08 	subw	sp, sp, #2056	; 0x808
 8002930:	af00      	add	r7, sp, #0
 8002932:	f607 0308 	addw	r3, r7, #2056	; 0x808
 8002936:	f6a3 0304 	subw	r3, r3, #2052	; 0x804
 800293a:	6018      	str	r0, [r3, #0]
    if (Uart1_Rx_Cnt >= 2047)  // 溢出判断
 800293c:	4b47      	ldr	r3, [pc, #284]	; (8002a5c <HAL_UART_RxCpltCallback+0x134>)
 800293e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002942:	f240 71ff 	movw	r1, #2047	; 0x7ff
 8002946:	428a      	cmp	r2, r1
 8002948:	f173 0300 	sbcs.w	r3, r3, #0
 800294c:	d314      	bcc.n	8002978 <HAL_UART_RxCpltCallback+0x50>
    {
        Uart1_Rx_Cnt = 0;
 800294e:	4943      	ldr	r1, [pc, #268]	; (8002a5c <HAL_UART_RxCpltCallback+0x134>)
 8002950:	f04f 0200 	mov.w	r2, #0
 8002954:	f04f 0300 	mov.w	r3, #0
 8002958:	e9c1 2300 	strd	r2, r3, [r1]
        memset(Uart1_RxBuff, 0x00, sizeof(Uart1_RxBuff));
 800295c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002960:	2100      	movs	r1, #0
 8002962:	483f      	ldr	r0, [pc, #252]	; (8002a60 <HAL_UART_RxCpltCallback+0x138>)
 8002964:	f006 ff66 	bl	8009834 <memset>
        HAL_UART_Transmit(&huart1, (uint8_t *)&cAlmStr, sizeof(cAlmStr), 0xFFFF);
 8002968:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800296c:	221a      	movs	r2, #26
 800296e:	493d      	ldr	r1, [pc, #244]	; (8002a64 <HAL_UART_RxCpltCallback+0x13c>)
 8002970:	483d      	ldr	r0, [pc, #244]	; (8002a68 <HAL_UART_RxCpltCallback+0x140>)
 8002972:	f005 fc77 	bl	8008264 <HAL_UART_Transmit>
 8002976:	e066      	b.n	8002a46 <HAL_UART_RxCpltCallback+0x11e>
    } else {
        Uart1_RxBuff[Uart1_Rx_Cnt++] = aRxBuffer;
 8002978:	4b38      	ldr	r3, [pc, #224]	; (8002a5c <HAL_UART_RxCpltCallback+0x134>)
 800297a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800297e:	f112 0a01 	adds.w	sl, r2, #1
 8002982:	f143 0b00 	adc.w	fp, r3, #0
 8002986:	4935      	ldr	r1, [pc, #212]	; (8002a5c <HAL_UART_RxCpltCallback+0x134>)
 8002988:	e9c1 ab00 	strd	sl, fp, [r1]
 800298c:	4937      	ldr	r1, [pc, #220]	; (8002a6c <HAL_UART_RxCpltCallback+0x144>)
 800298e:	7808      	ldrb	r0, [r1, #0]
 8002990:	4933      	ldr	r1, [pc, #204]	; (8002a60 <HAL_UART_RxCpltCallback+0x138>)
 8002992:	188b      	adds	r3, r1, r2
 8002994:	4602      	mov	r2, r0
 8002996:	701a      	strb	r2, [r3, #0]
        if ((Uart1_RxBuff[Uart1_Rx_Cnt - 1] == 0x0A) && (Uart1_RxBuff[Uart1_Rx_Cnt - 2] == 0x0D)) {
 8002998:	4b30      	ldr	r3, [pc, #192]	; (8002a5c <HAL_UART_RxCpltCallback+0x134>)
 800299a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800299e:	f112 38ff 	adds.w	r8, r2, #4294967295	; 0xffffffff
 80029a2:	f143 39ff 	adc.w	r9, r3, #4294967295	; 0xffffffff
 80029a6:	4b2e      	ldr	r3, [pc, #184]	; (8002a60 <HAL_UART_RxCpltCallback+0x138>)
 80029a8:	4443      	add	r3, r8
 80029aa:	781b      	ldrb	r3, [r3, #0]
 80029ac:	2b0a      	cmp	r3, #10
 80029ae:	d14a      	bne.n	8002a46 <HAL_UART_RxCpltCallback+0x11e>
 80029b0:	4b2a      	ldr	r3, [pc, #168]	; (8002a5c <HAL_UART_RxCpltCallback+0x134>)
 80029b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80029b6:	1e94      	subs	r4, r2, #2
 80029b8:	f143 35ff 	adc.w	r5, r3, #4294967295	; 0xffffffff
 80029bc:	4b28      	ldr	r3, [pc, #160]	; (8002a60 <HAL_UART_RxCpltCallback+0x138>)
 80029be:	4423      	add	r3, r4
 80029c0:	781b      	ldrb	r3, [r3, #0]
 80029c2:	2b0d      	cmp	r3, #13
 80029c4:	d13f      	bne.n	8002a46 <HAL_UART_RxCpltCallback+0x11e>
            Uart1_RxFlag = 1;
 80029c6:	4b2a      	ldr	r3, [pc, #168]	; (8002a70 <HAL_UART_RxCpltCallback+0x148>)
 80029c8:	2201      	movs	r2, #1
 80029ca:	701a      	strb	r2, [r3, #0]
            char res[2048] = {0};
 80029cc:	f607 0308 	addw	r3, r7, #2056	; 0x808
 80029d0:	f5a3 6300 	sub.w	r3, r3, #2048	; 0x800
 80029d4:	2200      	movs	r2, #0
 80029d6:	601a      	str	r2, [r3, #0]
 80029d8:	3304      	adds	r3, #4
 80029da:	f240 72fc 	movw	r2, #2044	; 0x7fc
 80029de:	2100      	movs	r1, #0
 80029e0:	4618      	mov	r0, r3
 80029e2:	f006 ff27 	bl	8009834 <memset>
            if (Uart1_RxBuff[0] == '>') {
 80029e6:	4b1e      	ldr	r3, [pc, #120]	; (8002a60 <HAL_UART_RxCpltCallback+0x138>)
 80029e8:	781b      	ldrb	r3, [r3, #0]
 80029ea:	2b3e      	cmp	r3, #62	; 0x3e
 80029ec:	d107      	bne.n	80029fe <HAL_UART_RxCpltCallback+0xd6>
                strcpy(res, Uart1_RxBuff + 1);
 80029ee:	4a21      	ldr	r2, [pc, #132]	; (8002a74 <HAL_UART_RxCpltCallback+0x14c>)
 80029f0:	f107 0308 	add.w	r3, r7, #8
 80029f4:	4611      	mov	r1, r2
 80029f6:	4618      	mov	r0, r3
 80029f8:	f007 f91b 	bl	8009c32 <strcpy>
 80029fc:	e005      	b.n	8002a0a <HAL_UART_RxCpltCallback+0xe2>
            } else {
                strcpy(res, Uart1_RxBuff);
 80029fe:	f107 0308 	add.w	r3, r7, #8
 8002a02:	4917      	ldr	r1, [pc, #92]	; (8002a60 <HAL_UART_RxCpltCallback+0x138>)
 8002a04:	4618      	mov	r0, r3
 8002a06:	f007 f914 	bl	8009c32 <strcpy>
            }
            memset(Uart1_RxBuff, 0x00, sizeof(Uart1_RxBuff));
 8002a0a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002a0e:	2100      	movs	r1, #0
 8002a10:	4813      	ldr	r0, [pc, #76]	; (8002a60 <HAL_UART_RxCpltCallback+0x138>)
 8002a12:	f006 ff0f 	bl	8009834 <memset>
            Uart1_Rx_Cnt = 0;
 8002a16:	4911      	ldr	r1, [pc, #68]	; (8002a5c <HAL_UART_RxCpltCallback+0x134>)
 8002a18:	f04f 0200 	mov.w	r2, #0
 8002a1c:	f04f 0300 	mov.w	r3, #0
 8002a20:	e9c1 2300 	strd	r2, r3, [r1]
            if (res[0] == '{') {
 8002a24:	f607 0308 	addw	r3, r7, #2056	; 0x808
 8002a28:	f5a3 6300 	sub.w	r3, r3, #2048	; 0x800
 8002a2c:	781b      	ldrb	r3, [r3, #0]
 8002a2e:	2b7b      	cmp	r3, #123	; 0x7b
 8002a30:	d109      	bne.n	8002a46 <HAL_UART_RxCpltCallback+0x11e>
                callBackArg = cJSON_Parse(res);
 8002a32:	f107 0308 	add.w	r3, r7, #8
 8002a36:	4618      	mov	r0, r3
 8002a38:	f7ff fb2a 	bl	8002090 <cJSON_Parse>
 8002a3c:	4603      	mov	r3, r0
 8002a3e:	4a0e      	ldr	r2, [pc, #56]	; (8002a78 <HAL_UART_RxCpltCallback+0x150>)
 8002a40:	6013      	str	r3, [r2, #0]
                call_back();
 8002a42:	f001 fa1d 	bl	8003e80 <call_back>
            }
        }
    }

    HAL_UART_Receive_IT(&huart1, (uint8_t *)&aRxBuffer, 1);
 8002a46:	2201      	movs	r2, #1
 8002a48:	4908      	ldr	r1, [pc, #32]	; (8002a6c <HAL_UART_RxCpltCallback+0x144>)
 8002a4a:	4807      	ldr	r0, [pc, #28]	; (8002a68 <HAL_UART_RxCpltCallback+0x140>)
 8002a4c:	f005 fc9e 	bl	800838c <HAL_UART_Receive_IT>
}
 8002a50:	bf00      	nop
 8002a52:	f607 0708 	addw	r7, r7, #2056	; 0x808
 8002a56:	46bd      	mov	sp, r7
 8002a58:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002a5c:	20001d48 	.word	0x20001d48
 8002a60:	20001544 	.word	0x20001544
 8002a64:	2000000c 	.word	0x2000000c
 8002a68:	200014c0 	.word	0x200014c0
 8002a6c:	20001d44 	.word	0x20001d44
 8002a70:	20001d50 	.word	0x20001d50
 8002a74:	20001545 	.word	0x20001545
 8002a78:	20001d6c 	.word	0x20001d6c

08002a7c <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8002a7c:	b580      	push	{r7, lr}
 8002a7e:	b082      	sub	sp, #8
 8002a80:	af00      	add	r7, sp, #0
 8002a82:	6078      	str	r0, [r7, #4]
    if (htim->Instance == TIM7) {
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	4a0a      	ldr	r2, [pc, #40]	; (8002ab4 <HAL_TIM_PeriodElapsedCallback+0x38>)
 8002a8a:	4293      	cmp	r3, r2
 8002a8c:	d10e      	bne.n	8002aac <HAL_TIM_PeriodElapsedCallback+0x30>
        TIM7_Cnt1++;
 8002a8e:	4b0a      	ldr	r3, [pc, #40]	; (8002ab8 <HAL_TIM_PeriodElapsedCallback+0x3c>)
 8002a90:	881b      	ldrh	r3, [r3, #0]
 8002a92:	3301      	adds	r3, #1
 8002a94:	b29a      	uxth	r2, r3
 8002a96:	4b08      	ldr	r3, [pc, #32]	; (8002ab8 <HAL_TIM_PeriodElapsedCallback+0x3c>)
 8002a98:	801a      	strh	r2, [r3, #0]
        if (TIM7_Cnt1 >= 30) {
 8002a9a:	4b07      	ldr	r3, [pc, #28]	; (8002ab8 <HAL_TIM_PeriodElapsedCallback+0x3c>)
 8002a9c:	881b      	ldrh	r3, [r3, #0]
 8002a9e:	2b1d      	cmp	r3, #29
 8002aa0:	d904      	bls.n	8002aac <HAL_TIM_PeriodElapsedCallback+0x30>
            TIM7_Cnt1 = 0;
 8002aa2:	4b05      	ldr	r3, [pc, #20]	; (8002ab8 <HAL_TIM_PeriodElapsedCallback+0x3c>)
 8002aa4:	2200      	movs	r2, #0
 8002aa6:	801a      	strh	r2, [r3, #0]
            reshow_time();
 8002aa8:	f000 faba 	bl	8003020 <reshow_time>
        }
    }
}
 8002aac:	bf00      	nop
 8002aae:	3708      	adds	r7, #8
 8002ab0:	46bd      	mov	sp, r7
 8002ab2:	bd80      	pop	{r7, pc}
 8002ab4:	40001400 	.word	0x40001400
 8002ab8:	20000026 	.word	0x20000026

08002abc <show_set_id>:

/*
    Settings
*/
void show_set_id() {
 8002abc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002abe:	b097      	sub	sp, #92	; 0x5c
 8002ac0:	af10      	add	r7, sp, #64	; 0x40
    OLED_ClearAll();
 8002ac2:	f7fe fbd9 	bl	8001278 <OLED_ClearAll>
    show_title_time();
 8002ac6:	f000 fa57 	bl	8002f78 <show_title_time>
    OLED_Printf(0, 1, 8, 1, "3-digit ID:");
 8002aca:	4b50      	ldr	r3, [pc, #320]	; (8002c0c <show_set_id+0x150>)
 8002acc:	9300      	str	r3, [sp, #0]
 8002ace:	2301      	movs	r3, #1
 8002ad0:	2208      	movs	r2, #8
 8002ad2:	2101      	movs	r1, #1
 8002ad4:	2000      	movs	r0, #0
 8002ad6:	f7fe fcef 	bl	80014b8 <OLED_Printf>
    OLED_Printf(0, 2, 16, 1, "___");
 8002ada:	4b4d      	ldr	r3, [pc, #308]	; (8002c10 <show_set_id+0x154>)
 8002adc:	9300      	str	r3, [sp, #0]
 8002ade:	2301      	movs	r3, #1
 8002ae0:	2210      	movs	r2, #16
 8002ae2:	2102      	movs	r1, #2
 8002ae4:	2000      	movs	r0, #0
 8002ae6:	f7fe fce7 	bl	80014b8 <OLED_Printf>
    char numbers[4] = "";
 8002aea:	2300      	movs	r3, #0
 8002aec:	607b      	str	r3, [r7, #4]
    int cursor = 0;
 8002aee:	2300      	movs	r3, #0
 8002af0:	617b      	str	r3, [r7, #20]
    while(1){
        char key = keypad_scan(htim2);
 8002af2:	4e48      	ldr	r6, [pc, #288]	; (8002c14 <show_set_id+0x158>)
 8002af4:	466d      	mov	r5, sp
 8002af6:	f106 0410 	add.w	r4, r6, #16
 8002afa:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002afc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002afe:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002b00:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002b02:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002b04:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002b06:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8002b0a:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 8002b0e:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8002b12:	f001 fd11 	bl	8004538 <keypad_scan>
 8002b16:	4603      	mov	r3, r0
 8002b18:	72fb      	strb	r3, [r7, #11]
        switch (key){
 8002b1a:	7afb      	ldrb	r3, [r7, #11]
 8002b1c:	2b23      	cmp	r3, #35	; 0x23
 8002b1e:	d02c      	beq.n	8002b7a <show_set_id+0xbe>
 8002b20:	2b2a      	cmp	r3, #42	; 0x2a
 8002b22:	d13a      	bne.n	8002b9a <show_set_id+0xde>
            case '*':
                if (cursor > 0){
 8002b24:	697b      	ldr	r3, [r7, #20]
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	dd65      	ble.n	8002bf6 <show_set_id+0x13a>
                    numbers[--cursor] = '\0';
 8002b2a:	697b      	ldr	r3, [r7, #20]
 8002b2c:	3b01      	subs	r3, #1
 8002b2e:	617b      	str	r3, [r7, #20]
 8002b30:	1d3a      	adds	r2, r7, #4
 8002b32:	697b      	ldr	r3, [r7, #20]
 8002b34:	4413      	add	r3, r2
 8002b36:	2200      	movs	r2, #0
 8002b38:	701a      	strb	r2, [r3, #0]
                    OLED_ClearLine(2);
 8002b3a:	2002      	movs	r0, #2
 8002b3c:	f7fe fbba 	bl	80012b4 <OLED_ClearLine>
                    OLED_Printf(0, 2, 16, 1, numbers);
 8002b40:	1d3b      	adds	r3, r7, #4
 8002b42:	9300      	str	r3, [sp, #0]
 8002b44:	2301      	movs	r3, #1
 8002b46:	2210      	movs	r2, #16
 8002b48:	2102      	movs	r1, #2
 8002b4a:	2000      	movs	r0, #0
 8002b4c:	f7fe fcb4 	bl	80014b8 <OLED_Printf>
                    for(int i = cursor; i < 3; i++){
 8002b50:	697b      	ldr	r3, [r7, #20]
 8002b52:	613b      	str	r3, [r7, #16]
 8002b54:	e00d      	b.n	8002b72 <show_set_id+0xb6>
                        OLED_Printf(8 * i, 2, 16, 1, "_");
 8002b56:	693b      	ldr	r3, [r7, #16]
 8002b58:	b2db      	uxtb	r3, r3
 8002b5a:	00db      	lsls	r3, r3, #3
 8002b5c:	b2d8      	uxtb	r0, r3
 8002b5e:	4b2e      	ldr	r3, [pc, #184]	; (8002c18 <show_set_id+0x15c>)
 8002b60:	9300      	str	r3, [sp, #0]
 8002b62:	2301      	movs	r3, #1
 8002b64:	2210      	movs	r2, #16
 8002b66:	2102      	movs	r1, #2
 8002b68:	f7fe fca6 	bl	80014b8 <OLED_Printf>
                    for(int i = cursor; i < 3; i++){
 8002b6c:	693b      	ldr	r3, [r7, #16]
 8002b6e:	3301      	adds	r3, #1
 8002b70:	613b      	str	r3, [r7, #16]
 8002b72:	693b      	ldr	r3, [r7, #16]
 8002b74:	2b02      	cmp	r3, #2
 8002b76:	ddee      	ble.n	8002b56 <show_set_id+0x9a>
                    }
                }
                break;
 8002b78:	e03d      	b.n	8002bf6 <show_set_id+0x13a>
            case '#':
                if(cursor < 3) break;
 8002b7a:	697b      	ldr	r3, [r7, #20]
 8002b7c:	2b02      	cmp	r3, #2
 8002b7e:	dd3c      	ble.n	8002bfa <show_set_id+0x13e>
                strcpy(ownID, numbers);
 8002b80:	1d3b      	adds	r3, r7, #4
 8002b82:	4619      	mov	r1, r3
 8002b84:	4825      	ldr	r0, [pc, #148]	; (8002c1c <show_set_id+0x160>)
 8002b86:	f007 f854 	bl	8009c32 <strcpy>
                show_page(currentPage->parent);
 8002b8a:	4b25      	ldr	r3, [pc, #148]	; (8002c20 <show_set_id+0x164>)
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	f8d3 30fc 	ldr.w	r3, [r3, #252]	; 0xfc
 8002b92:	4618      	mov	r0, r3
 8002b94:	f7ff fe60 	bl	8002858 <show_page>
                return;
 8002b98:	e035      	b.n	8002c06 <show_set_id+0x14a>
            default:
                if (key == 0) break;
 8002b9a:	7afb      	ldrb	r3, [r7, #11]
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	d02e      	beq.n	8002bfe <show_set_id+0x142>
                if (cursor < 3){
 8002ba0:	697b      	ldr	r3, [r7, #20]
 8002ba2:	2b02      	cmp	r3, #2
 8002ba4:	dc2d      	bgt.n	8002c02 <show_set_id+0x146>
                    numbers[cursor++] = key;
 8002ba6:	697b      	ldr	r3, [r7, #20]
 8002ba8:	1c5a      	adds	r2, r3, #1
 8002baa:	617a      	str	r2, [r7, #20]
 8002bac:	3318      	adds	r3, #24
 8002bae:	443b      	add	r3, r7
 8002bb0:	7afa      	ldrb	r2, [r7, #11]
 8002bb2:	f803 2c14 	strb.w	r2, [r3, #-20]
                    OLED_ClearLine(2);
 8002bb6:	2002      	movs	r0, #2
 8002bb8:	f7fe fb7c 	bl	80012b4 <OLED_ClearLine>
                    OLED_Printf(0, 2, 16, 1, numbers);
 8002bbc:	1d3b      	adds	r3, r7, #4
 8002bbe:	9300      	str	r3, [sp, #0]
 8002bc0:	2301      	movs	r3, #1
 8002bc2:	2210      	movs	r2, #16
 8002bc4:	2102      	movs	r1, #2
 8002bc6:	2000      	movs	r0, #0
 8002bc8:	f7fe fc76 	bl	80014b8 <OLED_Printf>
                    for(int i = cursor; i < 3; i++){
 8002bcc:	697b      	ldr	r3, [r7, #20]
 8002bce:	60fb      	str	r3, [r7, #12]
 8002bd0:	e00d      	b.n	8002bee <show_set_id+0x132>
                        OLED_Printf(8 * i, 2, 16, 1, "_");
 8002bd2:	68fb      	ldr	r3, [r7, #12]
 8002bd4:	b2db      	uxtb	r3, r3
 8002bd6:	00db      	lsls	r3, r3, #3
 8002bd8:	b2d8      	uxtb	r0, r3
 8002bda:	4b0f      	ldr	r3, [pc, #60]	; (8002c18 <show_set_id+0x15c>)
 8002bdc:	9300      	str	r3, [sp, #0]
 8002bde:	2301      	movs	r3, #1
 8002be0:	2210      	movs	r2, #16
 8002be2:	2102      	movs	r1, #2
 8002be4:	f7fe fc68 	bl	80014b8 <OLED_Printf>
                    for(int i = cursor; i < 3; i++){
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	3301      	adds	r3, #1
 8002bec:	60fb      	str	r3, [r7, #12]
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	2b02      	cmp	r3, #2
 8002bf2:	ddee      	ble.n	8002bd2 <show_set_id+0x116>
                    }
                }
                break;
 8002bf4:	e005      	b.n	8002c02 <show_set_id+0x146>
                break;
 8002bf6:	bf00      	nop
 8002bf8:	e77b      	b.n	8002af2 <show_set_id+0x36>
                if(cursor < 3) break;
 8002bfa:	bf00      	nop
 8002bfc:	e779      	b.n	8002af2 <show_set_id+0x36>
                if (key == 0) break;
 8002bfe:	bf00      	nop
 8002c00:	e777      	b.n	8002af2 <show_set_id+0x36>
                break;
 8002c02:	bf00      	nop
    while(1){
 8002c04:	e775      	b.n	8002af2 <show_set_id+0x36>
        }
    }
}
 8002c06:	371c      	adds	r7, #28
 8002c08:	46bd      	mov	sp, r7
 8002c0a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002c0c:	0800d50c 	.word	0x0800d50c
 8002c10:	0800d518 	.word	0x0800d518
 8002c14:	200013dc 	.word	0x200013dc
 8002c18:	0800d51c 	.word	0x0800d51c
 8002c1c:	20000034 	.word	0x20000034
 8002c20:	20001d7c 	.word	0x20001d7c

08002c24 <print_setting_time>:

void print_setting_time(char *_time, int cursor){
 8002c24:	b580      	push	{r7, lr}
 8002c26:	b086      	sub	sp, #24
 8002c28:	af02      	add	r7, sp, #8
 8002c2a:	6078      	str	r0, [r7, #4]
 8002c2c:	6039      	str	r1, [r7, #0]
    // _time: "00/00/00 00:00"
    OLED_ClearLine(2);
 8002c2e:	2002      	movs	r0, #2
 8002c30:	f7fe fb40 	bl	80012b4 <OLED_ClearLine>
    int len = 14;
 8002c34:	230e      	movs	r3, #14
 8002c36:	60bb      	str	r3, [r7, #8]
    for(int i = 0; i < len; i++){
 8002c38:	2300      	movs	r3, #0
 8002c3a:	60fb      	str	r3, [r7, #12]
 8002c3c:	e022      	b.n	8002c84 <print_setting_time+0x60>
        if (i == cursor){
 8002c3e:	68fa      	ldr	r2, [r7, #12]
 8002c40:	683b      	ldr	r3, [r7, #0]
 8002c42:	429a      	cmp	r2, r3
 8002c44:	d10b      	bne.n	8002c5e <print_setting_time+0x3a>
            OLED_Printf(8 * i, 2, 16, 1, "_");
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	b2db      	uxtb	r3, r3
 8002c4a:	00db      	lsls	r3, r3, #3
 8002c4c:	b2d8      	uxtb	r0, r3
 8002c4e:	4b12      	ldr	r3, [pc, #72]	; (8002c98 <print_setting_time+0x74>)
 8002c50:	9300      	str	r3, [sp, #0]
 8002c52:	2301      	movs	r3, #1
 8002c54:	2210      	movs	r2, #16
 8002c56:	2102      	movs	r1, #2
 8002c58:	f7fe fc2e 	bl	80014b8 <OLED_Printf>
 8002c5c:	e00f      	b.n	8002c7e <print_setting_time+0x5a>
        } else {
            OLED_Printf(8 * i, 2, 16, 1, "%c", _time[i]);
 8002c5e:	68fb      	ldr	r3, [r7, #12]
 8002c60:	b2db      	uxtb	r3, r3
 8002c62:	00db      	lsls	r3, r3, #3
 8002c64:	b2d8      	uxtb	r0, r3
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	687a      	ldr	r2, [r7, #4]
 8002c6a:	4413      	add	r3, r2
 8002c6c:	781b      	ldrb	r3, [r3, #0]
 8002c6e:	9301      	str	r3, [sp, #4]
 8002c70:	4b0a      	ldr	r3, [pc, #40]	; (8002c9c <print_setting_time+0x78>)
 8002c72:	9300      	str	r3, [sp, #0]
 8002c74:	2301      	movs	r3, #1
 8002c76:	2210      	movs	r2, #16
 8002c78:	2102      	movs	r1, #2
 8002c7a:	f7fe fc1d 	bl	80014b8 <OLED_Printf>
    for(int i = 0; i < len; i++){
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	3301      	adds	r3, #1
 8002c82:	60fb      	str	r3, [r7, #12]
 8002c84:	68fa      	ldr	r2, [r7, #12]
 8002c86:	68bb      	ldr	r3, [r7, #8]
 8002c88:	429a      	cmp	r2, r3
 8002c8a:	dbd8      	blt.n	8002c3e <print_setting_time+0x1a>
        }
    }
}
 8002c8c:	bf00      	nop
 8002c8e:	bf00      	nop
 8002c90:	3710      	adds	r7, #16
 8002c92:	46bd      	mov	sp, r7
 8002c94:	bd80      	pop	{r7, pc}
 8002c96:	bf00      	nop
 8002c98:	0800d51c 	.word	0x0800d51c
 8002c9c:	0800d520 	.word	0x0800d520

08002ca0 <show_set_time>:

void show_set_time(){
 8002ca0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002ca2:	b09d      	sub	sp, #116	; 0x74
 8002ca4:	af10      	add	r7, sp, #64	; 0x40
    OLED_ClearAll();
 8002ca6:	f7fe fae7 	bl	8001278 <OLED_ClearAll>
    show_title_time();
 8002caa:	f000 f965 	bl	8002f78 <show_title_time>
    OLED_Printf(0, 1, 8, 1, "Input Time:");
 8002cae:	4b5e      	ldr	r3, [pc, #376]	; (8002e28 <show_set_time+0x188>)
 8002cb0:	9300      	str	r3, [sp, #0]
 8002cb2:	2301      	movs	r3, #1
 8002cb4:	2208      	movs	r2, #8
 8002cb6:	2101      	movs	r1, #1
 8002cb8:	2000      	movs	r0, #0
 8002cba:	f7fe fbfd 	bl	80014b8 <OLED_Printf>
    char _time[15] = "00/00/00 00:00";
 8002cbe:	4b5b      	ldr	r3, [pc, #364]	; (8002e2c <show_set_time+0x18c>)
 8002cc0:	f107 041c 	add.w	r4, r7, #28
 8002cc4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002cc6:	c407      	stmia	r4!, {r0, r1, r2}
 8002cc8:	8023      	strh	r3, [r4, #0]
 8002cca:	3402      	adds	r4, #2
 8002ccc:	0c1b      	lsrs	r3, r3, #16
 8002cce:	7023      	strb	r3, [r4, #0]
    int cursor = 0;
 8002cd0:	2300      	movs	r3, #0
 8002cd2:	62fb      	str	r3, [r7, #44]	; 0x2c
    print_setting_time(_time, cursor);
 8002cd4:	f107 031c 	add.w	r3, r7, #28
 8002cd8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002cda:	4618      	mov	r0, r3
 8002cdc:	f7ff ffa2 	bl	8002c24 <print_setting_time>
    while(1){
        char key = keypad_scan(htim2);
 8002ce0:	4e53      	ldr	r6, [pc, #332]	; (8002e30 <show_set_time+0x190>)
 8002ce2:	466d      	mov	r5, sp
 8002ce4:	f106 0410 	add.w	r4, r6, #16
 8002ce8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002cea:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002cec:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002cee:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002cf0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002cf2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002cf4:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8002cf8:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 8002cfc:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8002d00:	f001 fc1a 	bl	8004538 <keypad_scan>
 8002d04:	4603      	mov	r3, r0
 8002d06:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        switch (key){
 8002d0a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8002d0e:	2b23      	cmp	r3, #35	; 0x23
 8002d10:	d026      	beq.n	8002d60 <show_set_time+0xc0>
 8002d12:	2b2a      	cmp	r3, #42	; 0x2a
 8002d14:	d157      	bne.n	8002dc6 <show_set_time+0x126>
            case '*':
                if (cursor > 0){
 8002d16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	dd7b      	ble.n	8002e14 <show_set_time+0x174>
                    cursor--;
 8002d1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d1e:	3b01      	subs	r3, #1
 8002d20:	62fb      	str	r3, [r7, #44]	; 0x2c
                    while(_time[cursor] < '0' || _time[cursor] > '9') cursor--;
 8002d22:	e002      	b.n	8002d2a <show_set_time+0x8a>
 8002d24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d26:	3b01      	subs	r3, #1
 8002d28:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002d2a:	f107 021c 	add.w	r2, r7, #28
 8002d2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d30:	4413      	add	r3, r2
 8002d32:	781b      	ldrb	r3, [r3, #0]
 8002d34:	2b2f      	cmp	r3, #47	; 0x2f
 8002d36:	d9f5      	bls.n	8002d24 <show_set_time+0x84>
 8002d38:	f107 021c 	add.w	r2, r7, #28
 8002d3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d3e:	4413      	add	r3, r2
 8002d40:	781b      	ldrb	r3, [r3, #0]
 8002d42:	2b39      	cmp	r3, #57	; 0x39
 8002d44:	d8ee      	bhi.n	8002d24 <show_set_time+0x84>
                    _time[cursor] = '0';
 8002d46:	f107 021c 	add.w	r2, r7, #28
 8002d4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d4c:	4413      	add	r3, r2
 8002d4e:	2230      	movs	r2, #48	; 0x30
 8002d50:	701a      	strb	r2, [r3, #0]
                    print_setting_time(_time, cursor);
 8002d52:	f107 031c 	add.w	r3, r7, #28
 8002d56:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002d58:	4618      	mov	r0, r3
 8002d5a:	f7ff ff63 	bl	8002c24 <print_setting_time>
                }
                break;
 8002d5e:	e059      	b.n	8002e14 <show_set_time+0x174>
            case '#':
                if(cursor < 14) break;
 8002d60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d62:	2b0d      	cmp	r3, #13
 8002d64:	dd58      	ble.n	8002e18 <show_set_time+0x178>
                RTC_TimeTypeDef sTime = {0};
 8002d66:	f107 0308 	add.w	r3, r7, #8
 8002d6a:	2200      	movs	r2, #0
 8002d6c:	601a      	str	r2, [r3, #0]
 8002d6e:	605a      	str	r2, [r3, #4]
 8002d70:	609a      	str	r2, [r3, #8]
 8002d72:	60da      	str	r2, [r3, #12]
 8002d74:	611a      	str	r2, [r3, #16]
                RTC_DateTypeDef sDate = {0};
 8002d76:	2300      	movs	r3, #0
 8002d78:	607b      	str	r3, [r7, #4]
                sscanf(_time, "%d/%d/%d %d:%d", &sDate.Year, &sDate.Month, &sDate.Date, &sTime.Hours, &sTime.Minutes);
 8002d7a:	1d3b      	adds	r3, r7, #4
 8002d7c:	1c59      	adds	r1, r3, #1
 8002d7e:	1d3b      	adds	r3, r7, #4
 8002d80:	1cda      	adds	r2, r3, #3
 8002d82:	f107 001c 	add.w	r0, r7, #28
 8002d86:	f107 0308 	add.w	r3, r7, #8
 8002d8a:	3301      	adds	r3, #1
 8002d8c:	9302      	str	r3, [sp, #8]
 8002d8e:	f107 0308 	add.w	r3, r7, #8
 8002d92:	9301      	str	r3, [sp, #4]
 8002d94:	1d3b      	adds	r3, r7, #4
 8002d96:	3302      	adds	r3, #2
 8002d98:	9300      	str	r3, [sp, #0]
 8002d9a:	460b      	mov	r3, r1
 8002d9c:	4925      	ldr	r1, [pc, #148]	; (8002e34 <show_set_time+0x194>)
 8002d9e:	f006 fed7 	bl	8009b50 <siscanf>
                sDate.WeekDay = date.WeekDay;
 8002da2:	4b25      	ldr	r3, [pc, #148]	; (8002e38 <show_set_time+0x198>)
 8002da4:	781b      	ldrb	r3, [r3, #0]
 8002da6:	713b      	strb	r3, [r7, #4]
                set_time(&sTime, &sDate);
 8002da8:	1d3a      	adds	r2, r7, #4
 8002daa:	f107 0308 	add.w	r3, r7, #8
 8002dae:	4611      	mov	r1, r2
 8002db0:	4618      	mov	r0, r3
 8002db2:	f000 f909 	bl	8002fc8 <set_time>
                show_page(currentPage->parent);
 8002db6:	4b21      	ldr	r3, [pc, #132]	; (8002e3c <show_set_time+0x19c>)
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	f8d3 30fc 	ldr.w	r3, [r3, #252]	; 0xfc
 8002dbe:	4618      	mov	r0, r3
 8002dc0:	f7ff fd4a 	bl	8002858 <show_page>
                return;
 8002dc4:	e02c      	b.n	8002e20 <show_set_time+0x180>
            default:
                if (key == 0) break;
 8002dc6:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d026      	beq.n	8002e1c <show_set_time+0x17c>
                _time[cursor] = key;
 8002dce:	f107 021c 	add.w	r2, r7, #28
 8002dd2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002dd4:	4413      	add	r3, r2
 8002dd6:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 8002dda:	701a      	strb	r2, [r3, #0]
                cursor++;
 8002ddc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002dde:	3301      	adds	r3, #1
 8002de0:	62fb      	str	r3, [r7, #44]	; 0x2c
                while(_time[cursor] < '0' || _time[cursor] > '9') cursor++;
 8002de2:	e002      	b.n	8002dea <show_set_time+0x14a>
 8002de4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002de6:	3301      	adds	r3, #1
 8002de8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002dea:	f107 021c 	add.w	r2, r7, #28
 8002dee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002df0:	4413      	add	r3, r2
 8002df2:	781b      	ldrb	r3, [r3, #0]
 8002df4:	2b2f      	cmp	r3, #47	; 0x2f
 8002df6:	d9f5      	bls.n	8002de4 <show_set_time+0x144>
 8002df8:	f107 021c 	add.w	r2, r7, #28
 8002dfc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002dfe:	4413      	add	r3, r2
 8002e00:	781b      	ldrb	r3, [r3, #0]
 8002e02:	2b39      	cmp	r3, #57	; 0x39
 8002e04:	d8ee      	bhi.n	8002de4 <show_set_time+0x144>
                print_setting_time(_time, cursor);
 8002e06:	f107 031c 	add.w	r3, r7, #28
 8002e0a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002e0c:	4618      	mov	r0, r3
 8002e0e:	f7ff ff09 	bl	8002c24 <print_setting_time>
                break;
 8002e12:	e004      	b.n	8002e1e <show_set_time+0x17e>
                break;
 8002e14:	bf00      	nop
 8002e16:	e763      	b.n	8002ce0 <show_set_time+0x40>
                if(cursor < 14) break;
 8002e18:	bf00      	nop
 8002e1a:	e761      	b.n	8002ce0 <show_set_time+0x40>
                if (key == 0) break;
 8002e1c:	bf00      	nop
    while(1){
 8002e1e:	e75f      	b.n	8002ce0 <show_set_time+0x40>
        }
    }
}
 8002e20:	3734      	adds	r7, #52	; 0x34
 8002e22:	46bd      	mov	sp, r7
 8002e24:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002e26:	bf00      	nop
 8002e28:	0800d524 	.word	0x0800d524
 8002e2c:	0800d540 	.word	0x0800d540
 8002e30:	200013dc 	.word	0x200013dc
 8002e34:	0800d530 	.word	0x0800d530
 8002e38:	20001d68 	.word	0x20001d68
 8002e3c:	20001d7c 	.word	0x20001d7c

08002e40 <show_time>:

/*
    Time & Date Funcs
*/
void show_time(int x, int y, int size, int mode) {
 8002e40:	b5b0      	push	{r4, r5, r7, lr}
 8002e42:	b088      	sub	sp, #32
 8002e44:	af04      	add	r7, sp, #16
 8002e46:	60f8      	str	r0, [r7, #12]
 8002e48:	60b9      	str	r1, [r7, #8]
 8002e4a:	607a      	str	r2, [r7, #4]
 8002e4c:	603b      	str	r3, [r7, #0]
    OLED_Printf(x, y, size, mode, "%02d:%02d", time.Hours, time.Minutes);
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	b2d8      	uxtb	r0, r3
 8002e52:	68bb      	ldr	r3, [r7, #8]
 8002e54:	b2d9      	uxtb	r1, r3
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	b2da      	uxtb	r2, r3
 8002e5a:	683b      	ldr	r3, [r7, #0]
 8002e5c:	b2db      	uxtb	r3, r3
 8002e5e:	4c07      	ldr	r4, [pc, #28]	; (8002e7c <show_time+0x3c>)
 8002e60:	7824      	ldrb	r4, [r4, #0]
 8002e62:	4625      	mov	r5, r4
 8002e64:	4c05      	ldr	r4, [pc, #20]	; (8002e7c <show_time+0x3c>)
 8002e66:	7864      	ldrb	r4, [r4, #1]
 8002e68:	9402      	str	r4, [sp, #8]
 8002e6a:	9501      	str	r5, [sp, #4]
 8002e6c:	4c04      	ldr	r4, [pc, #16]	; (8002e80 <show_time+0x40>)
 8002e6e:	9400      	str	r4, [sp, #0]
 8002e70:	f7fe fb22 	bl	80014b8 <OLED_Printf>
}
 8002e74:	bf00      	nop
 8002e76:	3710      	adds	r7, #16
 8002e78:	46bd      	mov	sp, r7
 8002e7a:	bdb0      	pop	{r4, r5, r7, pc}
 8002e7c:	20001d54 	.word	0x20001d54
 8002e80:	0800d550 	.word	0x0800d550

08002e84 <show_date>:

void show_date(int x, int y, int size, int mode, int showWeekDay) {
 8002e84:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002e86:	b08d      	sub	sp, #52	; 0x34
 8002e88:	af06      	add	r7, sp, #24
 8002e8a:	6178      	str	r0, [r7, #20]
 8002e8c:	6139      	str	r1, [r7, #16]
 8002e8e:	60fa      	str	r2, [r7, #12]
 8002e90:	60bb      	str	r3, [r7, #8]
    if (showWeekDay)
 8002e92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	d040      	beq.n	8002f1a <show_date+0x96>
        OLED_Printf(x, y, size, mode, "%02d/%02d/%02d %s", date.Year, date.Month, date.Date,
 8002e98:	697b      	ldr	r3, [r7, #20]
 8002e9a:	b2d8      	uxtb	r0, r3
 8002e9c:	693b      	ldr	r3, [r7, #16]
 8002e9e:	b2d9      	uxtb	r1, r3
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	b2da      	uxtb	r2, r3
 8002ea4:	68bb      	ldr	r3, [r7, #8]
 8002ea6:	b2dc      	uxtb	r4, r3
 8002ea8:	4b29      	ldr	r3, [pc, #164]	; (8002f50 <show_date+0xcc>)
 8002eaa:	78db      	ldrb	r3, [r3, #3]
 8002eac:	461d      	mov	r5, r3
 8002eae:	4b28      	ldr	r3, [pc, #160]	; (8002f50 <show_date+0xcc>)
 8002eb0:	785b      	ldrb	r3, [r3, #1]
 8002eb2:	461e      	mov	r6, r3
 8002eb4:	4b26      	ldr	r3, [pc, #152]	; (8002f50 <show_date+0xcc>)
 8002eb6:	789b      	ldrb	r3, [r3, #2]
 8002eb8:	607b      	str	r3, [r7, #4]
                    (date.WeekDay == 1)   ? "MON"
 8002eba:	4b25      	ldr	r3, [pc, #148]	; (8002f50 <show_date+0xcc>)
 8002ebc:	781b      	ldrb	r3, [r3, #0]
        OLED_Printf(x, y, size, mode, "%02d/%02d/%02d %s", date.Year, date.Month, date.Date,
 8002ebe:	2b01      	cmp	r3, #1
 8002ec0:	d01f      	beq.n	8002f02 <show_date+0x7e>
                    : (date.WeekDay == 2) ? "TUE"
 8002ec2:	4b23      	ldr	r3, [pc, #140]	; (8002f50 <show_date+0xcc>)
 8002ec4:	781b      	ldrb	r3, [r3, #0]
                    : (date.WeekDay == 3) ? "WED"
 8002ec6:	2b02      	cmp	r3, #2
 8002ec8:	d019      	beq.n	8002efe <show_date+0x7a>
 8002eca:	4b21      	ldr	r3, [pc, #132]	; (8002f50 <show_date+0xcc>)
 8002ecc:	781b      	ldrb	r3, [r3, #0]
                    : (date.WeekDay == 4) ? "THU"
 8002ece:	2b03      	cmp	r3, #3
 8002ed0:	d013      	beq.n	8002efa <show_date+0x76>
 8002ed2:	4b1f      	ldr	r3, [pc, #124]	; (8002f50 <show_date+0xcc>)
 8002ed4:	781b      	ldrb	r3, [r3, #0]
                    : (date.WeekDay == 5) ? "FRI"
 8002ed6:	2b04      	cmp	r3, #4
 8002ed8:	d00d      	beq.n	8002ef6 <show_date+0x72>
 8002eda:	4b1d      	ldr	r3, [pc, #116]	; (8002f50 <show_date+0xcc>)
 8002edc:	781b      	ldrb	r3, [r3, #0]
                    : (date.WeekDay == 6) ? "SAT"
 8002ede:	2b05      	cmp	r3, #5
 8002ee0:	d007      	beq.n	8002ef2 <show_date+0x6e>
 8002ee2:	4b1b      	ldr	r3, [pc, #108]	; (8002f50 <show_date+0xcc>)
 8002ee4:	781b      	ldrb	r3, [r3, #0]
                                          : "SUN");
 8002ee6:	2b06      	cmp	r3, #6
 8002ee8:	d101      	bne.n	8002eee <show_date+0x6a>
 8002eea:	4b1a      	ldr	r3, [pc, #104]	; (8002f54 <show_date+0xd0>)
 8002eec:	e00a      	b.n	8002f04 <show_date+0x80>
 8002eee:	4b1a      	ldr	r3, [pc, #104]	; (8002f58 <show_date+0xd4>)
 8002ef0:	e008      	b.n	8002f04 <show_date+0x80>
                    : (date.WeekDay == 6) ? "SAT"
 8002ef2:	4b1a      	ldr	r3, [pc, #104]	; (8002f5c <show_date+0xd8>)
 8002ef4:	e006      	b.n	8002f04 <show_date+0x80>
                    : (date.WeekDay == 5) ? "FRI"
 8002ef6:	4b1a      	ldr	r3, [pc, #104]	; (8002f60 <show_date+0xdc>)
 8002ef8:	e004      	b.n	8002f04 <show_date+0x80>
                    : (date.WeekDay == 4) ? "THU"
 8002efa:	4b1a      	ldr	r3, [pc, #104]	; (8002f64 <show_date+0xe0>)
 8002efc:	e002      	b.n	8002f04 <show_date+0x80>
                    : (date.WeekDay == 3) ? "WED"
 8002efe:	4b1a      	ldr	r3, [pc, #104]	; (8002f68 <show_date+0xe4>)
 8002f00:	e000      	b.n	8002f04 <show_date+0x80>
        OLED_Printf(x, y, size, mode, "%02d/%02d/%02d %s", date.Year, date.Month, date.Date,
 8002f02:	4b1a      	ldr	r3, [pc, #104]	; (8002f6c <show_date+0xe8>)
 8002f04:	9304      	str	r3, [sp, #16]
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	9303      	str	r3, [sp, #12]
 8002f0a:	9602      	str	r6, [sp, #8]
 8002f0c:	9501      	str	r5, [sp, #4]
 8002f0e:	4b18      	ldr	r3, [pc, #96]	; (8002f70 <show_date+0xec>)
 8002f10:	9300      	str	r3, [sp, #0]
 8002f12:	4623      	mov	r3, r4
 8002f14:	f7fe fad0 	bl	80014b8 <OLED_Printf>
    else
        OLED_Printf(x, y, size, mode, "%02d/%02d/%02d", date.Year, date.Month, date.Date);
}
 8002f18:	e016      	b.n	8002f48 <show_date+0xc4>
        OLED_Printf(x, y, size, mode, "%02d/%02d/%02d", date.Year, date.Month, date.Date);
 8002f1a:	697b      	ldr	r3, [r7, #20]
 8002f1c:	b2d8      	uxtb	r0, r3
 8002f1e:	693b      	ldr	r3, [r7, #16]
 8002f20:	b2d9      	uxtb	r1, r3
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	b2da      	uxtb	r2, r3
 8002f26:	68bb      	ldr	r3, [r7, #8]
 8002f28:	b2db      	uxtb	r3, r3
 8002f2a:	4c09      	ldr	r4, [pc, #36]	; (8002f50 <show_date+0xcc>)
 8002f2c:	78e4      	ldrb	r4, [r4, #3]
 8002f2e:	4625      	mov	r5, r4
 8002f30:	4c07      	ldr	r4, [pc, #28]	; (8002f50 <show_date+0xcc>)
 8002f32:	7864      	ldrb	r4, [r4, #1]
 8002f34:	4626      	mov	r6, r4
 8002f36:	4c06      	ldr	r4, [pc, #24]	; (8002f50 <show_date+0xcc>)
 8002f38:	78a4      	ldrb	r4, [r4, #2]
 8002f3a:	9403      	str	r4, [sp, #12]
 8002f3c:	9602      	str	r6, [sp, #8]
 8002f3e:	9501      	str	r5, [sp, #4]
 8002f40:	4c0c      	ldr	r4, [pc, #48]	; (8002f74 <show_date+0xf0>)
 8002f42:	9400      	str	r4, [sp, #0]
 8002f44:	f7fe fab8 	bl	80014b8 <OLED_Printf>
}
 8002f48:	bf00      	nop
 8002f4a:	371c      	adds	r7, #28
 8002f4c:	46bd      	mov	sp, r7
 8002f4e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002f50:	20001d68 	.word	0x20001d68
 8002f54:	0800d55c 	.word	0x0800d55c
 8002f58:	0800d560 	.word	0x0800d560
 8002f5c:	0800d564 	.word	0x0800d564
 8002f60:	0800d568 	.word	0x0800d568
 8002f64:	0800d56c 	.word	0x0800d56c
 8002f68:	0800d570 	.word	0x0800d570
 8002f6c:	0800d574 	.word	0x0800d574
 8002f70:	0800d578 	.word	0x0800d578
 8002f74:	0800d58c 	.word	0x0800d58c

08002f78 <show_title_time>:

void show_title_time() {
 8002f78:	b580      	push	{r7, lr}
 8002f7a:	b082      	sub	sp, #8
 8002f7c:	af02      	add	r7, sp, #8
    OLED_ClearLine(0);
 8002f7e:	2000      	movs	r0, #0
 8002f80:	f7fe f998 	bl	80012b4 <OLED_ClearLine>
    HAL_RTC_GetTime(&hrtc, &time, RTC_FORMAT_BIN);
 8002f84:	2200      	movs	r2, #0
 8002f86:	490d      	ldr	r1, [pc, #52]	; (8002fbc <show_title_time+0x44>)
 8002f88:	480d      	ldr	r0, [pc, #52]	; (8002fc0 <show_title_time+0x48>)
 8002f8a:	f003 fec9 	bl	8006d20 <HAL_RTC_GetTime>
    HAL_RTC_GetDate(&hrtc, &date, RTC_FORMAT_BIN);
 8002f8e:	2200      	movs	r2, #0
 8002f90:	490c      	ldr	r1, [pc, #48]	; (8002fc4 <show_title_time+0x4c>)
 8002f92:	480b      	ldr	r0, [pc, #44]	; (8002fc0 <show_title_time+0x48>)
 8002f94:	f003 ffa7 	bl	8006ee6 <HAL_RTC_GetDate>
    show_time(0, 0, 8, 1);
 8002f98:	2301      	movs	r3, #1
 8002f9a:	2208      	movs	r2, #8
 8002f9c:	2100      	movs	r1, #0
 8002f9e:	2000      	movs	r0, #0
 8002fa0:	f7ff ff4e 	bl	8002e40 <show_time>
    show_date(64, 0, 8, 1, 0);
 8002fa4:	2300      	movs	r3, #0
 8002fa6:	9300      	str	r3, [sp, #0]
 8002fa8:	2301      	movs	r3, #1
 8002faa:	2208      	movs	r2, #8
 8002fac:	2100      	movs	r1, #0
 8002fae:	2040      	movs	r0, #64	; 0x40
 8002fb0:	f7ff ff68 	bl	8002e84 <show_date>
}
 8002fb4:	bf00      	nop
 8002fb6:	46bd      	mov	sp, r7
 8002fb8:	bd80      	pop	{r7, pc}
 8002fba:	bf00      	nop
 8002fbc:	20001d54 	.word	0x20001d54
 8002fc0:	200013b8 	.word	0x200013b8
 8002fc4:	20001d68 	.word	0x20001d68

08002fc8 <set_time>:

void set_time(RTC_TimeTypeDef *sTime, RTC_DateTypeDef *sDate) {
 8002fc8:	b580      	push	{r7, lr}
 8002fca:	b082      	sub	sp, #8
 8002fcc:	af00      	add	r7, sp, #0
 8002fce:	6078      	str	r0, [r7, #4]
 8002fd0:	6039      	str	r1, [r7, #0]
    HAL_RTC_SetTime(&hrtc, sTime, RTC_FORMAT_BIN);
 8002fd2:	2200      	movs	r2, #0
 8002fd4:	6879      	ldr	r1, [r7, #4]
 8002fd6:	480f      	ldr	r0, [pc, #60]	; (8003014 <set_time+0x4c>)
 8002fd8:	f003 fe05 	bl	8006be6 <HAL_RTC_SetTime>
    HAL_RTC_SetDate(&hrtc, sDate, RTC_FORMAT_BIN);
 8002fdc:	2200      	movs	r2, #0
 8002fde:	6839      	ldr	r1, [r7, #0]
 8002fe0:	480c      	ldr	r0, [pc, #48]	; (8003014 <set_time+0x4c>)
 8002fe2:	f003 fef9 	bl	8006dd8 <HAL_RTC_SetDate>

    reshow_time();
 8002fe6:	f000 f81b 	bl	8003020 <reshow_time>
    TIM7_Cnt1 = sTime->Seconds % 31;
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	789a      	ldrb	r2, [r3, #2]
 8002fee:	4b0a      	ldr	r3, [pc, #40]	; (8003018 <set_time+0x50>)
 8002ff0:	fba3 1302 	umull	r1, r3, r3, r2
 8002ff4:	1ad1      	subs	r1, r2, r3
 8002ff6:	0849      	lsrs	r1, r1, #1
 8002ff8:	440b      	add	r3, r1
 8002ffa:	0919      	lsrs	r1, r3, #4
 8002ffc:	460b      	mov	r3, r1
 8002ffe:	015b      	lsls	r3, r3, #5
 8003000:	1a5b      	subs	r3, r3, r1
 8003002:	1ad3      	subs	r3, r2, r3
 8003004:	b2db      	uxtb	r3, r3
 8003006:	b29a      	uxth	r2, r3
 8003008:	4b04      	ldr	r3, [pc, #16]	; (800301c <set_time+0x54>)
 800300a:	801a      	strh	r2, [r3, #0]
}
 800300c:	bf00      	nop
 800300e:	3708      	adds	r7, #8
 8003010:	46bd      	mov	sp, r7
 8003012:	bd80      	pop	{r7, pc}
 8003014:	200013b8 	.word	0x200013b8
 8003018:	08421085 	.word	0x08421085
 800301c:	20000026 	.word	0x20000026

08003020 <reshow_time>:

void reshow_time() {
 8003020:	b580      	push	{r7, lr}
 8003022:	af00      	add	r7, sp, #0
    if (currentPage->pageTypeID == HOME_PAGE) {
 8003024:	4b09      	ldr	r3, [pc, #36]	; (800304c <reshow_time+0x2c>)
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	f893 30f7 	ldrb.w	r3, [r3, #247]	; 0xf7
 800302c:	2b00      	cmp	r3, #0
 800302e:	d102      	bne.n	8003036 <reshow_time+0x16>
        show_homeScreen();
 8003030:	f000 f850 	bl	80030d4 <show_homeScreen>
    } else if (currentPage->showTimeTitle) {
        show_title_time();
    }
}
 8003034:	e007      	b.n	8003046 <reshow_time+0x26>
    } else if (currentPage->showTimeTitle) {
 8003036:	4b05      	ldr	r3, [pc, #20]	; (800304c <reshow_time+0x2c>)
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	f893 30f8 	ldrb.w	r3, [r3, #248]	; 0xf8
 800303e:	2b00      	cmp	r3, #0
 8003040:	d001      	beq.n	8003046 <reshow_time+0x26>
        show_title_time();
 8003042:	f7ff ff99 	bl	8002f78 <show_title_time>
}
 8003046:	bf00      	nop
 8003048:	bd80      	pop	{r7, pc}
 800304a:	bf00      	nop
 800304c:	20001d7c 	.word	0x20001d7c

08003050 <calibrate_time>:

void calibrate_time() {
 8003050:	b580      	push	{r7, lr}
 8003052:	af00      	add	r7, sp, #0
    udp_init();
 8003054:	f000 f80c 	bl	8003070 <udp_init>
    // strcpy(callBack, "set_time");
    printf("{\"func\":\"get_time\",\"clbk\":\"set_time\"}\r\n");
 8003058:	4804      	ldr	r0, [pc, #16]	; (800306c <calibrate_time+0x1c>)
 800305a:	f006 fd59 	bl	8009b10 <puts>
    HAL_Delay(1000);
 800305e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003062:	f001 fec9 	bl	8004df8 <HAL_Delay>
}
 8003066:	bf00      	nop
 8003068:	bd80      	pop	{r7, pc}
 800306a:	bf00      	nop
 800306c:	0800d59c 	.word	0x0800d59c

08003070 <udp_init>:

/*
    UDP Funcs
*/
void udp_init(){
 8003070:	b580      	push	{r7, lr}
 8003072:	af00      	add	r7, sp, #0
    printf("AT+CIPSTART=\"UDP\",\"%s\",6000,9000,0\r\n", udpServerIP);
 8003074:	490a      	ldr	r1, [pc, #40]	; (80030a0 <udp_init+0x30>)
 8003076:	480b      	ldr	r0, [pc, #44]	; (80030a4 <udp_init+0x34>)
 8003078:	f006 fcc4 	bl	8009a04 <iprintf>
    HAL_Delay(100);
 800307c:	2064      	movs	r0, #100	; 0x64
 800307e:	f001 febb 	bl	8004df8 <HAL_Delay>
    printf("AT+CIPMODE=1\r\n");
 8003082:	4809      	ldr	r0, [pc, #36]	; (80030a8 <udp_init+0x38>)
 8003084:	f006 fd44 	bl	8009b10 <puts>
    HAL_Delay(100);
 8003088:	2064      	movs	r0, #100	; 0x64
 800308a:	f001 feb5 	bl	8004df8 <HAL_Delay>
    printf("AT+CIPSEND\r\n");
 800308e:	4807      	ldr	r0, [pc, #28]	; (80030ac <udp_init+0x3c>)
 8003090:	f006 fd3e 	bl	8009b10 <puts>
    HAL_Delay(100);
 8003094:	2064      	movs	r0, #100	; 0x64
 8003096:	f001 feaf 	bl	8004df8 <HAL_Delay>
}
 800309a:	bf00      	nop
 800309c:	bd80      	pop	{r7, pc}
 800309e:	bf00      	nop
 80030a0:	20000038 	.word	0x20000038
 80030a4:	0800d5c4 	.word	0x0800d5c4
 80030a8:	0800d5ec 	.word	0x0800d5ec
 80030ac:	0800d5fc 	.word	0x0800d5fc

080030b0 <register_ID>:

void register_ID() {
 80030b0:	b580      	push	{r7, lr}
 80030b2:	af00      	add	r7, sp, #0
    udp_init();
 80030b4:	f7ff ffdc 	bl	8003070 <udp_init>
    // {"func":"reg","id":"1234567890"}
    printf("{\"func\":\"reg\",\"id\":\"%s\"}\r\n", ownID);
 80030b8:	4904      	ldr	r1, [pc, #16]	; (80030cc <register_ID+0x1c>)
 80030ba:	4805      	ldr	r0, [pc, #20]	; (80030d0 <register_ID+0x20>)
 80030bc:	f006 fca2 	bl	8009a04 <iprintf>
    HAL_Delay(500);
 80030c0:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80030c4:	f001 fe98 	bl	8004df8 <HAL_Delay>
}
 80030c8:	bf00      	nop
 80030ca:	bd80      	pop	{r7, pc}
 80030cc:	20000034 	.word	0x20000034
 80030d0:	0800d608 	.word	0x0800d608

080030d4 <show_homeScreen>:

/*
    Home Screen
*/
void show_homeScreen() {
 80030d4:	b5b0      	push	{r4, r5, r7, lr}
 80030d6:	b08a      	sub	sp, #40	; 0x28
 80030d8:	af02      	add	r7, sp, #8
    uint8_t xtime = 44;
 80030da:	232c      	movs	r3, #44	; 0x2c
 80030dc:	77fb      	strb	r3, [r7, #31]
    uint8_t xdate = 16;
 80030de:	2310      	movs	r3, #16
 80030e0:	77bb      	strb	r3, [r7, #30]
    RTC_TimeTypeDef currentTime = {0};
 80030e2:	f107 0308 	add.w	r3, r7, #8
 80030e6:	2200      	movs	r2, #0
 80030e8:	601a      	str	r2, [r3, #0]
 80030ea:	605a      	str	r2, [r3, #4]
 80030ec:	609a      	str	r2, [r3, #8]
 80030ee:	60da      	str	r2, [r3, #12]
 80030f0:	611a      	str	r2, [r3, #16]
    RTC_DateTypeDef currentDate = {0};
 80030f2:	2300      	movs	r3, #0
 80030f4:	607b      	str	r3, [r7, #4]
    HAL_RTC_GetTime(&hrtc, &currentTime, RTC_FORMAT_BIN);
 80030f6:	f107 0308 	add.w	r3, r7, #8
 80030fa:	2200      	movs	r2, #0
 80030fc:	4619      	mov	r1, r3
 80030fe:	4838      	ldr	r0, [pc, #224]	; (80031e0 <show_homeScreen+0x10c>)
 8003100:	f003 fe0e 	bl	8006d20 <HAL_RTC_GetTime>
    HAL_RTC_GetDate(&hrtc, &currentDate, RTC_FORMAT_BIN);
 8003104:	1d3b      	adds	r3, r7, #4
 8003106:	2200      	movs	r2, #0
 8003108:	4619      	mov	r1, r3
 800310a:	4835      	ldr	r0, [pc, #212]	; (80031e0 <show_homeScreen+0x10c>)
 800310c:	f003 feeb 	bl	8006ee6 <HAL_RTC_GetDate>
    if (currentPage != &homeScreen) {
 8003110:	4b34      	ldr	r3, [pc, #208]	; (80031e4 <show_homeScreen+0x110>)
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	4a34      	ldr	r2, [pc, #208]	; (80031e8 <show_homeScreen+0x114>)
 8003116:	4293      	cmp	r3, r2
 8003118:	d023      	beq.n	8003162 <show_homeScreen+0x8e>
        OLED_ClearAll();
 800311a:	f7fe f8ad 	bl	8001278 <OLED_ClearAll>
        time = currentTime;
 800311e:	4b33      	ldr	r3, [pc, #204]	; (80031ec <show_homeScreen+0x118>)
 8003120:	461d      	mov	r5, r3
 8003122:	f107 0408 	add.w	r4, r7, #8
 8003126:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003128:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800312a:	6823      	ldr	r3, [r4, #0]
 800312c:	602b      	str	r3, [r5, #0]
        date = currentDate;
 800312e:	4a30      	ldr	r2, [pc, #192]	; (80031f0 <show_homeScreen+0x11c>)
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	6013      	str	r3, [r2, #0]
        show_date(xdate, 0, 8, 1, 1);
 8003134:	7fb8      	ldrb	r0, [r7, #30]
 8003136:	2301      	movs	r3, #1
 8003138:	9300      	str	r3, [sp, #0]
 800313a:	2301      	movs	r3, #1
 800313c:	2208      	movs	r2, #8
 800313e:	2100      	movs	r1, #0
 8003140:	f7ff fea0 	bl	8002e84 <show_date>
        show_time(xtime, 1, 16, 1);
 8003144:	7ff8      	ldrb	r0, [r7, #31]
 8003146:	2301      	movs	r3, #1
 8003148:	2210      	movs	r2, #16
 800314a:	2101      	movs	r1, #1
 800314c:	f7ff fe78 	bl	8002e40 <show_time>
        OLED_Printf(127 - 4 * 8, 7, 8, 1, "MENU");
 8003150:	4b28      	ldr	r3, [pc, #160]	; (80031f4 <show_homeScreen+0x120>)
 8003152:	9300      	str	r3, [sp, #0]
 8003154:	2301      	movs	r3, #1
 8003156:	2208      	movs	r2, #8
 8003158:	2107      	movs	r1, #7
 800315a:	205f      	movs	r0, #95	; 0x5f
 800315c:	f7fe f9ac 	bl	80014b8 <OLED_Printf>
            date = currentDate;
            OLED_ClearLine(0);
            show_date(xdate, 0, 8, 1, 1);
        }
    }
}
 8003160:	e03a      	b.n	80031d8 <show_homeScreen+0x104>
        if (time.Hours != currentTime.Hours || time.Minutes != currentTime.Minutes) {
 8003162:	4b22      	ldr	r3, [pc, #136]	; (80031ec <show_homeScreen+0x118>)
 8003164:	781a      	ldrb	r2, [r3, #0]
 8003166:	7a3b      	ldrb	r3, [r7, #8]
 8003168:	429a      	cmp	r2, r3
 800316a:	d104      	bne.n	8003176 <show_homeScreen+0xa2>
 800316c:	4b1f      	ldr	r3, [pc, #124]	; (80031ec <show_homeScreen+0x118>)
 800316e:	785a      	ldrb	r2, [r3, #1]
 8003170:	7a7b      	ldrb	r3, [r7, #9]
 8003172:	429a      	cmp	r2, r3
 8003174:	d013      	beq.n	800319e <show_homeScreen+0xca>
            time = currentTime;
 8003176:	4b1d      	ldr	r3, [pc, #116]	; (80031ec <show_homeScreen+0x118>)
 8003178:	461d      	mov	r5, r3
 800317a:	f107 0408 	add.w	r4, r7, #8
 800317e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003180:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003182:	6823      	ldr	r3, [r4, #0]
 8003184:	602b      	str	r3, [r5, #0]
            OLED_ClearLine(1);
 8003186:	2001      	movs	r0, #1
 8003188:	f7fe f894 	bl	80012b4 <OLED_ClearLine>
            OLED_ClearLine(2);
 800318c:	2002      	movs	r0, #2
 800318e:	f7fe f891 	bl	80012b4 <OLED_ClearLine>
            show_time(xtime, 1, 16, 1);
 8003192:	7ff8      	ldrb	r0, [r7, #31]
 8003194:	2301      	movs	r3, #1
 8003196:	2210      	movs	r2, #16
 8003198:	2101      	movs	r1, #1
 800319a:	f7ff fe51 	bl	8002e40 <show_time>
        if (date.Date != currentDate.Date || date.Month != currentDate.Month || date.Year != currentDate.Year) {
 800319e:	4b14      	ldr	r3, [pc, #80]	; (80031f0 <show_homeScreen+0x11c>)
 80031a0:	789a      	ldrb	r2, [r3, #2]
 80031a2:	79bb      	ldrb	r3, [r7, #6]
 80031a4:	429a      	cmp	r2, r3
 80031a6:	d109      	bne.n	80031bc <show_homeScreen+0xe8>
 80031a8:	4b11      	ldr	r3, [pc, #68]	; (80031f0 <show_homeScreen+0x11c>)
 80031aa:	785a      	ldrb	r2, [r3, #1]
 80031ac:	797b      	ldrb	r3, [r7, #5]
 80031ae:	429a      	cmp	r2, r3
 80031b0:	d104      	bne.n	80031bc <show_homeScreen+0xe8>
 80031b2:	4b0f      	ldr	r3, [pc, #60]	; (80031f0 <show_homeScreen+0x11c>)
 80031b4:	78da      	ldrb	r2, [r3, #3]
 80031b6:	79fb      	ldrb	r3, [r7, #7]
 80031b8:	429a      	cmp	r2, r3
 80031ba:	d00d      	beq.n	80031d8 <show_homeScreen+0x104>
            date = currentDate;
 80031bc:	4a0c      	ldr	r2, [pc, #48]	; (80031f0 <show_homeScreen+0x11c>)
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	6013      	str	r3, [r2, #0]
            OLED_ClearLine(0);
 80031c2:	2000      	movs	r0, #0
 80031c4:	f7fe f876 	bl	80012b4 <OLED_ClearLine>
            show_date(xdate, 0, 8, 1, 1);
 80031c8:	7fb8      	ldrb	r0, [r7, #30]
 80031ca:	2301      	movs	r3, #1
 80031cc:	9300      	str	r3, [sp, #0]
 80031ce:	2301      	movs	r3, #1
 80031d0:	2208      	movs	r2, #8
 80031d2:	2100      	movs	r1, #0
 80031d4:	f7ff fe56 	bl	8002e84 <show_date>
}
 80031d8:	bf00      	nop
 80031da:	3720      	adds	r7, #32
 80031dc:	46bd      	mov	sp, r7
 80031de:	bdb0      	pop	{r4, r5, r7, pc}
 80031e0:	200013b8 	.word	0x200013b8
 80031e4:	20001d7c 	.word	0x20001d7c
 80031e8:	20000f64 	.word	0x20000f64
 80031ec:	20001d54 	.word	0x20001d54
 80031f0:	20001d68 	.word	0x20001d68
 80031f4:	0800d624 	.word	0x0800d624

080031f8 <send_msg>:

/*
    Message Funcs
*/
void send_msg() {
 80031f8:	b5b0      	push	{r4, r5, r7, lr}
 80031fa:	b086      	sub	sp, #24
 80031fc:	af06      	add	r7, sp, #24
    udp_init();
 80031fe:	f7ff ff37 	bl	8003070 <udp_init>
    // {"func":"send_msg", "msg":{"from":"1", "to":"2", "time":"23/04/09 19:38", "content":"Hello, world!"}}
    printf("{\"func\":\"send_msg\",\"msg\":{\"from\":\"%s\",\"to\":\"%s\",\"time\":\"%02d/%02d/%02d %02d:%02d\",\"content\":\"%s\"}}\r\n", ownID, msgEditor.to, date.Year, date.Month, date.Date, time.Hours, time.Minutes, msgEditor.content);
 8003202:	4b11      	ldr	r3, [pc, #68]	; (8003248 <send_msg+0x50>)
 8003204:	78db      	ldrb	r3, [r3, #3]
 8003206:	461d      	mov	r5, r3
 8003208:	4b0f      	ldr	r3, [pc, #60]	; (8003248 <send_msg+0x50>)
 800320a:	785b      	ldrb	r3, [r3, #1]
 800320c:	461a      	mov	r2, r3
 800320e:	4b0e      	ldr	r3, [pc, #56]	; (8003248 <send_msg+0x50>)
 8003210:	789b      	ldrb	r3, [r3, #2]
 8003212:	4619      	mov	r1, r3
 8003214:	4b0d      	ldr	r3, [pc, #52]	; (800324c <send_msg+0x54>)
 8003216:	781b      	ldrb	r3, [r3, #0]
 8003218:	4618      	mov	r0, r3
 800321a:	4b0c      	ldr	r3, [pc, #48]	; (800324c <send_msg+0x54>)
 800321c:	785b      	ldrb	r3, [r3, #1]
 800321e:	461c      	mov	r4, r3
 8003220:	4b0b      	ldr	r3, [pc, #44]	; (8003250 <send_msg+0x58>)
 8003222:	9304      	str	r3, [sp, #16]
 8003224:	9403      	str	r4, [sp, #12]
 8003226:	9002      	str	r0, [sp, #8]
 8003228:	9101      	str	r1, [sp, #4]
 800322a:	9200      	str	r2, [sp, #0]
 800322c:	462b      	mov	r3, r5
 800322e:	4a09      	ldr	r2, [pc, #36]	; (8003254 <send_msg+0x5c>)
 8003230:	4909      	ldr	r1, [pc, #36]	; (8003258 <send_msg+0x60>)
 8003232:	480a      	ldr	r0, [pc, #40]	; (800325c <send_msg+0x64>)
 8003234:	f006 fbe6 	bl	8009a04 <iprintf>
    HAL_Delay(500);
 8003238:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800323c:	f001 fddc 	bl	8004df8 <HAL_Delay>
}
 8003240:	bf00      	nop
 8003242:	46bd      	mov	sp, r7
 8003244:	bdb0      	pop	{r4, r5, r7, pc}
 8003246:	bf00      	nop
 8003248:	20001d68 	.word	0x20001d68
 800324c:	20001d54 	.word	0x20001d54
 8003250:	200000c8 	.word	0x200000c8
 8003254:	200000bc 	.word	0x200000bc
 8003258:	20000034 	.word	0x20000034
 800325c:	0800d62c 	.word	0x0800d62c

08003260 <init_msg_editor>:

void init_msg_editor() {
 8003260:	b580      	push	{r7, lr}
 8003262:	af00      	add	r7, sp, #0
    // msgEditor.to[0] = '\0';
    // msgEditor.content[0] = '\0';
    memset(msgEditor.to, 0, sizeof(msgEditor.to));
 8003264:	220b      	movs	r2, #11
 8003266:	2100      	movs	r1, #0
 8003268:	4812      	ldr	r0, [pc, #72]	; (80032b4 <init_msg_editor+0x54>)
 800326a:	f006 fae3 	bl	8009834 <memset>
    memset(msgEditor.content, 0, sizeof(msgEditor.content));
 800326e:	22ff      	movs	r2, #255	; 0xff
 8003270:	2100      	movs	r1, #0
 8003272:	4811      	ldr	r0, [pc, #68]	; (80032b8 <init_msg_editor+0x58>)
 8003274:	f006 fade 	bl	8009834 <memset>
    msgEditor.toLen = 0;
 8003278:	4b0e      	ldr	r3, [pc, #56]	; (80032b4 <init_msg_editor+0x54>)
 800327a:	2200      	movs	r2, #0
 800327c:	72da      	strb	r2, [r3, #11]
    msgEditor.contentLen = 0;
 800327e:	4b0d      	ldr	r3, [pc, #52]	; (80032b4 <init_msg_editor+0x54>)
 8003280:	2200      	movs	r2, #0
 8003282:	f883 210b 	strb.w	r2, [r3, #267]	; 0x10b
    msgEditor.typing = 0;
 8003286:	4b0b      	ldr	r3, [pc, #44]	; (80032b4 <init_msg_editor+0x54>)
 8003288:	2200      	movs	r2, #0
 800328a:	f883 210c 	strb.w	r2, [r3, #268]	; 0x10c
    msgEditor.isTyping = 0;
 800328e:	4b09      	ldr	r3, [pc, #36]	; (80032b4 <init_msg_editor+0x54>)
 8003290:	2200      	movs	r2, #0
 8003292:	f883 210e 	strb.w	r2, [r3, #270]	; 0x10e
    msgEditor.typingChar = ' ';
 8003296:	4b07      	ldr	r3, [pc, #28]	; (80032b4 <init_msg_editor+0x54>)
 8003298:	2220      	movs	r2, #32
 800329a:	f883 210f 	strb.w	r2, [r3, #271]	; 0x10f
    msgEditor.typingCharIndex = 0;
 800329e:	4b05      	ldr	r3, [pc, #20]	; (80032b4 <init_msg_editor+0x54>)
 80032a0:	2200      	movs	r2, #0
 80032a2:	f883 2110 	strb.w	r2, [r3, #272]	; 0x110
    msgEditor.typingKeyIndex = 0;
 80032a6:	4b03      	ldr	r3, [pc, #12]	; (80032b4 <init_msg_editor+0x54>)
 80032a8:	2200      	movs	r2, #0
 80032aa:	f883 2111 	strb.w	r2, [r3, #273]	; 0x111
}
 80032ae:	bf00      	nop
 80032b0:	bd80      	pop	{r7, pc}
 80032b2:	bf00      	nop
 80032b4:	200000bc 	.word	0x200000bc
 80032b8:	200000c8 	.word	0x200000c8

080032bc <show_cursor>:

void show_cursor(uint8_t x, uint8_t y) {
 80032bc:	b580      	push	{r7, lr}
 80032be:	b084      	sub	sp, #16
 80032c0:	af02      	add	r7, sp, #8
 80032c2:	4603      	mov	r3, r0
 80032c4:	460a      	mov	r2, r1
 80032c6:	71fb      	strb	r3, [r7, #7]
 80032c8:	4613      	mov	r3, r2
 80032ca:	71bb      	strb	r3, [r7, #6]
    if (msgEditor.isTyping == 0) {
 80032cc:	4b0e      	ldr	r3, [pc, #56]	; (8003308 <show_cursor+0x4c>)
 80032ce:	f893 310e 	ldrb.w	r3, [r3, #270]	; 0x10e
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d108      	bne.n	80032e8 <show_cursor+0x2c>
        OLED_Printf(x, y, 8, 0, " ");
 80032d6:	79b9      	ldrb	r1, [r7, #6]
 80032d8:	79f8      	ldrb	r0, [r7, #7]
 80032da:	4b0c      	ldr	r3, [pc, #48]	; (800330c <show_cursor+0x50>)
 80032dc:	9300      	str	r3, [sp, #0]
 80032de:	2300      	movs	r3, #0
 80032e0:	2208      	movs	r2, #8
 80032e2:	f7fe f8e9 	bl	80014b8 <OLED_Printf>
    } else {
        OLED_Printf(x, y, 8, 0, "%c", msgEditor.typingChar);
    }
}
 80032e6:	e00b      	b.n	8003300 <show_cursor+0x44>
        OLED_Printf(x, y, 8, 0, "%c", msgEditor.typingChar);
 80032e8:	4b07      	ldr	r3, [pc, #28]	; (8003308 <show_cursor+0x4c>)
 80032ea:	f893 310f 	ldrb.w	r3, [r3, #271]	; 0x10f
 80032ee:	79b9      	ldrb	r1, [r7, #6]
 80032f0:	79f8      	ldrb	r0, [r7, #7]
 80032f2:	9301      	str	r3, [sp, #4]
 80032f4:	4b06      	ldr	r3, [pc, #24]	; (8003310 <show_cursor+0x54>)
 80032f6:	9300      	str	r3, [sp, #0]
 80032f8:	2300      	movs	r3, #0
 80032fa:	2208      	movs	r2, #8
 80032fc:	f7fe f8dc 	bl	80014b8 <OLED_Printf>
}
 8003300:	bf00      	nop
 8003302:	3708      	adds	r7, #8
 8003304:	46bd      	mov	sp, r7
 8003306:	bd80      	pop	{r7, pc}
 8003308:	200000bc 	.word	0x200000bc
 800330c:	0800d694 	.word	0x0800d694
 8003310:	0800d520 	.word	0x0800d520

08003314 <show_msg_editor>:

void show_msg_editor() {
 8003314:	b580      	push	{r7, lr}
 8003316:	b084      	sub	sp, #16
 8003318:	af02      	add	r7, sp, #8
    OLED_ClearAll();
 800331a:	f7fd ffad 	bl	8001278 <OLED_ClearAll>
    show_title_time();
 800331e:	f7ff fe2b 	bl	8002f78 <show_title_time>

    if (msgEditor.typing == 0) {
 8003322:	4b44      	ldr	r3, [pc, #272]	; (8003434 <show_msg_editor+0x120>)
 8003324:	f893 310c 	ldrb.w	r3, [r3, #268]	; 0x10c
 8003328:	2b00      	cmp	r3, #0
 800332a:	d13d      	bne.n	80033a8 <show_msg_editor+0x94>
        uint8_t x = 0;
 800332c:	2300      	movs	r3, #0
 800332e:	717b      	strb	r3, [r7, #5]
        OLED_Printf(x, 1, 8, 1, "To: ");
 8003330:	7978      	ldrb	r0, [r7, #5]
 8003332:	4b41      	ldr	r3, [pc, #260]	; (8003438 <show_msg_editor+0x124>)
 8003334:	9300      	str	r3, [sp, #0]
 8003336:	2301      	movs	r3, #1
 8003338:	2208      	movs	r2, #8
 800333a:	2101      	movs	r1, #1
 800333c:	f7fe f8bc 	bl	80014b8 <OLED_Printf>
        x += 4 * 8;
 8003340:	797b      	ldrb	r3, [r7, #5]
 8003342:	3320      	adds	r3, #32
 8003344:	717b      	strb	r3, [r7, #5]
        if (msgEditor.toLen == 0) {
 8003346:	4b3b      	ldr	r3, [pc, #236]	; (8003434 <show_msg_editor+0x120>)
 8003348:	7adb      	ldrb	r3, [r3, #11]
 800334a:	2b00      	cmp	r3, #0
 800334c:	d108      	bne.n	8003360 <show_msg_editor+0x4c>
            OLED_Printf(x, 1, 8, 0, " ");
 800334e:	7978      	ldrb	r0, [r7, #5]
 8003350:	4b3a      	ldr	r3, [pc, #232]	; (800343c <show_msg_editor+0x128>)
 8003352:	9300      	str	r3, [sp, #0]
 8003354:	2300      	movs	r3, #0
 8003356:	2208      	movs	r2, #8
 8003358:	2101      	movs	r1, #1
 800335a:	f7fe f8ad 	bl	80014b8 <OLED_Printf>
 800335e:	e018      	b.n	8003392 <show_msg_editor+0x7e>
        } else {
            OLED_Printf(x, 1, 8, 1, "%s", msgEditor.to);
 8003360:	7978      	ldrb	r0, [r7, #5]
 8003362:	4b34      	ldr	r3, [pc, #208]	; (8003434 <show_msg_editor+0x120>)
 8003364:	9301      	str	r3, [sp, #4]
 8003366:	4b36      	ldr	r3, [pc, #216]	; (8003440 <show_msg_editor+0x12c>)
 8003368:	9300      	str	r3, [sp, #0]
 800336a:	2301      	movs	r3, #1
 800336c:	2208      	movs	r2, #8
 800336e:	2101      	movs	r1, #1
 8003370:	f7fe f8a2 	bl	80014b8 <OLED_Printf>
            x += msgEditor.toLen * 8;
 8003374:	4b2f      	ldr	r3, [pc, #188]	; (8003434 <show_msg_editor+0x120>)
 8003376:	7adb      	ldrb	r3, [r3, #11]
 8003378:	00db      	lsls	r3, r3, #3
 800337a:	b2da      	uxtb	r2, r3
 800337c:	797b      	ldrb	r3, [r7, #5]
 800337e:	4413      	add	r3, r2
 8003380:	717b      	strb	r3, [r7, #5]
            OLED_Printf(x, 1, 8, 0, " ");
 8003382:	7978      	ldrb	r0, [r7, #5]
 8003384:	4b2d      	ldr	r3, [pc, #180]	; (800343c <show_msg_editor+0x128>)
 8003386:	9300      	str	r3, [sp, #0]
 8003388:	2300      	movs	r3, #0
 800338a:	2208      	movs	r2, #8
 800338c:	2101      	movs	r1, #1
 800338e:	f7fe f893 	bl	80014b8 <OLED_Printf>
        }
        OLED_Printf(0, 2, 8, 1, "Content: %s", msgEditor.content);
 8003392:	4b2c      	ldr	r3, [pc, #176]	; (8003444 <show_msg_editor+0x130>)
 8003394:	9301      	str	r3, [sp, #4]
 8003396:	4b2c      	ldr	r3, [pc, #176]	; (8003448 <show_msg_editor+0x134>)
 8003398:	9300      	str	r3, [sp, #0]
 800339a:	2301      	movs	r3, #1
 800339c:	2208      	movs	r2, #8
 800339e:	2102      	movs	r1, #2
 80033a0:	2000      	movs	r0, #0
 80033a2:	f7fe f889 	bl	80014b8 <OLED_Printf>
                y++;
            }
            show_cursor(x, y);
        }
    }
}
 80033a6:	e041      	b.n	800342c <show_msg_editor+0x118>
        OLED_Printf(0, 1, 8, 1, "To: %s", msgEditor.to);
 80033a8:	4b22      	ldr	r3, [pc, #136]	; (8003434 <show_msg_editor+0x120>)
 80033aa:	9301      	str	r3, [sp, #4]
 80033ac:	4b27      	ldr	r3, [pc, #156]	; (800344c <show_msg_editor+0x138>)
 80033ae:	9300      	str	r3, [sp, #0]
 80033b0:	2301      	movs	r3, #1
 80033b2:	2208      	movs	r2, #8
 80033b4:	2101      	movs	r1, #1
 80033b6:	2000      	movs	r0, #0
 80033b8:	f7fe f87e 	bl	80014b8 <OLED_Printf>
        OLED_Printf(0, 2, 8, 1, "Content: ");
 80033bc:	4b24      	ldr	r3, [pc, #144]	; (8003450 <show_msg_editor+0x13c>)
 80033be:	9300      	str	r3, [sp, #0]
 80033c0:	2301      	movs	r3, #1
 80033c2:	2208      	movs	r2, #8
 80033c4:	2102      	movs	r1, #2
 80033c6:	2000      	movs	r0, #0
 80033c8:	f7fe f876 	bl	80014b8 <OLED_Printf>
        uint8_t x = 0;
 80033cc:	2300      	movs	r3, #0
 80033ce:	71fb      	strb	r3, [r7, #7]
        uint8_t y = 3;
 80033d0:	2303      	movs	r3, #3
 80033d2:	71bb      	strb	r3, [r7, #6]
        if (msgEditor.contentLen == 0) {
 80033d4:	4b17      	ldr	r3, [pc, #92]	; (8003434 <show_msg_editor+0x120>)
 80033d6:	f893 310b 	ldrb.w	r3, [r3, #267]	; 0x10b
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d106      	bne.n	80033ec <show_msg_editor+0xd8>
            show_cursor(x, y);
 80033de:	79ba      	ldrb	r2, [r7, #6]
 80033e0:	79fb      	ldrb	r3, [r7, #7]
 80033e2:	4611      	mov	r1, r2
 80033e4:	4618      	mov	r0, r3
 80033e6:	f7ff ff69 	bl	80032bc <show_cursor>
}
 80033ea:	e01f      	b.n	800342c <show_msg_editor+0x118>
            OLED_Printf(x, y, 8, 1, "%s", msgEditor.content);
 80033ec:	79b9      	ldrb	r1, [r7, #6]
 80033ee:	79f8      	ldrb	r0, [r7, #7]
 80033f0:	4b14      	ldr	r3, [pc, #80]	; (8003444 <show_msg_editor+0x130>)
 80033f2:	9301      	str	r3, [sp, #4]
 80033f4:	4b12      	ldr	r3, [pc, #72]	; (8003440 <show_msg_editor+0x12c>)
 80033f6:	9300      	str	r3, [sp, #0]
 80033f8:	2301      	movs	r3, #1
 80033fa:	2208      	movs	r2, #8
 80033fc:	f7fe f85c 	bl	80014b8 <OLED_Printf>
            x += msgEditor.contentLen * 8;
 8003400:	4b0c      	ldr	r3, [pc, #48]	; (8003434 <show_msg_editor+0x120>)
 8003402:	f893 310b 	ldrb.w	r3, [r3, #267]	; 0x10b
 8003406:	00db      	lsls	r3, r3, #3
 8003408:	b2da      	uxtb	r2, r3
 800340a:	79fb      	ldrb	r3, [r7, #7]
 800340c:	4413      	add	r3, r2
 800340e:	71fb      	strb	r3, [r7, #7]
            if (x > 127 - 8) {
 8003410:	79fb      	ldrb	r3, [r7, #7]
 8003412:	2b77      	cmp	r3, #119	; 0x77
 8003414:	d904      	bls.n	8003420 <show_msg_editor+0x10c>
                x = 0;
 8003416:	2300      	movs	r3, #0
 8003418:	71fb      	strb	r3, [r7, #7]
                y++;
 800341a:	79bb      	ldrb	r3, [r7, #6]
 800341c:	3301      	adds	r3, #1
 800341e:	71bb      	strb	r3, [r7, #6]
            show_cursor(x, y);
 8003420:	79ba      	ldrb	r2, [r7, #6]
 8003422:	79fb      	ldrb	r3, [r7, #7]
 8003424:	4611      	mov	r1, r2
 8003426:	4618      	mov	r0, r3
 8003428:	f7ff ff48 	bl	80032bc <show_cursor>
}
 800342c:	bf00      	nop
 800342e:	3708      	adds	r7, #8
 8003430:	46bd      	mov	sp, r7
 8003432:	bd80      	pop	{r7, pc}
 8003434:	200000bc 	.word	0x200000bc
 8003438:	0800d698 	.word	0x0800d698
 800343c:	0800d694 	.word	0x0800d694
 8003440:	0800d6a0 	.word	0x0800d6a0
 8003444:	200000c8 	.word	0x200000c8
 8003448:	0800d6a4 	.word	0x0800d6a4
 800344c:	0800d6b0 	.word	0x0800d6b0
 8003450:	0800d6b8 	.word	0x0800d6b8

08003454 <type>:

void type(uint8_t typingKeyIndex) {
 8003454:	b480      	push	{r7}
 8003456:	b083      	sub	sp, #12
 8003458:	af00      	add	r7, sp, #0
 800345a:	4603      	mov	r3, r0
 800345c:	71fb      	strb	r3, [r7, #7]
    if (msgEditor.typing == 0) {
 800345e:	4b4b      	ldr	r3, [pc, #300]	; (800358c <type+0x138>)
 8003460:	f893 310c 	ldrb.w	r3, [r3, #268]	; 0x10c
 8003464:	2b00      	cmp	r3, #0
 8003466:	d111      	bne.n	800348c <type+0x38>
        msgEditor.to[msgEditor.toLen++] = keyPad[typingKeyIndex][0];
 8003468:	79fa      	ldrb	r2, [r7, #7]
 800346a:	4b48      	ldr	r3, [pc, #288]	; (800358c <type+0x138>)
 800346c:	7adb      	ldrb	r3, [r3, #11]
 800346e:	1c59      	adds	r1, r3, #1
 8003470:	b2c8      	uxtb	r0, r1
 8003472:	4946      	ldr	r1, [pc, #280]	; (800358c <type+0x138>)
 8003474:	72c8      	strb	r0, [r1, #11]
 8003476:	4618      	mov	r0, r3
 8003478:	4945      	ldr	r1, [pc, #276]	; (8003590 <type+0x13c>)
 800347a:	4613      	mov	r3, r2
 800347c:	009b      	lsls	r3, r3, #2
 800347e:	4413      	add	r3, r2
 8003480:	005b      	lsls	r3, r3, #1
 8003482:	440b      	add	r3, r1
 8003484:	781a      	ldrb	r2, [r3, #0]
 8003486:	4b41      	ldr	r3, [pc, #260]	; (800358c <type+0x138>)
 8003488:	541a      	strb	r2, [r3, r0]
            msgEditor.typingCharIndex = 0;
            msgEditor.typingKeyIndex = typingKeyIndex;
            msgEditor.typingChar = keyPad[msgEditor.typingKeyIndex][msgEditor.typingCharIndex];
        }
    }
}
 800348a:	e079      	b.n	8003580 <type+0x12c>
        if (msgEditor.isTyping == 1 && msgEditor.typingKeyIndex != typingKeyIndex) {
 800348c:	4b3f      	ldr	r3, [pc, #252]	; (800358c <type+0x138>)
 800348e:	f893 310e 	ldrb.w	r3, [r3, #270]	; 0x10e
 8003492:	2b01      	cmp	r3, #1
 8003494:	d118      	bne.n	80034c8 <type+0x74>
 8003496:	4b3d      	ldr	r3, [pc, #244]	; (800358c <type+0x138>)
 8003498:	f893 3111 	ldrb.w	r3, [r3, #273]	; 0x111
 800349c:	79fa      	ldrb	r2, [r7, #7]
 800349e:	429a      	cmp	r2, r3
 80034a0:	d012      	beq.n	80034c8 <type+0x74>
            msgEditor.isTyping = 0;
 80034a2:	4b3a      	ldr	r3, [pc, #232]	; (800358c <type+0x138>)
 80034a4:	2200      	movs	r2, #0
 80034a6:	f883 210e 	strb.w	r2, [r3, #270]	; 0x10e
            msgEditor.content[msgEditor.contentLen++] = msgEditor.typingChar;
 80034aa:	4b38      	ldr	r3, [pc, #224]	; (800358c <type+0x138>)
 80034ac:	f893 310b 	ldrb.w	r3, [r3, #267]	; 0x10b
 80034b0:	1c5a      	adds	r2, r3, #1
 80034b2:	b2d1      	uxtb	r1, r2
 80034b4:	4a35      	ldr	r2, [pc, #212]	; (800358c <type+0x138>)
 80034b6:	f882 110b 	strb.w	r1, [r2, #267]	; 0x10b
 80034ba:	4619      	mov	r1, r3
 80034bc:	4b33      	ldr	r3, [pc, #204]	; (800358c <type+0x138>)
 80034be:	f893 210f 	ldrb.w	r2, [r3, #271]	; 0x10f
 80034c2:	4b32      	ldr	r3, [pc, #200]	; (800358c <type+0x138>)
 80034c4:	440b      	add	r3, r1
 80034c6:	731a      	strb	r2, [r3, #12]
        if (msgEditor.isTyping == 1 && msgEditor.typingKeyIndex == typingKeyIndex) {
 80034c8:	4b30      	ldr	r3, [pc, #192]	; (800358c <type+0x138>)
 80034ca:	f893 310e 	ldrb.w	r3, [r3, #270]	; 0x10e
 80034ce:	2b01      	cmp	r3, #1
 80034d0:	d137      	bne.n	8003542 <type+0xee>
 80034d2:	4b2e      	ldr	r3, [pc, #184]	; (800358c <type+0x138>)
 80034d4:	f893 3111 	ldrb.w	r3, [r3, #273]	; 0x111
 80034d8:	79fa      	ldrb	r2, [r7, #7]
 80034da:	429a      	cmp	r2, r3
 80034dc:	d131      	bne.n	8003542 <type+0xee>
            msgEditor.typingCharIndex++;
 80034de:	4b2b      	ldr	r3, [pc, #172]	; (800358c <type+0x138>)
 80034e0:	f893 3110 	ldrb.w	r3, [r3, #272]	; 0x110
 80034e4:	3301      	adds	r3, #1
 80034e6:	b2da      	uxtb	r2, r3
 80034e8:	4b28      	ldr	r3, [pc, #160]	; (800358c <type+0x138>)
 80034ea:	f883 2110 	strb.w	r2, [r3, #272]	; 0x110
            if (keyPad[msgEditor.typingKeyIndex][msgEditor.typingCharIndex] == '\0') {
 80034ee:	4b27      	ldr	r3, [pc, #156]	; (800358c <type+0x138>)
 80034f0:	f893 3111 	ldrb.w	r3, [r3, #273]	; 0x111
 80034f4:	4619      	mov	r1, r3
 80034f6:	4b25      	ldr	r3, [pc, #148]	; (800358c <type+0x138>)
 80034f8:	f893 3110 	ldrb.w	r3, [r3, #272]	; 0x110
 80034fc:	4618      	mov	r0, r3
 80034fe:	4a24      	ldr	r2, [pc, #144]	; (8003590 <type+0x13c>)
 8003500:	460b      	mov	r3, r1
 8003502:	009b      	lsls	r3, r3, #2
 8003504:	440b      	add	r3, r1
 8003506:	005b      	lsls	r3, r3, #1
 8003508:	4413      	add	r3, r2
 800350a:	4403      	add	r3, r0
 800350c:	781b      	ldrb	r3, [r3, #0]
 800350e:	2b00      	cmp	r3, #0
 8003510:	d103      	bne.n	800351a <type+0xc6>
                msgEditor.typingCharIndex = 0;
 8003512:	4b1e      	ldr	r3, [pc, #120]	; (800358c <type+0x138>)
 8003514:	2200      	movs	r2, #0
 8003516:	f883 2110 	strb.w	r2, [r3, #272]	; 0x110
            msgEditor.typingChar = keyPad[msgEditor.typingKeyIndex][msgEditor.typingCharIndex];
 800351a:	4b1c      	ldr	r3, [pc, #112]	; (800358c <type+0x138>)
 800351c:	f893 3111 	ldrb.w	r3, [r3, #273]	; 0x111
 8003520:	4619      	mov	r1, r3
 8003522:	4b1a      	ldr	r3, [pc, #104]	; (800358c <type+0x138>)
 8003524:	f893 3110 	ldrb.w	r3, [r3, #272]	; 0x110
 8003528:	4618      	mov	r0, r3
 800352a:	4a19      	ldr	r2, [pc, #100]	; (8003590 <type+0x13c>)
 800352c:	460b      	mov	r3, r1
 800352e:	009b      	lsls	r3, r3, #2
 8003530:	440b      	add	r3, r1
 8003532:	005b      	lsls	r3, r3, #1
 8003534:	4413      	add	r3, r2
 8003536:	4403      	add	r3, r0
 8003538:	781a      	ldrb	r2, [r3, #0]
 800353a:	4b14      	ldr	r3, [pc, #80]	; (800358c <type+0x138>)
 800353c:	f883 210f 	strb.w	r2, [r3, #271]	; 0x10f
}
 8003540:	e01e      	b.n	8003580 <type+0x12c>
            msgEditor.isTyping = 1;
 8003542:	4b12      	ldr	r3, [pc, #72]	; (800358c <type+0x138>)
 8003544:	2201      	movs	r2, #1
 8003546:	f883 210e 	strb.w	r2, [r3, #270]	; 0x10e
            msgEditor.typingCharIndex = 0;
 800354a:	4b10      	ldr	r3, [pc, #64]	; (800358c <type+0x138>)
 800354c:	2200      	movs	r2, #0
 800354e:	f883 2110 	strb.w	r2, [r3, #272]	; 0x110
            msgEditor.typingKeyIndex = typingKeyIndex;
 8003552:	4a0e      	ldr	r2, [pc, #56]	; (800358c <type+0x138>)
 8003554:	79fb      	ldrb	r3, [r7, #7]
 8003556:	f882 3111 	strb.w	r3, [r2, #273]	; 0x111
            msgEditor.typingChar = keyPad[msgEditor.typingKeyIndex][msgEditor.typingCharIndex];
 800355a:	4b0c      	ldr	r3, [pc, #48]	; (800358c <type+0x138>)
 800355c:	f893 3111 	ldrb.w	r3, [r3, #273]	; 0x111
 8003560:	4619      	mov	r1, r3
 8003562:	4b0a      	ldr	r3, [pc, #40]	; (800358c <type+0x138>)
 8003564:	f893 3110 	ldrb.w	r3, [r3, #272]	; 0x110
 8003568:	4618      	mov	r0, r3
 800356a:	4a09      	ldr	r2, [pc, #36]	; (8003590 <type+0x13c>)
 800356c:	460b      	mov	r3, r1
 800356e:	009b      	lsls	r3, r3, #2
 8003570:	440b      	add	r3, r1
 8003572:	005b      	lsls	r3, r3, #1
 8003574:	4413      	add	r3, r2
 8003576:	4403      	add	r3, r0
 8003578:	781a      	ldrb	r2, [r3, #0]
 800357a:	4b04      	ldr	r3, [pc, #16]	; (800358c <type+0x138>)
 800357c:	f883 210f 	strb.w	r2, [r3, #271]	; 0x10f
}
 8003580:	bf00      	nop
 8003582:	370c      	adds	r7, #12
 8003584:	46bd      	mov	sp, r7
 8003586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800358a:	4770      	bx	lr
 800358c:	200000bc 	.word	0x200000bc
 8003590:	20000044 	.word	0x20000044

08003594 <show_msg_sender>:

void show_msg_sender() {
 8003594:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003596:	b093      	sub	sp, #76	; 0x4c
 8003598:	af10      	add	r7, sp, #64	; 0x40
    OLED_ClearAll();
 800359a:	f7fd fe6d 	bl	8001278 <OLED_ClearAll>
    show_title_time();
 800359e:	f7ff fceb 	bl	8002f78 <show_title_time>

    uint8_t brk_flag = 1;
 80035a2:	2301      	movs	r3, #1
 80035a4:	71fb      	strb	r3, [r7, #7]
    show_msg_editor();
 80035a6:	f7ff feb5 	bl	8003314 <show_msg_editor>
    while (brk_flag) {
 80035aa:	e0fd      	b.n	80037a8 <show_msg_sender+0x214>
        char key = keypad_scan(htim2);
 80035ac:	4e83      	ldr	r6, [pc, #524]	; (80037bc <show_msg_sender+0x228>)
 80035ae:	466d      	mov	r5, sp
 80035b0:	f106 0410 	add.w	r4, r6, #16
 80035b4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80035b6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80035b8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80035ba:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80035bc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80035be:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80035c0:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 80035c4:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 80035c8:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 80035cc:	f000 ffb4 	bl	8004538 <keypad_scan>
 80035d0:	4603      	mov	r3, r0
 80035d2:	71bb      	strb	r3, [r7, #6]
        if (key == 0) continue;
 80035d4:	79bb      	ldrb	r3, [r7, #6]
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d100      	bne.n	80035dc <show_msg_sender+0x48>
 80035da:	e0e5      	b.n	80037a8 <show_msg_sender+0x214>
        switch (key) {
 80035dc:	79bb      	ldrb	r3, [r7, #6]
 80035de:	3b23      	subs	r3, #35	; 0x23
 80035e0:	2b16      	cmp	r3, #22
 80035e2:	f200 80dc 	bhi.w	800379e <show_msg_sender+0x20a>
 80035e6:	a201      	add	r2, pc, #4	; (adr r2, 80035ec <show_msg_sender+0x58>)
 80035e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80035ec:	0800370f 	.word	0x0800370f
 80035f0:	0800379f 	.word	0x0800379f
 80035f4:	0800379f 	.word	0x0800379f
 80035f8:	0800379f 	.word	0x0800379f
 80035fc:	0800379f 	.word	0x0800379f
 8003600:	0800379f 	.word	0x0800379f
 8003604:	0800379f 	.word	0x0800379f
 8003608:	08003691 	.word	0x08003691
 800360c:	0800379f 	.word	0x0800379f
 8003610:	0800379f 	.word	0x0800379f
 8003614:	0800379f 	.word	0x0800379f
 8003618:	0800379f 	.word	0x0800379f
 800361c:	0800379f 	.word	0x0800379f
 8003620:	08003707 	.word	0x08003707
 8003624:	08003649 	.word	0x08003649
 8003628:	08003651 	.word	0x08003651
 800362c:	08003659 	.word	0x08003659
 8003630:	08003661 	.word	0x08003661
 8003634:	08003669 	.word	0x08003669
 8003638:	08003671 	.word	0x08003671
 800363c:	08003679 	.word	0x08003679
 8003640:	08003681 	.word	0x08003681
 8003644:	08003689 	.word	0x08003689
            case '1':
                type(0);
 8003648:	2000      	movs	r0, #0
 800364a:	f7ff ff03 	bl	8003454 <type>
                break;
 800364e:	e0a6      	b.n	800379e <show_msg_sender+0x20a>
            case '2':
                type(1);
 8003650:	2001      	movs	r0, #1
 8003652:	f7ff feff 	bl	8003454 <type>
                break;
 8003656:	e0a2      	b.n	800379e <show_msg_sender+0x20a>
            case '3':
                type(2);
 8003658:	2002      	movs	r0, #2
 800365a:	f7ff fefb 	bl	8003454 <type>
                break;
 800365e:	e09e      	b.n	800379e <show_msg_sender+0x20a>
            case '4':
                type(3);
 8003660:	2003      	movs	r0, #3
 8003662:	f7ff fef7 	bl	8003454 <type>
                break;
 8003666:	e09a      	b.n	800379e <show_msg_sender+0x20a>
            case '5':
                type(4);
 8003668:	2004      	movs	r0, #4
 800366a:	f7ff fef3 	bl	8003454 <type>
                break;
 800366e:	e096      	b.n	800379e <show_msg_sender+0x20a>
            case '6':
                type(5);
 8003670:	2005      	movs	r0, #5
 8003672:	f7ff feef 	bl	8003454 <type>
                break;
 8003676:	e092      	b.n	800379e <show_msg_sender+0x20a>
            case '7':
                type(6);
 8003678:	2006      	movs	r0, #6
 800367a:	f7ff feeb 	bl	8003454 <type>
                break;
 800367e:	e08e      	b.n	800379e <show_msg_sender+0x20a>
            case '8':
                type(7);
 8003680:	2007      	movs	r0, #7
 8003682:	f7ff fee7 	bl	8003454 <type>
                break;
 8003686:	e08a      	b.n	800379e <show_msg_sender+0x20a>
            case '9':
                type(8);
 8003688:	2008      	movs	r0, #8
 800368a:	f7ff fee3 	bl	8003454 <type>
                break;
 800368e:	e086      	b.n	800379e <show_msg_sender+0x20a>
            case '*':
                if (msgEditor.typing == 0) {
 8003690:	4b4b      	ldr	r3, [pc, #300]	; (80037c0 <show_msg_sender+0x22c>)
 8003692:	f893 310c 	ldrb.w	r3, [r3, #268]	; 0x10c
 8003696:	2b00      	cmp	r3, #0
 8003698:	d110      	bne.n	80036bc <show_msg_sender+0x128>
                    if (msgEditor.toLen > 0) {
 800369a:	4b49      	ldr	r3, [pc, #292]	; (80037c0 <show_msg_sender+0x22c>)
 800369c:	7adb      	ldrb	r3, [r3, #11]
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d07c      	beq.n	800379c <show_msg_sender+0x208>
                        msgEditor.to[--msgEditor.toLen] = '\0';
 80036a2:	4b47      	ldr	r3, [pc, #284]	; (80037c0 <show_msg_sender+0x22c>)
 80036a4:	7adb      	ldrb	r3, [r3, #11]
 80036a6:	3b01      	subs	r3, #1
 80036a8:	b2da      	uxtb	r2, r3
 80036aa:	4b45      	ldr	r3, [pc, #276]	; (80037c0 <show_msg_sender+0x22c>)
 80036ac:	72da      	strb	r2, [r3, #11]
 80036ae:	4b44      	ldr	r3, [pc, #272]	; (80037c0 <show_msg_sender+0x22c>)
 80036b0:	7adb      	ldrb	r3, [r3, #11]
 80036b2:	461a      	mov	r2, r3
 80036b4:	4b42      	ldr	r3, [pc, #264]	; (80037c0 <show_msg_sender+0x22c>)
 80036b6:	2100      	movs	r1, #0
 80036b8:	5499      	strb	r1, [r3, r2]
                        } else {
                            msgEditor.typing = 0;
                        }
                    }
                }
                break;
 80036ba:	e06f      	b.n	800379c <show_msg_sender+0x208>
                    if (msgEditor.isTyping == 1) {
 80036bc:	4b40      	ldr	r3, [pc, #256]	; (80037c0 <show_msg_sender+0x22c>)
 80036be:	f893 310e 	ldrb.w	r3, [r3, #270]	; 0x10e
 80036c2:	2b01      	cmp	r3, #1
 80036c4:	d104      	bne.n	80036d0 <show_msg_sender+0x13c>
                        msgEditor.isTyping = 0;
 80036c6:	4b3e      	ldr	r3, [pc, #248]	; (80037c0 <show_msg_sender+0x22c>)
 80036c8:	2200      	movs	r2, #0
 80036ca:	f883 210e 	strb.w	r2, [r3, #270]	; 0x10e
                break;
 80036ce:	e065      	b.n	800379c <show_msg_sender+0x208>
                        if (msgEditor.contentLen > 0) {
 80036d0:	4b3b      	ldr	r3, [pc, #236]	; (80037c0 <show_msg_sender+0x22c>)
 80036d2:	f893 310b 	ldrb.w	r3, [r3, #267]	; 0x10b
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	d010      	beq.n	80036fc <show_msg_sender+0x168>
                            msgEditor.content[--msgEditor.contentLen] = '\0';
 80036da:	4b39      	ldr	r3, [pc, #228]	; (80037c0 <show_msg_sender+0x22c>)
 80036dc:	f893 310b 	ldrb.w	r3, [r3, #267]	; 0x10b
 80036e0:	3b01      	subs	r3, #1
 80036e2:	b2da      	uxtb	r2, r3
 80036e4:	4b36      	ldr	r3, [pc, #216]	; (80037c0 <show_msg_sender+0x22c>)
 80036e6:	f883 210b 	strb.w	r2, [r3, #267]	; 0x10b
 80036ea:	4b35      	ldr	r3, [pc, #212]	; (80037c0 <show_msg_sender+0x22c>)
 80036ec:	f893 310b 	ldrb.w	r3, [r3, #267]	; 0x10b
 80036f0:	461a      	mov	r2, r3
 80036f2:	4b33      	ldr	r3, [pc, #204]	; (80037c0 <show_msg_sender+0x22c>)
 80036f4:	4413      	add	r3, r2
 80036f6:	2200      	movs	r2, #0
 80036f8:	731a      	strb	r2, [r3, #12]
                break;
 80036fa:	e04f      	b.n	800379c <show_msg_sender+0x208>
                            msgEditor.typing = 0;
 80036fc:	4b30      	ldr	r3, [pc, #192]	; (80037c0 <show_msg_sender+0x22c>)
 80036fe:	2200      	movs	r2, #0
 8003700:	f883 210c 	strb.w	r2, [r3, #268]	; 0x10c
                break;
 8003704:	e04a      	b.n	800379c <show_msg_sender+0x208>
            case '0':
                type(10);
 8003706:	200a      	movs	r0, #10
 8003708:	f7ff fea4 	bl	8003454 <type>
                break;
 800370c:	e047      	b.n	800379e <show_msg_sender+0x20a>
            case '#':
                if (msgEditor.typing == 0) {
 800370e:	4b2c      	ldr	r3, [pc, #176]	; (80037c0 <show_msg_sender+0x22c>)
 8003710:	f893 310c 	ldrb.w	r3, [r3, #268]	; 0x10c
 8003714:	2b00      	cmp	r3, #0
 8003716:	d104      	bne.n	8003722 <show_msg_sender+0x18e>
                    msgEditor.typing = 1;
 8003718:	4b29      	ldr	r3, [pc, #164]	; (80037c0 <show_msg_sender+0x22c>)
 800371a:	2201      	movs	r2, #1
 800371c:	f883 210c 	strb.w	r2, [r3, #268]	; 0x10c
                    OLED_Printf(0, 3, 16, 1, "Msg Sent!");
                    HAL_Delay(1000);
                    init_msg_editor();
                    brk_flag = 0;
                }
                break;
 8003720:	e03d      	b.n	800379e <show_msg_sender+0x20a>
                } else if (msgEditor.typing == 1 && msgEditor.isTyping == 1) {
 8003722:	4b27      	ldr	r3, [pc, #156]	; (80037c0 <show_msg_sender+0x22c>)
 8003724:	f893 310c 	ldrb.w	r3, [r3, #268]	; 0x10c
 8003728:	2b01      	cmp	r3, #1
 800372a:	d118      	bne.n	800375e <show_msg_sender+0x1ca>
 800372c:	4b24      	ldr	r3, [pc, #144]	; (80037c0 <show_msg_sender+0x22c>)
 800372e:	f893 310e 	ldrb.w	r3, [r3, #270]	; 0x10e
 8003732:	2b01      	cmp	r3, #1
 8003734:	d113      	bne.n	800375e <show_msg_sender+0x1ca>
                    msgEditor.isTyping = 0;
 8003736:	4b22      	ldr	r3, [pc, #136]	; (80037c0 <show_msg_sender+0x22c>)
 8003738:	2200      	movs	r2, #0
 800373a:	f883 210e 	strb.w	r2, [r3, #270]	; 0x10e
                    msgEditor.content[msgEditor.contentLen++] = msgEditor.typingChar;
 800373e:	4b20      	ldr	r3, [pc, #128]	; (80037c0 <show_msg_sender+0x22c>)
 8003740:	f893 310b 	ldrb.w	r3, [r3, #267]	; 0x10b
 8003744:	1c5a      	adds	r2, r3, #1
 8003746:	b2d1      	uxtb	r1, r2
 8003748:	4a1d      	ldr	r2, [pc, #116]	; (80037c0 <show_msg_sender+0x22c>)
 800374a:	f882 110b 	strb.w	r1, [r2, #267]	; 0x10b
 800374e:	4619      	mov	r1, r3
 8003750:	4b1b      	ldr	r3, [pc, #108]	; (80037c0 <show_msg_sender+0x22c>)
 8003752:	f893 210f 	ldrb.w	r2, [r3, #271]	; 0x10f
 8003756:	4b1a      	ldr	r3, [pc, #104]	; (80037c0 <show_msg_sender+0x22c>)
 8003758:	440b      	add	r3, r1
 800375a:	731a      	strb	r2, [r3, #12]
                break;
 800375c:	e01f      	b.n	800379e <show_msg_sender+0x20a>
                    OLED_ClearAll();
 800375e:	f7fd fd8b 	bl	8001278 <OLED_ClearAll>
                    OLED_Printf(0, 3, 16, 1, "Sending...");
 8003762:	4b18      	ldr	r3, [pc, #96]	; (80037c4 <show_msg_sender+0x230>)
 8003764:	9300      	str	r3, [sp, #0]
 8003766:	2301      	movs	r3, #1
 8003768:	2210      	movs	r2, #16
 800376a:	2103      	movs	r1, #3
 800376c:	2000      	movs	r0, #0
 800376e:	f7fd fea3 	bl	80014b8 <OLED_Printf>
                    send_msg();
 8003772:	f7ff fd41 	bl	80031f8 <send_msg>
                    OLED_ClearAll();
 8003776:	f7fd fd7f 	bl	8001278 <OLED_ClearAll>
                    OLED_Printf(0, 3, 16, 1, "Msg Sent!");
 800377a:	4b13      	ldr	r3, [pc, #76]	; (80037c8 <show_msg_sender+0x234>)
 800377c:	9300      	str	r3, [sp, #0]
 800377e:	2301      	movs	r3, #1
 8003780:	2210      	movs	r2, #16
 8003782:	2103      	movs	r1, #3
 8003784:	2000      	movs	r0, #0
 8003786:	f7fd fe97 	bl	80014b8 <OLED_Printf>
                    HAL_Delay(1000);
 800378a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800378e:	f001 fb33 	bl	8004df8 <HAL_Delay>
                    init_msg_editor();
 8003792:	f7ff fd65 	bl	8003260 <init_msg_editor>
                    brk_flag = 0;
 8003796:	2300      	movs	r3, #0
 8003798:	71fb      	strb	r3, [r7, #7]
                break;
 800379a:	e000      	b.n	800379e <show_msg_sender+0x20a>
                break;
 800379c:	bf00      	nop
        }
        if (brk_flag) show_msg_editor();
 800379e:	79fb      	ldrb	r3, [r7, #7]
 80037a0:	2b00      	cmp	r3, #0
 80037a2:	d001      	beq.n	80037a8 <show_msg_sender+0x214>
 80037a4:	f7ff fdb6 	bl	8003314 <show_msg_editor>
    while (brk_flag) {
 80037a8:	79fb      	ldrb	r3, [r7, #7]
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	f47f aefe 	bne.w	80035ac <show_msg_sender+0x18>
    }
    page_back();
 80037b0:	f7ff f83e 	bl	8002830 <page_back>
}
 80037b4:	bf00      	nop
 80037b6:	370c      	adds	r7, #12
 80037b8:	46bd      	mov	sp, r7
 80037ba:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80037bc:	200013dc 	.word	0x200013dc
 80037c0:	200000bc 	.word	0x200000bc
 80037c4:	0800d6c4 	.word	0x0800d6c4
 80037c8:	0800d6d0 	.word	0x0800d6d0

080037cc <get_msg_inbox>:

void get_msg_inbox(){
 80037cc:	b580      	push	{r7, lr}
 80037ce:	b082      	sub	sp, #8
 80037d0:	af02      	add	r7, sp, #8
    OLED_ClearAll();
 80037d2:	f7fd fd51 	bl	8001278 <OLED_ClearAll>
    OLED_Printf(0, 3, 16, 1, "Loading...");
 80037d6:	4b0a      	ldr	r3, [pc, #40]	; (8003800 <get_msg_inbox+0x34>)
 80037d8:	9300      	str	r3, [sp, #0]
 80037da:	2301      	movs	r3, #1
 80037dc:	2210      	movs	r2, #16
 80037de:	2103      	movs	r1, #3
 80037e0:	2000      	movs	r0, #0
 80037e2:	f7fd fe69 	bl	80014b8 <OLED_Printf>
    udp_init();
 80037e6:	f7ff fc43 	bl	8003070 <udp_init>
    // {"func":"get_msg_inbox", "id":"1234567890"}
    printf("{\"func\":\"get_msg_inbox\", \"id\":\"%s\", \"clbk\":\"show_msg_inbox\"}\r\n", ownID);
 80037ea:	4906      	ldr	r1, [pc, #24]	; (8003804 <get_msg_inbox+0x38>)
 80037ec:	4806      	ldr	r0, [pc, #24]	; (8003808 <get_msg_inbox+0x3c>)
 80037ee:	f006 f909 	bl	8009a04 <iprintf>
    HAL_Delay(500);
 80037f2:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80037f6:	f001 faff 	bl	8004df8 <HAL_Delay>
}
 80037fa:	bf00      	nop
 80037fc:	46bd      	mov	sp, r7
 80037fe:	bd80      	pop	{r7, pc}
 8003800:	0800d6dc 	.word	0x0800d6dc
 8003804:	20000034 	.word	0x20000034
 8003808:	0800d6e8 	.word	0x0800d6e8

0800380c <get_msg_outbox>:

void get_msg_outbox(){
 800380c:	b580      	push	{r7, lr}
 800380e:	b082      	sub	sp, #8
 8003810:	af02      	add	r7, sp, #8
    OLED_ClearAll();
 8003812:	f7fd fd31 	bl	8001278 <OLED_ClearAll>
    OLED_Printf(0, 3, 16, 1, "Loading...");
 8003816:	4b0a      	ldr	r3, [pc, #40]	; (8003840 <get_msg_outbox+0x34>)
 8003818:	9300      	str	r3, [sp, #0]
 800381a:	2301      	movs	r3, #1
 800381c:	2210      	movs	r2, #16
 800381e:	2103      	movs	r1, #3
 8003820:	2000      	movs	r0, #0
 8003822:	f7fd fe49 	bl	80014b8 <OLED_Printf>
    udp_init();
 8003826:	f7ff fc23 	bl	8003070 <udp_init>
    // {"func":"get_msg_outbox", "id":"1234567890"}
    printf("{\"func\":\"get_msg_outbox\", \"id\":\"%s\", \"clbk\":\"show_msg_outbox\"}\r\n", ownID);
 800382a:	4906      	ldr	r1, [pc, #24]	; (8003844 <get_msg_outbox+0x38>)
 800382c:	4806      	ldr	r0, [pc, #24]	; (8003848 <get_msg_outbox+0x3c>)
 800382e:	f006 f8e9 	bl	8009a04 <iprintf>
    HAL_Delay(500);
 8003832:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8003836:	f001 fadf 	bl	8004df8 <HAL_Delay>
}
 800383a:	bf00      	nop
 800383c:	46bd      	mov	sp, r7
 800383e:	bd80      	pop	{r7, pc}
 8003840:	0800d6dc 	.word	0x0800d6dc
 8003844:	20000034 	.word	0x20000034
 8003848:	0800d728 	.word	0x0800d728

0800384c <show_msg>:

void show_msg(cJSON *msg){
 800384c:	b580      	push	{r7, lr}
 800384e:	b08a      	sub	sp, #40	; 0x28
 8003850:	af04      	add	r7, sp, #16
 8003852:	6078      	str	r0, [r7, #4]
    OLED_ClearAll();
 8003854:	f7fd fd10 	bl	8001278 <OLED_ClearAll>
    show_title_time();
 8003858:	f7ff fb8e 	bl	8002f78 <show_title_time>

    char *from = cJSON_GetObjectItem(msg, "from")->valuestring;
 800385c:	4923      	ldr	r1, [pc, #140]	; (80038ec <show_msg+0xa0>)
 800385e:	6878      	ldr	r0, [r7, #4]
 8003860:	f7fe ff73 	bl	800274a <cJSON_GetObjectItem>
 8003864:	4603      	mov	r3, r0
 8003866:	691b      	ldr	r3, [r3, #16]
 8003868:	617b      	str	r3, [r7, #20]
    char *to = cJSON_GetObjectItem(msg, "to")->valuestring;
 800386a:	4921      	ldr	r1, [pc, #132]	; (80038f0 <show_msg+0xa4>)
 800386c:	6878      	ldr	r0, [r7, #4]
 800386e:	f7fe ff6c 	bl	800274a <cJSON_GetObjectItem>
 8003872:	4603      	mov	r3, r0
 8003874:	691b      	ldr	r3, [r3, #16]
 8003876:	613b      	str	r3, [r7, #16]
    char *time = cJSON_GetObjectItem(msg, "time")->valuestring;
 8003878:	491e      	ldr	r1, [pc, #120]	; (80038f4 <show_msg+0xa8>)
 800387a:	6878      	ldr	r0, [r7, #4]
 800387c:	f7fe ff65 	bl	800274a <cJSON_GetObjectItem>
 8003880:	4603      	mov	r3, r0
 8003882:	691b      	ldr	r3, [r3, #16]
 8003884:	60fb      	str	r3, [r7, #12]
    char *content = cJSON_GetObjectItem(msg, "content")->valuestring;
 8003886:	491c      	ldr	r1, [pc, #112]	; (80038f8 <show_msg+0xac>)
 8003888:	6878      	ldr	r0, [r7, #4]
 800388a:	f7fe ff5e 	bl	800274a <cJSON_GetObjectItem>
 800388e:	4603      	mov	r3, r0
 8003890:	691b      	ldr	r3, [r3, #16]
 8003892:	60bb      	str	r3, [r7, #8]
    OLED_Printf(0, 1, 8, 1, "%s -> %s", from, to);
 8003894:	693b      	ldr	r3, [r7, #16]
 8003896:	9302      	str	r3, [sp, #8]
 8003898:	697b      	ldr	r3, [r7, #20]
 800389a:	9301      	str	r3, [sp, #4]
 800389c:	4b17      	ldr	r3, [pc, #92]	; (80038fc <show_msg+0xb0>)
 800389e:	9300      	str	r3, [sp, #0]
 80038a0:	2301      	movs	r3, #1
 80038a2:	2208      	movs	r2, #8
 80038a4:	2101      	movs	r1, #1
 80038a6:	2000      	movs	r0, #0
 80038a8:	f7fd fe06 	bl	80014b8 <OLED_Printf>
    OLED_Printf(0, 2, 8, 1, "%s", time);
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	9301      	str	r3, [sp, #4]
 80038b0:	4b13      	ldr	r3, [pc, #76]	; (8003900 <show_msg+0xb4>)
 80038b2:	9300      	str	r3, [sp, #0]
 80038b4:	2301      	movs	r3, #1
 80038b6:	2208      	movs	r2, #8
 80038b8:	2102      	movs	r1, #2
 80038ba:	2000      	movs	r0, #0
 80038bc:	f7fd fdfc 	bl	80014b8 <OLED_Printf>
    OLED_Printf(0, 3, 8, 1, "  %s", content);
 80038c0:	68bb      	ldr	r3, [r7, #8]
 80038c2:	9301      	str	r3, [sp, #4]
 80038c4:	4b0f      	ldr	r3, [pc, #60]	; (8003904 <show_msg+0xb8>)
 80038c6:	9300      	str	r3, [sp, #0]
 80038c8:	2301      	movs	r3, #1
 80038ca:	2208      	movs	r2, #8
 80038cc:	2103      	movs	r1, #3
 80038ce:	2000      	movs	r0, #0
 80038d0:	f7fd fdf2 	bl	80014b8 <OLED_Printf>
    OLED_Printf(0, 7, 8, 1, "Reply");
 80038d4:	4b0c      	ldr	r3, [pc, #48]	; (8003908 <show_msg+0xbc>)
 80038d6:	9300      	str	r3, [sp, #0]
 80038d8:	2301      	movs	r3, #1
 80038da:	2208      	movs	r2, #8
 80038dc:	2107      	movs	r1, #7
 80038de:	2000      	movs	r0, #0
 80038e0:	f7fd fdea 	bl	80014b8 <OLED_Printf>
}
 80038e4:	bf00      	nop
 80038e6:	3718      	adds	r7, #24
 80038e8:	46bd      	mov	sp, r7
 80038ea:	bd80      	pop	{r7, pc}
 80038ec:	0800d76c 	.word	0x0800d76c
 80038f0:	0800d774 	.word	0x0800d774
 80038f4:	0800d778 	.word	0x0800d778
 80038f8:	0800d780 	.word	0x0800d780
 80038fc:	0800d788 	.word	0x0800d788
 8003900:	0800d6a0 	.word	0x0800d6a0
 8003904:	0800d794 	.word	0x0800d794
 8003908:	0800d79c 	.word	0x0800d79c

0800390c <show_msg_box>:

void show_msg_box(){
 800390c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800390e:	b095      	sub	sp, #84	; 0x54
 8003910:	af10      	add	r7, sp, #64	; 0x40
    OLED_ClearAll();
 8003912:	f7fd fcb1 	bl	8001278 <OLED_ClearAll>
    show_title_time();
 8003916:	f7ff fb2f 	bl	8002f78 <show_title_time>

    int boxLen = cJSON_GetArraySize(msg_box);
 800391a:	4b5b      	ldr	r3, [pc, #364]	; (8003a88 <show_msg_box+0x17c>)
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	4618      	mov	r0, r3
 8003920:	f7fe fe73 	bl	800260a <cJSON_GetArraySize>
 8003924:	6078      	str	r0, [r7, #4]
    if (boxLen == 0) {
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	2b00      	cmp	r3, #0
 800392a:	d10e      	bne.n	800394a <show_msg_box+0x3e>
        OLED_Printf(0, 3, 16, 1, "No Msg");
 800392c:	4b57      	ldr	r3, [pc, #348]	; (8003a8c <show_msg_box+0x180>)
 800392e:	9300      	str	r3, [sp, #0]
 8003930:	2301      	movs	r3, #1
 8003932:	2210      	movs	r2, #16
 8003934:	2103      	movs	r1, #3
 8003936:	2000      	movs	r0, #0
 8003938:	f7fd fdbe 	bl	80014b8 <OLED_Printf>
        HAL_Delay(1000);
 800393c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003940:	f001 fa5a 	bl	8004df8 <HAL_Delay>
        page_back();
 8003944:	f7fe ff74 	bl	8002830 <page_back>
        return;
 8003948:	e09b      	b.n	8003a82 <show_msg_box+0x176>
    }else{
        int currentIndex = boxLen - 1;
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	3b01      	subs	r3, #1
 800394e:	60fb      	str	r3, [r7, #12]
        uint8_t brk_flag = 1;
 8003950:	2301      	movs	r3, #1
 8003952:	72fb      	strb	r3, [r7, #11]
        show_msg(cJSON_GetArrayItem(msg_box, currentIndex));
 8003954:	4b4c      	ldr	r3, [pc, #304]	; (8003a88 <show_msg_box+0x17c>)
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	68f9      	ldr	r1, [r7, #12]
 800395a:	4618      	mov	r0, r3
 800395c:	f7fe fe99 	bl	8002692 <cJSON_GetArrayItem>
 8003960:	4603      	mov	r3, r0
 8003962:	4618      	mov	r0, r3
 8003964:	f7ff ff72 	bl	800384c <show_msg>
        while(brk_flag){
 8003968:	e087      	b.n	8003a7a <show_msg_box+0x16e>
            char key = keypad_scan(htim2);
 800396a:	4e49      	ldr	r6, [pc, #292]	; (8003a90 <show_msg_box+0x184>)
 800396c:	466d      	mov	r5, sp
 800396e:	f106 0410 	add.w	r4, r6, #16
 8003972:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003974:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003976:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003978:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800397a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800397c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800397e:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8003982:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 8003986:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 800398a:	f000 fdd5 	bl	8004538 <keypad_scan>
 800398e:	4603      	mov	r3, r0
 8003990:	70fb      	strb	r3, [r7, #3]
            if (key == 0) continue;
 8003992:	78fb      	ldrb	r3, [r7, #3]
 8003994:	2b00      	cmp	r3, #0
 8003996:	d100      	bne.n	800399a <show_msg_box+0x8e>
 8003998:	e06f      	b.n	8003a7a <show_msg_box+0x16e>
            switch (key) {
 800399a:	78fb      	ldrb	r3, [r7, #3]
 800399c:	3b2a      	subs	r3, #42	; 0x2a
 800399e:	2b0c      	cmp	r3, #12
 80039a0:	d86b      	bhi.n	8003a7a <show_msg_box+0x16e>
 80039a2:	a201      	add	r2, pc, #4	; (adr r2, 80039a8 <show_msg_box+0x9c>)
 80039a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80039a8:	08003a71 	.word	0x08003a71
 80039ac:	08003a7b 	.word	0x08003a7b
 80039b0:	08003a7b 	.word	0x08003a7b
 80039b4:	08003a7b 	.word	0x08003a7b
 80039b8:	08003a7b 	.word	0x08003a7b
 80039bc:	08003a7b 	.word	0x08003a7b
 80039c0:	08003a7b 	.word	0x08003a7b
 80039c4:	080039dd 	.word	0x080039dd
 80039c8:	08003a7b 	.word	0x08003a7b
 80039cc:	08003a7b 	.word	0x08003a7b
 80039d0:	08003a1b 	.word	0x08003a1b
 80039d4:	08003a7b 	.word	0x08003a7b
 80039d8:	08003a45 	.word	0x08003a45
                case '1':
                    // Reply
                    init_msg_editor();
 80039dc:	f7ff fc40 	bl	8003260 <init_msg_editor>
                    strcpy (msgEditor.to, cJSON_GetObjectItem(cJSON_GetArrayItem(msg_box, currentIndex), "from")->valuestring);
 80039e0:	4b29      	ldr	r3, [pc, #164]	; (8003a88 <show_msg_box+0x17c>)
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	68f9      	ldr	r1, [r7, #12]
 80039e6:	4618      	mov	r0, r3
 80039e8:	f7fe fe53 	bl	8002692 <cJSON_GetArrayItem>
 80039ec:	4603      	mov	r3, r0
 80039ee:	4929      	ldr	r1, [pc, #164]	; (8003a94 <show_msg_box+0x188>)
 80039f0:	4618      	mov	r0, r3
 80039f2:	f7fe feaa 	bl	800274a <cJSON_GetObjectItem>
 80039f6:	4603      	mov	r3, r0
 80039f8:	691b      	ldr	r3, [r3, #16]
 80039fa:	4619      	mov	r1, r3
 80039fc:	4826      	ldr	r0, [pc, #152]	; (8003a98 <show_msg_box+0x18c>)
 80039fe:	f006 f918 	bl	8009c32 <strcpy>
                    msgEditor.toLen = strlen(msgEditor.to);
 8003a02:	4825      	ldr	r0, [pc, #148]	; (8003a98 <show_msg_box+0x18c>)
 8003a04:	f7fc fbee 	bl	80001e4 <strlen>
 8003a08:	4603      	mov	r3, r0
 8003a0a:	b2da      	uxtb	r2, r3
 8003a0c:	4b22      	ldr	r3, [pc, #136]	; (8003a98 <show_msg_box+0x18c>)
 8003a0e:	72da      	strb	r2, [r3, #11]
                    brk_flag = 0;
 8003a10:	2300      	movs	r3, #0
 8003a12:	72fb      	strb	r3, [r7, #11]
                    show_msg_sender();
 8003a14:	f7ff fdbe 	bl	8003594 <show_msg_sender>
                    break;
 8003a18:	e02f      	b.n	8003a7a <show_msg_box+0x16e>
                case '4':
                    // Previous
                    if (currentIndex > 0) {
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	2b00      	cmp	r3, #0
 8003a1e:	dd03      	ble.n	8003a28 <show_msg_box+0x11c>
                        currentIndex--;
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	3b01      	subs	r3, #1
 8003a24:	60fb      	str	r3, [r7, #12]
 8003a26:	e002      	b.n	8003a2e <show_msg_box+0x122>
                    }else{
                        currentIndex = boxLen - 1;
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	3b01      	subs	r3, #1
 8003a2c:	60fb      	str	r3, [r7, #12]
                    }
                    show_msg(cJSON_GetArrayItem(msg_box, currentIndex));
 8003a2e:	4b16      	ldr	r3, [pc, #88]	; (8003a88 <show_msg_box+0x17c>)
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	68f9      	ldr	r1, [r7, #12]
 8003a34:	4618      	mov	r0, r3
 8003a36:	f7fe fe2c 	bl	8002692 <cJSON_GetArrayItem>
 8003a3a:	4603      	mov	r3, r0
 8003a3c:	4618      	mov	r0, r3
 8003a3e:	f7ff ff05 	bl	800384c <show_msg>
                    break;
 8003a42:	e01a      	b.n	8003a7a <show_msg_box+0x16e>
                case '6':
                    // Next
                    if (currentIndex < boxLen - 1) {
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	3b01      	subs	r3, #1
 8003a48:	68fa      	ldr	r2, [r7, #12]
 8003a4a:	429a      	cmp	r2, r3
 8003a4c:	da03      	bge.n	8003a56 <show_msg_box+0x14a>
                        currentIndex++;
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	3301      	adds	r3, #1
 8003a52:	60fb      	str	r3, [r7, #12]
 8003a54:	e001      	b.n	8003a5a <show_msg_box+0x14e>
                    }else{
                        currentIndex = 0;
 8003a56:	2300      	movs	r3, #0
 8003a58:	60fb      	str	r3, [r7, #12]
                    }
                    show_msg(cJSON_GetArrayItem(msg_box, currentIndex));
 8003a5a:	4b0b      	ldr	r3, [pc, #44]	; (8003a88 <show_msg_box+0x17c>)
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	68f9      	ldr	r1, [r7, #12]
 8003a60:	4618      	mov	r0, r3
 8003a62:	f7fe fe16 	bl	8002692 <cJSON_GetArrayItem>
 8003a66:	4603      	mov	r3, r0
 8003a68:	4618      	mov	r0, r3
 8003a6a:	f7ff feef 	bl	800384c <show_msg>
                    break;
 8003a6e:	e004      	b.n	8003a7a <show_msg_box+0x16e>
                case '*':
                    brk_flag = 0;
 8003a70:	2300      	movs	r3, #0
 8003a72:	72fb      	strb	r3, [r7, #11]
                    page_back();
 8003a74:	f7fe fedc 	bl	8002830 <page_back>
                    break;
 8003a78:	bf00      	nop
        while(brk_flag){
 8003a7a:	7afb      	ldrb	r3, [r7, #11]
 8003a7c:	2b00      	cmp	r3, #0
 8003a7e:	f47f af74 	bne.w	800396a <show_msg_box+0x5e>
            }
        }
    }
}
 8003a82:	3714      	adds	r7, #20
 8003a84:	46bd      	mov	sp, r7
 8003a86:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003a88:	20001d78 	.word	0x20001d78
 8003a8c:	0800d7a4 	.word	0x0800d7a4
 8003a90:	200013dc 	.word	0x200013dc
 8003a94:	0800d76c 	.word	0x0800d76c
 8003a98:	200000bc 	.word	0x200000bc

08003a9c <show_menu>:

/*
    Menu
*/
void show_menu(struct page *menu) {
 8003a9c:	b580      	push	{r7, lr}
 8003a9e:	b088      	sub	sp, #32
 8003aa0:	af02      	add	r7, sp, #8
 8003aa2:	6078      	str	r0, [r7, #4]
    OLED_ClearAll();
 8003aa4:	f7fd fbe8 	bl	8001278 <OLED_ClearAll>
    show_title_time();
 8003aa8:	f7ff fa66 	bl	8002f78 <show_title_time>

    int startPoint = 0, endpoint = 5;
 8003aac:	2300      	movs	r3, #0
 8003aae:	617b      	str	r3, [r7, #20]
 8003ab0:	2305      	movs	r3, #5
 8003ab2:	613b      	str	r3, [r7, #16]
    if (menu->point > 5) {
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	f893 30f5 	ldrb.w	r3, [r3, #245]	; 0xf5
 8003aba:	2b05      	cmp	r3, #5
 8003abc:	d908      	bls.n	8003ad0 <show_menu+0x34>
        startPoint = menu->point - 5;
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	f893 30f5 	ldrb.w	r3, [r3, #245]	; 0xf5
 8003ac4:	3b05      	subs	r3, #5
 8003ac6:	617b      	str	r3, [r7, #20]
        endpoint = menu->point;
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	f893 30f5 	ldrb.w	r3, [r3, #245]	; 0xf5
 8003ace:	613b      	str	r3, [r7, #16]
    }
    if (endpoint > menu->length - 1) {
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	f893 30f4 	ldrb.w	r3, [r3, #244]	; 0xf4
 8003ad6:	461a      	mov	r2, r3
 8003ad8:	693b      	ldr	r3, [r7, #16]
 8003ada:	4293      	cmp	r3, r2
 8003adc:	db04      	blt.n	8003ae8 <show_menu+0x4c>
        endpoint = menu->length - 1;
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	f893 30f4 	ldrb.w	r3, [r3, #244]	; 0xf4
 8003ae4:	3b01      	subs	r3, #1
 8003ae6:	613b      	str	r3, [r7, #16]
    }
    for (int i = startPoint; i < startPoint + 6; i++) {
 8003ae8:	697b      	ldr	r3, [r7, #20]
 8003aea:	60fb      	str	r3, [r7, #12]
 8003aec:	e02b      	b.n	8003b46 <show_menu+0xaa>
        if (i == menu->point) {
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	f893 30f5 	ldrb.w	r3, [r3, #245]	; 0xf5
 8003af4:	461a      	mov	r2, r3
 8003af6:	68fb      	ldr	r3, [r7, #12]
 8003af8:	4293      	cmp	r3, r2
 8003afa:	d10e      	bne.n	8003b1a <show_menu+0x7e>
            OLED_Printf(0, i - startPoint + 1, 8, 1, ">");
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	b2da      	uxtb	r2, r3
 8003b00:	697b      	ldr	r3, [r7, #20]
 8003b02:	b2db      	uxtb	r3, r3
 8003b04:	1ad3      	subs	r3, r2, r3
 8003b06:	b2db      	uxtb	r3, r3
 8003b08:	3301      	adds	r3, #1
 8003b0a:	b2d9      	uxtb	r1, r3
 8003b0c:	4b13      	ldr	r3, [pc, #76]	; (8003b5c <show_menu+0xc0>)
 8003b0e:	9300      	str	r3, [sp, #0]
 8003b10:	2301      	movs	r3, #1
 8003b12:	2208      	movs	r2, #8
 8003b14:	2000      	movs	r0, #0
 8003b16:	f7fd fccf 	bl	80014b8 <OLED_Printf>
        }
        OLED_Printf(8, i - startPoint + 1, 8, 1, menu->items[i]);
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	b2da      	uxtb	r2, r3
 8003b1e:	697b      	ldr	r3, [r7, #20]
 8003b20:	b2db      	uxtb	r3, r3
 8003b22:	1ad3      	subs	r3, r2, r3
 8003b24:	b2db      	uxtb	r3, r3
 8003b26:	3301      	adds	r3, #1
 8003b28:	b2d9      	uxtb	r1, r3
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	011b      	lsls	r3, r3, #4
 8003b2e:	687a      	ldr	r2, [r7, #4]
 8003b30:	4413      	add	r3, r2
 8003b32:	3304      	adds	r3, #4
 8003b34:	9300      	str	r3, [sp, #0]
 8003b36:	2301      	movs	r3, #1
 8003b38:	2208      	movs	r2, #8
 8003b3a:	2008      	movs	r0, #8
 8003b3c:	f7fd fcbc 	bl	80014b8 <OLED_Printf>
    for (int i = startPoint; i < startPoint + 6; i++) {
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	3301      	adds	r3, #1
 8003b44:	60fb      	str	r3, [r7, #12]
 8003b46:	697b      	ldr	r3, [r7, #20]
 8003b48:	3305      	adds	r3, #5
 8003b4a:	68fa      	ldr	r2, [r7, #12]
 8003b4c:	429a      	cmp	r2, r3
 8003b4e:	ddce      	ble.n	8003aee <show_menu+0x52>
    }
}
 8003b50:	bf00      	nop
 8003b52:	bf00      	nop
 8003b54:	3718      	adds	r7, #24
 8003b56:	46bd      	mov	sp, r7
 8003b58:	bd80      	pop	{r7, pc}
 8003b5a:	bf00      	nop
 8003b5c:	0800d7ac 	.word	0x0800d7ac

08003b60 <show_cal_time>:

void show_cal_time() {
 8003b60:	b580      	push	{r7, lr}
 8003b62:	b082      	sub	sp, #8
 8003b64:	af02      	add	r7, sp, #8
    OLED_ClearAll();
 8003b66:	f7fd fb87 	bl	8001278 <OLED_ClearAll>
    OLED_Printf(0, 3, 16, 1, "Calibrating...");
 8003b6a:	4b1f      	ldr	r3, [pc, #124]	; (8003be8 <show_cal_time+0x88>)
 8003b6c:	9300      	str	r3, [sp, #0]
 8003b6e:	2301      	movs	r3, #1
 8003b70:	2210      	movs	r2, #16
 8003b72:	2103      	movs	r1, #3
 8003b74:	2000      	movs	r0, #0
 8003b76:	f7fd fc9f 	bl	80014b8 <OLED_Printf>
    calibrate_time();
 8003b7a:	f7ff fa69 	bl	8003050 <calibrate_time>
    HAL_Delay(2000);
 8003b7e:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8003b82:	f001 f939 	bl	8004df8 <HAL_Delay>
    OLED_ClearAll();
 8003b86:	f7fd fb77 	bl	8001278 <OLED_ClearAll>
    OLED_Printf(0, 0, 16, 1, "Calibrated!");
 8003b8a:	4b18      	ldr	r3, [pc, #96]	; (8003bec <show_cal_time+0x8c>)
 8003b8c:	9300      	str	r3, [sp, #0]
 8003b8e:	2301      	movs	r3, #1
 8003b90:	2210      	movs	r2, #16
 8003b92:	2100      	movs	r1, #0
 8003b94:	2000      	movs	r0, #0
 8003b96:	f7fd fc8f 	bl	80014b8 <OLED_Printf>
    OLED_Printf(0, 3, 8, 1, "Time: ");
 8003b9a:	4b15      	ldr	r3, [pc, #84]	; (8003bf0 <show_cal_time+0x90>)
 8003b9c:	9300      	str	r3, [sp, #0]
 8003b9e:	2301      	movs	r3, #1
 8003ba0:	2208      	movs	r2, #8
 8003ba2:	2103      	movs	r1, #3
 8003ba4:	2000      	movs	r0, #0
 8003ba6:	f7fd fc87 	bl	80014b8 <OLED_Printf>
    show_time(16, 4, 8, 1);
 8003baa:	2301      	movs	r3, #1
 8003bac:	2208      	movs	r2, #8
 8003bae:	2104      	movs	r1, #4
 8003bb0:	2010      	movs	r0, #16
 8003bb2:	f7ff f945 	bl	8002e40 <show_time>
    OLED_Printf(0, 5, 8, 1, "Date: ");
 8003bb6:	4b0f      	ldr	r3, [pc, #60]	; (8003bf4 <show_cal_time+0x94>)
 8003bb8:	9300      	str	r3, [sp, #0]
 8003bba:	2301      	movs	r3, #1
 8003bbc:	2208      	movs	r2, #8
 8003bbe:	2105      	movs	r1, #5
 8003bc0:	2000      	movs	r0, #0
 8003bc2:	f7fd fc79 	bl	80014b8 <OLED_Printf>
    show_date(16, 6, 8, 1, 1);
 8003bc6:	2301      	movs	r3, #1
 8003bc8:	9300      	str	r3, [sp, #0]
 8003bca:	2301      	movs	r3, #1
 8003bcc:	2208      	movs	r2, #8
 8003bce:	2106      	movs	r1, #6
 8003bd0:	2010      	movs	r0, #16
 8003bd2:	f7ff f957 	bl	8002e84 <show_date>
    HAL_Delay(3000);
 8003bd6:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8003bda:	f001 f90d 	bl	8004df8 <HAL_Delay>

    page_back();
 8003bde:	f7fe fe27 	bl	8002830 <page_back>
}
 8003be2:	bf00      	nop
 8003be4:	46bd      	mov	sp, r7
 8003be6:	bd80      	pop	{r7, pc}
 8003be8:	0800d7b0 	.word	0x0800d7b0
 8003bec:	0800d7c0 	.word	0x0800d7c0
 8003bf0:	0800d7cc 	.word	0x0800d7cc
 8003bf4:	0800d7d4 	.word	0x0800d7d4

08003bf8 <menu_up>:

void menu_up() {
 8003bf8:	b580      	push	{r7, lr}
 8003bfa:	af00      	add	r7, sp, #0
    if (currentPage->point > 0) {
 8003bfc:	4b0a      	ldr	r3, [pc, #40]	; (8003c28 <menu_up+0x30>)
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	f893 30f5 	ldrb.w	r3, [r3, #245]	; 0xf5
 8003c04:	2b00      	cmp	r3, #0
 8003c06:	d00c      	beq.n	8003c22 <menu_up+0x2a>
        currentPage->point--;
 8003c08:	4b07      	ldr	r3, [pc, #28]	; (8003c28 <menu_up+0x30>)
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	f893 20f5 	ldrb.w	r2, [r3, #245]	; 0xf5
 8003c10:	3a01      	subs	r2, #1
 8003c12:	b2d2      	uxtb	r2, r2
 8003c14:	f883 20f5 	strb.w	r2, [r3, #245]	; 0xf5
        show_menu(currentPage);
 8003c18:	4b03      	ldr	r3, [pc, #12]	; (8003c28 <menu_up+0x30>)
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	4618      	mov	r0, r3
 8003c1e:	f7ff ff3d 	bl	8003a9c <show_menu>
    }
}
 8003c22:	bf00      	nop
 8003c24:	bd80      	pop	{r7, pc}
 8003c26:	bf00      	nop
 8003c28:	20001d7c 	.word	0x20001d7c

08003c2c <menu_down>:

void menu_down() {
 8003c2c:	b580      	push	{r7, lr}
 8003c2e:	af00      	add	r7, sp, #0
    if (!currentPage->isMenu) return;
 8003c30:	4b10      	ldr	r3, [pc, #64]	; (8003c74 <menu_down+0x48>)
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	f893 30f6 	ldrb.w	r3, [r3, #246]	; 0xf6
 8003c38:	2b00      	cmp	r3, #0
 8003c3a:	d019      	beq.n	8003c70 <menu_down+0x44>
    if (currentPage->point < currentPage->length - 1) {
 8003c3c:	4b0d      	ldr	r3, [pc, #52]	; (8003c74 <menu_down+0x48>)
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	f893 30f5 	ldrb.w	r3, [r3, #245]	; 0xf5
 8003c44:	461a      	mov	r2, r3
 8003c46:	4b0b      	ldr	r3, [pc, #44]	; (8003c74 <menu_down+0x48>)
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	f893 30f4 	ldrb.w	r3, [r3, #244]	; 0xf4
 8003c4e:	3b01      	subs	r3, #1
 8003c50:	429a      	cmp	r2, r3
 8003c52:	da0e      	bge.n	8003c72 <menu_down+0x46>
        currentPage->point++;
 8003c54:	4b07      	ldr	r3, [pc, #28]	; (8003c74 <menu_down+0x48>)
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	f893 20f5 	ldrb.w	r2, [r3, #245]	; 0xf5
 8003c5c:	3201      	adds	r2, #1
 8003c5e:	b2d2      	uxtb	r2, r2
 8003c60:	f883 20f5 	strb.w	r2, [r3, #245]	; 0xf5
        show_menu(currentPage);
 8003c64:	4b03      	ldr	r3, [pc, #12]	; (8003c74 <menu_down+0x48>)
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	4618      	mov	r0, r3
 8003c6a:	f7ff ff17 	bl	8003a9c <show_menu>
 8003c6e:	e000      	b.n	8003c72 <menu_down+0x46>
    if (!currentPage->isMenu) return;
 8003c70:	bf00      	nop
    }
}
 8003c72:	bd80      	pop	{r7, pc}
 8003c74:	20001d7c 	.word	0x20001d7c

08003c78 <_set_time>:

/*
    Call Backs
*/
void _set_time() {
 8003c78:	b580      	push	{r7, lr}
 8003c7a:	b086      	sub	sp, #24
 8003c7c:	af00      	add	r7, sp, #0
    RTC_TimeTypeDef sTime;
    sTime.Hours = cJSON_GetObjectItem(callBackArg, "h")->valueint;
 8003c7e:	4b29      	ldr	r3, [pc, #164]	; (8003d24 <_set_time+0xac>)
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	4929      	ldr	r1, [pc, #164]	; (8003d28 <_set_time+0xb0>)
 8003c84:	4618      	mov	r0, r3
 8003c86:	f7fe fd60 	bl	800274a <cJSON_GetObjectItem>
 8003c8a:	4603      	mov	r3, r0
 8003c8c:	695b      	ldr	r3, [r3, #20]
 8003c8e:	b2db      	uxtb	r3, r3
 8003c90:	713b      	strb	r3, [r7, #4]
    sTime.Minutes = cJSON_GetObjectItem(callBackArg, "min")->valueint;
 8003c92:	4b24      	ldr	r3, [pc, #144]	; (8003d24 <_set_time+0xac>)
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	4925      	ldr	r1, [pc, #148]	; (8003d2c <_set_time+0xb4>)
 8003c98:	4618      	mov	r0, r3
 8003c9a:	f7fe fd56 	bl	800274a <cJSON_GetObjectItem>
 8003c9e:	4603      	mov	r3, r0
 8003ca0:	695b      	ldr	r3, [r3, #20]
 8003ca2:	b2db      	uxtb	r3, r3
 8003ca4:	717b      	strb	r3, [r7, #5]
    sTime.Seconds = cJSON_GetObjectItem(callBackArg, "s")->valueint;
 8003ca6:	4b1f      	ldr	r3, [pc, #124]	; (8003d24 <_set_time+0xac>)
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	4921      	ldr	r1, [pc, #132]	; (8003d30 <_set_time+0xb8>)
 8003cac:	4618      	mov	r0, r3
 8003cae:	f7fe fd4c 	bl	800274a <cJSON_GetObjectItem>
 8003cb2:	4603      	mov	r3, r0
 8003cb4:	695b      	ldr	r3, [r3, #20]
 8003cb6:	b2db      	uxtb	r3, r3
 8003cb8:	71bb      	strb	r3, [r7, #6]

    RTC_DateTypeDef sDate;
    sDate.WeekDay = cJSON_GetObjectItem(callBackArg, "w")->valueint + 1;
 8003cba:	4b1a      	ldr	r3, [pc, #104]	; (8003d24 <_set_time+0xac>)
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	491d      	ldr	r1, [pc, #116]	; (8003d34 <_set_time+0xbc>)
 8003cc0:	4618      	mov	r0, r3
 8003cc2:	f7fe fd42 	bl	800274a <cJSON_GetObjectItem>
 8003cc6:	4603      	mov	r3, r0
 8003cc8:	695b      	ldr	r3, [r3, #20]
 8003cca:	b2db      	uxtb	r3, r3
 8003ccc:	3301      	adds	r3, #1
 8003cce:	b2db      	uxtb	r3, r3
 8003cd0:	703b      	strb	r3, [r7, #0]
    sDate.Month = cJSON_GetObjectItem(callBackArg, "m")->valueint;
 8003cd2:	4b14      	ldr	r3, [pc, #80]	; (8003d24 <_set_time+0xac>)
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	4918      	ldr	r1, [pc, #96]	; (8003d38 <_set_time+0xc0>)
 8003cd8:	4618      	mov	r0, r3
 8003cda:	f7fe fd36 	bl	800274a <cJSON_GetObjectItem>
 8003cde:	4603      	mov	r3, r0
 8003ce0:	695b      	ldr	r3, [r3, #20]
 8003ce2:	b2db      	uxtb	r3, r3
 8003ce4:	707b      	strb	r3, [r7, #1]
    sDate.Date = cJSON_GetObjectItem(callBackArg, "d")->valueint;
 8003ce6:	4b0f      	ldr	r3, [pc, #60]	; (8003d24 <_set_time+0xac>)
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	4914      	ldr	r1, [pc, #80]	; (8003d3c <_set_time+0xc4>)
 8003cec:	4618      	mov	r0, r3
 8003cee:	f7fe fd2c 	bl	800274a <cJSON_GetObjectItem>
 8003cf2:	4603      	mov	r3, r0
 8003cf4:	695b      	ldr	r3, [r3, #20]
 8003cf6:	b2db      	uxtb	r3, r3
 8003cf8:	70bb      	strb	r3, [r7, #2]
    sDate.Year = cJSON_GetObjectItem(callBackArg, "y")->valueint;
 8003cfa:	4b0a      	ldr	r3, [pc, #40]	; (8003d24 <_set_time+0xac>)
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	4910      	ldr	r1, [pc, #64]	; (8003d40 <_set_time+0xc8>)
 8003d00:	4618      	mov	r0, r3
 8003d02:	f7fe fd22 	bl	800274a <cJSON_GetObjectItem>
 8003d06:	4603      	mov	r3, r0
 8003d08:	695b      	ldr	r3, [r3, #20]
 8003d0a:	b2db      	uxtb	r3, r3
 8003d0c:	70fb      	strb	r3, [r7, #3]

    set_time(&sTime, &sDate);
 8003d0e:	463a      	mov	r2, r7
 8003d10:	1d3b      	adds	r3, r7, #4
 8003d12:	4611      	mov	r1, r2
 8003d14:	4618      	mov	r0, r3
 8003d16:	f7ff f957 	bl	8002fc8 <set_time>
}
 8003d1a:	bf00      	nop
 8003d1c:	3718      	adds	r7, #24
 8003d1e:	46bd      	mov	sp, r7
 8003d20:	bd80      	pop	{r7, pc}
 8003d22:	bf00      	nop
 8003d24:	20001d6c 	.word	0x20001d6c
 8003d28:	0800d7dc 	.word	0x0800d7dc
 8003d2c:	0800d7e0 	.word	0x0800d7e0
 8003d30:	0800d7e4 	.word	0x0800d7e4
 8003d34:	0800d7e8 	.word	0x0800d7e8
 8003d38:	0800d7ec 	.word	0x0800d7ec
 8003d3c:	0800d7f0 	.word	0x0800d7f0
 8003d40:	0800d7f4 	.word	0x0800d7f4

08003d44 <play_ringtone>:

void play_ringtone(){
 8003d44:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003d46:	b093      	sub	sp, #76	; 0x4c
 8003d48:	af10      	add	r7, sp, #64	; 0x40
    for (int i = 0; i < 3; i++){
 8003d4a:	2300      	movs	r3, #0
 8003d4c:	607b      	str	r3, [r7, #4]
 8003d4e:	e030      	b.n	8003db2 <play_ringtone+0x6e>
        beep_setFreq(ringtone[i], htim2);
 8003d50:	4a1c      	ldr	r2, [pc, #112]	; (8003dc4 <play_ringtone+0x80>)
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003d58:	fa1f fc83 	uxth.w	ip, r3
 8003d5c:	4e1a      	ldr	r6, [pc, #104]	; (8003dc8 <play_ringtone+0x84>)
 8003d5e:	466d      	mov	r5, sp
 8003d60:	f106 040c 	add.w	r4, r6, #12
 8003d64:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003d66:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003d68:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003d6a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003d6c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003d6e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003d70:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8003d74:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8003d78:	e896 000e 	ldmia.w	r6, {r1, r2, r3}
 8003d7c:	4660      	mov	r0, ip
 8003d7e:	f7fd fbc7 	bl	8001510 <beep_setFreq>
        HAL_Delay(150);
 8003d82:	2096      	movs	r0, #150	; 0x96
 8003d84:	f001 f838 	bl	8004df8 <HAL_Delay>
        beep_off(htim2);
 8003d88:	4e0f      	ldr	r6, [pc, #60]	; (8003dc8 <play_ringtone+0x84>)
 8003d8a:	466d      	mov	r5, sp
 8003d8c:	f106 0410 	add.w	r4, r6, #16
 8003d90:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003d92:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003d94:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003d96:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003d98:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003d9a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003d9c:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8003da0:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 8003da4:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8003da8:	f7fd fbe4 	bl	8001574 <beep_off>
    for (int i = 0; i < 3; i++){
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	3301      	adds	r3, #1
 8003db0:	607b      	str	r3, [r7, #4]
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	2b02      	cmp	r3, #2
 8003db6:	ddcb      	ble.n	8003d50 <play_ringtone+0xc>
    }
}
 8003db8:	bf00      	nop
 8003dba:	bf00      	nop
 8003dbc:	370c      	adds	r7, #12
 8003dbe:	46bd      	mov	sp, r7
 8003dc0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003dc2:	bf00      	nop
 8003dc4:	20000028 	.word	0x20000028
 8003dc8:	200013dc 	.word	0x200013dc

08003dcc <_recv_msg>:

void _recv_msg(){
 8003dcc:	b580      	push	{r7, lr}
 8003dce:	b082      	sub	sp, #8
 8003dd0:	af02      	add	r7, sp, #8
    OLED_ClearAll();
 8003dd2:	f7fd fa51 	bl	8001278 <OLED_ClearAll>
    OLED_Printf((128-8*8)/2, 3, 16, 1, "New Msg!");
 8003dd6:	4b11      	ldr	r3, [pc, #68]	; (8003e1c <_recv_msg+0x50>)
 8003dd8:	9300      	str	r3, [sp, #0]
 8003dda:	2301      	movs	r3, #1
 8003ddc:	2210      	movs	r2, #16
 8003dde:	2103      	movs	r1, #3
 8003de0:	2020      	movs	r0, #32
 8003de2:	f7fd fb69 	bl	80014b8 <OLED_Printf>
    OLED_Printf(0, 7, 8, 1, "*:Back   #:Read");
 8003de6:	4b0e      	ldr	r3, [pc, #56]	; (8003e20 <_recv_msg+0x54>)
 8003de8:	9300      	str	r3, [sp, #0]
 8003dea:	2301      	movs	r3, #1
 8003dec:	2208      	movs	r2, #8
 8003dee:	2107      	movs	r1, #7
 8003df0:	2000      	movs	r0, #0
 8003df2:	f7fd fb61 	bl	80014b8 <OLED_Printf>
    play_ringtone_flag = 1;
 8003df6:	4b0b      	ldr	r3, [pc, #44]	; (8003e24 <_recv_msg+0x58>)
 8003df8:	2201      	movs	r2, #1
 8003dfa:	701a      	strb	r2, [r3, #0]
    infoPage.parent = currentPage;
 8003dfc:	4b0a      	ldr	r3, [pc, #40]	; (8003e28 <_recv_msg+0x5c>)
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	4a0a      	ldr	r2, [pc, #40]	; (8003e2c <_recv_msg+0x60>)
 8003e02:	f8c2 30fc 	str.w	r3, [r2, #252]	; 0xfc
    infoPage.children[0] = &inboxPage;
 8003e06:	4b09      	ldr	r3, [pc, #36]	; (8003e2c <_recv_msg+0x60>)
 8003e08:	4a09      	ldr	r2, [pc, #36]	; (8003e30 <_recv_msg+0x64>)
 8003e0a:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
    currentPage = &infoPage;
 8003e0e:	4b06      	ldr	r3, [pc, #24]	; (8003e28 <_recv_msg+0x5c>)
 8003e10:	4a06      	ldr	r2, [pc, #24]	; (8003e2c <_recv_msg+0x60>)
 8003e12:	601a      	str	r2, [r3, #0]
    //     }else if(key == '#'){
    //         get_msg_inbox();
    //         break;
    //     }
    // }
}
 8003e14:	bf00      	nop
 8003e16:	46bd      	mov	sp, r7
 8003e18:	bd80      	pop	{r7, pc}
 8003e1a:	bf00      	nop
 8003e1c:	0800d7f8 	.word	0x0800d7f8
 8003e20:	0800d804 	.word	0x0800d804
 8003e24:	20001d75 	.word	0x20001d75
 8003e28:	20001d7c 	.word	0x20001d7c
 8003e2c:	200001d0 	.word	0x200001d0
 8003e30:	20000584 	.word	0x20000584

08003e34 <_show_msg_box>:

void _show_msg_box(){
 8003e34:	b580      	push	{r7, lr}
 8003e36:	af00      	add	r7, sp, #0
    memset(msg_box, NULL, sizeof(msg_box));
 8003e38:	4b0b      	ldr	r3, [pc, #44]	; (8003e68 <_show_msg_box+0x34>)
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	2204      	movs	r2, #4
 8003e3e:	2100      	movs	r1, #0
 8003e40:	4618      	mov	r0, r3
 8003e42:	f005 fcf7 	bl	8009834 <memset>
    msg_box = cJSON_GetObjectItem(callBackArg, "msgs");
 8003e46:	4b09      	ldr	r3, [pc, #36]	; (8003e6c <_show_msg_box+0x38>)
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	4909      	ldr	r1, [pc, #36]	; (8003e70 <_show_msg_box+0x3c>)
 8003e4c:	4618      	mov	r0, r3
 8003e4e:	f7fe fc7c 	bl	800274a <cJSON_GetObjectItem>
 8003e52:	4603      	mov	r3, r0
 8003e54:	4a04      	ldr	r2, [pc, #16]	; (8003e68 <_show_msg_box+0x34>)
 8003e56:	6013      	str	r3, [r2, #0]
    showPage = show_msg_box;
 8003e58:	4b06      	ldr	r3, [pc, #24]	; (8003e74 <_show_msg_box+0x40>)
 8003e5a:	4a07      	ldr	r2, [pc, #28]	; (8003e78 <_show_msg_box+0x44>)
 8003e5c:	601a      	str	r2, [r3, #0]
    showPageFlag = 1;
 8003e5e:	4b07      	ldr	r3, [pc, #28]	; (8003e7c <_show_msg_box+0x48>)
 8003e60:	2201      	movs	r2, #1
 8003e62:	701a      	strb	r2, [r3, #0]
}
 8003e64:	bf00      	nop
 8003e66:	bd80      	pop	{r7, pc}
 8003e68:	20001d78 	.word	0x20001d78
 8003e6c:	20001d6c 	.word	0x20001d6c
 8003e70:	0800d814 	.word	0x0800d814
 8003e74:	20001d70 	.word	0x20001d70
 8003e78:	0800390d 	.word	0x0800390d
 8003e7c:	20001d74 	.word	0x20001d74

08003e80 <call_back>:

void call_back() {
 8003e80:	b580      	push	{r7, lr}
 8003e82:	b082      	sub	sp, #8
 8003e84:	af00      	add	r7, sp, #0
    char *callBack = cJSON_GetObjectItem(callBackArg, "clbk")->valuestring;
 8003e86:	4b1c      	ldr	r3, [pc, #112]	; (8003ef8 <call_back+0x78>)
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	491c      	ldr	r1, [pc, #112]	; (8003efc <call_back+0x7c>)
 8003e8c:	4618      	mov	r0, r3
 8003e8e:	f7fe fc5c 	bl	800274a <cJSON_GetObjectItem>
 8003e92:	4603      	mov	r3, r0
 8003e94:	691b      	ldr	r3, [r3, #16]
 8003e96:	607b      	str	r3, [r7, #4]
    if (callBack == NULL) return;
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	d027      	beq.n	8003eee <call_back+0x6e>
    if (strcmp(callBack, "set_time") == 0) {
 8003e9e:	4918      	ldr	r1, [pc, #96]	; (8003f00 <call_back+0x80>)
 8003ea0:	6878      	ldr	r0, [r7, #4]
 8003ea2:	f7fc f995 	bl	80001d0 <strcmp>
 8003ea6:	4603      	mov	r3, r0
 8003ea8:	2b00      	cmp	r3, #0
 8003eaa:	d102      	bne.n	8003eb2 <call_back+0x32>
        _set_time();
 8003eac:	f7ff fee4 	bl	8003c78 <_set_time>
 8003eb0:	e01e      	b.n	8003ef0 <call_back+0x70>
    }else if(strcmp(callBack, "recv_msg") == 0){
 8003eb2:	4914      	ldr	r1, [pc, #80]	; (8003f04 <call_back+0x84>)
 8003eb4:	6878      	ldr	r0, [r7, #4]
 8003eb6:	f7fc f98b 	bl	80001d0 <strcmp>
 8003eba:	4603      	mov	r3, r0
 8003ebc:	2b00      	cmp	r3, #0
 8003ebe:	d102      	bne.n	8003ec6 <call_back+0x46>
        _recv_msg();
 8003ec0:	f7ff ff84 	bl	8003dcc <_recv_msg>
 8003ec4:	e014      	b.n	8003ef0 <call_back+0x70>
    }else if(strcmp(callBack, "show_msg_inbox") == 0){
 8003ec6:	4910      	ldr	r1, [pc, #64]	; (8003f08 <call_back+0x88>)
 8003ec8:	6878      	ldr	r0, [r7, #4]
 8003eca:	f7fc f981 	bl	80001d0 <strcmp>
 8003ece:	4603      	mov	r3, r0
 8003ed0:	2b00      	cmp	r3, #0
 8003ed2:	d102      	bne.n	8003eda <call_back+0x5a>
        _show_msg_box();
 8003ed4:	f7ff ffae 	bl	8003e34 <_show_msg_box>
 8003ed8:	e00a      	b.n	8003ef0 <call_back+0x70>
    }else if(strcmp(callBack, "show_msg_outbox") == 0){
 8003eda:	490c      	ldr	r1, [pc, #48]	; (8003f0c <call_back+0x8c>)
 8003edc:	6878      	ldr	r0, [r7, #4]
 8003ede:	f7fc f977 	bl	80001d0 <strcmp>
 8003ee2:	4603      	mov	r3, r0
 8003ee4:	2b00      	cmp	r3, #0
 8003ee6:	d103      	bne.n	8003ef0 <call_back+0x70>
        _show_msg_box();
 8003ee8:	f7ff ffa4 	bl	8003e34 <_show_msg_box>
 8003eec:	e000      	b.n	8003ef0 <call_back+0x70>
    if (callBack == NULL) return;
 8003eee:	bf00      	nop
    }
}
 8003ef0:	3708      	adds	r7, #8
 8003ef2:	46bd      	mov	sp, r7
 8003ef4:	bd80      	pop	{r7, pc}
 8003ef6:	bf00      	nop
 8003ef8:	20001d6c 	.word	0x20001d6c
 8003efc:	0800d81c 	.word	0x0800d81c
 8003f00:	0800d824 	.word	0x0800d824
 8003f04:	0800d830 	.word	0x0800d830
 8003f08:	0800d83c 	.word	0x0800d83c
 8003f0c:	0800d84c 	.word	0x0800d84c

08003f10 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8003f10:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003f12:	b093      	sub	sp, #76	; 0x4c
 8003f14:	af10      	add	r7, sp, #64	; 0x40
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8003f16:	f000 fefa 	bl	8004d0e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8003f1a:	f000 f8bb 	bl	8004094 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8003f1e:	f000 fa93 	bl	8004448 <MX_GPIO_Init>
  MX_RTC_Init();
 8003f22:	f000 f93d 	bl	80041a0 <MX_RTC_Init>
  MX_USART1_UART_Init();
 8003f26:	f000 fa5f 	bl	80043e8 <MX_USART1_UART_Init>
  MX_TIM6_Init();
 8003f2a:	f000 f9ef 	bl	800430c <MX_TIM6_Init>
  MX_DAC1_Init();
 8003f2e:	f000 f905 	bl	800413c <MX_DAC1_Init>
  MX_TIM7_Init();
 8003f32:	f000 fa21 	bl	8004378 <MX_TIM7_Init>
  MX_TIM2_Init();
 8003f36:	f000 f98f 	bl	8004258 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
    HAL_UART_Receive_IT(&huart1, &aRxBuffer, 1);
 8003f3a:	2201      	movs	r2, #1
 8003f3c:	494b      	ldr	r1, [pc, #300]	; (800406c <main+0x15c>)
 8003f3e:	484c      	ldr	r0, [pc, #304]	; (8004070 <main+0x160>)
 8003f40:	f004 fa24 	bl	800838c <HAL_UART_Receive_IT>
    __HAL_TIM_CLEAR_IT(&htim7, TIM_IT_UPDATE);
 8003f44:	4b4b      	ldr	r3, [pc, #300]	; (8004074 <main+0x164>)
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	f06f 0201 	mvn.w	r2, #1
 8003f4c:	611a      	str	r2, [r3, #16]
    HAL_TIM_Base_Start_IT(&htim7);
 8003f4e:	4849      	ldr	r0, [pc, #292]	; (8004074 <main+0x164>)
 8003f50:	f003 f940 	bl	80071d4 <HAL_TIM_Base_Start_IT>
    
    page_init();
 8003f54:	f7fe fc1a 	bl	800278c <page_init>
    OLED_Init();
 8003f58:	f7fd f937 	bl	80011ca <OLED_Init>
    HAL_Delay(200);
 8003f5c:	20c8      	movs	r0, #200	; 0xc8
 8003f5e:	f000 ff4b 	bl	8004df8 <HAL_Delay>
    OLED_Printf(0, 3, 16, 1, "System Starting");
 8003f62:	4b45      	ldr	r3, [pc, #276]	; (8004078 <main+0x168>)
 8003f64:	9300      	str	r3, [sp, #0]
 8003f66:	2301      	movs	r3, #1
 8003f68:	2210      	movs	r2, #16
 8003f6a:	2103      	movs	r1, #3
 8003f6c:	2000      	movs	r0, #0
 8003f6e:	f7fd faa3 	bl	80014b8 <OLED_Printf>
    // OLED_StartHoriRoll(OLED_ROLL_RIGHT, OLED_ROLL_3, 0, 1);
    calibrate_time();
 8003f72:	f7ff f86d 	bl	8003050 <calibrate_time>
    register_ID();
 8003f76:	f7ff f89b 	bl	80030b0 <register_ID>
    //  OLED_Test();
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
    play_ringtone();
 8003f7a:	f7ff fee3 	bl	8003d44 <play_ringtone>
    show_page(&homeScreen);
 8003f7e:	483f      	ldr	r0, [pc, #252]	; (800407c <main+0x16c>)
 8003f80:	f7fe fc6a 	bl	8002858 <show_page>
    while (1) {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
        if (showPageFlag) {
 8003f84:	4b3e      	ldr	r3, [pc, #248]	; (8004080 <main+0x170>)
 8003f86:	781b      	ldrb	r3, [r3, #0]
 8003f88:	2b00      	cmp	r3, #0
 8003f8a:	d005      	beq.n	8003f98 <main+0x88>
            showPage();
 8003f8c:	4b3d      	ldr	r3, [pc, #244]	; (8004084 <main+0x174>)
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	4798      	blx	r3
            showPageFlag = 0;
 8003f92:	4b3b      	ldr	r3, [pc, #236]	; (8004080 <main+0x170>)
 8003f94:	2200      	movs	r2, #0
 8003f96:	701a      	strb	r2, [r3, #0]
        }

        if (play_ringtone_flag){
 8003f98:	4b3b      	ldr	r3, [pc, #236]	; (8004088 <main+0x178>)
 8003f9a:	781b      	ldrb	r3, [r3, #0]
 8003f9c:	2b00      	cmp	r3, #0
 8003f9e:	d004      	beq.n	8003faa <main+0x9a>
            play_ringtone();
 8003fa0:	f7ff fed0 	bl	8003d44 <play_ringtone>
            play_ringtone_flag = 0;
 8003fa4:	4b38      	ldr	r3, [pc, #224]	; (8004088 <main+0x178>)
 8003fa6:	2200      	movs	r2, #0
 8003fa8:	701a      	strb	r2, [r3, #0]
        }

        char key = keypad_scan(htim2);
 8003faa:	4e38      	ldr	r6, [pc, #224]	; (800408c <main+0x17c>)
 8003fac:	466d      	mov	r5, sp
 8003fae:	f106 0410 	add.w	r4, r6, #16
 8003fb2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003fb4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003fb6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003fb8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003fba:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003fbc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003fbe:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8003fc2:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 8003fc6:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8003fca:	f000 fab5 	bl	8004538 <keypad_scan>
 8003fce:	4603      	mov	r3, r0
 8003fd0:	71fb      	strb	r3, [r7, #7]
        switch (key) {
 8003fd2:	79fb      	ldrb	r3, [r7, #7]
 8003fd4:	3b23      	subs	r3, #35	; 0x23
 8003fd6:	2b16      	cmp	r3, #22
 8003fd8:	d8d4      	bhi.n	8003f84 <main+0x74>
 8003fda:	a201      	add	r2, pc, #4	; (adr r2, 8003fe0 <main+0xd0>)
 8003fdc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003fe0:	0800404f 	.word	0x0800404f
 8003fe4:	08003f85 	.word	0x08003f85
 8003fe8:	08003f85 	.word	0x08003f85
 8003fec:	08003f85 	.word	0x08003f85
 8003ff0:	08003f85 	.word	0x08003f85
 8003ff4:	08003f85 	.word	0x08003f85
 8003ff8:	08003f85 	.word	0x08003f85
 8003ffc:	08004049 	.word	0x08004049
 8004000:	08003f85 	.word	0x08003f85
 8004004:	08003f85 	.word	0x08003f85
 8004008:	08003f85 	.word	0x08003f85
 800400c:	08003f85 	.word	0x08003f85
 8004010:	08003f85 	.word	0x08003f85
 8004014:	08003f85 	.word	0x08003f85
 8004018:	08003f85 	.word	0x08003f85
 800401c:	0800403d 	.word	0x0800403d
 8004020:	08003f85 	.word	0x08003f85
 8004024:	08003f85 	.word	0x08003f85
 8004028:	08003f85 	.word	0x08003f85
 800402c:	08003f85 	.word	0x08003f85
 8004030:	08003f85 	.word	0x08003f85
 8004034:	08004043 	.word	0x08004043
 8004038:	08003f85 	.word	0x08003f85
            case '1':
                break;
            case '2':
                menu_up();
 800403c:	f7ff fddc 	bl	8003bf8 <menu_up>
                break;
 8004040:	e012      	b.n	8004068 <main+0x158>
            case '6':
                break;
            case '7':
                break;
            case '8':
                menu_down();
 8004042:	f7ff fdf3 	bl	8003c2c <menu_down>
                break;
 8004046:	e00f      	b.n	8004068 <main+0x158>
            case '9':
                break;
            case '*':
                page_back();
 8004048:	f7fe fbf2 	bl	8002830 <page_back>
                break;
 800404c:	e00c      	b.n	8004068 <main+0x158>
            case '0':
                break;
            case '#':
                show_page(currentPage->children[currentPage->point]);
 800404e:	4b10      	ldr	r3, [pc, #64]	; (8004090 <main+0x180>)
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	4a0f      	ldr	r2, [pc, #60]	; (8004090 <main+0x180>)
 8004054:	6812      	ldr	r2, [r2, #0]
 8004056:	f892 20f5 	ldrb.w	r2, [r2, #245]	; 0xf5
 800405a:	3240      	adds	r2, #64	; 0x40
 800405c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004060:	4618      	mov	r0, r3
 8004062:	f7fe fbf9 	bl	8002858 <show_page>
                break;
 8004066:	bf00      	nop
    while (1) {
 8004068:	e78c      	b.n	8003f84 <main+0x74>
 800406a:	bf00      	nop
 800406c:	20001d44 	.word	0x20001d44
 8004070:	200014c0 	.word	0x200014c0
 8004074:	20001474 	.word	0x20001474
 8004078:	0800d85c 	.word	0x0800d85c
 800407c:	20000f64 	.word	0x20000f64
 8004080:	20001d74 	.word	0x20001d74
 8004084:	20001d70 	.word	0x20001d70
 8004088:	20001d75 	.word	0x20001d75
 800408c:	200013dc 	.word	0x200013dc
 8004090:	20001d7c 	.word	0x20001d7c

08004094 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8004094:	b580      	push	{r7, lr}
 8004096:	b096      	sub	sp, #88	; 0x58
 8004098:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800409a:	f107 0314 	add.w	r3, r7, #20
 800409e:	2244      	movs	r2, #68	; 0x44
 80040a0:	2100      	movs	r1, #0
 80040a2:	4618      	mov	r0, r3
 80040a4:	f005 fbc6 	bl	8009834 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80040a8:	463b      	mov	r3, r7
 80040aa:	2200      	movs	r2, #0
 80040ac:	601a      	str	r2, [r3, #0]
 80040ae:	605a      	str	r2, [r3, #4]
 80040b0:	609a      	str	r2, [r3, #8]
 80040b2:	60da      	str	r2, [r3, #12]
 80040b4:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80040b6:	f44f 7000 	mov.w	r0, #512	; 0x200
 80040ba:	f001 fba3 	bl	8005804 <HAL_PWREx_ControlVoltageScaling>
 80040be:	4603      	mov	r3, r0
 80040c0:	2b00      	cmp	r3, #0
 80040c2:	d001      	beq.n	80040c8 <SystemClock_Config+0x34>
  {
    Error_Handler();
 80040c4:	f000 fa32 	bl	800452c <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_MSI;
 80040c8:	2318      	movs	r3, #24
 80040ca:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 80040cc:	2301      	movs	r3, #1
 80040ce:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80040d0:	2301      	movs	r3, #1
 80040d2:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 80040d4:	2300      	movs	r3, #0
 80040d6:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80040d8:	2360      	movs	r3, #96	; 0x60
 80040da:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80040dc:	2302      	movs	r3, #2
 80040de:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 80040e0:	2301      	movs	r3, #1
 80040e2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 80040e4:	2301      	movs	r3, #1
 80040e6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 40;
 80040e8:	2328      	movs	r3, #40	; 0x28
 80040ea:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80040ec:	2307      	movs	r3, #7
 80040ee:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80040f0:	2302      	movs	r3, #2
 80040f2:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80040f4:	2302      	movs	r3, #2
 80040f6:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80040f8:	f107 0314 	add.w	r3, r7, #20
 80040fc:	4618      	mov	r0, r3
 80040fe:	f001 fbd7 	bl	80058b0 <HAL_RCC_OscConfig>
 8004102:	4603      	mov	r3, r0
 8004104:	2b00      	cmp	r3, #0
 8004106:	d001      	beq.n	800410c <SystemClock_Config+0x78>
  {
    Error_Handler();
 8004108:	f000 fa10 	bl	800452c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800410c:	230f      	movs	r3, #15
 800410e:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8004110:	2303      	movs	r3, #3
 8004112:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8004114:	2300      	movs	r3, #0
 8004116:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8004118:	2300      	movs	r3, #0
 800411a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800411c:	2300      	movs	r3, #0
 800411e:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8004120:	463b      	mov	r3, r7
 8004122:	2104      	movs	r1, #4
 8004124:	4618      	mov	r0, r3
 8004126:	f001 ffd7 	bl	80060d8 <HAL_RCC_ClockConfig>
 800412a:	4603      	mov	r3, r0
 800412c:	2b00      	cmp	r3, #0
 800412e:	d001      	beq.n	8004134 <SystemClock_Config+0xa0>
  {
    Error_Handler();
 8004130:	f000 f9fc 	bl	800452c <Error_Handler>
  }
}
 8004134:	bf00      	nop
 8004136:	3758      	adds	r7, #88	; 0x58
 8004138:	46bd      	mov	sp, r7
 800413a:	bd80      	pop	{r7, pc}

0800413c <MX_DAC1_Init>:
  * @brief DAC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC1_Init(void)
{
 800413c:	b580      	push	{r7, lr}
 800413e:	b08a      	sub	sp, #40	; 0x28
 8004140:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8004142:	1d3b      	adds	r3, r7, #4
 8004144:	2224      	movs	r2, #36	; 0x24
 8004146:	2100      	movs	r1, #0
 8004148:	4618      	mov	r0, r3
 800414a:	f005 fb73 	bl	8009834 <memset>

  /* USER CODE END DAC1_Init 1 */

  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 800414e:	4b12      	ldr	r3, [pc, #72]	; (8004198 <MX_DAC1_Init+0x5c>)
 8004150:	4a12      	ldr	r2, [pc, #72]	; (800419c <MX_DAC1_Init+0x60>)
 8004152:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 8004154:	4810      	ldr	r0, [pc, #64]	; (8004198 <MX_DAC1_Init+0x5c>)
 8004156:	f000 ff84 	bl	8005062 <HAL_DAC_Init>
 800415a:	4603      	mov	r3, r0
 800415c:	2b00      	cmp	r3, #0
 800415e:	d001      	beq.n	8004164 <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 8004160:	f000 f9e4 	bl	800452c <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8004164:	2300      	movs	r3, #0
 8004166:	607b      	str	r3, [r7, #4]
  sConfig.DAC_Trigger = DAC_TRIGGER_T6_TRGO;
 8004168:	2304      	movs	r3, #4
 800416a:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_DISABLE;
 800416c:	2302      	movs	r3, #2
 800416e:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 8004170:	2300      	movs	r3, #0
 8004172:	613b      	str	r3, [r7, #16]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8004174:	2300      	movs	r3, #0
 8004176:	617b      	str	r3, [r7, #20]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8004178:	1d3b      	adds	r3, r7, #4
 800417a:	2200      	movs	r2, #0
 800417c:	4619      	mov	r1, r3
 800417e:	4806      	ldr	r0, [pc, #24]	; (8004198 <MX_DAC1_Init+0x5c>)
 8004180:	f000 fff5 	bl	800516e <HAL_DAC_ConfigChannel>
 8004184:	4603      	mov	r3, r0
 8004186:	2b00      	cmp	r3, #0
 8004188:	d001      	beq.n	800418e <MX_DAC1_Init+0x52>
  {
    Error_Handler();
 800418a:	f000 f9cf 	bl	800452c <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 800418e:	bf00      	nop
 8004190:	3728      	adds	r7, #40	; 0x28
 8004192:	46bd      	mov	sp, r7
 8004194:	bd80      	pop	{r7, pc}
 8004196:	bf00      	nop
 8004198:	200013a4 	.word	0x200013a4
 800419c:	40007400 	.word	0x40007400

080041a0 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 80041a0:	b580      	push	{r7, lr}
 80041a2:	b086      	sub	sp, #24
 80041a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 80041a6:	1d3b      	adds	r3, r7, #4
 80041a8:	2200      	movs	r2, #0
 80041aa:	601a      	str	r2, [r3, #0]
 80041ac:	605a      	str	r2, [r3, #4]
 80041ae:	609a      	str	r2, [r3, #8]
 80041b0:	60da      	str	r2, [r3, #12]
 80041b2:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 80041b4:	2300      	movs	r3, #0
 80041b6:	603b      	str	r3, [r7, #0]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 80041b8:	4b25      	ldr	r3, [pc, #148]	; (8004250 <MX_RTC_Init+0xb0>)
 80041ba:	4a26      	ldr	r2, [pc, #152]	; (8004254 <MX_RTC_Init+0xb4>)
 80041bc:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 80041be:	4b24      	ldr	r3, [pc, #144]	; (8004250 <MX_RTC_Init+0xb0>)
 80041c0:	2200      	movs	r2, #0
 80041c2:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 80041c4:	4b22      	ldr	r3, [pc, #136]	; (8004250 <MX_RTC_Init+0xb0>)
 80041c6:	227f      	movs	r2, #127	; 0x7f
 80041c8:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 80041ca:	4b21      	ldr	r3, [pc, #132]	; (8004250 <MX_RTC_Init+0xb0>)
 80041cc:	22ff      	movs	r2, #255	; 0xff
 80041ce:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80041d0:	4b1f      	ldr	r3, [pc, #124]	; (8004250 <MX_RTC_Init+0xb0>)
 80041d2:	2200      	movs	r2, #0
 80041d4:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 80041d6:	4b1e      	ldr	r3, [pc, #120]	; (8004250 <MX_RTC_Init+0xb0>)
 80041d8:	2200      	movs	r2, #0
 80041da:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80041dc:	4b1c      	ldr	r3, [pc, #112]	; (8004250 <MX_RTC_Init+0xb0>)
 80041de:	2200      	movs	r2, #0
 80041e0:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80041e2:	4b1b      	ldr	r3, [pc, #108]	; (8004250 <MX_RTC_Init+0xb0>)
 80041e4:	2200      	movs	r2, #0
 80041e6:	61da      	str	r2, [r3, #28]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80041e8:	4819      	ldr	r0, [pc, #100]	; (8004250 <MX_RTC_Init+0xb0>)
 80041ea:	f002 fc81 	bl	8006af0 <HAL_RTC_Init>
 80041ee:	4603      	mov	r3, r0
 80041f0:	2b00      	cmp	r3, #0
 80041f2:	d001      	beq.n	80041f8 <MX_RTC_Init+0x58>
  {
    Error_Handler();
 80041f4:	f000 f99a 	bl	800452c <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x10;
 80041f8:	2310      	movs	r3, #16
 80041fa:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0x9;
 80041fc:	2309      	movs	r3, #9
 80041fe:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0x0;
 8004200:	2300      	movs	r3, #0
 8004202:	71bb      	strb	r3, [r7, #6]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8004204:	2300      	movs	r3, #0
 8004206:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8004208:	2300      	movs	r3, #0
 800420a:	617b      	str	r3, [r7, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 800420c:	1d3b      	adds	r3, r7, #4
 800420e:	2201      	movs	r2, #1
 8004210:	4619      	mov	r1, r3
 8004212:	480f      	ldr	r0, [pc, #60]	; (8004250 <MX_RTC_Init+0xb0>)
 8004214:	f002 fce7 	bl	8006be6 <HAL_RTC_SetTime>
 8004218:	4603      	mov	r3, r0
 800421a:	2b00      	cmp	r3, #0
 800421c:	d001      	beq.n	8004222 <MX_RTC_Init+0x82>
  {
    Error_Handler();
 800421e:	f000 f985 	bl	800452c <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_FRIDAY;
 8004222:	2305      	movs	r3, #5
 8004224:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_APRIL;
 8004226:	2304      	movs	r3, #4
 8004228:	707b      	strb	r3, [r7, #1]
  sDate.Date = 0x7;
 800422a:	2307      	movs	r3, #7
 800422c:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 0x23;
 800422e:	2323      	movs	r3, #35	; 0x23
 8004230:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8004232:	463b      	mov	r3, r7
 8004234:	2201      	movs	r2, #1
 8004236:	4619      	mov	r1, r3
 8004238:	4805      	ldr	r0, [pc, #20]	; (8004250 <MX_RTC_Init+0xb0>)
 800423a:	f002 fdcd 	bl	8006dd8 <HAL_RTC_SetDate>
 800423e:	4603      	mov	r3, r0
 8004240:	2b00      	cmp	r3, #0
 8004242:	d001      	beq.n	8004248 <MX_RTC_Init+0xa8>
  {
    Error_Handler();
 8004244:	f000 f972 	bl	800452c <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8004248:	bf00      	nop
 800424a:	3718      	adds	r7, #24
 800424c:	46bd      	mov	sp, r7
 800424e:	bd80      	pop	{r7, pc}
 8004250:	200013b8 	.word	0x200013b8
 8004254:	40002800 	.word	0x40002800

08004258 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8004258:	b580      	push	{r7, lr}
 800425a:	b08a      	sub	sp, #40	; 0x28
 800425c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800425e:	f107 031c 	add.w	r3, r7, #28
 8004262:	2200      	movs	r2, #0
 8004264:	601a      	str	r2, [r3, #0]
 8004266:	605a      	str	r2, [r3, #4]
 8004268:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800426a:	463b      	mov	r3, r7
 800426c:	2200      	movs	r2, #0
 800426e:	601a      	str	r2, [r3, #0]
 8004270:	605a      	str	r2, [r3, #4]
 8004272:	609a      	str	r2, [r3, #8]
 8004274:	60da      	str	r2, [r3, #12]
 8004276:	611a      	str	r2, [r3, #16]
 8004278:	615a      	str	r2, [r3, #20]
 800427a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800427c:	4b22      	ldr	r3, [pc, #136]	; (8004308 <MX_TIM2_Init+0xb0>)
 800427e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8004282:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 79;
 8004284:	4b20      	ldr	r3, [pc, #128]	; (8004308 <MX_TIM2_Init+0xb0>)
 8004286:	224f      	movs	r2, #79	; 0x4f
 8004288:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800428a:	4b1f      	ldr	r3, [pc, #124]	; (8004308 <MX_TIM2_Init+0xb0>)
 800428c:	2200      	movs	r2, #0
 800428e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 999;
 8004290:	4b1d      	ldr	r3, [pc, #116]	; (8004308 <MX_TIM2_Init+0xb0>)
 8004292:	f240 32e7 	movw	r2, #999	; 0x3e7
 8004296:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004298:	4b1b      	ldr	r3, [pc, #108]	; (8004308 <MX_TIM2_Init+0xb0>)
 800429a:	2200      	movs	r2, #0
 800429c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800429e:	4b1a      	ldr	r3, [pc, #104]	; (8004308 <MX_TIM2_Init+0xb0>)
 80042a0:	2280      	movs	r2, #128	; 0x80
 80042a2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80042a4:	4818      	ldr	r0, [pc, #96]	; (8004308 <MX_TIM2_Init+0xb0>)
 80042a6:	f002 ffe9 	bl	800727c <HAL_TIM_PWM_Init>
 80042aa:	4603      	mov	r3, r0
 80042ac:	2b00      	cmp	r3, #0
 80042ae:	d001      	beq.n	80042b4 <MX_TIM2_Init+0x5c>
  {
    Error_Handler();
 80042b0:	f000 f93c 	bl	800452c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80042b4:	2300      	movs	r3, #0
 80042b6:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80042b8:	2300      	movs	r3, #0
 80042ba:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80042bc:	f107 031c 	add.w	r3, r7, #28
 80042c0:	4619      	mov	r1, r3
 80042c2:	4811      	ldr	r0, [pc, #68]	; (8004308 <MX_TIM2_Init+0xb0>)
 80042c4:	f003 fefc 	bl	80080c0 <HAL_TIMEx_MasterConfigSynchronization>
 80042c8:	4603      	mov	r3, r0
 80042ca:	2b00      	cmp	r3, #0
 80042cc:	d001      	beq.n	80042d2 <MX_TIM2_Init+0x7a>
  {
    Error_Handler();
 80042ce:	f000 f92d 	bl	800452c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80042d2:	2360      	movs	r3, #96	; 0x60
 80042d4:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 500;
 80042d6:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80042da:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80042dc:	2300      	movs	r3, #0
 80042de:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80042e0:	2300      	movs	r3, #0
 80042e2:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80042e4:	463b      	mov	r3, r7
 80042e6:	2200      	movs	r2, #0
 80042e8:	4619      	mov	r1, r3
 80042ea:	4807      	ldr	r0, [pc, #28]	; (8004308 <MX_TIM2_Init+0xb0>)
 80042ec:	f003 faa4 	bl	8007838 <HAL_TIM_PWM_ConfigChannel>
 80042f0:	4603      	mov	r3, r0
 80042f2:	2b00      	cmp	r3, #0
 80042f4:	d001      	beq.n	80042fa <MX_TIM2_Init+0xa2>
  {
    Error_Handler();
 80042f6:	f000 f919 	bl	800452c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80042fa:	4803      	ldr	r0, [pc, #12]	; (8004308 <MX_TIM2_Init+0xb0>)
 80042fc:	f000 fb26 	bl	800494c <HAL_TIM_MspPostInit>

}
 8004300:	bf00      	nop
 8004302:	3728      	adds	r7, #40	; 0x28
 8004304:	46bd      	mov	sp, r7
 8004306:	bd80      	pop	{r7, pc}
 8004308:	200013dc 	.word	0x200013dc

0800430c <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 800430c:	b580      	push	{r7, lr}
 800430e:	b084      	sub	sp, #16
 8004310:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004312:	1d3b      	adds	r3, r7, #4
 8004314:	2200      	movs	r2, #0
 8004316:	601a      	str	r2, [r3, #0]
 8004318:	605a      	str	r2, [r3, #4]
 800431a:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 800431c:	4b14      	ldr	r3, [pc, #80]	; (8004370 <MX_TIM6_Init+0x64>)
 800431e:	4a15      	ldr	r2, [pc, #84]	; (8004374 <MX_TIM6_Init+0x68>)
 8004320:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 399;
 8004322:	4b13      	ldr	r3, [pc, #76]	; (8004370 <MX_TIM6_Init+0x64>)
 8004324:	f240 128f 	movw	r2, #399	; 0x18f
 8004328:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800432a:	4b11      	ldr	r3, [pc, #68]	; (8004370 <MX_TIM6_Init+0x64>)
 800432c:	2200      	movs	r2, #0
 800432e:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 9;
 8004330:	4b0f      	ldr	r3, [pc, #60]	; (8004370 <MX_TIM6_Init+0x64>)
 8004332:	2209      	movs	r2, #9
 8004334:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8004336:	4b0e      	ldr	r3, [pc, #56]	; (8004370 <MX_TIM6_Init+0x64>)
 8004338:	2280      	movs	r2, #128	; 0x80
 800433a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 800433c:	480c      	ldr	r0, [pc, #48]	; (8004370 <MX_TIM6_Init+0x64>)
 800433e:	f002 fef1 	bl	8007124 <HAL_TIM_Base_Init>
 8004342:	4603      	mov	r3, r0
 8004344:	2b00      	cmp	r3, #0
 8004346:	d001      	beq.n	800434c <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 8004348:	f000 f8f0 	bl	800452c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 800434c:	2320      	movs	r3, #32
 800434e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004350:	2300      	movs	r3, #0
 8004352:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8004354:	1d3b      	adds	r3, r7, #4
 8004356:	4619      	mov	r1, r3
 8004358:	4805      	ldr	r0, [pc, #20]	; (8004370 <MX_TIM6_Init+0x64>)
 800435a:	f003 feb1 	bl	80080c0 <HAL_TIMEx_MasterConfigSynchronization>
 800435e:	4603      	mov	r3, r0
 8004360:	2b00      	cmp	r3, #0
 8004362:	d001      	beq.n	8004368 <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 8004364:	f000 f8e2 	bl	800452c <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8004368:	bf00      	nop
 800436a:	3710      	adds	r7, #16
 800436c:	46bd      	mov	sp, r7
 800436e:	bd80      	pop	{r7, pc}
 8004370:	20001428 	.word	0x20001428
 8004374:	40001000 	.word	0x40001000

08004378 <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 8004378:	b580      	push	{r7, lr}
 800437a:	b084      	sub	sp, #16
 800437c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800437e:	1d3b      	adds	r3, r7, #4
 8004380:	2200      	movs	r2, #0
 8004382:	601a      	str	r2, [r3, #0]
 8004384:	605a      	str	r2, [r3, #4]
 8004386:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8004388:	4b15      	ldr	r3, [pc, #84]	; (80043e0 <MX_TIM7_Init+0x68>)
 800438a:	4a16      	ldr	r2, [pc, #88]	; (80043e4 <MX_TIM7_Init+0x6c>)
 800438c:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 7999;
 800438e:	4b14      	ldr	r3, [pc, #80]	; (80043e0 <MX_TIM7_Init+0x68>)
 8004390:	f641 723f 	movw	r2, #7999	; 0x1f3f
 8004394:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004396:	4b12      	ldr	r3, [pc, #72]	; (80043e0 <MX_TIM7_Init+0x68>)
 8004398:	2200      	movs	r2, #0
 800439a:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 9999;
 800439c:	4b10      	ldr	r3, [pc, #64]	; (80043e0 <MX_TIM7_Init+0x68>)
 800439e:	f242 720f 	movw	r2, #9999	; 0x270f
 80043a2:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80043a4:	4b0e      	ldr	r3, [pc, #56]	; (80043e0 <MX_TIM7_Init+0x68>)
 80043a6:	2280      	movs	r2, #128	; 0x80
 80043a8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 80043aa:	480d      	ldr	r0, [pc, #52]	; (80043e0 <MX_TIM7_Init+0x68>)
 80043ac:	f002 feba 	bl	8007124 <HAL_TIM_Base_Init>
 80043b0:	4603      	mov	r3, r0
 80043b2:	2b00      	cmp	r3, #0
 80043b4:	d001      	beq.n	80043ba <MX_TIM7_Init+0x42>
  {
    Error_Handler();
 80043b6:	f000 f8b9 	bl	800452c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80043ba:	2300      	movs	r3, #0
 80043bc:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80043be:	2300      	movs	r3, #0
 80043c0:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 80043c2:	1d3b      	adds	r3, r7, #4
 80043c4:	4619      	mov	r1, r3
 80043c6:	4806      	ldr	r0, [pc, #24]	; (80043e0 <MX_TIM7_Init+0x68>)
 80043c8:	f003 fe7a 	bl	80080c0 <HAL_TIMEx_MasterConfigSynchronization>
 80043cc:	4603      	mov	r3, r0
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	d001      	beq.n	80043d6 <MX_TIM7_Init+0x5e>
  {
    Error_Handler();
 80043d2:	f000 f8ab 	bl	800452c <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 80043d6:	bf00      	nop
 80043d8:	3710      	adds	r7, #16
 80043da:	46bd      	mov	sp, r7
 80043dc:	bd80      	pop	{r7, pc}
 80043de:	bf00      	nop
 80043e0:	20001474 	.word	0x20001474
 80043e4:	40001400 	.word	0x40001400

080043e8 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80043e8:	b580      	push	{r7, lr}
 80043ea:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80043ec:	4b14      	ldr	r3, [pc, #80]	; (8004440 <MX_USART1_UART_Init+0x58>)
 80043ee:	4a15      	ldr	r2, [pc, #84]	; (8004444 <MX_USART1_UART_Init+0x5c>)
 80043f0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80043f2:	4b13      	ldr	r3, [pc, #76]	; (8004440 <MX_USART1_UART_Init+0x58>)
 80043f4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80043f8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80043fa:	4b11      	ldr	r3, [pc, #68]	; (8004440 <MX_USART1_UART_Init+0x58>)
 80043fc:	2200      	movs	r2, #0
 80043fe:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8004400:	4b0f      	ldr	r3, [pc, #60]	; (8004440 <MX_USART1_UART_Init+0x58>)
 8004402:	2200      	movs	r2, #0
 8004404:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8004406:	4b0e      	ldr	r3, [pc, #56]	; (8004440 <MX_USART1_UART_Init+0x58>)
 8004408:	2200      	movs	r2, #0
 800440a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800440c:	4b0c      	ldr	r3, [pc, #48]	; (8004440 <MX_USART1_UART_Init+0x58>)
 800440e:	220c      	movs	r2, #12
 8004410:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004412:	4b0b      	ldr	r3, [pc, #44]	; (8004440 <MX_USART1_UART_Init+0x58>)
 8004414:	2200      	movs	r2, #0
 8004416:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8004418:	4b09      	ldr	r3, [pc, #36]	; (8004440 <MX_USART1_UART_Init+0x58>)
 800441a:	2200      	movs	r2, #0
 800441c:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800441e:	4b08      	ldr	r3, [pc, #32]	; (8004440 <MX_USART1_UART_Init+0x58>)
 8004420:	2200      	movs	r2, #0
 8004422:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8004424:	4b06      	ldr	r3, [pc, #24]	; (8004440 <MX_USART1_UART_Init+0x58>)
 8004426:	2200      	movs	r2, #0
 8004428:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800442a:	4805      	ldr	r0, [pc, #20]	; (8004440 <MX_USART1_UART_Init+0x58>)
 800442c:	f003 fecc 	bl	80081c8 <HAL_UART_Init>
 8004430:	4603      	mov	r3, r0
 8004432:	2b00      	cmp	r3, #0
 8004434:	d001      	beq.n	800443a <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8004436:	f000 f879 	bl	800452c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800443a:	bf00      	nop
 800443c:	bd80      	pop	{r7, pc}
 800443e:	bf00      	nop
 8004440:	200014c0 	.word	0x200014c0
 8004444:	40013800 	.word	0x40013800

08004448 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8004448:	b580      	push	{r7, lr}
 800444a:	b088      	sub	sp, #32
 800444c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800444e:	f107 030c 	add.w	r3, r7, #12
 8004452:	2200      	movs	r2, #0
 8004454:	601a      	str	r2, [r3, #0]
 8004456:	605a      	str	r2, [r3, #4]
 8004458:	609a      	str	r2, [r3, #8]
 800445a:	60da      	str	r2, [r3, #12]
 800445c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800445e:	4b31      	ldr	r3, [pc, #196]	; (8004524 <MX_GPIO_Init+0xdc>)
 8004460:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004462:	4a30      	ldr	r2, [pc, #192]	; (8004524 <MX_GPIO_Init+0xdc>)
 8004464:	f043 0301 	orr.w	r3, r3, #1
 8004468:	64d3      	str	r3, [r2, #76]	; 0x4c
 800446a:	4b2e      	ldr	r3, [pc, #184]	; (8004524 <MX_GPIO_Init+0xdc>)
 800446c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800446e:	f003 0301 	and.w	r3, r3, #1
 8004472:	60bb      	str	r3, [r7, #8]
 8004474:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8004476:	4b2b      	ldr	r3, [pc, #172]	; (8004524 <MX_GPIO_Init+0xdc>)
 8004478:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800447a:	4a2a      	ldr	r2, [pc, #168]	; (8004524 <MX_GPIO_Init+0xdc>)
 800447c:	f043 0302 	orr.w	r3, r3, #2
 8004480:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004482:	4b28      	ldr	r3, [pc, #160]	; (8004524 <MX_GPIO_Init+0xdc>)
 8004484:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004486:	f003 0302 	and.w	r3, r3, #2
 800448a:	607b      	str	r3, [r7, #4]
 800448c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 800448e:	2200      	movs	r2, #0
 8004490:	f44f 410f 	mov.w	r1, #36608	; 0x8f00
 8004494:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004498:	f001 f98e 	bl	80057b8 <HAL_GPIO_WritePin>
                          |GPIO_PIN_15, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5, GPIO_PIN_RESET);
 800449c:	2200      	movs	r2, #0
 800449e:	2138      	movs	r1, #56	; 0x38
 80044a0:	4821      	ldr	r0, [pc, #132]	; (8004528 <MX_GPIO_Init+0xe0>)
 80044a2:	f001 f989 	bl	80057b8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA1 PA3 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_3|GPIO_PIN_7;
 80044a6:	238a      	movs	r3, #138	; 0x8a
 80044a8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80044aa:	2300      	movs	r3, #0
 80044ac:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80044ae:	2302      	movs	r3, #2
 80044b0:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80044b2:	f107 030c 	add.w	r3, r7, #12
 80044b6:	4619      	mov	r1, r3
 80044b8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80044bc:	f000 fffa 	bl	80054b4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA8 PA11 PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11|GPIO_PIN_15;
 80044c0:	f44f 4309 	mov.w	r3, #35072	; 0x8900
 80044c4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80044c6:	2301      	movs	r3, #1
 80044c8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80044ca:	2300      	movs	r3, #0
 80044cc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80044ce:	2300      	movs	r3, #0
 80044d0:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80044d2:	f107 030c 	add.w	r3, r7, #12
 80044d6:	4619      	mov	r1, r3
 80044d8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80044dc:	f000 ffea 	bl	80054b4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA9 PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80044e0:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80044e4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 80044e6:	2311      	movs	r3, #17
 80044e8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80044ea:	2301      	movs	r3, #1
 80044ec:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80044ee:	2300      	movs	r3, #0
 80044f0:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80044f2:	f107 030c 	add.w	r3, r7, #12
 80044f6:	4619      	mov	r1, r3
 80044f8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80044fc:	f000 ffda 	bl	80054b4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB3 PB4 PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 8004500:	2338      	movs	r3, #56	; 0x38
 8004502:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004504:	2301      	movs	r3, #1
 8004506:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004508:	2300      	movs	r3, #0
 800450a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800450c:	2300      	movs	r3, #0
 800450e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004510:	f107 030c 	add.w	r3, r7, #12
 8004514:	4619      	mov	r1, r3
 8004516:	4804      	ldr	r0, [pc, #16]	; (8004528 <MX_GPIO_Init+0xe0>)
 8004518:	f000 ffcc 	bl	80054b4 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800451c:	bf00      	nop
 800451e:	3720      	adds	r7, #32
 8004520:	46bd      	mov	sp, r7
 8004522:	bd80      	pop	{r7, pc}
 8004524:	40021000 	.word	0x40021000
 8004528:	48000400 	.word	0x48000400

0800452c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800452c:	b480      	push	{r7}
 800452e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8004530:	b672      	cpsid	i
}
 8004532:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
    /* User can add his own implementation to report the HAL error return state */
    __disable_irq();
    while (1) {
 8004534:	e7fe      	b.n	8004534 <Error_Handler+0x8>
	...

08004538 <keypad_scan>:
#include "matrix_keypad.h"
#include "beeper.h"


// 定义键盘扫描函数
char keypad_scan(TIM_HandleTypeDef BEEP_TIM) {
 8004538:	b084      	sub	sp, #16
 800453a:	b5b0      	push	{r4, r5, r7, lr}
 800453c:	b0a2      	sub	sp, #136	; 0x88
 800453e:	af10      	add	r7, sp, #64	; 0x40
 8004540:	f107 0458 	add.w	r4, r7, #88	; 0x58
 8004544:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    uint8_t row, col;
    GPIO_PinState key_val;
    GPIO_TypeDef* cols_port[3] = {COL1_GPIO_Port, COL2_GPIO_Port, COL3_GPIO_Port};  // 定义列引脚GPIO端口
 8004548:	4a7d      	ldr	r2, [pc, #500]	; (8004740 <keypad_scan+0x208>)
 800454a:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800454e:	ca07      	ldmia	r2, {r0, r1, r2}
 8004550:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    uint16_t cols_pin[3] = {COL1_Pin, COL2_Pin, COL3_Pin};  // 定义列引脚
 8004554:	4a7b      	ldr	r2, [pc, #492]	; (8004744 <keypad_scan+0x20c>)
 8004556:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800455a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800455e:	6018      	str	r0, [r3, #0]
 8004560:	3304      	adds	r3, #4
 8004562:	8019      	strh	r1, [r3, #0]
    GPIO_TypeDef* rows_port[4] = {ROW1_GPIO_Port, ROW2_GPIO_Port, ROW3_GPIO_Port, ROW4_GPIO_Port};  // 定义行引脚GPIO端口
 8004564:	4b78      	ldr	r3, [pc, #480]	; (8004748 <keypad_scan+0x210>)
 8004566:	f107 0420 	add.w	r4, r7, #32
 800456a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800456c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    uint16_t rows_pin[4] = {ROW1_Pin, ROW2_Pin, ROW3_Pin, ROW4_Pin};  // 定义行引脚
 8004570:	4a76      	ldr	r2, [pc, #472]	; (800474c <keypad_scan+0x214>)
 8004572:	f107 0318 	add.w	r3, r7, #24
 8004576:	e892 0003 	ldmia.w	r2, {r0, r1}
 800457a:	e883 0003 	stmia.w	r3, {r0, r1}
    char key_map[4][3] = {  // 定义键盘映射表
 800457e:	4a74      	ldr	r2, [pc, #464]	; (8004750 <keypad_scan+0x218>)
 8004580:	f107 030c 	add.w	r3, r7, #12
 8004584:	ca07      	ldmia	r2, {r0, r1, r2}
 8004586:	e883 0007 	stmia.w	r3, {r0, r1, r2}
        {'1', '2', '3'},
        {'4', '5', '6'},
        {'7', '8', '9'},
        {'*', '0', '#'}
    };
    int key[2] = {-1, -1};
 800458a:	4a72      	ldr	r2, [pc, #456]	; (8004754 <keypad_scan+0x21c>)
 800458c:	1d3b      	adds	r3, r7, #4
 800458e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8004592:	e883 0003 	stmia.w	r3, {r0, r1}

    #define ROW_SET_HIGH(ROW) HAL_GPIO_WritePin(rows_port[ROW], rows_pin[ROW], GPIO_PIN_SET)
    #define ROW_SET_LOW(ROW) HAL_GPIO_WritePin(rows_port[ROW], rows_pin[ROW], GPIO_PIN_RESET)
    #define COL_GET_VAL(COL) HAL_GPIO_ReadPin(cols_port[COL], cols_pin[COL])

    for (row = 0; row < 4; row++) {
 8004596:	2300      	movs	r3, #0
 8004598:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 800459c:	e086      	b.n	80046ac <keypad_scan+0x174>
        ROW_SET_HIGH(row);
 800459e:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80045a2:	009b      	lsls	r3, r3, #2
 80045a4:	3348      	adds	r3, #72	; 0x48
 80045a6:	443b      	add	r3, r7
 80045a8:	f853 0c28 	ldr.w	r0, [r3, #-40]
 80045ac:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80045b0:	005b      	lsls	r3, r3, #1
 80045b2:	3348      	adds	r3, #72	; 0x48
 80045b4:	443b      	add	r3, r7
 80045b6:	f833 3c30 	ldrh.w	r3, [r3, #-48]
 80045ba:	2201      	movs	r2, #1
 80045bc:	4619      	mov	r1, r3
 80045be:	f001 f8fb 	bl	80057b8 <HAL_GPIO_WritePin>
        for (col = 0; col < 3; col++) {
 80045c2:	2300      	movs	r3, #0
 80045c4:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
 80045c8:	e055      	b.n	8004676 <keypad_scan+0x13e>
            key_val = COL_GET_VAL(col);
 80045ca:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 80045ce:	009b      	lsls	r3, r3, #2
 80045d0:	3348      	adds	r3, #72	; 0x48
 80045d2:	443b      	add	r3, r7
 80045d4:	f853 2c10 	ldr.w	r2, [r3, #-16]
 80045d8:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 80045dc:	005b      	lsls	r3, r3, #1
 80045de:	3348      	adds	r3, #72	; 0x48
 80045e0:	443b      	add	r3, r7
 80045e2:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 80045e6:	4619      	mov	r1, r3
 80045e8:	4610      	mov	r0, r2
 80045ea:	f001 f8cd 	bl	8005788 <HAL_GPIO_ReadPin>
 80045ee:	4603      	mov	r3, r0
 80045f0:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
            if(key_val == GPIO_PIN_SET) {
 80045f4:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 80045f8:	2b01      	cmp	r3, #1
 80045fa:	d137      	bne.n	800466c <keypad_scan+0x134>
                HAL_Delay(10);
 80045fc:	200a      	movs	r0, #10
 80045fe:	f000 fbfb 	bl	8004df8 <HAL_Delay>
                key_val = COL_GET_VAL(col);
 8004602:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8004606:	009b      	lsls	r3, r3, #2
 8004608:	3348      	adds	r3, #72	; 0x48
 800460a:	443b      	add	r3, r7
 800460c:	f853 2c10 	ldr.w	r2, [r3, #-16]
 8004610:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8004614:	005b      	lsls	r3, r3, #1
 8004616:	3348      	adds	r3, #72	; 0x48
 8004618:	443b      	add	r3, r7
 800461a:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 800461e:	4619      	mov	r1, r3
 8004620:	4610      	mov	r0, r2
 8004622:	f001 f8b1 	bl	8005788 <HAL_GPIO_ReadPin>
 8004626:	4603      	mov	r3, r0
 8004628:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
                if(key_val == GPIO_PIN_SET) {
 800462c:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 8004630:	2b01      	cmp	r3, #1
 8004632:	d11b      	bne.n	800466c <keypad_scan+0x134>
                    key[0] = row;
 8004634:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8004638:	607b      	str	r3, [r7, #4]
                    key[1] = col;
 800463a:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 800463e:	60bb      	str	r3, [r7, #8]
                    while(COL_GET_VAL(col) == GPIO_PIN_SET);
 8004640:	bf00      	nop
 8004642:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8004646:	009b      	lsls	r3, r3, #2
 8004648:	3348      	adds	r3, #72	; 0x48
 800464a:	443b      	add	r3, r7
 800464c:	f853 2c10 	ldr.w	r2, [r3, #-16]
 8004650:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8004654:	005b      	lsls	r3, r3, #1
 8004656:	3348      	adds	r3, #72	; 0x48
 8004658:	443b      	add	r3, r7
 800465a:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 800465e:	4619      	mov	r1, r3
 8004660:	4610      	mov	r0, r2
 8004662:	f001 f891 	bl	8005788 <HAL_GPIO_ReadPin>
 8004666:	4603      	mov	r3, r0
 8004668:	2b01      	cmp	r3, #1
 800466a:	d0ea      	beq.n	8004642 <keypad_scan+0x10a>
        for (col = 0; col < 3; col++) {
 800466c:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8004670:	3301      	adds	r3, #1
 8004672:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
 8004676:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 800467a:	2b02      	cmp	r3, #2
 800467c:	d9a5      	bls.n	80045ca <keypad_scan+0x92>
                }
            }
        }
        ROW_SET_LOW(row);
 800467e:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8004682:	009b      	lsls	r3, r3, #2
 8004684:	3348      	adds	r3, #72	; 0x48
 8004686:	443b      	add	r3, r7
 8004688:	f853 0c28 	ldr.w	r0, [r3, #-40]
 800468c:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8004690:	005b      	lsls	r3, r3, #1
 8004692:	3348      	adds	r3, #72	; 0x48
 8004694:	443b      	add	r3, r7
 8004696:	f833 3c30 	ldrh.w	r3, [r3, #-48]
 800469a:	2200      	movs	r2, #0
 800469c:	4619      	mov	r1, r3
 800469e:	f001 f88b 	bl	80057b8 <HAL_GPIO_WritePin>
    for (row = 0; row < 4; row++) {
 80046a2:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80046a6:	3301      	adds	r3, #1
 80046a8:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 80046ac:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80046b0:	2b03      	cmp	r3, #3
 80046b2:	f67f af74 	bls.w	800459e <keypad_scan+0x66>
    }
    if(key[0] != -1 && key[1] != -1) {
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80046bc:	d037      	beq.n	800472e <keypad_scan+0x1f6>
 80046be:	68bb      	ldr	r3, [r7, #8]
 80046c0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80046c4:	d033      	beq.n	800472e <keypad_scan+0x1f6>
        beep_setFreq(1000, BEEP_TIM);
 80046c6:	466d      	mov	r5, sp
 80046c8:	f107 0464 	add.w	r4, r7, #100	; 0x64
 80046cc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80046ce:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80046d0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80046d2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80046d4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80046d6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80046d8:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80046dc:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 80046e0:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80046e4:	cb0e      	ldmia	r3, {r1, r2, r3}
 80046e6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80046ea:	f7fc ff11 	bl	8001510 <beep_setFreq>
        HAL_Delay(100);
 80046ee:	2064      	movs	r0, #100	; 0x64
 80046f0:	f000 fb82 	bl	8004df8 <HAL_Delay>
        beep_off(BEEP_TIM);
 80046f4:	466d      	mov	r5, sp
 80046f6:	f107 0468 	add.w	r4, r7, #104	; 0x68
 80046fa:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80046fc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80046fe:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004700:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004702:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004704:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004706:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 800470a:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 800470e:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8004712:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8004714:	f7fc ff2e 	bl	8001574 <beep_off>
        return key_map[key[0]][key[1]];
 8004718:	687a      	ldr	r2, [r7, #4]
 800471a:	68b9      	ldr	r1, [r7, #8]
 800471c:	4613      	mov	r3, r2
 800471e:	005b      	lsls	r3, r3, #1
 8004720:	4413      	add	r3, r2
 8004722:	3348      	adds	r3, #72	; 0x48
 8004724:	443b      	add	r3, r7
 8004726:	440b      	add	r3, r1
 8004728:	3b3c      	subs	r3, #60	; 0x3c
 800472a:	781b      	ldrb	r3, [r3, #0]
 800472c:	e000      	b.n	8004730 <keypad_scan+0x1f8>
    }
    return 0;
 800472e:	2300      	movs	r3, #0
}
 8004730:	4618      	mov	r0, r3
 8004732:	3748      	adds	r7, #72	; 0x48
 8004734:	46bd      	mov	sp, r7
 8004736:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 800473a:	b004      	add	sp, #16
 800473c:	4770      	bx	lr
 800473e:	bf00      	nop
 8004740:	0800d86c 	.word	0x0800d86c
 8004744:	0800d878 	.word	0x0800d878
 8004748:	0800d880 	.word	0x0800d880
 800474c:	0800d890 	.word	0x0800d890
 8004750:	0800d898 	.word	0x0800d898
 8004754:	0800d8a4 	.word	0x0800d8a4

08004758 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004758:	b480      	push	{r7}
 800475a:	b083      	sub	sp, #12
 800475c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800475e:	4b0f      	ldr	r3, [pc, #60]	; (800479c <HAL_MspInit+0x44>)
 8004760:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004762:	4a0e      	ldr	r2, [pc, #56]	; (800479c <HAL_MspInit+0x44>)
 8004764:	f043 0301 	orr.w	r3, r3, #1
 8004768:	6613      	str	r3, [r2, #96]	; 0x60
 800476a:	4b0c      	ldr	r3, [pc, #48]	; (800479c <HAL_MspInit+0x44>)
 800476c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800476e:	f003 0301 	and.w	r3, r3, #1
 8004772:	607b      	str	r3, [r7, #4]
 8004774:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8004776:	4b09      	ldr	r3, [pc, #36]	; (800479c <HAL_MspInit+0x44>)
 8004778:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800477a:	4a08      	ldr	r2, [pc, #32]	; (800479c <HAL_MspInit+0x44>)
 800477c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004780:	6593      	str	r3, [r2, #88]	; 0x58
 8004782:	4b06      	ldr	r3, [pc, #24]	; (800479c <HAL_MspInit+0x44>)
 8004784:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004786:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800478a:	603b      	str	r3, [r7, #0]
 800478c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800478e:	bf00      	nop
 8004790:	370c      	adds	r7, #12
 8004792:	46bd      	mov	sp, r7
 8004794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004798:	4770      	bx	lr
 800479a:	bf00      	nop
 800479c:	40021000 	.word	0x40021000

080047a0 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 80047a0:	b580      	push	{r7, lr}
 80047a2:	b08a      	sub	sp, #40	; 0x28
 80047a4:	af00      	add	r7, sp, #0
 80047a6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80047a8:	f107 0314 	add.w	r3, r7, #20
 80047ac:	2200      	movs	r2, #0
 80047ae:	601a      	str	r2, [r3, #0]
 80047b0:	605a      	str	r2, [r3, #4]
 80047b2:	609a      	str	r2, [r3, #8]
 80047b4:	60da      	str	r2, [r3, #12]
 80047b6:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC1)
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	4a19      	ldr	r2, [pc, #100]	; (8004824 <HAL_DAC_MspInit+0x84>)
 80047be:	4293      	cmp	r3, r2
 80047c0:	d12c      	bne.n	800481c <HAL_DAC_MspInit+0x7c>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 80047c2:	4b19      	ldr	r3, [pc, #100]	; (8004828 <HAL_DAC_MspInit+0x88>)
 80047c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80047c6:	4a18      	ldr	r2, [pc, #96]	; (8004828 <HAL_DAC_MspInit+0x88>)
 80047c8:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80047cc:	6593      	str	r3, [r2, #88]	; 0x58
 80047ce:	4b16      	ldr	r3, [pc, #88]	; (8004828 <HAL_DAC_MspInit+0x88>)
 80047d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80047d2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80047d6:	613b      	str	r3, [r7, #16]
 80047d8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80047da:	4b13      	ldr	r3, [pc, #76]	; (8004828 <HAL_DAC_MspInit+0x88>)
 80047dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80047de:	4a12      	ldr	r2, [pc, #72]	; (8004828 <HAL_DAC_MspInit+0x88>)
 80047e0:	f043 0301 	orr.w	r3, r3, #1
 80047e4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80047e6:	4b10      	ldr	r3, [pc, #64]	; (8004828 <HAL_DAC_MspInit+0x88>)
 80047e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80047ea:	f003 0301 	and.w	r3, r3, #1
 80047ee:	60fb      	str	r3, [r7, #12]
 80047f0:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 80047f2:	2310      	movs	r3, #16
 80047f4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80047f6:	2303      	movs	r3, #3
 80047f8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80047fa:	2300      	movs	r3, #0
 80047fc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80047fe:	f107 0314 	add.w	r3, r7, #20
 8004802:	4619      	mov	r1, r3
 8004804:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004808:	f000 fe54 	bl	80054b4 <HAL_GPIO_Init>

    /* DAC1 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 800480c:	2200      	movs	r2, #0
 800480e:	2100      	movs	r1, #0
 8004810:	2036      	movs	r0, #54	; 0x36
 8004812:	f000 fbf0 	bl	8004ff6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8004816:	2036      	movs	r0, #54	; 0x36
 8004818:	f000 fc09 	bl	800502e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }

}
 800481c:	bf00      	nop
 800481e:	3728      	adds	r7, #40	; 0x28
 8004820:	46bd      	mov	sp, r7
 8004822:	bd80      	pop	{r7, pc}
 8004824:	40007400 	.word	0x40007400
 8004828:	40021000 	.word	0x40021000

0800482c <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 800482c:	b580      	push	{r7, lr}
 800482e:	b098      	sub	sp, #96	; 0x60
 8004830:	af00      	add	r7, sp, #0
 8004832:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8004834:	f107 030c 	add.w	r3, r7, #12
 8004838:	2254      	movs	r2, #84	; 0x54
 800483a:	2100      	movs	r1, #0
 800483c:	4618      	mov	r0, r3
 800483e:	f004 fff9 	bl	8009834 <memset>
  if(hrtc->Instance==RTC)
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	4a0f      	ldr	r2, [pc, #60]	; (8004884 <HAL_RTC_MspInit+0x58>)
 8004848:	4293      	cmp	r3, r2
 800484a:	d117      	bne.n	800487c <HAL_RTC_MspInit+0x50>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 800484c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004850:	60fb      	str	r3, [r7, #12]
    PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8004852:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004856:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8004858:	f107 030c 	add.w	r3, r7, #12
 800485c:	4618      	mov	r0, r3
 800485e:	f001 fe5f 	bl	8006520 <HAL_RCCEx_PeriphCLKConfig>
 8004862:	4603      	mov	r3, r0
 8004864:	2b00      	cmp	r3, #0
 8004866:	d001      	beq.n	800486c <HAL_RTC_MspInit+0x40>
    {
      Error_Handler();
 8004868:	f7ff fe60 	bl	800452c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 800486c:	4b06      	ldr	r3, [pc, #24]	; (8004888 <HAL_RTC_MspInit+0x5c>)
 800486e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004872:	4a05      	ldr	r2, [pc, #20]	; (8004888 <HAL_RTC_MspInit+0x5c>)
 8004874:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004878:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 800487c:	bf00      	nop
 800487e:	3760      	adds	r7, #96	; 0x60
 8004880:	46bd      	mov	sp, r7
 8004882:	bd80      	pop	{r7, pc}
 8004884:	40002800 	.word	0x40002800
 8004888:	40021000 	.word	0x40021000

0800488c <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 800488c:	b480      	push	{r7}
 800488e:	b085      	sub	sp, #20
 8004890:	af00      	add	r7, sp, #0
 8004892:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM2)
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800489c:	d10b      	bne.n	80048b6 <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800489e:	4b09      	ldr	r3, [pc, #36]	; (80048c4 <HAL_TIM_PWM_MspInit+0x38>)
 80048a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80048a2:	4a08      	ldr	r2, [pc, #32]	; (80048c4 <HAL_TIM_PWM_MspInit+0x38>)
 80048a4:	f043 0301 	orr.w	r3, r3, #1
 80048a8:	6593      	str	r3, [r2, #88]	; 0x58
 80048aa:	4b06      	ldr	r3, [pc, #24]	; (80048c4 <HAL_TIM_PWM_MspInit+0x38>)
 80048ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80048ae:	f003 0301 	and.w	r3, r3, #1
 80048b2:	60fb      	str	r3, [r7, #12]
 80048b4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80048b6:	bf00      	nop
 80048b8:	3714      	adds	r7, #20
 80048ba:	46bd      	mov	sp, r7
 80048bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048c0:	4770      	bx	lr
 80048c2:	bf00      	nop
 80048c4:	40021000 	.word	0x40021000

080048c8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80048c8:	b580      	push	{r7, lr}
 80048ca:	b084      	sub	sp, #16
 80048cc:	af00      	add	r7, sp, #0
 80048ce:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	4a1a      	ldr	r2, [pc, #104]	; (8004940 <HAL_TIM_Base_MspInit+0x78>)
 80048d6:	4293      	cmp	r3, r2
 80048d8:	d114      	bne.n	8004904 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 80048da:	4b1a      	ldr	r3, [pc, #104]	; (8004944 <HAL_TIM_Base_MspInit+0x7c>)
 80048dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80048de:	4a19      	ldr	r2, [pc, #100]	; (8004944 <HAL_TIM_Base_MspInit+0x7c>)
 80048e0:	f043 0310 	orr.w	r3, r3, #16
 80048e4:	6593      	str	r3, [r2, #88]	; 0x58
 80048e6:	4b17      	ldr	r3, [pc, #92]	; (8004944 <HAL_TIM_Base_MspInit+0x7c>)
 80048e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80048ea:	f003 0310 	and.w	r3, r3, #16
 80048ee:	60fb      	str	r3, [r7, #12]
 80048f0:	68fb      	ldr	r3, [r7, #12]
    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 80048f2:	2200      	movs	r2, #0
 80048f4:	2100      	movs	r1, #0
 80048f6:	2036      	movs	r0, #54	; 0x36
 80048f8:	f000 fb7d 	bl	8004ff6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80048fc:	2036      	movs	r0, #54	; 0x36
 80048fe:	f000 fb96 	bl	800502e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }

}
 8004902:	e018      	b.n	8004936 <HAL_TIM_Base_MspInit+0x6e>
  else if(htim_base->Instance==TIM7)
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	4a0f      	ldr	r2, [pc, #60]	; (8004948 <HAL_TIM_Base_MspInit+0x80>)
 800490a:	4293      	cmp	r3, r2
 800490c:	d113      	bne.n	8004936 <HAL_TIM_Base_MspInit+0x6e>
    __HAL_RCC_TIM7_CLK_ENABLE();
 800490e:	4b0d      	ldr	r3, [pc, #52]	; (8004944 <HAL_TIM_Base_MspInit+0x7c>)
 8004910:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004912:	4a0c      	ldr	r2, [pc, #48]	; (8004944 <HAL_TIM_Base_MspInit+0x7c>)
 8004914:	f043 0320 	orr.w	r3, r3, #32
 8004918:	6593      	str	r3, [r2, #88]	; 0x58
 800491a:	4b0a      	ldr	r3, [pc, #40]	; (8004944 <HAL_TIM_Base_MspInit+0x7c>)
 800491c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800491e:	f003 0320 	and.w	r3, r3, #32
 8004922:	60bb      	str	r3, [r7, #8]
 8004924:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 8004926:	2200      	movs	r2, #0
 8004928:	2100      	movs	r1, #0
 800492a:	2037      	movs	r0, #55	; 0x37
 800492c:	f000 fb63 	bl	8004ff6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8004930:	2037      	movs	r0, #55	; 0x37
 8004932:	f000 fb7c 	bl	800502e <HAL_NVIC_EnableIRQ>
}
 8004936:	bf00      	nop
 8004938:	3710      	adds	r7, #16
 800493a:	46bd      	mov	sp, r7
 800493c:	bd80      	pop	{r7, pc}
 800493e:	bf00      	nop
 8004940:	40001000 	.word	0x40001000
 8004944:	40021000 	.word	0x40021000
 8004948:	40001400 	.word	0x40001400

0800494c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800494c:	b580      	push	{r7, lr}
 800494e:	b088      	sub	sp, #32
 8004950:	af00      	add	r7, sp, #0
 8004952:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004954:	f107 030c 	add.w	r3, r7, #12
 8004958:	2200      	movs	r2, #0
 800495a:	601a      	str	r2, [r3, #0]
 800495c:	605a      	str	r2, [r3, #4]
 800495e:	609a      	str	r2, [r3, #8]
 8004960:	60da      	str	r2, [r3, #12]
 8004962:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800496c:	d11c      	bne.n	80049a8 <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800496e:	4b10      	ldr	r3, [pc, #64]	; (80049b0 <HAL_TIM_MspPostInit+0x64>)
 8004970:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004972:	4a0f      	ldr	r2, [pc, #60]	; (80049b0 <HAL_TIM_MspPostInit+0x64>)
 8004974:	f043 0301 	orr.w	r3, r3, #1
 8004978:	64d3      	str	r3, [r2, #76]	; 0x4c
 800497a:	4b0d      	ldr	r3, [pc, #52]	; (80049b0 <HAL_TIM_MspPostInit+0x64>)
 800497c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800497e:	f003 0301 	and.w	r3, r3, #1
 8004982:	60bb      	str	r3, [r7, #8]
 8004984:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA0     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = Beep_Pin;
 8004986:	2301      	movs	r3, #1
 8004988:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800498a:	2302      	movs	r3, #2
 800498c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800498e:	2302      	movs	r3, #2
 8004990:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004992:	2300      	movs	r3, #0
 8004994:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8004996:	2301      	movs	r3, #1
 8004998:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(Beep_GPIO_Port, &GPIO_InitStruct);
 800499a:	f107 030c 	add.w	r3, r7, #12
 800499e:	4619      	mov	r1, r3
 80049a0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80049a4:	f000 fd86 	bl	80054b4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 80049a8:	bf00      	nop
 80049aa:	3720      	adds	r7, #32
 80049ac:	46bd      	mov	sp, r7
 80049ae:	bd80      	pop	{r7, pc}
 80049b0:	40021000 	.word	0x40021000

080049b4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80049b4:	b580      	push	{r7, lr}
 80049b6:	b09e      	sub	sp, #120	; 0x78
 80049b8:	af00      	add	r7, sp, #0
 80049ba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80049bc:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80049c0:	2200      	movs	r2, #0
 80049c2:	601a      	str	r2, [r3, #0]
 80049c4:	605a      	str	r2, [r3, #4]
 80049c6:	609a      	str	r2, [r3, #8]
 80049c8:	60da      	str	r2, [r3, #12]
 80049ca:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80049cc:	f107 0310 	add.w	r3, r7, #16
 80049d0:	2254      	movs	r2, #84	; 0x54
 80049d2:	2100      	movs	r1, #0
 80049d4:	4618      	mov	r0, r3
 80049d6:	f004 ff2d 	bl	8009834 <memset>
  if(huart->Instance==USART1)
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	4a22      	ldr	r2, [pc, #136]	; (8004a68 <HAL_UART_MspInit+0xb4>)
 80049e0:	4293      	cmp	r3, r2
 80049e2:	d13d      	bne.n	8004a60 <HAL_UART_MspInit+0xac>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80049e4:	2301      	movs	r3, #1
 80049e6:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80049e8:	2300      	movs	r3, #0
 80049ea:	633b      	str	r3, [r7, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80049ec:	f107 0310 	add.w	r3, r7, #16
 80049f0:	4618      	mov	r0, r3
 80049f2:	f001 fd95 	bl	8006520 <HAL_RCCEx_PeriphCLKConfig>
 80049f6:	4603      	mov	r3, r0
 80049f8:	2b00      	cmp	r3, #0
 80049fa:	d001      	beq.n	8004a00 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80049fc:	f7ff fd96 	bl	800452c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8004a00:	4b1a      	ldr	r3, [pc, #104]	; (8004a6c <HAL_UART_MspInit+0xb8>)
 8004a02:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004a04:	4a19      	ldr	r2, [pc, #100]	; (8004a6c <HAL_UART_MspInit+0xb8>)
 8004a06:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004a0a:	6613      	str	r3, [r2, #96]	; 0x60
 8004a0c:	4b17      	ldr	r3, [pc, #92]	; (8004a6c <HAL_UART_MspInit+0xb8>)
 8004a0e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004a10:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004a14:	60fb      	str	r3, [r7, #12]
 8004a16:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004a18:	4b14      	ldr	r3, [pc, #80]	; (8004a6c <HAL_UART_MspInit+0xb8>)
 8004a1a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004a1c:	4a13      	ldr	r2, [pc, #76]	; (8004a6c <HAL_UART_MspInit+0xb8>)
 8004a1e:	f043 0302 	orr.w	r3, r3, #2
 8004a22:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004a24:	4b11      	ldr	r3, [pc, #68]	; (8004a6c <HAL_UART_MspInit+0xb8>)
 8004a26:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004a28:	f003 0302 	and.w	r3, r3, #2
 8004a2c:	60bb      	str	r3, [r7, #8]
 8004a2e:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8004a30:	23c0      	movs	r3, #192	; 0xc0
 8004a32:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004a34:	2302      	movs	r3, #2
 8004a36:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004a38:	2300      	movs	r3, #0
 8004a3a:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004a3c:	2303      	movs	r3, #3
 8004a3e:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8004a40:	2307      	movs	r3, #7
 8004a42:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004a44:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8004a48:	4619      	mov	r1, r3
 8004a4a:	4809      	ldr	r0, [pc, #36]	; (8004a70 <HAL_UART_MspInit+0xbc>)
 8004a4c:	f000 fd32 	bl	80054b4 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8004a50:	2200      	movs	r2, #0
 8004a52:	2100      	movs	r1, #0
 8004a54:	2025      	movs	r0, #37	; 0x25
 8004a56:	f000 face 	bl	8004ff6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8004a5a:	2025      	movs	r0, #37	; 0x25
 8004a5c:	f000 fae7 	bl	800502e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8004a60:	bf00      	nop
 8004a62:	3778      	adds	r7, #120	; 0x78
 8004a64:	46bd      	mov	sp, r7
 8004a66:	bd80      	pop	{r7, pc}
 8004a68:	40013800 	.word	0x40013800
 8004a6c:	40021000 	.word	0x40021000
 8004a70:	48000400 	.word	0x48000400

08004a74 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004a74:	b480      	push	{r7}
 8004a76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8004a78:	e7fe      	b.n	8004a78 <NMI_Handler+0x4>

08004a7a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004a7a:	b480      	push	{r7}
 8004a7c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004a7e:	e7fe      	b.n	8004a7e <HardFault_Handler+0x4>

08004a80 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004a80:	b480      	push	{r7}
 8004a82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004a84:	e7fe      	b.n	8004a84 <MemManage_Handler+0x4>

08004a86 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8004a86:	b480      	push	{r7}
 8004a88:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8004a8a:	e7fe      	b.n	8004a8a <BusFault_Handler+0x4>

08004a8c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004a8c:	b480      	push	{r7}
 8004a8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004a90:	e7fe      	b.n	8004a90 <UsageFault_Handler+0x4>

08004a92 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8004a92:	b480      	push	{r7}
 8004a94:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8004a96:	bf00      	nop
 8004a98:	46bd      	mov	sp, r7
 8004a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a9e:	4770      	bx	lr

08004aa0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8004aa0:	b480      	push	{r7}
 8004aa2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8004aa4:	bf00      	nop
 8004aa6:	46bd      	mov	sp, r7
 8004aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aac:	4770      	bx	lr

08004aae <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8004aae:	b480      	push	{r7}
 8004ab0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8004ab2:	bf00      	nop
 8004ab4:	46bd      	mov	sp, r7
 8004ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aba:	4770      	bx	lr

08004abc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8004abc:	b580      	push	{r7, lr}
 8004abe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8004ac0:	f000 f97a 	bl	8004db8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8004ac4:	bf00      	nop
 8004ac6:	bd80      	pop	{r7, pc}

08004ac8 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8004ac8:	b580      	push	{r7, lr}
 8004aca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8004acc:	4802      	ldr	r0, [pc, #8]	; (8004ad8 <USART1_IRQHandler+0x10>)
 8004ace:	f003 fcb3 	bl	8008438 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8004ad2:	bf00      	nop
 8004ad4:	bd80      	pop	{r7, pc}
 8004ad6:	bf00      	nop
 8004ad8:	200014c0 	.word	0x200014c0

08004adc <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC channel1 and channel2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8004adc:	b580      	push	{r7, lr}
 8004ade:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8004ae0:	4803      	ldr	r0, [pc, #12]	; (8004af0 <TIM6_DAC_IRQHandler+0x14>)
 8004ae2:	f002 fd89 	bl	80075f8 <HAL_TIM_IRQHandler>
  HAL_DAC_IRQHandler(&hdac1);
 8004ae6:	4803      	ldr	r0, [pc, #12]	; (8004af4 <TIM6_DAC_IRQHandler+0x18>)
 8004ae8:	f000 fadd 	bl	80050a6 <HAL_DAC_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8004aec:	bf00      	nop
 8004aee:	bd80      	pop	{r7, pc}
 8004af0:	20001428 	.word	0x20001428
 8004af4:	200013a4 	.word	0x200013a4

08004af8 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8004af8:	b580      	push	{r7, lr}
 8004afa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8004afc:	4802      	ldr	r0, [pc, #8]	; (8004b08 <TIM7_IRQHandler+0x10>)
 8004afe:	f002 fd7b 	bl	80075f8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8004b02:	bf00      	nop
 8004b04:	bd80      	pop	{r7, pc}
 8004b06:	bf00      	nop
 8004b08:	20001474 	.word	0x20001474

08004b0c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8004b0c:	b480      	push	{r7}
 8004b0e:	af00      	add	r7, sp, #0
  return 1;
 8004b10:	2301      	movs	r3, #1
}
 8004b12:	4618      	mov	r0, r3
 8004b14:	46bd      	mov	sp, r7
 8004b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b1a:	4770      	bx	lr

08004b1c <_kill>:

int _kill(int pid, int sig)
{
 8004b1c:	b580      	push	{r7, lr}
 8004b1e:	b082      	sub	sp, #8
 8004b20:	af00      	add	r7, sp, #0
 8004b22:	6078      	str	r0, [r7, #4]
 8004b24:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8004b26:	f004 fe3d 	bl	80097a4 <__errno>
 8004b2a:	4603      	mov	r3, r0
 8004b2c:	2216      	movs	r2, #22
 8004b2e:	601a      	str	r2, [r3, #0]
  return -1;
 8004b30:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8004b34:	4618      	mov	r0, r3
 8004b36:	3708      	adds	r7, #8
 8004b38:	46bd      	mov	sp, r7
 8004b3a:	bd80      	pop	{r7, pc}

08004b3c <_exit>:

void _exit (int status)
{
 8004b3c:	b580      	push	{r7, lr}
 8004b3e:	b082      	sub	sp, #8
 8004b40:	af00      	add	r7, sp, #0
 8004b42:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8004b44:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8004b48:	6878      	ldr	r0, [r7, #4]
 8004b4a:	f7ff ffe7 	bl	8004b1c <_kill>
  while (1) {}    /* Make sure we hang here */
 8004b4e:	e7fe      	b.n	8004b4e <_exit+0x12>

08004b50 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8004b50:	b580      	push	{r7, lr}
 8004b52:	b086      	sub	sp, #24
 8004b54:	af00      	add	r7, sp, #0
 8004b56:	60f8      	str	r0, [r7, #12]
 8004b58:	60b9      	str	r1, [r7, #8]
 8004b5a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004b5c:	2300      	movs	r3, #0
 8004b5e:	617b      	str	r3, [r7, #20]
 8004b60:	e00a      	b.n	8004b78 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8004b62:	f3af 8000 	nop.w
 8004b66:	4601      	mov	r1, r0
 8004b68:	68bb      	ldr	r3, [r7, #8]
 8004b6a:	1c5a      	adds	r2, r3, #1
 8004b6c:	60ba      	str	r2, [r7, #8]
 8004b6e:	b2ca      	uxtb	r2, r1
 8004b70:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004b72:	697b      	ldr	r3, [r7, #20]
 8004b74:	3301      	adds	r3, #1
 8004b76:	617b      	str	r3, [r7, #20]
 8004b78:	697a      	ldr	r2, [r7, #20]
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	429a      	cmp	r2, r3
 8004b7e:	dbf0      	blt.n	8004b62 <_read+0x12>
  }

  return len;
 8004b80:	687b      	ldr	r3, [r7, #4]
}
 8004b82:	4618      	mov	r0, r3
 8004b84:	3718      	adds	r7, #24
 8004b86:	46bd      	mov	sp, r7
 8004b88:	bd80      	pop	{r7, pc}

08004b8a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8004b8a:	b580      	push	{r7, lr}
 8004b8c:	b086      	sub	sp, #24
 8004b8e:	af00      	add	r7, sp, #0
 8004b90:	60f8      	str	r0, [r7, #12]
 8004b92:	60b9      	str	r1, [r7, #8]
 8004b94:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004b96:	2300      	movs	r3, #0
 8004b98:	617b      	str	r3, [r7, #20]
 8004b9a:	e009      	b.n	8004bb0 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8004b9c:	68bb      	ldr	r3, [r7, #8]
 8004b9e:	1c5a      	adds	r2, r3, #1
 8004ba0:	60ba      	str	r2, [r7, #8]
 8004ba2:	781b      	ldrb	r3, [r3, #0]
 8004ba4:	4618      	mov	r0, r3
 8004ba6:	f7fd fddf 	bl	8002768 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004baa:	697b      	ldr	r3, [r7, #20]
 8004bac:	3301      	adds	r3, #1
 8004bae:	617b      	str	r3, [r7, #20]
 8004bb0:	697a      	ldr	r2, [r7, #20]
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	429a      	cmp	r2, r3
 8004bb6:	dbf1      	blt.n	8004b9c <_write+0x12>
  }
  return len;
 8004bb8:	687b      	ldr	r3, [r7, #4]
}
 8004bba:	4618      	mov	r0, r3
 8004bbc:	3718      	adds	r7, #24
 8004bbe:	46bd      	mov	sp, r7
 8004bc0:	bd80      	pop	{r7, pc}

08004bc2 <_close>:

int _close(int file)
{
 8004bc2:	b480      	push	{r7}
 8004bc4:	b083      	sub	sp, #12
 8004bc6:	af00      	add	r7, sp, #0
 8004bc8:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8004bca:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8004bce:	4618      	mov	r0, r3
 8004bd0:	370c      	adds	r7, #12
 8004bd2:	46bd      	mov	sp, r7
 8004bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bd8:	4770      	bx	lr

08004bda <_fstat>:


int _fstat(int file, struct stat *st)
{
 8004bda:	b480      	push	{r7}
 8004bdc:	b083      	sub	sp, #12
 8004bde:	af00      	add	r7, sp, #0
 8004be0:	6078      	str	r0, [r7, #4]
 8004be2:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8004be4:	683b      	ldr	r3, [r7, #0]
 8004be6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8004bea:	605a      	str	r2, [r3, #4]
  return 0;
 8004bec:	2300      	movs	r3, #0
}
 8004bee:	4618      	mov	r0, r3
 8004bf0:	370c      	adds	r7, #12
 8004bf2:	46bd      	mov	sp, r7
 8004bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bf8:	4770      	bx	lr

08004bfa <_isatty>:

int _isatty(int file)
{
 8004bfa:	b480      	push	{r7}
 8004bfc:	b083      	sub	sp, #12
 8004bfe:	af00      	add	r7, sp, #0
 8004c00:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8004c02:	2301      	movs	r3, #1
}
 8004c04:	4618      	mov	r0, r3
 8004c06:	370c      	adds	r7, #12
 8004c08:	46bd      	mov	sp, r7
 8004c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c0e:	4770      	bx	lr

08004c10 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8004c10:	b480      	push	{r7}
 8004c12:	b085      	sub	sp, #20
 8004c14:	af00      	add	r7, sp, #0
 8004c16:	60f8      	str	r0, [r7, #12]
 8004c18:	60b9      	str	r1, [r7, #8]
 8004c1a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8004c1c:	2300      	movs	r3, #0
}
 8004c1e:	4618      	mov	r0, r3
 8004c20:	3714      	adds	r7, #20
 8004c22:	46bd      	mov	sp, r7
 8004c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c28:	4770      	bx	lr
	...

08004c2c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8004c2c:	b580      	push	{r7, lr}
 8004c2e:	b086      	sub	sp, #24
 8004c30:	af00      	add	r7, sp, #0
 8004c32:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8004c34:	4a14      	ldr	r2, [pc, #80]	; (8004c88 <_sbrk+0x5c>)
 8004c36:	4b15      	ldr	r3, [pc, #84]	; (8004c8c <_sbrk+0x60>)
 8004c38:	1ad3      	subs	r3, r2, r3
 8004c3a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8004c3c:	697b      	ldr	r3, [r7, #20]
 8004c3e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8004c40:	4b13      	ldr	r3, [pc, #76]	; (8004c90 <_sbrk+0x64>)
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	2b00      	cmp	r3, #0
 8004c46:	d102      	bne.n	8004c4e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8004c48:	4b11      	ldr	r3, [pc, #68]	; (8004c90 <_sbrk+0x64>)
 8004c4a:	4a12      	ldr	r2, [pc, #72]	; (8004c94 <_sbrk+0x68>)
 8004c4c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8004c4e:	4b10      	ldr	r3, [pc, #64]	; (8004c90 <_sbrk+0x64>)
 8004c50:	681a      	ldr	r2, [r3, #0]
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	4413      	add	r3, r2
 8004c56:	693a      	ldr	r2, [r7, #16]
 8004c58:	429a      	cmp	r2, r3
 8004c5a:	d207      	bcs.n	8004c6c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8004c5c:	f004 fda2 	bl	80097a4 <__errno>
 8004c60:	4603      	mov	r3, r0
 8004c62:	220c      	movs	r2, #12
 8004c64:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8004c66:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004c6a:	e009      	b.n	8004c80 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8004c6c:	4b08      	ldr	r3, [pc, #32]	; (8004c90 <_sbrk+0x64>)
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8004c72:	4b07      	ldr	r3, [pc, #28]	; (8004c90 <_sbrk+0x64>)
 8004c74:	681a      	ldr	r2, [r3, #0]
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	4413      	add	r3, r2
 8004c7a:	4a05      	ldr	r2, [pc, #20]	; (8004c90 <_sbrk+0x64>)
 8004c7c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8004c7e:	68fb      	ldr	r3, [r7, #12]
}
 8004c80:	4618      	mov	r0, r3
 8004c82:	3718      	adds	r7, #24
 8004c84:	46bd      	mov	sp, r7
 8004c86:	bd80      	pop	{r7, pc}
 8004c88:	20010000 	.word	0x20010000
 8004c8c:	00000400 	.word	0x00000400
 8004c90:	20001d80 	.word	0x20001d80
 8004c94:	20001d98 	.word	0x20001d98

08004c98 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8004c98:	b480      	push	{r7}
 8004c9a:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8004c9c:	4b06      	ldr	r3, [pc, #24]	; (8004cb8 <SystemInit+0x20>)
 8004c9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ca2:	4a05      	ldr	r2, [pc, #20]	; (8004cb8 <SystemInit+0x20>)
 8004ca4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004ca8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8004cac:	bf00      	nop
 8004cae:	46bd      	mov	sp, r7
 8004cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cb4:	4770      	bx	lr
 8004cb6:	bf00      	nop
 8004cb8:	e000ed00 	.word	0xe000ed00

08004cbc <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8004cbc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8004cf4 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8004cc0:	f7ff ffea 	bl	8004c98 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8004cc4:	480c      	ldr	r0, [pc, #48]	; (8004cf8 <LoopForever+0x6>)
  ldr r1, =_edata
 8004cc6:	490d      	ldr	r1, [pc, #52]	; (8004cfc <LoopForever+0xa>)
  ldr r2, =_sidata
 8004cc8:	4a0d      	ldr	r2, [pc, #52]	; (8004d00 <LoopForever+0xe>)
  movs r3, #0
 8004cca:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8004ccc:	e002      	b.n	8004cd4 <LoopCopyDataInit>

08004cce <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8004cce:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004cd0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8004cd2:	3304      	adds	r3, #4

08004cd4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004cd4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8004cd6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004cd8:	d3f9      	bcc.n	8004cce <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8004cda:	4a0a      	ldr	r2, [pc, #40]	; (8004d04 <LoopForever+0x12>)
  ldr r4, =_ebss
 8004cdc:	4c0a      	ldr	r4, [pc, #40]	; (8004d08 <LoopForever+0x16>)
  movs r3, #0
 8004cde:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004ce0:	e001      	b.n	8004ce6 <LoopFillZerobss>

08004ce2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8004ce2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004ce4:	3204      	adds	r2, #4

08004ce6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8004ce6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004ce8:	d3fb      	bcc.n	8004ce2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8004cea:	f004 fd61 	bl	80097b0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8004cee:	f7ff f90f 	bl	8003f10 <main>

08004cf2 <LoopForever>:

LoopForever:
    b LoopForever
 8004cf2:	e7fe      	b.n	8004cf2 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8004cf4:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8004cf8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8004cfc:	20001280 	.word	0x20001280
  ldr r2, =_sidata
 8004d00:	0800e578 	.word	0x0800e578
  ldr r2, =_sbss
 8004d04:	20001280 	.word	0x20001280
  ldr r4, =_ebss
 8004d08:	20001d98 	.word	0x20001d98

08004d0c <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8004d0c:	e7fe      	b.n	8004d0c <ADC1_IRQHandler>

08004d0e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004d0e:	b580      	push	{r7, lr}
 8004d10:	b082      	sub	sp, #8
 8004d12:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8004d14:	2300      	movs	r3, #0
 8004d16:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004d18:	2003      	movs	r0, #3
 8004d1a:	f000 f961 	bl	8004fe0 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8004d1e:	200f      	movs	r0, #15
 8004d20:	f000 f80e 	bl	8004d40 <HAL_InitTick>
 8004d24:	4603      	mov	r3, r0
 8004d26:	2b00      	cmp	r3, #0
 8004d28:	d002      	beq.n	8004d30 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8004d2a:	2301      	movs	r3, #1
 8004d2c:	71fb      	strb	r3, [r7, #7]
 8004d2e:	e001      	b.n	8004d34 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8004d30:	f7ff fd12 	bl	8004758 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8004d34:	79fb      	ldrb	r3, [r7, #7]
}
 8004d36:	4618      	mov	r0, r3
 8004d38:	3708      	adds	r7, #8
 8004d3a:	46bd      	mov	sp, r7
 8004d3c:	bd80      	pop	{r7, pc}
	...

08004d40 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004d40:	b580      	push	{r7, lr}
 8004d42:	b084      	sub	sp, #16
 8004d44:	af00      	add	r7, sp, #0
 8004d46:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8004d48:	2300      	movs	r3, #0
 8004d4a:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8004d4c:	4b17      	ldr	r3, [pc, #92]	; (8004dac <HAL_InitTick+0x6c>)
 8004d4e:	781b      	ldrb	r3, [r3, #0]
 8004d50:	2b00      	cmp	r3, #0
 8004d52:	d023      	beq.n	8004d9c <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8004d54:	4b16      	ldr	r3, [pc, #88]	; (8004db0 <HAL_InitTick+0x70>)
 8004d56:	681a      	ldr	r2, [r3, #0]
 8004d58:	4b14      	ldr	r3, [pc, #80]	; (8004dac <HAL_InitTick+0x6c>)
 8004d5a:	781b      	ldrb	r3, [r3, #0]
 8004d5c:	4619      	mov	r1, r3
 8004d5e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004d62:	fbb3 f3f1 	udiv	r3, r3, r1
 8004d66:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d6a:	4618      	mov	r0, r3
 8004d6c:	f000 f96d 	bl	800504a <HAL_SYSTICK_Config>
 8004d70:	4603      	mov	r3, r0
 8004d72:	2b00      	cmp	r3, #0
 8004d74:	d10f      	bne.n	8004d96 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	2b0f      	cmp	r3, #15
 8004d7a:	d809      	bhi.n	8004d90 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004d7c:	2200      	movs	r2, #0
 8004d7e:	6879      	ldr	r1, [r7, #4]
 8004d80:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004d84:	f000 f937 	bl	8004ff6 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8004d88:	4a0a      	ldr	r2, [pc, #40]	; (8004db4 <HAL_InitTick+0x74>)
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	6013      	str	r3, [r2, #0]
 8004d8e:	e007      	b.n	8004da0 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8004d90:	2301      	movs	r3, #1
 8004d92:	73fb      	strb	r3, [r7, #15]
 8004d94:	e004      	b.n	8004da0 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8004d96:	2301      	movs	r3, #1
 8004d98:	73fb      	strb	r3, [r7, #15]
 8004d9a:	e001      	b.n	8004da0 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8004d9c:	2301      	movs	r3, #1
 8004d9e:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8004da0:	7bfb      	ldrb	r3, [r7, #15]
}
 8004da2:	4618      	mov	r0, r3
 8004da4:	3710      	adds	r7, #16
 8004da6:	46bd      	mov	sp, r7
 8004da8:	bd80      	pop	{r7, pc}
 8004daa:	bf00      	nop
 8004dac:	200010a8 	.word	0x200010a8
 8004db0:	200010a0 	.word	0x200010a0
 8004db4:	200010a4 	.word	0x200010a4

08004db8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004db8:	b480      	push	{r7}
 8004dba:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8004dbc:	4b06      	ldr	r3, [pc, #24]	; (8004dd8 <HAL_IncTick+0x20>)
 8004dbe:	781b      	ldrb	r3, [r3, #0]
 8004dc0:	461a      	mov	r2, r3
 8004dc2:	4b06      	ldr	r3, [pc, #24]	; (8004ddc <HAL_IncTick+0x24>)
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	4413      	add	r3, r2
 8004dc8:	4a04      	ldr	r2, [pc, #16]	; (8004ddc <HAL_IncTick+0x24>)
 8004dca:	6013      	str	r3, [r2, #0]
}
 8004dcc:	bf00      	nop
 8004dce:	46bd      	mov	sp, r7
 8004dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dd4:	4770      	bx	lr
 8004dd6:	bf00      	nop
 8004dd8:	200010a8 	.word	0x200010a8
 8004ddc:	20001d84 	.word	0x20001d84

08004de0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004de0:	b480      	push	{r7}
 8004de2:	af00      	add	r7, sp, #0
  return uwTick;
 8004de4:	4b03      	ldr	r3, [pc, #12]	; (8004df4 <HAL_GetTick+0x14>)
 8004de6:	681b      	ldr	r3, [r3, #0]
}
 8004de8:	4618      	mov	r0, r3
 8004dea:	46bd      	mov	sp, r7
 8004dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004df0:	4770      	bx	lr
 8004df2:	bf00      	nop
 8004df4:	20001d84 	.word	0x20001d84

08004df8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004df8:	b580      	push	{r7, lr}
 8004dfa:	b084      	sub	sp, #16
 8004dfc:	af00      	add	r7, sp, #0
 8004dfe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004e00:	f7ff ffee 	bl	8004de0 <HAL_GetTick>
 8004e04:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8004e0a:	68fb      	ldr	r3, [r7, #12]
 8004e0c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004e10:	d005      	beq.n	8004e1e <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8004e12:	4b0a      	ldr	r3, [pc, #40]	; (8004e3c <HAL_Delay+0x44>)
 8004e14:	781b      	ldrb	r3, [r3, #0]
 8004e16:	461a      	mov	r2, r3
 8004e18:	68fb      	ldr	r3, [r7, #12]
 8004e1a:	4413      	add	r3, r2
 8004e1c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8004e1e:	bf00      	nop
 8004e20:	f7ff ffde 	bl	8004de0 <HAL_GetTick>
 8004e24:	4602      	mov	r2, r0
 8004e26:	68bb      	ldr	r3, [r7, #8]
 8004e28:	1ad3      	subs	r3, r2, r3
 8004e2a:	68fa      	ldr	r2, [r7, #12]
 8004e2c:	429a      	cmp	r2, r3
 8004e2e:	d8f7      	bhi.n	8004e20 <HAL_Delay+0x28>
  {
  }
}
 8004e30:	bf00      	nop
 8004e32:	bf00      	nop
 8004e34:	3710      	adds	r7, #16
 8004e36:	46bd      	mov	sp, r7
 8004e38:	bd80      	pop	{r7, pc}
 8004e3a:	bf00      	nop
 8004e3c:	200010a8 	.word	0x200010a8

08004e40 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004e40:	b480      	push	{r7}
 8004e42:	b085      	sub	sp, #20
 8004e44:	af00      	add	r7, sp, #0
 8004e46:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	f003 0307 	and.w	r3, r3, #7
 8004e4e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004e50:	4b0c      	ldr	r3, [pc, #48]	; (8004e84 <__NVIC_SetPriorityGrouping+0x44>)
 8004e52:	68db      	ldr	r3, [r3, #12]
 8004e54:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004e56:	68ba      	ldr	r2, [r7, #8]
 8004e58:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004e5c:	4013      	ands	r3, r2
 8004e5e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004e60:	68fb      	ldr	r3, [r7, #12]
 8004e62:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004e64:	68bb      	ldr	r3, [r7, #8]
 8004e66:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004e68:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004e6c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004e70:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004e72:	4a04      	ldr	r2, [pc, #16]	; (8004e84 <__NVIC_SetPriorityGrouping+0x44>)
 8004e74:	68bb      	ldr	r3, [r7, #8]
 8004e76:	60d3      	str	r3, [r2, #12]
}
 8004e78:	bf00      	nop
 8004e7a:	3714      	adds	r7, #20
 8004e7c:	46bd      	mov	sp, r7
 8004e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e82:	4770      	bx	lr
 8004e84:	e000ed00 	.word	0xe000ed00

08004e88 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004e88:	b480      	push	{r7}
 8004e8a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004e8c:	4b04      	ldr	r3, [pc, #16]	; (8004ea0 <__NVIC_GetPriorityGrouping+0x18>)
 8004e8e:	68db      	ldr	r3, [r3, #12]
 8004e90:	0a1b      	lsrs	r3, r3, #8
 8004e92:	f003 0307 	and.w	r3, r3, #7
}
 8004e96:	4618      	mov	r0, r3
 8004e98:	46bd      	mov	sp, r7
 8004e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e9e:	4770      	bx	lr
 8004ea0:	e000ed00 	.word	0xe000ed00

08004ea4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004ea4:	b480      	push	{r7}
 8004ea6:	b083      	sub	sp, #12
 8004ea8:	af00      	add	r7, sp, #0
 8004eaa:	4603      	mov	r3, r0
 8004eac:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004eae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004eb2:	2b00      	cmp	r3, #0
 8004eb4:	db0b      	blt.n	8004ece <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004eb6:	79fb      	ldrb	r3, [r7, #7]
 8004eb8:	f003 021f 	and.w	r2, r3, #31
 8004ebc:	4907      	ldr	r1, [pc, #28]	; (8004edc <__NVIC_EnableIRQ+0x38>)
 8004ebe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004ec2:	095b      	lsrs	r3, r3, #5
 8004ec4:	2001      	movs	r0, #1
 8004ec6:	fa00 f202 	lsl.w	r2, r0, r2
 8004eca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8004ece:	bf00      	nop
 8004ed0:	370c      	adds	r7, #12
 8004ed2:	46bd      	mov	sp, r7
 8004ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ed8:	4770      	bx	lr
 8004eda:	bf00      	nop
 8004edc:	e000e100 	.word	0xe000e100

08004ee0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004ee0:	b480      	push	{r7}
 8004ee2:	b083      	sub	sp, #12
 8004ee4:	af00      	add	r7, sp, #0
 8004ee6:	4603      	mov	r3, r0
 8004ee8:	6039      	str	r1, [r7, #0]
 8004eea:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004eec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004ef0:	2b00      	cmp	r3, #0
 8004ef2:	db0a      	blt.n	8004f0a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004ef4:	683b      	ldr	r3, [r7, #0]
 8004ef6:	b2da      	uxtb	r2, r3
 8004ef8:	490c      	ldr	r1, [pc, #48]	; (8004f2c <__NVIC_SetPriority+0x4c>)
 8004efa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004efe:	0112      	lsls	r2, r2, #4
 8004f00:	b2d2      	uxtb	r2, r2
 8004f02:	440b      	add	r3, r1
 8004f04:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004f08:	e00a      	b.n	8004f20 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004f0a:	683b      	ldr	r3, [r7, #0]
 8004f0c:	b2da      	uxtb	r2, r3
 8004f0e:	4908      	ldr	r1, [pc, #32]	; (8004f30 <__NVIC_SetPriority+0x50>)
 8004f10:	79fb      	ldrb	r3, [r7, #7]
 8004f12:	f003 030f 	and.w	r3, r3, #15
 8004f16:	3b04      	subs	r3, #4
 8004f18:	0112      	lsls	r2, r2, #4
 8004f1a:	b2d2      	uxtb	r2, r2
 8004f1c:	440b      	add	r3, r1
 8004f1e:	761a      	strb	r2, [r3, #24]
}
 8004f20:	bf00      	nop
 8004f22:	370c      	adds	r7, #12
 8004f24:	46bd      	mov	sp, r7
 8004f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f2a:	4770      	bx	lr
 8004f2c:	e000e100 	.word	0xe000e100
 8004f30:	e000ed00 	.word	0xe000ed00

08004f34 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004f34:	b480      	push	{r7}
 8004f36:	b089      	sub	sp, #36	; 0x24
 8004f38:	af00      	add	r7, sp, #0
 8004f3a:	60f8      	str	r0, [r7, #12]
 8004f3c:	60b9      	str	r1, [r7, #8]
 8004f3e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004f40:	68fb      	ldr	r3, [r7, #12]
 8004f42:	f003 0307 	and.w	r3, r3, #7
 8004f46:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004f48:	69fb      	ldr	r3, [r7, #28]
 8004f4a:	f1c3 0307 	rsb	r3, r3, #7
 8004f4e:	2b04      	cmp	r3, #4
 8004f50:	bf28      	it	cs
 8004f52:	2304      	movcs	r3, #4
 8004f54:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004f56:	69fb      	ldr	r3, [r7, #28]
 8004f58:	3304      	adds	r3, #4
 8004f5a:	2b06      	cmp	r3, #6
 8004f5c:	d902      	bls.n	8004f64 <NVIC_EncodePriority+0x30>
 8004f5e:	69fb      	ldr	r3, [r7, #28]
 8004f60:	3b03      	subs	r3, #3
 8004f62:	e000      	b.n	8004f66 <NVIC_EncodePriority+0x32>
 8004f64:	2300      	movs	r3, #0
 8004f66:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004f68:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004f6c:	69bb      	ldr	r3, [r7, #24]
 8004f6e:	fa02 f303 	lsl.w	r3, r2, r3
 8004f72:	43da      	mvns	r2, r3
 8004f74:	68bb      	ldr	r3, [r7, #8]
 8004f76:	401a      	ands	r2, r3
 8004f78:	697b      	ldr	r3, [r7, #20]
 8004f7a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004f7c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8004f80:	697b      	ldr	r3, [r7, #20]
 8004f82:	fa01 f303 	lsl.w	r3, r1, r3
 8004f86:	43d9      	mvns	r1, r3
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004f8c:	4313      	orrs	r3, r2
         );
}
 8004f8e:	4618      	mov	r0, r3
 8004f90:	3724      	adds	r7, #36	; 0x24
 8004f92:	46bd      	mov	sp, r7
 8004f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f98:	4770      	bx	lr
	...

08004f9c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004f9c:	b580      	push	{r7, lr}
 8004f9e:	b082      	sub	sp, #8
 8004fa0:	af00      	add	r7, sp, #0
 8004fa2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	3b01      	subs	r3, #1
 8004fa8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004fac:	d301      	bcc.n	8004fb2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004fae:	2301      	movs	r3, #1
 8004fb0:	e00f      	b.n	8004fd2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004fb2:	4a0a      	ldr	r2, [pc, #40]	; (8004fdc <SysTick_Config+0x40>)
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	3b01      	subs	r3, #1
 8004fb8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004fba:	210f      	movs	r1, #15
 8004fbc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004fc0:	f7ff ff8e 	bl	8004ee0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004fc4:	4b05      	ldr	r3, [pc, #20]	; (8004fdc <SysTick_Config+0x40>)
 8004fc6:	2200      	movs	r2, #0
 8004fc8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004fca:	4b04      	ldr	r3, [pc, #16]	; (8004fdc <SysTick_Config+0x40>)
 8004fcc:	2207      	movs	r2, #7
 8004fce:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004fd0:	2300      	movs	r3, #0
}
 8004fd2:	4618      	mov	r0, r3
 8004fd4:	3708      	adds	r7, #8
 8004fd6:	46bd      	mov	sp, r7
 8004fd8:	bd80      	pop	{r7, pc}
 8004fda:	bf00      	nop
 8004fdc:	e000e010 	.word	0xe000e010

08004fe0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004fe0:	b580      	push	{r7, lr}
 8004fe2:	b082      	sub	sp, #8
 8004fe4:	af00      	add	r7, sp, #0
 8004fe6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004fe8:	6878      	ldr	r0, [r7, #4]
 8004fea:	f7ff ff29 	bl	8004e40 <__NVIC_SetPriorityGrouping>
}
 8004fee:	bf00      	nop
 8004ff0:	3708      	adds	r7, #8
 8004ff2:	46bd      	mov	sp, r7
 8004ff4:	bd80      	pop	{r7, pc}

08004ff6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004ff6:	b580      	push	{r7, lr}
 8004ff8:	b086      	sub	sp, #24
 8004ffa:	af00      	add	r7, sp, #0
 8004ffc:	4603      	mov	r3, r0
 8004ffe:	60b9      	str	r1, [r7, #8]
 8005000:	607a      	str	r2, [r7, #4]
 8005002:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8005004:	2300      	movs	r3, #0
 8005006:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8005008:	f7ff ff3e 	bl	8004e88 <__NVIC_GetPriorityGrouping>
 800500c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800500e:	687a      	ldr	r2, [r7, #4]
 8005010:	68b9      	ldr	r1, [r7, #8]
 8005012:	6978      	ldr	r0, [r7, #20]
 8005014:	f7ff ff8e 	bl	8004f34 <NVIC_EncodePriority>
 8005018:	4602      	mov	r2, r0
 800501a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800501e:	4611      	mov	r1, r2
 8005020:	4618      	mov	r0, r3
 8005022:	f7ff ff5d 	bl	8004ee0 <__NVIC_SetPriority>
}
 8005026:	bf00      	nop
 8005028:	3718      	adds	r7, #24
 800502a:	46bd      	mov	sp, r7
 800502c:	bd80      	pop	{r7, pc}

0800502e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800502e:	b580      	push	{r7, lr}
 8005030:	b082      	sub	sp, #8
 8005032:	af00      	add	r7, sp, #0
 8005034:	4603      	mov	r3, r0
 8005036:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005038:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800503c:	4618      	mov	r0, r3
 800503e:	f7ff ff31 	bl	8004ea4 <__NVIC_EnableIRQ>
}
 8005042:	bf00      	nop
 8005044:	3708      	adds	r7, #8
 8005046:	46bd      	mov	sp, r7
 8005048:	bd80      	pop	{r7, pc}

0800504a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800504a:	b580      	push	{r7, lr}
 800504c:	b082      	sub	sp, #8
 800504e:	af00      	add	r7, sp, #0
 8005050:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8005052:	6878      	ldr	r0, [r7, #4]
 8005054:	f7ff ffa2 	bl	8004f9c <SysTick_Config>
 8005058:	4603      	mov	r3, r0
}
 800505a:	4618      	mov	r0, r3
 800505c:	3708      	adds	r7, #8
 800505e:	46bd      	mov	sp, r7
 8005060:	bd80      	pop	{r7, pc}

08005062 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8005062:	b580      	push	{r7, lr}
 8005064:	b082      	sub	sp, #8
 8005066:	af00      	add	r7, sp, #0
 8005068:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	2b00      	cmp	r3, #0
 800506e:	d101      	bne.n	8005074 <HAL_DAC_Init+0x12>
  {
     return HAL_ERROR;
 8005070:	2301      	movs	r3, #1
 8005072:	e014      	b.n	800509e <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	791b      	ldrb	r3, [r3, #4]
 8005078:	b2db      	uxtb	r3, r3
 800507a:	2b00      	cmp	r3, #0
 800507c:	d105      	bne.n	800508a <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	2200      	movs	r2, #0
 8005082:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8005084:	6878      	ldr	r0, [r7, #4]
 8005086:	f7ff fb8b 	bl	80047a0 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	2202      	movs	r2, #2
 800508e:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	2200      	movs	r2, #0
 8005094:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	2201      	movs	r2, #1
 800509a:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 800509c:	2300      	movs	r3, #0
}
 800509e:	4618      	mov	r0, r3
 80050a0:	3708      	adds	r7, #8
 80050a2:	46bd      	mov	sp, r7
 80050a4:	bd80      	pop	{r7, pc}

080050a6 <HAL_DAC_IRQHandler>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
void HAL_DAC_IRQHandler(DAC_HandleTypeDef *hdac)
{
 80050a6:	b580      	push	{r7, lr}
 80050a8:	b082      	sub	sp, #8
 80050aa:	af00      	add	r7, sp, #0
 80050ac:	6078      	str	r0, [r7, #4]
  if (__HAL_DAC_GET_IT_SOURCE(hdac, DAC_IT_DMAUDR1))
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80050b8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80050bc:	d120      	bne.n	8005100 <HAL_DAC_IRQHandler+0x5a>
  {
    /* Check underrun flag of DAC channel 1 */
    if (__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR1))
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80050c4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80050c8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80050cc:	d118      	bne.n	8005100 <HAL_DAC_IRQHandler+0x5a>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	2204      	movs	r2, #4
 80050d2:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to chanel1 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH1);
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	691b      	ldr	r3, [r3, #16]
 80050d8:	f043 0201 	orr.w	r2, r3, #1
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR1);
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80050e8:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the selected DAC channel1 DMA request */
      CLEAR_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	681a      	ldr	r2, [r3, #0]
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80050f8:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh1(hdac);
#else
      HAL_DAC_DMAUnderrunCallbackCh1(hdac);
 80050fa:	6878      	ldr	r0, [r7, #4]
 80050fc:	f000 f82d 	bl	800515a <HAL_DAC_DMAUnderrunCallbackCh1>
  }
#if defined (STM32L431xx) || defined (STM32L432xx) || defined (STM32L433xx) || defined (STM32L442xx) || defined (STM32L443xx) || \
    defined (STM32L471xx) || defined (STM32L475xx) || defined (STM32L476xx) || defined (STM32L485xx) || defined (STM32L486xx) || defined (STM32L496xx) || defined (STM32L4A6xx) || \
    defined (STM32L4P5xx) || defined (STM32L4Q5xx) || \
    defined (STM32L4R5xx) || defined (STM32L4R7xx) || defined (STM32L4R9xx) || defined (STM32L4S5xx) || defined (STM32L4S7xx) || defined(STM32L4S9xx)
  if(__HAL_DAC_GET_IT_SOURCE(hdac, DAC_IT_DMAUDR2))
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800510a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800510e:	d120      	bne.n	8005152 <HAL_DAC_IRQHandler+0xac>
  {
    /* Check underrun flag of DAC channel 2 */
    if (__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR2))
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005116:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800511a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800511e:	d118      	bne.n	8005152 <HAL_DAC_IRQHandler+0xac>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	2204      	movs	r2, #4
 8005124:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to channel2 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH2);
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	691b      	ldr	r3, [r3, #16]
 800512a:	f043 0202 	orr.w	r2, r3, #2
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR2);
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 800513a:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the selected DAC channel2 DMA request */
      CLEAR_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	681a      	ldr	r2, [r3, #0]
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 800514a:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh2(hdac);
#else
      HAL_DACEx_DMAUnderrunCallbackCh2(hdac);
 800514c:	6878      	ldr	r0, [r7, #4]
 800514e:	f000 f928 	bl	80053a2 <HAL_DACEx_DMAUnderrunCallbackCh2>
  }
#endif  /* STM32L431xx STM32L432xx STM32L433xx STM32L442xx STM32L443xx                         */
        /* STM32L471xx STM32L475xx STM32L476xx STM32L485xx STM32L486xx STM32L496xx STM32L4A6xx */
        /* STM32L4P5xx STM32L4Q5xx                                                             */
        /* STM32L4R5xx STM32L4R7xx STM32L4R9xx STM32L4S5xx STM32L4S7xx STM32L4S9xx             */
}
 8005152:	bf00      	nop
 8005154:	3708      	adds	r7, #8
 8005156:	46bd      	mov	sp, r7
 8005158:	bd80      	pop	{r7, pc}

0800515a <HAL_DAC_DMAUnderrunCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_DMAUnderrunCallbackCh1(DAC_HandleTypeDef *hdac)
{
 800515a:	b480      	push	{r7}
 800515c:	b083      	sub	sp, #12
 800515e:	af00      	add	r7, sp, #0
 8005160:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_DMAUnderrunCallbackCh1 could be implemented in the user file
   */
}
 8005162:	bf00      	nop
 8005164:	370c      	adds	r7, #12
 8005166:	46bd      	mov	sp, r7
 8005168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800516c:	4770      	bx	lr

0800516e <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected (Whenever present)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 800516e:	b580      	push	{r7, lr}
 8005170:	b088      	sub	sp, #32
 8005172:	af00      	add	r7, sp, #0
 8005174:	60f8      	str	r0, [r7, #12]
 8005176:	60b9      	str	r1, [r7, #8]
 8005178:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg1;
  uint32_t tmpreg2;
  uint32_t tickstart = 0U;
 800517a:	2300      	movs	r3, #0
 800517c:	61fb      	str	r3, [r7, #28]
    assert_param(IS_DAC_REFRESHTIME(sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime));
  }
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 800517e:	68fb      	ldr	r3, [r7, #12]
 8005180:	795b      	ldrb	r3, [r3, #5]
 8005182:	2b01      	cmp	r3, #1
 8005184:	d101      	bne.n	800518a <HAL_DAC_ConfigChannel+0x1c>
 8005186:	2302      	movs	r3, #2
 8005188:	e107      	b.n	800539a <HAL_DAC_ConfigChannel+0x22c>
 800518a:	68fb      	ldr	r3, [r7, #12]
 800518c:	2201      	movs	r2, #1
 800518e:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8005190:	68fb      	ldr	r3, [r7, #12]
 8005192:	2202      	movs	r2, #2
 8005194:	711a      	strb	r2, [r3, #4]

  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 8005196:	68bb      	ldr	r3, [r7, #8]
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	2b04      	cmp	r3, #4
 800519c:	d174      	bne.n	8005288 <HAL_DAC_ConfigChannel+0x11a>
  /* Sample on old configuration */
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 800519e:	f7ff fe1f 	bl	8004de0 <HAL_GetTick>
 80051a2:	61f8      	str	r0, [r7, #28]

    if (Channel == DAC_CHANNEL_1)
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	2b00      	cmp	r3, #0
 80051a8:	d134      	bne.n	8005214 <HAL_DAC_ConfigChannel+0xa6>
    {

      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 80051aa:	e011      	b.n	80051d0 <HAL_DAC_ConfigChannel+0x62>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 80051ac:	f7ff fe18 	bl	8004de0 <HAL_GetTick>
 80051b0:	4602      	mov	r2, r0
 80051b2:	69fb      	ldr	r3, [r7, #28]
 80051b4:	1ad3      	subs	r3, r2, r3
 80051b6:	2b01      	cmp	r3, #1
 80051b8:	d90a      	bls.n	80051d0 <HAL_DAC_ConfigChannel+0x62>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 80051ba:	68fb      	ldr	r3, [r7, #12]
 80051bc:	691b      	ldr	r3, [r3, #16]
 80051be:	f043 0208 	orr.w	r2, r3, #8
 80051c2:	68fb      	ldr	r3, [r7, #12]
 80051c4:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 80051c6:	68fb      	ldr	r3, [r7, #12]
 80051c8:	2203      	movs	r2, #3
 80051ca:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 80051cc:	2303      	movs	r3, #3
 80051ce:	e0e4      	b.n	800539a <HAL_DAC_ConfigChannel+0x22c>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 80051d0:	68fb      	ldr	r3, [r7, #12]
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80051d6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80051da:	2b00      	cmp	r3, #0
 80051dc:	d1e6      	bne.n	80051ac <HAL_DAC_ConfigChannel+0x3e>
        }
      }
      HAL_Delay(1);
 80051de:	2001      	movs	r0, #1
 80051e0:	f7ff fe0a 	bl	8004df8 <HAL_Delay>
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 80051e4:	68fb      	ldr	r3, [r7, #12]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	68ba      	ldr	r2, [r7, #8]
 80051ea:	6992      	ldr	r2, [r2, #24]
 80051ec:	641a      	str	r2, [r3, #64]	; 0x40
 80051ee:	e01e      	b.n	800522e <HAL_DAC_ConfigChannel+0xc0>
      /* SHSR2 can be written when BWST2 is cleared */

      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 80051f0:	f7ff fdf6 	bl	8004de0 <HAL_GetTick>
 80051f4:	4602      	mov	r2, r0
 80051f6:	69fb      	ldr	r3, [r7, #28]
 80051f8:	1ad3      	subs	r3, r2, r3
 80051fa:	2b01      	cmp	r3, #1
 80051fc:	d90a      	bls.n	8005214 <HAL_DAC_ConfigChannel+0xa6>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 80051fe:	68fb      	ldr	r3, [r7, #12]
 8005200:	691b      	ldr	r3, [r3, #16]
 8005202:	f043 0208 	orr.w	r2, r3, #8
 8005206:	68fb      	ldr	r3, [r7, #12]
 8005208:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 800520a:	68fb      	ldr	r3, [r7, #12]
 800520c:	2203      	movs	r2, #3
 800520e:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 8005210:	2303      	movs	r3, #3
 8005212:	e0c2      	b.n	800539a <HAL_DAC_ConfigChannel+0x22c>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8005214:	68fb      	ldr	r3, [r7, #12]
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800521a:	2b00      	cmp	r3, #0
 800521c:	dbe8      	blt.n	80051f0 <HAL_DAC_ConfigChannel+0x82>
        }
      }
      HAL_Delay(1U);
 800521e:	2001      	movs	r0, #1
 8005220:	f7ff fdea 	bl	8004df8 <HAL_Delay>
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8005224:	68fb      	ldr	r3, [r7, #12]
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	68ba      	ldr	r2, [r7, #8]
 800522a:	6992      	ldr	r2, [r2, #24]
 800522c:	645a      	str	r2, [r3, #68]	; 0x44
    }
#endif /* STM32L451xx STM32L452xx STM32L462xx */

    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
 800522e:	68fb      	ldr	r3, [r7, #12]
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	f003 0310 	and.w	r3, r3, #16
 800523a:	f240 31ff 	movw	r1, #1023	; 0x3ff
 800523e:	fa01 f303 	lsl.w	r3, r1, r3
 8005242:	43db      	mvns	r3, r3
 8005244:	ea02 0103 	and.w	r1, r2, r3
 8005248:	68bb      	ldr	r3, [r7, #8]
 800524a:	69da      	ldr	r2, [r3, #28]
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	f003 0310 	and.w	r3, r3, #16
 8005252:	409a      	lsls	r2, r3
 8005254:	68fb      	ldr	r3, [r7, #12]
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	430a      	orrs	r2, r1
 800525a:	649a      	str	r2, [r3, #72]	; 0x48
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
 800525c:	68fb      	ldr	r3, [r7, #12]
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	f003 0310 	and.w	r3, r3, #16
 8005268:	21ff      	movs	r1, #255	; 0xff
 800526a:	fa01 f303 	lsl.w	r3, r1, r3
 800526e:	43db      	mvns	r3, r3
 8005270:	ea02 0103 	and.w	r1, r2, r3
 8005274:	68bb      	ldr	r3, [r7, #8]
 8005276:	6a1a      	ldr	r2, [r3, #32]
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	f003 0310 	and.w	r3, r3, #16
 800527e:	409a      	lsls	r2, r3
 8005280:	68fb      	ldr	r3, [r7, #12]
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	430a      	orrs	r2, r1
 8005286:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 8005288:	68bb      	ldr	r3, [r7, #8]
 800528a:	691b      	ldr	r3, [r3, #16]
 800528c:	2b01      	cmp	r3, #1
 800528e:	d11d      	bne.n	80052cc <HAL_DAC_ConfigChannel+0x15e>
  /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 8005290:	68fb      	ldr	r3, [r7, #12]
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005296:	61bb      	str	r3, [r7, #24]
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	f003 0310 	and.w	r3, r3, #16
 800529e:	221f      	movs	r2, #31
 80052a0:	fa02 f303 	lsl.w	r3, r2, r3
 80052a4:	43db      	mvns	r3, r3
 80052a6:	69ba      	ldr	r2, [r7, #24]
 80052a8:	4013      	ands	r3, r2
 80052aa:	61bb      	str	r3, [r7, #24]
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 80052ac:	68bb      	ldr	r3, [r7, #8]
 80052ae:	695b      	ldr	r3, [r3, #20]
 80052b0:	617b      	str	r3, [r7, #20]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	f003 0310 	and.w	r3, r3, #16
 80052b8:	697a      	ldr	r2, [r7, #20]
 80052ba:	fa02 f303 	lsl.w	r3, r2, r3
 80052be:	69ba      	ldr	r2, [r7, #24]
 80052c0:	4313      	orrs	r3, r2
 80052c2:	61bb      	str	r3, [r7, #24]
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 80052c4:	68fb      	ldr	r3, [r7, #12]
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	69ba      	ldr	r2, [r7, #24]
 80052ca:	639a      	str	r2, [r3, #56]	; 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 80052cc:	68fb      	ldr	r3, [r7, #12]
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80052d2:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	f003 0310 	and.w	r3, r3, #16
 80052da:	2207      	movs	r2, #7
 80052dc:	fa02 f303 	lsl.w	r3, r2, r3
 80052e0:	43db      	mvns	r3, r3
 80052e2:	69ba      	ldr	r2, [r7, #24]
 80052e4:	4013      	ands	r3, r2
 80052e6:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | sConfig->DAC_ConnectOnChipPeripheral);
 80052e8:	68bb      	ldr	r3, [r7, #8]
 80052ea:	681a      	ldr	r2, [r3, #0]
 80052ec:	68bb      	ldr	r3, [r7, #8]
 80052ee:	689b      	ldr	r3, [r3, #8]
 80052f0:	431a      	orrs	r2, r3
 80052f2:	68bb      	ldr	r3, [r7, #8]
 80052f4:	68db      	ldr	r3, [r3, #12]
 80052f6:	4313      	orrs	r3, r2
 80052f8:	617b      	str	r3, [r7, #20]
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	f003 0310 	and.w	r3, r3, #16
 8005300:	697a      	ldr	r2, [r7, #20]
 8005302:	fa02 f303 	lsl.w	r3, r2, r3
 8005306:	69ba      	ldr	r2, [r7, #24]
 8005308:	4313      	orrs	r3, r2
 800530a:	61bb      	str	r3, [r7, #24]
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 800530c:	68fb      	ldr	r3, [r7, #12]
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	69ba      	ldr	r2, [r7, #24]
 8005312:	63da      	str	r2, [r3, #60]	; 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 8005314:	68fb      	ldr	r3, [r7, #12]
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	6819      	ldr	r1, [r3, #0]
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	f003 0310 	and.w	r3, r3, #16
 8005320:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8005324:	fa02 f303 	lsl.w	r3, r2, r3
 8005328:	43da      	mvns	r2, r3
 800532a:	68fb      	ldr	r3, [r7, #12]
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	400a      	ands	r2, r1
 8005330:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8005332:	68fb      	ldr	r3, [r7, #12]
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	61bb      	str	r3, [r7, #24]
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	f003 0310 	and.w	r3, r3, #16
 8005340:	f640 72fc 	movw	r2, #4092	; 0xffc
 8005344:	fa02 f303 	lsl.w	r3, r2, r3
 8005348:	43db      	mvns	r3, r3
 800534a:	69ba      	ldr	r2, [r7, #24]
 800534c:	4013      	ands	r3, r2
 800534e:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 8005350:	68bb      	ldr	r3, [r7, #8]
 8005352:	685b      	ldr	r3, [r3, #4]
 8005354:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	f003 0310 	and.w	r3, r3, #16
 800535c:	697a      	ldr	r2, [r7, #20]
 800535e:	fa02 f303 	lsl.w	r3, r2, r3
 8005362:	69ba      	ldr	r2, [r7, #24]
 8005364:	4313      	orrs	r3, r2
 8005366:	61bb      	str	r3, [r7, #24]
  }

#endif /* STM32L4P5xx STM32L4Q5xx STM32L4R5xx STM32L4R7xx STM32L4R9xx STM32L4S5xx STM32L4S7xx STM32L4S9xx */

  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8005368:	68fb      	ldr	r3, [r7, #12]
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	69ba      	ldr	r2, [r7, #24]
 800536e:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << (Channel & 0x10UL));
 8005370:	68fb      	ldr	r3, [r7, #12]
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	6819      	ldr	r1, [r3, #0]
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	f003 0310 	and.w	r3, r3, #16
 800537c:	22c0      	movs	r2, #192	; 0xc0
 800537e:	fa02 f303 	lsl.w	r3, r2, r3
 8005382:	43da      	mvns	r2, r3
 8005384:	68fb      	ldr	r3, [r7, #12]
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	400a      	ands	r2, r1
 800538a:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 800538c:	68fb      	ldr	r3, [r7, #12]
 800538e:	2201      	movs	r2, #1
 8005390:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8005392:	68fb      	ldr	r3, [r7, #12]
 8005394:	2200      	movs	r2, #0
 8005396:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8005398:	2300      	movs	r3, #0
}
 800539a:	4618      	mov	r0, r3
 800539c:	3720      	adds	r7, #32
 800539e:	46bd      	mov	sp, r7
 80053a0:	bd80      	pop	{r7, pc}

080053a2 <HAL_DACEx_DMAUnderrunCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_DMAUnderrunCallbackCh2(DAC_HandleTypeDef *hdac)
{
 80053a2:	b480      	push	{r7}
 80053a4:	b083      	sub	sp, #12
 80053a6:	af00      	add	r7, sp, #0
 80053a8:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_DMAUnderrunCallbackCh2 could be implemented in the user file
   */
}
 80053aa:	bf00      	nop
 80053ac:	370c      	adds	r7, #12
 80053ae:	46bd      	mov	sp, r7
 80053b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053b4:	4770      	bx	lr

080053b6 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80053b6:	b480      	push	{r7}
 80053b8:	b085      	sub	sp, #20
 80053ba:	af00      	add	r7, sp, #0
 80053bc:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80053be:	2300      	movs	r3, #0
 80053c0:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80053c8:	b2db      	uxtb	r3, r3
 80053ca:	2b02      	cmp	r3, #2
 80053cc:	d008      	beq.n	80053e0 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	2204      	movs	r2, #4
 80053d2:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	2200      	movs	r2, #0
 80053d8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80053dc:	2301      	movs	r3, #1
 80053de:	e022      	b.n	8005426 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	681a      	ldr	r2, [r3, #0]
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	f022 020e 	bic.w	r2, r2, #14
 80053ee:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	681a      	ldr	r2, [r3, #0]
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	f022 0201 	bic.w	r2, r2, #1
 80053fe:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005404:	f003 021c 	and.w	r2, r3, #28
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800540c:	2101      	movs	r1, #1
 800540e:	fa01 f202 	lsl.w	r2, r1, r2
 8005412:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	2201      	movs	r2, #1
 8005418:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	2200      	movs	r2, #0
 8005420:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 8005424:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8005426:	4618      	mov	r0, r3
 8005428:	3714      	adds	r7, #20
 800542a:	46bd      	mov	sp, r7
 800542c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005430:	4770      	bx	lr

08005432 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8005432:	b580      	push	{r7, lr}
 8005434:	b084      	sub	sp, #16
 8005436:	af00      	add	r7, sp, #0
 8005438:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800543a:	2300      	movs	r3, #0
 800543c:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8005444:	b2db      	uxtb	r3, r3
 8005446:	2b02      	cmp	r3, #2
 8005448:	d005      	beq.n	8005456 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	2204      	movs	r2, #4
 800544e:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8005450:	2301      	movs	r3, #1
 8005452:	73fb      	strb	r3, [r7, #15]
 8005454:	e029      	b.n	80054aa <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	681a      	ldr	r2, [r3, #0]
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	f022 020e 	bic.w	r2, r2, #14
 8005464:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	681a      	ldr	r2, [r3, #0]
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	f022 0201 	bic.w	r2, r2, #1
 8005474:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800547a:	f003 021c 	and.w	r2, r3, #28
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005482:	2101      	movs	r1, #1
 8005484:	fa01 f202 	lsl.w	r2, r1, r2
 8005488:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	2201      	movs	r2, #1
 800548e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	2200      	movs	r2, #0
 8005496:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800549e:	2b00      	cmp	r3, #0
 80054a0:	d003      	beq.n	80054aa <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80054a6:	6878      	ldr	r0, [r7, #4]
 80054a8:	4798      	blx	r3
    }
  }
  return status;
 80054aa:	7bfb      	ldrb	r3, [r7, #15]
}
 80054ac:	4618      	mov	r0, r3
 80054ae:	3710      	adds	r7, #16
 80054b0:	46bd      	mov	sp, r7
 80054b2:	bd80      	pop	{r7, pc}

080054b4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80054b4:	b480      	push	{r7}
 80054b6:	b087      	sub	sp, #28
 80054b8:	af00      	add	r7, sp, #0
 80054ba:	6078      	str	r0, [r7, #4]
 80054bc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80054be:	2300      	movs	r3, #0
 80054c0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80054c2:	e148      	b.n	8005756 <HAL_GPIO_Init+0x2a2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80054c4:	683b      	ldr	r3, [r7, #0]
 80054c6:	681a      	ldr	r2, [r3, #0]
 80054c8:	2101      	movs	r1, #1
 80054ca:	697b      	ldr	r3, [r7, #20]
 80054cc:	fa01 f303 	lsl.w	r3, r1, r3
 80054d0:	4013      	ands	r3, r2
 80054d2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80054d4:	68fb      	ldr	r3, [r7, #12]
 80054d6:	2b00      	cmp	r3, #0
 80054d8:	f000 813a 	beq.w	8005750 <HAL_GPIO_Init+0x29c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80054dc:	683b      	ldr	r3, [r7, #0]
 80054de:	685b      	ldr	r3, [r3, #4]
 80054e0:	f003 0303 	and.w	r3, r3, #3
 80054e4:	2b01      	cmp	r3, #1
 80054e6:	d005      	beq.n	80054f4 <HAL_GPIO_Init+0x40>
 80054e8:	683b      	ldr	r3, [r7, #0]
 80054ea:	685b      	ldr	r3, [r3, #4]
 80054ec:	f003 0303 	and.w	r3, r3, #3
 80054f0:	2b02      	cmp	r3, #2
 80054f2:	d130      	bne.n	8005556 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	689b      	ldr	r3, [r3, #8]
 80054f8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80054fa:	697b      	ldr	r3, [r7, #20]
 80054fc:	005b      	lsls	r3, r3, #1
 80054fe:	2203      	movs	r2, #3
 8005500:	fa02 f303 	lsl.w	r3, r2, r3
 8005504:	43db      	mvns	r3, r3
 8005506:	693a      	ldr	r2, [r7, #16]
 8005508:	4013      	ands	r3, r2
 800550a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800550c:	683b      	ldr	r3, [r7, #0]
 800550e:	68da      	ldr	r2, [r3, #12]
 8005510:	697b      	ldr	r3, [r7, #20]
 8005512:	005b      	lsls	r3, r3, #1
 8005514:	fa02 f303 	lsl.w	r3, r2, r3
 8005518:	693a      	ldr	r2, [r7, #16]
 800551a:	4313      	orrs	r3, r2
 800551c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	693a      	ldr	r2, [r7, #16]
 8005522:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	685b      	ldr	r3, [r3, #4]
 8005528:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800552a:	2201      	movs	r2, #1
 800552c:	697b      	ldr	r3, [r7, #20]
 800552e:	fa02 f303 	lsl.w	r3, r2, r3
 8005532:	43db      	mvns	r3, r3
 8005534:	693a      	ldr	r2, [r7, #16]
 8005536:	4013      	ands	r3, r2
 8005538:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800553a:	683b      	ldr	r3, [r7, #0]
 800553c:	685b      	ldr	r3, [r3, #4]
 800553e:	091b      	lsrs	r3, r3, #4
 8005540:	f003 0201 	and.w	r2, r3, #1
 8005544:	697b      	ldr	r3, [r7, #20]
 8005546:	fa02 f303 	lsl.w	r3, r2, r3
 800554a:	693a      	ldr	r2, [r7, #16]
 800554c:	4313      	orrs	r3, r2
 800554e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	693a      	ldr	r2, [r7, #16]
 8005554:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005556:	683b      	ldr	r3, [r7, #0]
 8005558:	685b      	ldr	r3, [r3, #4]
 800555a:	f003 0303 	and.w	r3, r3, #3
 800555e:	2b03      	cmp	r3, #3
 8005560:	d017      	beq.n	8005592 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	68db      	ldr	r3, [r3, #12]
 8005566:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8005568:	697b      	ldr	r3, [r7, #20]
 800556a:	005b      	lsls	r3, r3, #1
 800556c:	2203      	movs	r2, #3
 800556e:	fa02 f303 	lsl.w	r3, r2, r3
 8005572:	43db      	mvns	r3, r3
 8005574:	693a      	ldr	r2, [r7, #16]
 8005576:	4013      	ands	r3, r2
 8005578:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800557a:	683b      	ldr	r3, [r7, #0]
 800557c:	689a      	ldr	r2, [r3, #8]
 800557e:	697b      	ldr	r3, [r7, #20]
 8005580:	005b      	lsls	r3, r3, #1
 8005582:	fa02 f303 	lsl.w	r3, r2, r3
 8005586:	693a      	ldr	r2, [r7, #16]
 8005588:	4313      	orrs	r3, r2
 800558a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	693a      	ldr	r2, [r7, #16]
 8005590:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005592:	683b      	ldr	r3, [r7, #0]
 8005594:	685b      	ldr	r3, [r3, #4]
 8005596:	f003 0303 	and.w	r3, r3, #3
 800559a:	2b02      	cmp	r3, #2
 800559c:	d123      	bne.n	80055e6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800559e:	697b      	ldr	r3, [r7, #20]
 80055a0:	08da      	lsrs	r2, r3, #3
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	3208      	adds	r2, #8
 80055a6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80055aa:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80055ac:	697b      	ldr	r3, [r7, #20]
 80055ae:	f003 0307 	and.w	r3, r3, #7
 80055b2:	009b      	lsls	r3, r3, #2
 80055b4:	220f      	movs	r2, #15
 80055b6:	fa02 f303 	lsl.w	r3, r2, r3
 80055ba:	43db      	mvns	r3, r3
 80055bc:	693a      	ldr	r2, [r7, #16]
 80055be:	4013      	ands	r3, r2
 80055c0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80055c2:	683b      	ldr	r3, [r7, #0]
 80055c4:	691a      	ldr	r2, [r3, #16]
 80055c6:	697b      	ldr	r3, [r7, #20]
 80055c8:	f003 0307 	and.w	r3, r3, #7
 80055cc:	009b      	lsls	r3, r3, #2
 80055ce:	fa02 f303 	lsl.w	r3, r2, r3
 80055d2:	693a      	ldr	r2, [r7, #16]
 80055d4:	4313      	orrs	r3, r2
 80055d6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80055d8:	697b      	ldr	r3, [r7, #20]
 80055da:	08da      	lsrs	r2, r3, #3
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	3208      	adds	r2, #8
 80055e0:	6939      	ldr	r1, [r7, #16]
 80055e2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80055ec:	697b      	ldr	r3, [r7, #20]
 80055ee:	005b      	lsls	r3, r3, #1
 80055f0:	2203      	movs	r2, #3
 80055f2:	fa02 f303 	lsl.w	r3, r2, r3
 80055f6:	43db      	mvns	r3, r3
 80055f8:	693a      	ldr	r2, [r7, #16]
 80055fa:	4013      	ands	r3, r2
 80055fc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80055fe:	683b      	ldr	r3, [r7, #0]
 8005600:	685b      	ldr	r3, [r3, #4]
 8005602:	f003 0203 	and.w	r2, r3, #3
 8005606:	697b      	ldr	r3, [r7, #20]
 8005608:	005b      	lsls	r3, r3, #1
 800560a:	fa02 f303 	lsl.w	r3, r2, r3
 800560e:	693a      	ldr	r2, [r7, #16]
 8005610:	4313      	orrs	r3, r2
 8005612:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	693a      	ldr	r2, [r7, #16]
 8005618:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800561a:	683b      	ldr	r3, [r7, #0]
 800561c:	685b      	ldr	r3, [r3, #4]
 800561e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8005622:	2b00      	cmp	r3, #0
 8005624:	f000 8094 	beq.w	8005750 <HAL_GPIO_Init+0x29c>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005628:	4b52      	ldr	r3, [pc, #328]	; (8005774 <HAL_GPIO_Init+0x2c0>)
 800562a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800562c:	4a51      	ldr	r2, [pc, #324]	; (8005774 <HAL_GPIO_Init+0x2c0>)
 800562e:	f043 0301 	orr.w	r3, r3, #1
 8005632:	6613      	str	r3, [r2, #96]	; 0x60
 8005634:	4b4f      	ldr	r3, [pc, #316]	; (8005774 <HAL_GPIO_Init+0x2c0>)
 8005636:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005638:	f003 0301 	and.w	r3, r3, #1
 800563c:	60bb      	str	r3, [r7, #8]
 800563e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8005640:	4a4d      	ldr	r2, [pc, #308]	; (8005778 <HAL_GPIO_Init+0x2c4>)
 8005642:	697b      	ldr	r3, [r7, #20]
 8005644:	089b      	lsrs	r3, r3, #2
 8005646:	3302      	adds	r3, #2
 8005648:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800564c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800564e:	697b      	ldr	r3, [r7, #20]
 8005650:	f003 0303 	and.w	r3, r3, #3
 8005654:	009b      	lsls	r3, r3, #2
 8005656:	220f      	movs	r2, #15
 8005658:	fa02 f303 	lsl.w	r3, r2, r3
 800565c:	43db      	mvns	r3, r3
 800565e:	693a      	ldr	r2, [r7, #16]
 8005660:	4013      	ands	r3, r2
 8005662:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800566a:	d00d      	beq.n	8005688 <HAL_GPIO_Init+0x1d4>
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	4a43      	ldr	r2, [pc, #268]	; (800577c <HAL_GPIO_Init+0x2c8>)
 8005670:	4293      	cmp	r3, r2
 8005672:	d007      	beq.n	8005684 <HAL_GPIO_Init+0x1d0>
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	4a42      	ldr	r2, [pc, #264]	; (8005780 <HAL_GPIO_Init+0x2cc>)
 8005678:	4293      	cmp	r3, r2
 800567a:	d101      	bne.n	8005680 <HAL_GPIO_Init+0x1cc>
 800567c:	2302      	movs	r3, #2
 800567e:	e004      	b.n	800568a <HAL_GPIO_Init+0x1d6>
 8005680:	2307      	movs	r3, #7
 8005682:	e002      	b.n	800568a <HAL_GPIO_Init+0x1d6>
 8005684:	2301      	movs	r3, #1
 8005686:	e000      	b.n	800568a <HAL_GPIO_Init+0x1d6>
 8005688:	2300      	movs	r3, #0
 800568a:	697a      	ldr	r2, [r7, #20]
 800568c:	f002 0203 	and.w	r2, r2, #3
 8005690:	0092      	lsls	r2, r2, #2
 8005692:	4093      	lsls	r3, r2
 8005694:	693a      	ldr	r2, [r7, #16]
 8005696:	4313      	orrs	r3, r2
 8005698:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800569a:	4937      	ldr	r1, [pc, #220]	; (8005778 <HAL_GPIO_Init+0x2c4>)
 800569c:	697b      	ldr	r3, [r7, #20]
 800569e:	089b      	lsrs	r3, r3, #2
 80056a0:	3302      	adds	r3, #2
 80056a2:	693a      	ldr	r2, [r7, #16]
 80056a4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80056a8:	4b36      	ldr	r3, [pc, #216]	; (8005784 <HAL_GPIO_Init+0x2d0>)
 80056aa:	689b      	ldr	r3, [r3, #8]
 80056ac:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80056ae:	68fb      	ldr	r3, [r7, #12]
 80056b0:	43db      	mvns	r3, r3
 80056b2:	693a      	ldr	r2, [r7, #16]
 80056b4:	4013      	ands	r3, r2
 80056b6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80056b8:	683b      	ldr	r3, [r7, #0]
 80056ba:	685b      	ldr	r3, [r3, #4]
 80056bc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80056c0:	2b00      	cmp	r3, #0
 80056c2:	d003      	beq.n	80056cc <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 80056c4:	693a      	ldr	r2, [r7, #16]
 80056c6:	68fb      	ldr	r3, [r7, #12]
 80056c8:	4313      	orrs	r3, r2
 80056ca:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80056cc:	4a2d      	ldr	r2, [pc, #180]	; (8005784 <HAL_GPIO_Init+0x2d0>)
 80056ce:	693b      	ldr	r3, [r7, #16]
 80056d0:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80056d2:	4b2c      	ldr	r3, [pc, #176]	; (8005784 <HAL_GPIO_Init+0x2d0>)
 80056d4:	68db      	ldr	r3, [r3, #12]
 80056d6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80056d8:	68fb      	ldr	r3, [r7, #12]
 80056da:	43db      	mvns	r3, r3
 80056dc:	693a      	ldr	r2, [r7, #16]
 80056de:	4013      	ands	r3, r2
 80056e0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80056e2:	683b      	ldr	r3, [r7, #0]
 80056e4:	685b      	ldr	r3, [r3, #4]
 80056e6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80056ea:	2b00      	cmp	r3, #0
 80056ec:	d003      	beq.n	80056f6 <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 80056ee:	693a      	ldr	r2, [r7, #16]
 80056f0:	68fb      	ldr	r3, [r7, #12]
 80056f2:	4313      	orrs	r3, r2
 80056f4:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80056f6:	4a23      	ldr	r2, [pc, #140]	; (8005784 <HAL_GPIO_Init+0x2d0>)
 80056f8:	693b      	ldr	r3, [r7, #16]
 80056fa:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80056fc:	4b21      	ldr	r3, [pc, #132]	; (8005784 <HAL_GPIO_Init+0x2d0>)
 80056fe:	685b      	ldr	r3, [r3, #4]
 8005700:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005702:	68fb      	ldr	r3, [r7, #12]
 8005704:	43db      	mvns	r3, r3
 8005706:	693a      	ldr	r2, [r7, #16]
 8005708:	4013      	ands	r3, r2
 800570a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800570c:	683b      	ldr	r3, [r7, #0]
 800570e:	685b      	ldr	r3, [r3, #4]
 8005710:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005714:	2b00      	cmp	r3, #0
 8005716:	d003      	beq.n	8005720 <HAL_GPIO_Init+0x26c>
        {
          temp |= iocurrent;
 8005718:	693a      	ldr	r2, [r7, #16]
 800571a:	68fb      	ldr	r3, [r7, #12]
 800571c:	4313      	orrs	r3, r2
 800571e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8005720:	4a18      	ldr	r2, [pc, #96]	; (8005784 <HAL_GPIO_Init+0x2d0>)
 8005722:	693b      	ldr	r3, [r7, #16]
 8005724:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8005726:	4b17      	ldr	r3, [pc, #92]	; (8005784 <HAL_GPIO_Init+0x2d0>)
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800572c:	68fb      	ldr	r3, [r7, #12]
 800572e:	43db      	mvns	r3, r3
 8005730:	693a      	ldr	r2, [r7, #16]
 8005732:	4013      	ands	r3, r2
 8005734:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8005736:	683b      	ldr	r3, [r7, #0]
 8005738:	685b      	ldr	r3, [r3, #4]
 800573a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800573e:	2b00      	cmp	r3, #0
 8005740:	d003      	beq.n	800574a <HAL_GPIO_Init+0x296>
        {
          temp |= iocurrent;
 8005742:	693a      	ldr	r2, [r7, #16]
 8005744:	68fb      	ldr	r3, [r7, #12]
 8005746:	4313      	orrs	r3, r2
 8005748:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800574a:	4a0e      	ldr	r2, [pc, #56]	; (8005784 <HAL_GPIO_Init+0x2d0>)
 800574c:	693b      	ldr	r3, [r7, #16]
 800574e:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8005750:	697b      	ldr	r3, [r7, #20]
 8005752:	3301      	adds	r3, #1
 8005754:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8005756:	683b      	ldr	r3, [r7, #0]
 8005758:	681a      	ldr	r2, [r3, #0]
 800575a:	697b      	ldr	r3, [r7, #20]
 800575c:	fa22 f303 	lsr.w	r3, r2, r3
 8005760:	2b00      	cmp	r3, #0
 8005762:	f47f aeaf 	bne.w	80054c4 <HAL_GPIO_Init+0x10>
  }
}
 8005766:	bf00      	nop
 8005768:	bf00      	nop
 800576a:	371c      	adds	r7, #28
 800576c:	46bd      	mov	sp, r7
 800576e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005772:	4770      	bx	lr
 8005774:	40021000 	.word	0x40021000
 8005778:	40010000 	.word	0x40010000
 800577c:	48000400 	.word	0x48000400
 8005780:	48000800 	.word	0x48000800
 8005784:	40010400 	.word	0x40010400

08005788 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8005788:	b480      	push	{r7}
 800578a:	b085      	sub	sp, #20
 800578c:	af00      	add	r7, sp, #0
 800578e:	6078      	str	r0, [r7, #4]
 8005790:	460b      	mov	r3, r1
 8005792:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	691a      	ldr	r2, [r3, #16]
 8005798:	887b      	ldrh	r3, [r7, #2]
 800579a:	4013      	ands	r3, r2
 800579c:	2b00      	cmp	r3, #0
 800579e:	d002      	beq.n	80057a6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80057a0:	2301      	movs	r3, #1
 80057a2:	73fb      	strb	r3, [r7, #15]
 80057a4:	e001      	b.n	80057aa <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80057a6:	2300      	movs	r3, #0
 80057a8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80057aa:	7bfb      	ldrb	r3, [r7, #15]
}
 80057ac:	4618      	mov	r0, r3
 80057ae:	3714      	adds	r7, #20
 80057b0:	46bd      	mov	sp, r7
 80057b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057b6:	4770      	bx	lr

080057b8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80057b8:	b480      	push	{r7}
 80057ba:	b083      	sub	sp, #12
 80057bc:	af00      	add	r7, sp, #0
 80057be:	6078      	str	r0, [r7, #4]
 80057c0:	460b      	mov	r3, r1
 80057c2:	807b      	strh	r3, [r7, #2]
 80057c4:	4613      	mov	r3, r2
 80057c6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80057c8:	787b      	ldrb	r3, [r7, #1]
 80057ca:	2b00      	cmp	r3, #0
 80057cc:	d003      	beq.n	80057d6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80057ce:	887a      	ldrh	r2, [r7, #2]
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80057d4:	e002      	b.n	80057dc <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80057d6:	887a      	ldrh	r2, [r7, #2]
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	629a      	str	r2, [r3, #40]	; 0x28
}
 80057dc:	bf00      	nop
 80057de:	370c      	adds	r7, #12
 80057e0:	46bd      	mov	sp, r7
 80057e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057e6:	4770      	bx	lr

080057e8 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80057e8:	b480      	push	{r7}
 80057ea:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80057ec:	4b04      	ldr	r3, [pc, #16]	; (8005800 <HAL_PWREx_GetVoltageRange+0x18>)
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 80057f4:	4618      	mov	r0, r3
 80057f6:	46bd      	mov	sp, r7
 80057f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057fc:	4770      	bx	lr
 80057fe:	bf00      	nop
 8005800:	40007000 	.word	0x40007000

08005804 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8005804:	b480      	push	{r7}
 8005806:	b085      	sub	sp, #20
 8005808:	af00      	add	r7, sp, #0
 800580a:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005812:	d130      	bne.n	8005876 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8005814:	4b23      	ldr	r3, [pc, #140]	; (80058a4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800581c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005820:	d038      	beq.n	8005894 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8005822:	4b20      	ldr	r3, [pc, #128]	; (80058a4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800582a:	4a1e      	ldr	r2, [pc, #120]	; (80058a4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800582c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005830:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8005832:	4b1d      	ldr	r3, [pc, #116]	; (80058a8 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	2232      	movs	r2, #50	; 0x32
 8005838:	fb02 f303 	mul.w	r3, r2, r3
 800583c:	4a1b      	ldr	r2, [pc, #108]	; (80058ac <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800583e:	fba2 2303 	umull	r2, r3, r2, r3
 8005842:	0c9b      	lsrs	r3, r3, #18
 8005844:	3301      	adds	r3, #1
 8005846:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005848:	e002      	b.n	8005850 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800584a:	68fb      	ldr	r3, [r7, #12]
 800584c:	3b01      	subs	r3, #1
 800584e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005850:	4b14      	ldr	r3, [pc, #80]	; (80058a4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005852:	695b      	ldr	r3, [r3, #20]
 8005854:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005858:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800585c:	d102      	bne.n	8005864 <HAL_PWREx_ControlVoltageScaling+0x60>
 800585e:	68fb      	ldr	r3, [r7, #12]
 8005860:	2b00      	cmp	r3, #0
 8005862:	d1f2      	bne.n	800584a <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8005864:	4b0f      	ldr	r3, [pc, #60]	; (80058a4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005866:	695b      	ldr	r3, [r3, #20]
 8005868:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800586c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005870:	d110      	bne.n	8005894 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8005872:	2303      	movs	r3, #3
 8005874:	e00f      	b.n	8005896 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8005876:	4b0b      	ldr	r3, [pc, #44]	; (80058a4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800587e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005882:	d007      	beq.n	8005894 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8005884:	4b07      	ldr	r3, [pc, #28]	; (80058a4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800588c:	4a05      	ldr	r2, [pc, #20]	; (80058a4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800588e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8005892:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8005894:	2300      	movs	r3, #0
}
 8005896:	4618      	mov	r0, r3
 8005898:	3714      	adds	r7, #20
 800589a:	46bd      	mov	sp, r7
 800589c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058a0:	4770      	bx	lr
 80058a2:	bf00      	nop
 80058a4:	40007000 	.word	0x40007000
 80058a8:	200010a0 	.word	0x200010a0
 80058ac:	431bde83 	.word	0x431bde83

080058b0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80058b0:	b580      	push	{r7, lr}
 80058b2:	b088      	sub	sp, #32
 80058b4:	af00      	add	r7, sp, #0
 80058b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	2b00      	cmp	r3, #0
 80058bc:	d102      	bne.n	80058c4 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80058be:	2301      	movs	r3, #1
 80058c0:	f000 bc02 	b.w	80060c8 <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80058c4:	4b96      	ldr	r3, [pc, #600]	; (8005b20 <HAL_RCC_OscConfig+0x270>)
 80058c6:	689b      	ldr	r3, [r3, #8]
 80058c8:	f003 030c 	and.w	r3, r3, #12
 80058cc:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80058ce:	4b94      	ldr	r3, [pc, #592]	; (8005b20 <HAL_RCC_OscConfig+0x270>)
 80058d0:	68db      	ldr	r3, [r3, #12]
 80058d2:	f003 0303 	and.w	r3, r3, #3
 80058d6:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	f003 0310 	and.w	r3, r3, #16
 80058e0:	2b00      	cmp	r3, #0
 80058e2:	f000 80e4 	beq.w	8005aae <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80058e6:	69bb      	ldr	r3, [r7, #24]
 80058e8:	2b00      	cmp	r3, #0
 80058ea:	d007      	beq.n	80058fc <HAL_RCC_OscConfig+0x4c>
 80058ec:	69bb      	ldr	r3, [r7, #24]
 80058ee:	2b0c      	cmp	r3, #12
 80058f0:	f040 808b 	bne.w	8005a0a <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80058f4:	697b      	ldr	r3, [r7, #20]
 80058f6:	2b01      	cmp	r3, #1
 80058f8:	f040 8087 	bne.w	8005a0a <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80058fc:	4b88      	ldr	r3, [pc, #544]	; (8005b20 <HAL_RCC_OscConfig+0x270>)
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	f003 0302 	and.w	r3, r3, #2
 8005904:	2b00      	cmp	r3, #0
 8005906:	d005      	beq.n	8005914 <HAL_RCC_OscConfig+0x64>
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	699b      	ldr	r3, [r3, #24]
 800590c:	2b00      	cmp	r3, #0
 800590e:	d101      	bne.n	8005914 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8005910:	2301      	movs	r3, #1
 8005912:	e3d9      	b.n	80060c8 <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	6a1a      	ldr	r2, [r3, #32]
 8005918:	4b81      	ldr	r3, [pc, #516]	; (8005b20 <HAL_RCC_OscConfig+0x270>)
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	f003 0308 	and.w	r3, r3, #8
 8005920:	2b00      	cmp	r3, #0
 8005922:	d004      	beq.n	800592e <HAL_RCC_OscConfig+0x7e>
 8005924:	4b7e      	ldr	r3, [pc, #504]	; (8005b20 <HAL_RCC_OscConfig+0x270>)
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800592c:	e005      	b.n	800593a <HAL_RCC_OscConfig+0x8a>
 800592e:	4b7c      	ldr	r3, [pc, #496]	; (8005b20 <HAL_RCC_OscConfig+0x270>)
 8005930:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005934:	091b      	lsrs	r3, r3, #4
 8005936:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800593a:	4293      	cmp	r3, r2
 800593c:	d223      	bcs.n	8005986 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	6a1b      	ldr	r3, [r3, #32]
 8005942:	4618      	mov	r0, r3
 8005944:	f000 fd8c 	bl	8006460 <RCC_SetFlashLatencyFromMSIRange>
 8005948:	4603      	mov	r3, r0
 800594a:	2b00      	cmp	r3, #0
 800594c:	d001      	beq.n	8005952 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 800594e:	2301      	movs	r3, #1
 8005950:	e3ba      	b.n	80060c8 <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005952:	4b73      	ldr	r3, [pc, #460]	; (8005b20 <HAL_RCC_OscConfig+0x270>)
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	4a72      	ldr	r2, [pc, #456]	; (8005b20 <HAL_RCC_OscConfig+0x270>)
 8005958:	f043 0308 	orr.w	r3, r3, #8
 800595c:	6013      	str	r3, [r2, #0]
 800595e:	4b70      	ldr	r3, [pc, #448]	; (8005b20 <HAL_RCC_OscConfig+0x270>)
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	6a1b      	ldr	r3, [r3, #32]
 800596a:	496d      	ldr	r1, [pc, #436]	; (8005b20 <HAL_RCC_OscConfig+0x270>)
 800596c:	4313      	orrs	r3, r2
 800596e:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005970:	4b6b      	ldr	r3, [pc, #428]	; (8005b20 <HAL_RCC_OscConfig+0x270>)
 8005972:	685b      	ldr	r3, [r3, #4]
 8005974:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	69db      	ldr	r3, [r3, #28]
 800597c:	021b      	lsls	r3, r3, #8
 800597e:	4968      	ldr	r1, [pc, #416]	; (8005b20 <HAL_RCC_OscConfig+0x270>)
 8005980:	4313      	orrs	r3, r2
 8005982:	604b      	str	r3, [r1, #4]
 8005984:	e025      	b.n	80059d2 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005986:	4b66      	ldr	r3, [pc, #408]	; (8005b20 <HAL_RCC_OscConfig+0x270>)
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	4a65      	ldr	r2, [pc, #404]	; (8005b20 <HAL_RCC_OscConfig+0x270>)
 800598c:	f043 0308 	orr.w	r3, r3, #8
 8005990:	6013      	str	r3, [r2, #0]
 8005992:	4b63      	ldr	r3, [pc, #396]	; (8005b20 <HAL_RCC_OscConfig+0x270>)
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	6a1b      	ldr	r3, [r3, #32]
 800599e:	4960      	ldr	r1, [pc, #384]	; (8005b20 <HAL_RCC_OscConfig+0x270>)
 80059a0:	4313      	orrs	r3, r2
 80059a2:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80059a4:	4b5e      	ldr	r3, [pc, #376]	; (8005b20 <HAL_RCC_OscConfig+0x270>)
 80059a6:	685b      	ldr	r3, [r3, #4]
 80059a8:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	69db      	ldr	r3, [r3, #28]
 80059b0:	021b      	lsls	r3, r3, #8
 80059b2:	495b      	ldr	r1, [pc, #364]	; (8005b20 <HAL_RCC_OscConfig+0x270>)
 80059b4:	4313      	orrs	r3, r2
 80059b6:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80059b8:	69bb      	ldr	r3, [r7, #24]
 80059ba:	2b00      	cmp	r3, #0
 80059bc:	d109      	bne.n	80059d2 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	6a1b      	ldr	r3, [r3, #32]
 80059c2:	4618      	mov	r0, r3
 80059c4:	f000 fd4c 	bl	8006460 <RCC_SetFlashLatencyFromMSIRange>
 80059c8:	4603      	mov	r3, r0
 80059ca:	2b00      	cmp	r3, #0
 80059cc:	d001      	beq.n	80059d2 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 80059ce:	2301      	movs	r3, #1
 80059d0:	e37a      	b.n	80060c8 <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80059d2:	f000 fc81 	bl	80062d8 <HAL_RCC_GetSysClockFreq>
 80059d6:	4602      	mov	r2, r0
 80059d8:	4b51      	ldr	r3, [pc, #324]	; (8005b20 <HAL_RCC_OscConfig+0x270>)
 80059da:	689b      	ldr	r3, [r3, #8]
 80059dc:	091b      	lsrs	r3, r3, #4
 80059de:	f003 030f 	and.w	r3, r3, #15
 80059e2:	4950      	ldr	r1, [pc, #320]	; (8005b24 <HAL_RCC_OscConfig+0x274>)
 80059e4:	5ccb      	ldrb	r3, [r1, r3]
 80059e6:	f003 031f 	and.w	r3, r3, #31
 80059ea:	fa22 f303 	lsr.w	r3, r2, r3
 80059ee:	4a4e      	ldr	r2, [pc, #312]	; (8005b28 <HAL_RCC_OscConfig+0x278>)
 80059f0:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80059f2:	4b4e      	ldr	r3, [pc, #312]	; (8005b2c <HAL_RCC_OscConfig+0x27c>)
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	4618      	mov	r0, r3
 80059f8:	f7ff f9a2 	bl	8004d40 <HAL_InitTick>
 80059fc:	4603      	mov	r3, r0
 80059fe:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8005a00:	7bfb      	ldrb	r3, [r7, #15]
 8005a02:	2b00      	cmp	r3, #0
 8005a04:	d052      	beq.n	8005aac <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8005a06:	7bfb      	ldrb	r3, [r7, #15]
 8005a08:	e35e      	b.n	80060c8 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	699b      	ldr	r3, [r3, #24]
 8005a0e:	2b00      	cmp	r3, #0
 8005a10:	d032      	beq.n	8005a78 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8005a12:	4b43      	ldr	r3, [pc, #268]	; (8005b20 <HAL_RCC_OscConfig+0x270>)
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	4a42      	ldr	r2, [pc, #264]	; (8005b20 <HAL_RCC_OscConfig+0x270>)
 8005a18:	f043 0301 	orr.w	r3, r3, #1
 8005a1c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8005a1e:	f7ff f9df 	bl	8004de0 <HAL_GetTick>
 8005a22:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8005a24:	e008      	b.n	8005a38 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8005a26:	f7ff f9db 	bl	8004de0 <HAL_GetTick>
 8005a2a:	4602      	mov	r2, r0
 8005a2c:	693b      	ldr	r3, [r7, #16]
 8005a2e:	1ad3      	subs	r3, r2, r3
 8005a30:	2b02      	cmp	r3, #2
 8005a32:	d901      	bls.n	8005a38 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8005a34:	2303      	movs	r3, #3
 8005a36:	e347      	b.n	80060c8 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8005a38:	4b39      	ldr	r3, [pc, #228]	; (8005b20 <HAL_RCC_OscConfig+0x270>)
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	f003 0302 	and.w	r3, r3, #2
 8005a40:	2b00      	cmp	r3, #0
 8005a42:	d0f0      	beq.n	8005a26 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005a44:	4b36      	ldr	r3, [pc, #216]	; (8005b20 <HAL_RCC_OscConfig+0x270>)
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	4a35      	ldr	r2, [pc, #212]	; (8005b20 <HAL_RCC_OscConfig+0x270>)
 8005a4a:	f043 0308 	orr.w	r3, r3, #8
 8005a4e:	6013      	str	r3, [r2, #0]
 8005a50:	4b33      	ldr	r3, [pc, #204]	; (8005b20 <HAL_RCC_OscConfig+0x270>)
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	6a1b      	ldr	r3, [r3, #32]
 8005a5c:	4930      	ldr	r1, [pc, #192]	; (8005b20 <HAL_RCC_OscConfig+0x270>)
 8005a5e:	4313      	orrs	r3, r2
 8005a60:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005a62:	4b2f      	ldr	r3, [pc, #188]	; (8005b20 <HAL_RCC_OscConfig+0x270>)
 8005a64:	685b      	ldr	r3, [r3, #4]
 8005a66:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	69db      	ldr	r3, [r3, #28]
 8005a6e:	021b      	lsls	r3, r3, #8
 8005a70:	492b      	ldr	r1, [pc, #172]	; (8005b20 <HAL_RCC_OscConfig+0x270>)
 8005a72:	4313      	orrs	r3, r2
 8005a74:	604b      	str	r3, [r1, #4]
 8005a76:	e01a      	b.n	8005aae <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8005a78:	4b29      	ldr	r3, [pc, #164]	; (8005b20 <HAL_RCC_OscConfig+0x270>)
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	4a28      	ldr	r2, [pc, #160]	; (8005b20 <HAL_RCC_OscConfig+0x270>)
 8005a7e:	f023 0301 	bic.w	r3, r3, #1
 8005a82:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8005a84:	f7ff f9ac 	bl	8004de0 <HAL_GetTick>
 8005a88:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8005a8a:	e008      	b.n	8005a9e <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8005a8c:	f7ff f9a8 	bl	8004de0 <HAL_GetTick>
 8005a90:	4602      	mov	r2, r0
 8005a92:	693b      	ldr	r3, [r7, #16]
 8005a94:	1ad3      	subs	r3, r2, r3
 8005a96:	2b02      	cmp	r3, #2
 8005a98:	d901      	bls.n	8005a9e <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8005a9a:	2303      	movs	r3, #3
 8005a9c:	e314      	b.n	80060c8 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8005a9e:	4b20      	ldr	r3, [pc, #128]	; (8005b20 <HAL_RCC_OscConfig+0x270>)
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	f003 0302 	and.w	r3, r3, #2
 8005aa6:	2b00      	cmp	r3, #0
 8005aa8:	d1f0      	bne.n	8005a8c <HAL_RCC_OscConfig+0x1dc>
 8005aaa:	e000      	b.n	8005aae <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8005aac:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	f003 0301 	and.w	r3, r3, #1
 8005ab6:	2b00      	cmp	r3, #0
 8005ab8:	d073      	beq.n	8005ba2 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8005aba:	69bb      	ldr	r3, [r7, #24]
 8005abc:	2b08      	cmp	r3, #8
 8005abe:	d005      	beq.n	8005acc <HAL_RCC_OscConfig+0x21c>
 8005ac0:	69bb      	ldr	r3, [r7, #24]
 8005ac2:	2b0c      	cmp	r3, #12
 8005ac4:	d10e      	bne.n	8005ae4 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8005ac6:	697b      	ldr	r3, [r7, #20]
 8005ac8:	2b03      	cmp	r3, #3
 8005aca:	d10b      	bne.n	8005ae4 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005acc:	4b14      	ldr	r3, [pc, #80]	; (8005b20 <HAL_RCC_OscConfig+0x270>)
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005ad4:	2b00      	cmp	r3, #0
 8005ad6:	d063      	beq.n	8005ba0 <HAL_RCC_OscConfig+0x2f0>
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	685b      	ldr	r3, [r3, #4]
 8005adc:	2b00      	cmp	r3, #0
 8005ade:	d15f      	bne.n	8005ba0 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8005ae0:	2301      	movs	r3, #1
 8005ae2:	e2f1      	b.n	80060c8 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	685b      	ldr	r3, [r3, #4]
 8005ae8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005aec:	d106      	bne.n	8005afc <HAL_RCC_OscConfig+0x24c>
 8005aee:	4b0c      	ldr	r3, [pc, #48]	; (8005b20 <HAL_RCC_OscConfig+0x270>)
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	4a0b      	ldr	r2, [pc, #44]	; (8005b20 <HAL_RCC_OscConfig+0x270>)
 8005af4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005af8:	6013      	str	r3, [r2, #0]
 8005afa:	e025      	b.n	8005b48 <HAL_RCC_OscConfig+0x298>
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	685b      	ldr	r3, [r3, #4]
 8005b00:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005b04:	d114      	bne.n	8005b30 <HAL_RCC_OscConfig+0x280>
 8005b06:	4b06      	ldr	r3, [pc, #24]	; (8005b20 <HAL_RCC_OscConfig+0x270>)
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	4a05      	ldr	r2, [pc, #20]	; (8005b20 <HAL_RCC_OscConfig+0x270>)
 8005b0c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005b10:	6013      	str	r3, [r2, #0]
 8005b12:	4b03      	ldr	r3, [pc, #12]	; (8005b20 <HAL_RCC_OscConfig+0x270>)
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	4a02      	ldr	r2, [pc, #8]	; (8005b20 <HAL_RCC_OscConfig+0x270>)
 8005b18:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005b1c:	6013      	str	r3, [r2, #0]
 8005b1e:	e013      	b.n	8005b48 <HAL_RCC_OscConfig+0x298>
 8005b20:	40021000 	.word	0x40021000
 8005b24:	0800e0d0 	.word	0x0800e0d0
 8005b28:	200010a0 	.word	0x200010a0
 8005b2c:	200010a4 	.word	0x200010a4
 8005b30:	4ba0      	ldr	r3, [pc, #640]	; (8005db4 <HAL_RCC_OscConfig+0x504>)
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	4a9f      	ldr	r2, [pc, #636]	; (8005db4 <HAL_RCC_OscConfig+0x504>)
 8005b36:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005b3a:	6013      	str	r3, [r2, #0]
 8005b3c:	4b9d      	ldr	r3, [pc, #628]	; (8005db4 <HAL_RCC_OscConfig+0x504>)
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	4a9c      	ldr	r2, [pc, #624]	; (8005db4 <HAL_RCC_OscConfig+0x504>)
 8005b42:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005b46:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	685b      	ldr	r3, [r3, #4]
 8005b4c:	2b00      	cmp	r3, #0
 8005b4e:	d013      	beq.n	8005b78 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005b50:	f7ff f946 	bl	8004de0 <HAL_GetTick>
 8005b54:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005b56:	e008      	b.n	8005b6a <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005b58:	f7ff f942 	bl	8004de0 <HAL_GetTick>
 8005b5c:	4602      	mov	r2, r0
 8005b5e:	693b      	ldr	r3, [r7, #16]
 8005b60:	1ad3      	subs	r3, r2, r3
 8005b62:	2b64      	cmp	r3, #100	; 0x64
 8005b64:	d901      	bls.n	8005b6a <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8005b66:	2303      	movs	r3, #3
 8005b68:	e2ae      	b.n	80060c8 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005b6a:	4b92      	ldr	r3, [pc, #584]	; (8005db4 <HAL_RCC_OscConfig+0x504>)
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005b72:	2b00      	cmp	r3, #0
 8005b74:	d0f0      	beq.n	8005b58 <HAL_RCC_OscConfig+0x2a8>
 8005b76:	e014      	b.n	8005ba2 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005b78:	f7ff f932 	bl	8004de0 <HAL_GetTick>
 8005b7c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8005b7e:	e008      	b.n	8005b92 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005b80:	f7ff f92e 	bl	8004de0 <HAL_GetTick>
 8005b84:	4602      	mov	r2, r0
 8005b86:	693b      	ldr	r3, [r7, #16]
 8005b88:	1ad3      	subs	r3, r2, r3
 8005b8a:	2b64      	cmp	r3, #100	; 0x64
 8005b8c:	d901      	bls.n	8005b92 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8005b8e:	2303      	movs	r3, #3
 8005b90:	e29a      	b.n	80060c8 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8005b92:	4b88      	ldr	r3, [pc, #544]	; (8005db4 <HAL_RCC_OscConfig+0x504>)
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005b9a:	2b00      	cmp	r3, #0
 8005b9c:	d1f0      	bne.n	8005b80 <HAL_RCC_OscConfig+0x2d0>
 8005b9e:	e000      	b.n	8005ba2 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005ba0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	f003 0302 	and.w	r3, r3, #2
 8005baa:	2b00      	cmp	r3, #0
 8005bac:	d060      	beq.n	8005c70 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8005bae:	69bb      	ldr	r3, [r7, #24]
 8005bb0:	2b04      	cmp	r3, #4
 8005bb2:	d005      	beq.n	8005bc0 <HAL_RCC_OscConfig+0x310>
 8005bb4:	69bb      	ldr	r3, [r7, #24]
 8005bb6:	2b0c      	cmp	r3, #12
 8005bb8:	d119      	bne.n	8005bee <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8005bba:	697b      	ldr	r3, [r7, #20]
 8005bbc:	2b02      	cmp	r3, #2
 8005bbe:	d116      	bne.n	8005bee <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005bc0:	4b7c      	ldr	r3, [pc, #496]	; (8005db4 <HAL_RCC_OscConfig+0x504>)
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005bc8:	2b00      	cmp	r3, #0
 8005bca:	d005      	beq.n	8005bd8 <HAL_RCC_OscConfig+0x328>
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	68db      	ldr	r3, [r3, #12]
 8005bd0:	2b00      	cmp	r3, #0
 8005bd2:	d101      	bne.n	8005bd8 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8005bd4:	2301      	movs	r3, #1
 8005bd6:	e277      	b.n	80060c8 <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005bd8:	4b76      	ldr	r3, [pc, #472]	; (8005db4 <HAL_RCC_OscConfig+0x504>)
 8005bda:	685b      	ldr	r3, [r3, #4]
 8005bdc:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	691b      	ldr	r3, [r3, #16]
 8005be4:	061b      	lsls	r3, r3, #24
 8005be6:	4973      	ldr	r1, [pc, #460]	; (8005db4 <HAL_RCC_OscConfig+0x504>)
 8005be8:	4313      	orrs	r3, r2
 8005bea:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005bec:	e040      	b.n	8005c70 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	68db      	ldr	r3, [r3, #12]
 8005bf2:	2b00      	cmp	r3, #0
 8005bf4:	d023      	beq.n	8005c3e <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005bf6:	4b6f      	ldr	r3, [pc, #444]	; (8005db4 <HAL_RCC_OscConfig+0x504>)
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	4a6e      	ldr	r2, [pc, #440]	; (8005db4 <HAL_RCC_OscConfig+0x504>)
 8005bfc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005c00:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005c02:	f7ff f8ed 	bl	8004de0 <HAL_GetTick>
 8005c06:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005c08:	e008      	b.n	8005c1c <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005c0a:	f7ff f8e9 	bl	8004de0 <HAL_GetTick>
 8005c0e:	4602      	mov	r2, r0
 8005c10:	693b      	ldr	r3, [r7, #16]
 8005c12:	1ad3      	subs	r3, r2, r3
 8005c14:	2b02      	cmp	r3, #2
 8005c16:	d901      	bls.n	8005c1c <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8005c18:	2303      	movs	r3, #3
 8005c1a:	e255      	b.n	80060c8 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005c1c:	4b65      	ldr	r3, [pc, #404]	; (8005db4 <HAL_RCC_OscConfig+0x504>)
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005c24:	2b00      	cmp	r3, #0
 8005c26:	d0f0      	beq.n	8005c0a <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005c28:	4b62      	ldr	r3, [pc, #392]	; (8005db4 <HAL_RCC_OscConfig+0x504>)
 8005c2a:	685b      	ldr	r3, [r3, #4]
 8005c2c:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	691b      	ldr	r3, [r3, #16]
 8005c34:	061b      	lsls	r3, r3, #24
 8005c36:	495f      	ldr	r1, [pc, #380]	; (8005db4 <HAL_RCC_OscConfig+0x504>)
 8005c38:	4313      	orrs	r3, r2
 8005c3a:	604b      	str	r3, [r1, #4]
 8005c3c:	e018      	b.n	8005c70 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005c3e:	4b5d      	ldr	r3, [pc, #372]	; (8005db4 <HAL_RCC_OscConfig+0x504>)
 8005c40:	681b      	ldr	r3, [r3, #0]
 8005c42:	4a5c      	ldr	r2, [pc, #368]	; (8005db4 <HAL_RCC_OscConfig+0x504>)
 8005c44:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005c48:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005c4a:	f7ff f8c9 	bl	8004de0 <HAL_GetTick>
 8005c4e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005c50:	e008      	b.n	8005c64 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005c52:	f7ff f8c5 	bl	8004de0 <HAL_GetTick>
 8005c56:	4602      	mov	r2, r0
 8005c58:	693b      	ldr	r3, [r7, #16]
 8005c5a:	1ad3      	subs	r3, r2, r3
 8005c5c:	2b02      	cmp	r3, #2
 8005c5e:	d901      	bls.n	8005c64 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8005c60:	2303      	movs	r3, #3
 8005c62:	e231      	b.n	80060c8 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005c64:	4b53      	ldr	r3, [pc, #332]	; (8005db4 <HAL_RCC_OscConfig+0x504>)
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005c6c:	2b00      	cmp	r3, #0
 8005c6e:	d1f0      	bne.n	8005c52 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	f003 0308 	and.w	r3, r3, #8
 8005c78:	2b00      	cmp	r3, #0
 8005c7a:	d03c      	beq.n	8005cf6 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	695b      	ldr	r3, [r3, #20]
 8005c80:	2b00      	cmp	r3, #0
 8005c82:	d01c      	beq.n	8005cbe <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005c84:	4b4b      	ldr	r3, [pc, #300]	; (8005db4 <HAL_RCC_OscConfig+0x504>)
 8005c86:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005c8a:	4a4a      	ldr	r2, [pc, #296]	; (8005db4 <HAL_RCC_OscConfig+0x504>)
 8005c8c:	f043 0301 	orr.w	r3, r3, #1
 8005c90:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005c94:	f7ff f8a4 	bl	8004de0 <HAL_GetTick>
 8005c98:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005c9a:	e008      	b.n	8005cae <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005c9c:	f7ff f8a0 	bl	8004de0 <HAL_GetTick>
 8005ca0:	4602      	mov	r2, r0
 8005ca2:	693b      	ldr	r3, [r7, #16]
 8005ca4:	1ad3      	subs	r3, r2, r3
 8005ca6:	2b02      	cmp	r3, #2
 8005ca8:	d901      	bls.n	8005cae <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8005caa:	2303      	movs	r3, #3
 8005cac:	e20c      	b.n	80060c8 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005cae:	4b41      	ldr	r3, [pc, #260]	; (8005db4 <HAL_RCC_OscConfig+0x504>)
 8005cb0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005cb4:	f003 0302 	and.w	r3, r3, #2
 8005cb8:	2b00      	cmp	r3, #0
 8005cba:	d0ef      	beq.n	8005c9c <HAL_RCC_OscConfig+0x3ec>
 8005cbc:	e01b      	b.n	8005cf6 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005cbe:	4b3d      	ldr	r3, [pc, #244]	; (8005db4 <HAL_RCC_OscConfig+0x504>)
 8005cc0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005cc4:	4a3b      	ldr	r2, [pc, #236]	; (8005db4 <HAL_RCC_OscConfig+0x504>)
 8005cc6:	f023 0301 	bic.w	r3, r3, #1
 8005cca:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005cce:	f7ff f887 	bl	8004de0 <HAL_GetTick>
 8005cd2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005cd4:	e008      	b.n	8005ce8 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005cd6:	f7ff f883 	bl	8004de0 <HAL_GetTick>
 8005cda:	4602      	mov	r2, r0
 8005cdc:	693b      	ldr	r3, [r7, #16]
 8005cde:	1ad3      	subs	r3, r2, r3
 8005ce0:	2b02      	cmp	r3, #2
 8005ce2:	d901      	bls.n	8005ce8 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8005ce4:	2303      	movs	r3, #3
 8005ce6:	e1ef      	b.n	80060c8 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005ce8:	4b32      	ldr	r3, [pc, #200]	; (8005db4 <HAL_RCC_OscConfig+0x504>)
 8005cea:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005cee:	f003 0302 	and.w	r3, r3, #2
 8005cf2:	2b00      	cmp	r3, #0
 8005cf4:	d1ef      	bne.n	8005cd6 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	f003 0304 	and.w	r3, r3, #4
 8005cfe:	2b00      	cmp	r3, #0
 8005d00:	f000 80a6 	beq.w	8005e50 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005d04:	2300      	movs	r3, #0
 8005d06:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8005d08:	4b2a      	ldr	r3, [pc, #168]	; (8005db4 <HAL_RCC_OscConfig+0x504>)
 8005d0a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005d0c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005d10:	2b00      	cmp	r3, #0
 8005d12:	d10d      	bne.n	8005d30 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005d14:	4b27      	ldr	r3, [pc, #156]	; (8005db4 <HAL_RCC_OscConfig+0x504>)
 8005d16:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005d18:	4a26      	ldr	r2, [pc, #152]	; (8005db4 <HAL_RCC_OscConfig+0x504>)
 8005d1a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005d1e:	6593      	str	r3, [r2, #88]	; 0x58
 8005d20:	4b24      	ldr	r3, [pc, #144]	; (8005db4 <HAL_RCC_OscConfig+0x504>)
 8005d22:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005d24:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005d28:	60bb      	str	r3, [r7, #8]
 8005d2a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005d2c:	2301      	movs	r3, #1
 8005d2e:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005d30:	4b21      	ldr	r3, [pc, #132]	; (8005db8 <HAL_RCC_OscConfig+0x508>)
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005d38:	2b00      	cmp	r3, #0
 8005d3a:	d118      	bne.n	8005d6e <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005d3c:	4b1e      	ldr	r3, [pc, #120]	; (8005db8 <HAL_RCC_OscConfig+0x508>)
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	4a1d      	ldr	r2, [pc, #116]	; (8005db8 <HAL_RCC_OscConfig+0x508>)
 8005d42:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005d46:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005d48:	f7ff f84a 	bl	8004de0 <HAL_GetTick>
 8005d4c:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005d4e:	e008      	b.n	8005d62 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005d50:	f7ff f846 	bl	8004de0 <HAL_GetTick>
 8005d54:	4602      	mov	r2, r0
 8005d56:	693b      	ldr	r3, [r7, #16]
 8005d58:	1ad3      	subs	r3, r2, r3
 8005d5a:	2b02      	cmp	r3, #2
 8005d5c:	d901      	bls.n	8005d62 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8005d5e:	2303      	movs	r3, #3
 8005d60:	e1b2      	b.n	80060c8 <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005d62:	4b15      	ldr	r3, [pc, #84]	; (8005db8 <HAL_RCC_OscConfig+0x508>)
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005d6a:	2b00      	cmp	r3, #0
 8005d6c:	d0f0      	beq.n	8005d50 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	689b      	ldr	r3, [r3, #8]
 8005d72:	2b01      	cmp	r3, #1
 8005d74:	d108      	bne.n	8005d88 <HAL_RCC_OscConfig+0x4d8>
 8005d76:	4b0f      	ldr	r3, [pc, #60]	; (8005db4 <HAL_RCC_OscConfig+0x504>)
 8005d78:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005d7c:	4a0d      	ldr	r2, [pc, #52]	; (8005db4 <HAL_RCC_OscConfig+0x504>)
 8005d7e:	f043 0301 	orr.w	r3, r3, #1
 8005d82:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005d86:	e029      	b.n	8005ddc <HAL_RCC_OscConfig+0x52c>
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	689b      	ldr	r3, [r3, #8]
 8005d8c:	2b05      	cmp	r3, #5
 8005d8e:	d115      	bne.n	8005dbc <HAL_RCC_OscConfig+0x50c>
 8005d90:	4b08      	ldr	r3, [pc, #32]	; (8005db4 <HAL_RCC_OscConfig+0x504>)
 8005d92:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005d96:	4a07      	ldr	r2, [pc, #28]	; (8005db4 <HAL_RCC_OscConfig+0x504>)
 8005d98:	f043 0304 	orr.w	r3, r3, #4
 8005d9c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005da0:	4b04      	ldr	r3, [pc, #16]	; (8005db4 <HAL_RCC_OscConfig+0x504>)
 8005da2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005da6:	4a03      	ldr	r2, [pc, #12]	; (8005db4 <HAL_RCC_OscConfig+0x504>)
 8005da8:	f043 0301 	orr.w	r3, r3, #1
 8005dac:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005db0:	e014      	b.n	8005ddc <HAL_RCC_OscConfig+0x52c>
 8005db2:	bf00      	nop
 8005db4:	40021000 	.word	0x40021000
 8005db8:	40007000 	.word	0x40007000
 8005dbc:	4b9a      	ldr	r3, [pc, #616]	; (8006028 <HAL_RCC_OscConfig+0x778>)
 8005dbe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005dc2:	4a99      	ldr	r2, [pc, #612]	; (8006028 <HAL_RCC_OscConfig+0x778>)
 8005dc4:	f023 0301 	bic.w	r3, r3, #1
 8005dc8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005dcc:	4b96      	ldr	r3, [pc, #600]	; (8006028 <HAL_RCC_OscConfig+0x778>)
 8005dce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005dd2:	4a95      	ldr	r2, [pc, #596]	; (8006028 <HAL_RCC_OscConfig+0x778>)
 8005dd4:	f023 0304 	bic.w	r3, r3, #4
 8005dd8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	689b      	ldr	r3, [r3, #8]
 8005de0:	2b00      	cmp	r3, #0
 8005de2:	d016      	beq.n	8005e12 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005de4:	f7fe fffc 	bl	8004de0 <HAL_GetTick>
 8005de8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005dea:	e00a      	b.n	8005e02 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005dec:	f7fe fff8 	bl	8004de0 <HAL_GetTick>
 8005df0:	4602      	mov	r2, r0
 8005df2:	693b      	ldr	r3, [r7, #16]
 8005df4:	1ad3      	subs	r3, r2, r3
 8005df6:	f241 3288 	movw	r2, #5000	; 0x1388
 8005dfa:	4293      	cmp	r3, r2
 8005dfc:	d901      	bls.n	8005e02 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8005dfe:	2303      	movs	r3, #3
 8005e00:	e162      	b.n	80060c8 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005e02:	4b89      	ldr	r3, [pc, #548]	; (8006028 <HAL_RCC_OscConfig+0x778>)
 8005e04:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005e08:	f003 0302 	and.w	r3, r3, #2
 8005e0c:	2b00      	cmp	r3, #0
 8005e0e:	d0ed      	beq.n	8005dec <HAL_RCC_OscConfig+0x53c>
 8005e10:	e015      	b.n	8005e3e <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005e12:	f7fe ffe5 	bl	8004de0 <HAL_GetTick>
 8005e16:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005e18:	e00a      	b.n	8005e30 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005e1a:	f7fe ffe1 	bl	8004de0 <HAL_GetTick>
 8005e1e:	4602      	mov	r2, r0
 8005e20:	693b      	ldr	r3, [r7, #16]
 8005e22:	1ad3      	subs	r3, r2, r3
 8005e24:	f241 3288 	movw	r2, #5000	; 0x1388
 8005e28:	4293      	cmp	r3, r2
 8005e2a:	d901      	bls.n	8005e30 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8005e2c:	2303      	movs	r3, #3
 8005e2e:	e14b      	b.n	80060c8 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005e30:	4b7d      	ldr	r3, [pc, #500]	; (8006028 <HAL_RCC_OscConfig+0x778>)
 8005e32:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005e36:	f003 0302 	and.w	r3, r3, #2
 8005e3a:	2b00      	cmp	r3, #0
 8005e3c:	d1ed      	bne.n	8005e1a <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005e3e:	7ffb      	ldrb	r3, [r7, #31]
 8005e40:	2b01      	cmp	r3, #1
 8005e42:	d105      	bne.n	8005e50 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005e44:	4b78      	ldr	r3, [pc, #480]	; (8006028 <HAL_RCC_OscConfig+0x778>)
 8005e46:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005e48:	4a77      	ldr	r2, [pc, #476]	; (8006028 <HAL_RCC_OscConfig+0x778>)
 8005e4a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005e4e:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	f003 0320 	and.w	r3, r3, #32
 8005e58:	2b00      	cmp	r3, #0
 8005e5a:	d03c      	beq.n	8005ed6 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e60:	2b00      	cmp	r3, #0
 8005e62:	d01c      	beq.n	8005e9e <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8005e64:	4b70      	ldr	r3, [pc, #448]	; (8006028 <HAL_RCC_OscConfig+0x778>)
 8005e66:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005e6a:	4a6f      	ldr	r2, [pc, #444]	; (8006028 <HAL_RCC_OscConfig+0x778>)
 8005e6c:	f043 0301 	orr.w	r3, r3, #1
 8005e70:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005e74:	f7fe ffb4 	bl	8004de0 <HAL_GetTick>
 8005e78:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8005e7a:	e008      	b.n	8005e8e <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005e7c:	f7fe ffb0 	bl	8004de0 <HAL_GetTick>
 8005e80:	4602      	mov	r2, r0
 8005e82:	693b      	ldr	r3, [r7, #16]
 8005e84:	1ad3      	subs	r3, r2, r3
 8005e86:	2b02      	cmp	r3, #2
 8005e88:	d901      	bls.n	8005e8e <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8005e8a:	2303      	movs	r3, #3
 8005e8c:	e11c      	b.n	80060c8 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8005e8e:	4b66      	ldr	r3, [pc, #408]	; (8006028 <HAL_RCC_OscConfig+0x778>)
 8005e90:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005e94:	f003 0302 	and.w	r3, r3, #2
 8005e98:	2b00      	cmp	r3, #0
 8005e9a:	d0ef      	beq.n	8005e7c <HAL_RCC_OscConfig+0x5cc>
 8005e9c:	e01b      	b.n	8005ed6 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8005e9e:	4b62      	ldr	r3, [pc, #392]	; (8006028 <HAL_RCC_OscConfig+0x778>)
 8005ea0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005ea4:	4a60      	ldr	r2, [pc, #384]	; (8006028 <HAL_RCC_OscConfig+0x778>)
 8005ea6:	f023 0301 	bic.w	r3, r3, #1
 8005eaa:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005eae:	f7fe ff97 	bl	8004de0 <HAL_GetTick>
 8005eb2:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8005eb4:	e008      	b.n	8005ec8 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005eb6:	f7fe ff93 	bl	8004de0 <HAL_GetTick>
 8005eba:	4602      	mov	r2, r0
 8005ebc:	693b      	ldr	r3, [r7, #16]
 8005ebe:	1ad3      	subs	r3, r2, r3
 8005ec0:	2b02      	cmp	r3, #2
 8005ec2:	d901      	bls.n	8005ec8 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8005ec4:	2303      	movs	r3, #3
 8005ec6:	e0ff      	b.n	80060c8 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8005ec8:	4b57      	ldr	r3, [pc, #348]	; (8006028 <HAL_RCC_OscConfig+0x778>)
 8005eca:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005ece:	f003 0302 	and.w	r3, r3, #2
 8005ed2:	2b00      	cmp	r3, #0
 8005ed4:	d1ef      	bne.n	8005eb6 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005eda:	2b00      	cmp	r3, #0
 8005edc:	f000 80f3 	beq.w	80060c6 <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ee4:	2b02      	cmp	r3, #2
 8005ee6:	f040 80c9 	bne.w	800607c <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8005eea:	4b4f      	ldr	r3, [pc, #316]	; (8006028 <HAL_RCC_OscConfig+0x778>)
 8005eec:	68db      	ldr	r3, [r3, #12]
 8005eee:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8005ef0:	697b      	ldr	r3, [r7, #20]
 8005ef2:	f003 0203 	and.w	r2, r3, #3
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005efa:	429a      	cmp	r2, r3
 8005efc:	d12c      	bne.n	8005f58 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8005efe:	697b      	ldr	r3, [r7, #20]
 8005f00:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f08:	3b01      	subs	r3, #1
 8005f0a:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8005f0c:	429a      	cmp	r2, r3
 8005f0e:	d123      	bne.n	8005f58 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005f10:	697b      	ldr	r3, [r7, #20]
 8005f12:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005f1a:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8005f1c:	429a      	cmp	r2, r3
 8005f1e:	d11b      	bne.n	8005f58 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8005f20:	697b      	ldr	r3, [r7, #20]
 8005f22:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f2a:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005f2c:	429a      	cmp	r2, r3
 8005f2e:	d113      	bne.n	8005f58 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005f30:	697b      	ldr	r3, [r7, #20]
 8005f32:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005f3a:	085b      	lsrs	r3, r3, #1
 8005f3c:	3b01      	subs	r3, #1
 8005f3e:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8005f40:	429a      	cmp	r2, r3
 8005f42:	d109      	bne.n	8005f58 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8005f44:	697b      	ldr	r3, [r7, #20]
 8005f46:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f4e:	085b      	lsrs	r3, r3, #1
 8005f50:	3b01      	subs	r3, #1
 8005f52:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005f54:	429a      	cmp	r2, r3
 8005f56:	d06b      	beq.n	8006030 <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8005f58:	69bb      	ldr	r3, [r7, #24]
 8005f5a:	2b0c      	cmp	r3, #12
 8005f5c:	d062      	beq.n	8006024 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8005f5e:	4b32      	ldr	r3, [pc, #200]	; (8006028 <HAL_RCC_OscConfig+0x778>)
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8005f66:	2b00      	cmp	r3, #0
 8005f68:	d001      	beq.n	8005f6e <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 8005f6a:	2301      	movs	r3, #1
 8005f6c:	e0ac      	b.n	80060c8 <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8005f6e:	4b2e      	ldr	r3, [pc, #184]	; (8006028 <HAL_RCC_OscConfig+0x778>)
 8005f70:	681b      	ldr	r3, [r3, #0]
 8005f72:	4a2d      	ldr	r2, [pc, #180]	; (8006028 <HAL_RCC_OscConfig+0x778>)
 8005f74:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005f78:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8005f7a:	f7fe ff31 	bl	8004de0 <HAL_GetTick>
 8005f7e:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005f80:	e008      	b.n	8005f94 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005f82:	f7fe ff2d 	bl	8004de0 <HAL_GetTick>
 8005f86:	4602      	mov	r2, r0
 8005f88:	693b      	ldr	r3, [r7, #16]
 8005f8a:	1ad3      	subs	r3, r2, r3
 8005f8c:	2b02      	cmp	r3, #2
 8005f8e:	d901      	bls.n	8005f94 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 8005f90:	2303      	movs	r3, #3
 8005f92:	e099      	b.n	80060c8 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005f94:	4b24      	ldr	r3, [pc, #144]	; (8006028 <HAL_RCC_OscConfig+0x778>)
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005f9c:	2b00      	cmp	r3, #0
 8005f9e:	d1f0      	bne.n	8005f82 <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005fa0:	4b21      	ldr	r3, [pc, #132]	; (8006028 <HAL_RCC_OscConfig+0x778>)
 8005fa2:	68da      	ldr	r2, [r3, #12]
 8005fa4:	4b21      	ldr	r3, [pc, #132]	; (800602c <HAL_RCC_OscConfig+0x77c>)
 8005fa6:	4013      	ands	r3, r2
 8005fa8:	687a      	ldr	r2, [r7, #4]
 8005faa:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8005fac:	687a      	ldr	r2, [r7, #4]
 8005fae:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8005fb0:	3a01      	subs	r2, #1
 8005fb2:	0112      	lsls	r2, r2, #4
 8005fb4:	4311      	orrs	r1, r2
 8005fb6:	687a      	ldr	r2, [r7, #4]
 8005fb8:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8005fba:	0212      	lsls	r2, r2, #8
 8005fbc:	4311      	orrs	r1, r2
 8005fbe:	687a      	ldr	r2, [r7, #4]
 8005fc0:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8005fc2:	0852      	lsrs	r2, r2, #1
 8005fc4:	3a01      	subs	r2, #1
 8005fc6:	0552      	lsls	r2, r2, #21
 8005fc8:	4311      	orrs	r1, r2
 8005fca:	687a      	ldr	r2, [r7, #4]
 8005fcc:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8005fce:	0852      	lsrs	r2, r2, #1
 8005fd0:	3a01      	subs	r2, #1
 8005fd2:	0652      	lsls	r2, r2, #25
 8005fd4:	4311      	orrs	r1, r2
 8005fd6:	687a      	ldr	r2, [r7, #4]
 8005fd8:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005fda:	06d2      	lsls	r2, r2, #27
 8005fdc:	430a      	orrs	r2, r1
 8005fde:	4912      	ldr	r1, [pc, #72]	; (8006028 <HAL_RCC_OscConfig+0x778>)
 8005fe0:	4313      	orrs	r3, r2
 8005fe2:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8005fe4:	4b10      	ldr	r3, [pc, #64]	; (8006028 <HAL_RCC_OscConfig+0x778>)
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	4a0f      	ldr	r2, [pc, #60]	; (8006028 <HAL_RCC_OscConfig+0x778>)
 8005fea:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005fee:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005ff0:	4b0d      	ldr	r3, [pc, #52]	; (8006028 <HAL_RCC_OscConfig+0x778>)
 8005ff2:	68db      	ldr	r3, [r3, #12]
 8005ff4:	4a0c      	ldr	r2, [pc, #48]	; (8006028 <HAL_RCC_OscConfig+0x778>)
 8005ff6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005ffa:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8005ffc:	f7fe fef0 	bl	8004de0 <HAL_GetTick>
 8006000:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006002:	e008      	b.n	8006016 <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006004:	f7fe feec 	bl	8004de0 <HAL_GetTick>
 8006008:	4602      	mov	r2, r0
 800600a:	693b      	ldr	r3, [r7, #16]
 800600c:	1ad3      	subs	r3, r2, r3
 800600e:	2b02      	cmp	r3, #2
 8006010:	d901      	bls.n	8006016 <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 8006012:	2303      	movs	r3, #3
 8006014:	e058      	b.n	80060c8 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006016:	4b04      	ldr	r3, [pc, #16]	; (8006028 <HAL_RCC_OscConfig+0x778>)
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800601e:	2b00      	cmp	r3, #0
 8006020:	d0f0      	beq.n	8006004 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8006022:	e050      	b.n	80060c6 <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8006024:	2301      	movs	r3, #1
 8006026:	e04f      	b.n	80060c8 <HAL_RCC_OscConfig+0x818>
 8006028:	40021000 	.word	0x40021000
 800602c:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006030:	4b27      	ldr	r3, [pc, #156]	; (80060d0 <HAL_RCC_OscConfig+0x820>)
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006038:	2b00      	cmp	r3, #0
 800603a:	d144      	bne.n	80060c6 <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 800603c:	4b24      	ldr	r3, [pc, #144]	; (80060d0 <HAL_RCC_OscConfig+0x820>)
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	4a23      	ldr	r2, [pc, #140]	; (80060d0 <HAL_RCC_OscConfig+0x820>)
 8006042:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006046:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8006048:	4b21      	ldr	r3, [pc, #132]	; (80060d0 <HAL_RCC_OscConfig+0x820>)
 800604a:	68db      	ldr	r3, [r3, #12]
 800604c:	4a20      	ldr	r2, [pc, #128]	; (80060d0 <HAL_RCC_OscConfig+0x820>)
 800604e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006052:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8006054:	f7fe fec4 	bl	8004de0 <HAL_GetTick>
 8006058:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800605a:	e008      	b.n	800606e <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800605c:	f7fe fec0 	bl	8004de0 <HAL_GetTick>
 8006060:	4602      	mov	r2, r0
 8006062:	693b      	ldr	r3, [r7, #16]
 8006064:	1ad3      	subs	r3, r2, r3
 8006066:	2b02      	cmp	r3, #2
 8006068:	d901      	bls.n	800606e <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 800606a:	2303      	movs	r3, #3
 800606c:	e02c      	b.n	80060c8 <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800606e:	4b18      	ldr	r3, [pc, #96]	; (80060d0 <HAL_RCC_OscConfig+0x820>)
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006076:	2b00      	cmp	r3, #0
 8006078:	d0f0      	beq.n	800605c <HAL_RCC_OscConfig+0x7ac>
 800607a:	e024      	b.n	80060c6 <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 800607c:	69bb      	ldr	r3, [r7, #24]
 800607e:	2b0c      	cmp	r3, #12
 8006080:	d01f      	beq.n	80060c2 <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006082:	4b13      	ldr	r3, [pc, #76]	; (80060d0 <HAL_RCC_OscConfig+0x820>)
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	4a12      	ldr	r2, [pc, #72]	; (80060d0 <HAL_RCC_OscConfig+0x820>)
 8006088:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800608c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800608e:	f7fe fea7 	bl	8004de0 <HAL_GetTick>
 8006092:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006094:	e008      	b.n	80060a8 <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006096:	f7fe fea3 	bl	8004de0 <HAL_GetTick>
 800609a:	4602      	mov	r2, r0
 800609c:	693b      	ldr	r3, [r7, #16]
 800609e:	1ad3      	subs	r3, r2, r3
 80060a0:	2b02      	cmp	r3, #2
 80060a2:	d901      	bls.n	80060a8 <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 80060a4:	2303      	movs	r3, #3
 80060a6:	e00f      	b.n	80060c8 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80060a8:	4b09      	ldr	r3, [pc, #36]	; (80060d0 <HAL_RCC_OscConfig+0x820>)
 80060aa:	681b      	ldr	r3, [r3, #0]
 80060ac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80060b0:	2b00      	cmp	r3, #0
 80060b2:	d1f0      	bne.n	8006096 <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 80060b4:	4b06      	ldr	r3, [pc, #24]	; (80060d0 <HAL_RCC_OscConfig+0x820>)
 80060b6:	68da      	ldr	r2, [r3, #12]
 80060b8:	4905      	ldr	r1, [pc, #20]	; (80060d0 <HAL_RCC_OscConfig+0x820>)
 80060ba:	4b06      	ldr	r3, [pc, #24]	; (80060d4 <HAL_RCC_OscConfig+0x824>)
 80060bc:	4013      	ands	r3, r2
 80060be:	60cb      	str	r3, [r1, #12]
 80060c0:	e001      	b.n	80060c6 <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80060c2:	2301      	movs	r3, #1
 80060c4:	e000      	b.n	80060c8 <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 80060c6:	2300      	movs	r3, #0
}
 80060c8:	4618      	mov	r0, r3
 80060ca:	3720      	adds	r7, #32
 80060cc:	46bd      	mov	sp, r7
 80060ce:	bd80      	pop	{r7, pc}
 80060d0:	40021000 	.word	0x40021000
 80060d4:	feeefffc 	.word	0xfeeefffc

080060d8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80060d8:	b580      	push	{r7, lr}
 80060da:	b084      	sub	sp, #16
 80060dc:	af00      	add	r7, sp, #0
 80060de:	6078      	str	r0, [r7, #4]
 80060e0:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	2b00      	cmp	r3, #0
 80060e6:	d101      	bne.n	80060ec <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80060e8:	2301      	movs	r3, #1
 80060ea:	e0e7      	b.n	80062bc <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80060ec:	4b75      	ldr	r3, [pc, #468]	; (80062c4 <HAL_RCC_ClockConfig+0x1ec>)
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	f003 0307 	and.w	r3, r3, #7
 80060f4:	683a      	ldr	r2, [r7, #0]
 80060f6:	429a      	cmp	r2, r3
 80060f8:	d910      	bls.n	800611c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80060fa:	4b72      	ldr	r3, [pc, #456]	; (80062c4 <HAL_RCC_ClockConfig+0x1ec>)
 80060fc:	681b      	ldr	r3, [r3, #0]
 80060fe:	f023 0207 	bic.w	r2, r3, #7
 8006102:	4970      	ldr	r1, [pc, #448]	; (80062c4 <HAL_RCC_ClockConfig+0x1ec>)
 8006104:	683b      	ldr	r3, [r7, #0]
 8006106:	4313      	orrs	r3, r2
 8006108:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800610a:	4b6e      	ldr	r3, [pc, #440]	; (80062c4 <HAL_RCC_ClockConfig+0x1ec>)
 800610c:	681b      	ldr	r3, [r3, #0]
 800610e:	f003 0307 	and.w	r3, r3, #7
 8006112:	683a      	ldr	r2, [r7, #0]
 8006114:	429a      	cmp	r2, r3
 8006116:	d001      	beq.n	800611c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8006118:	2301      	movs	r3, #1
 800611a:	e0cf      	b.n	80062bc <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	f003 0302 	and.w	r3, r3, #2
 8006124:	2b00      	cmp	r3, #0
 8006126:	d010      	beq.n	800614a <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	689a      	ldr	r2, [r3, #8]
 800612c:	4b66      	ldr	r3, [pc, #408]	; (80062c8 <HAL_RCC_ClockConfig+0x1f0>)
 800612e:	689b      	ldr	r3, [r3, #8]
 8006130:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006134:	429a      	cmp	r2, r3
 8006136:	d908      	bls.n	800614a <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006138:	4b63      	ldr	r3, [pc, #396]	; (80062c8 <HAL_RCC_ClockConfig+0x1f0>)
 800613a:	689b      	ldr	r3, [r3, #8]
 800613c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	689b      	ldr	r3, [r3, #8]
 8006144:	4960      	ldr	r1, [pc, #384]	; (80062c8 <HAL_RCC_ClockConfig+0x1f0>)
 8006146:	4313      	orrs	r3, r2
 8006148:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	681b      	ldr	r3, [r3, #0]
 800614e:	f003 0301 	and.w	r3, r3, #1
 8006152:	2b00      	cmp	r3, #0
 8006154:	d04c      	beq.n	80061f0 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	685b      	ldr	r3, [r3, #4]
 800615a:	2b03      	cmp	r3, #3
 800615c:	d107      	bne.n	800616e <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800615e:	4b5a      	ldr	r3, [pc, #360]	; (80062c8 <HAL_RCC_ClockConfig+0x1f0>)
 8006160:	681b      	ldr	r3, [r3, #0]
 8006162:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006166:	2b00      	cmp	r3, #0
 8006168:	d121      	bne.n	80061ae <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 800616a:	2301      	movs	r3, #1
 800616c:	e0a6      	b.n	80062bc <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	685b      	ldr	r3, [r3, #4]
 8006172:	2b02      	cmp	r3, #2
 8006174:	d107      	bne.n	8006186 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006176:	4b54      	ldr	r3, [pc, #336]	; (80062c8 <HAL_RCC_ClockConfig+0x1f0>)
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800617e:	2b00      	cmp	r3, #0
 8006180:	d115      	bne.n	80061ae <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8006182:	2301      	movs	r3, #1
 8006184:	e09a      	b.n	80062bc <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	685b      	ldr	r3, [r3, #4]
 800618a:	2b00      	cmp	r3, #0
 800618c:	d107      	bne.n	800619e <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800618e:	4b4e      	ldr	r3, [pc, #312]	; (80062c8 <HAL_RCC_ClockConfig+0x1f0>)
 8006190:	681b      	ldr	r3, [r3, #0]
 8006192:	f003 0302 	and.w	r3, r3, #2
 8006196:	2b00      	cmp	r3, #0
 8006198:	d109      	bne.n	80061ae <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800619a:	2301      	movs	r3, #1
 800619c:	e08e      	b.n	80062bc <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800619e:	4b4a      	ldr	r3, [pc, #296]	; (80062c8 <HAL_RCC_ClockConfig+0x1f0>)
 80061a0:	681b      	ldr	r3, [r3, #0]
 80061a2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80061a6:	2b00      	cmp	r3, #0
 80061a8:	d101      	bne.n	80061ae <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80061aa:	2301      	movs	r3, #1
 80061ac:	e086      	b.n	80062bc <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80061ae:	4b46      	ldr	r3, [pc, #280]	; (80062c8 <HAL_RCC_ClockConfig+0x1f0>)
 80061b0:	689b      	ldr	r3, [r3, #8]
 80061b2:	f023 0203 	bic.w	r2, r3, #3
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	685b      	ldr	r3, [r3, #4]
 80061ba:	4943      	ldr	r1, [pc, #268]	; (80062c8 <HAL_RCC_ClockConfig+0x1f0>)
 80061bc:	4313      	orrs	r3, r2
 80061be:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80061c0:	f7fe fe0e 	bl	8004de0 <HAL_GetTick>
 80061c4:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80061c6:	e00a      	b.n	80061de <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80061c8:	f7fe fe0a 	bl	8004de0 <HAL_GetTick>
 80061cc:	4602      	mov	r2, r0
 80061ce:	68fb      	ldr	r3, [r7, #12]
 80061d0:	1ad3      	subs	r3, r2, r3
 80061d2:	f241 3288 	movw	r2, #5000	; 0x1388
 80061d6:	4293      	cmp	r3, r2
 80061d8:	d901      	bls.n	80061de <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 80061da:	2303      	movs	r3, #3
 80061dc:	e06e      	b.n	80062bc <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80061de:	4b3a      	ldr	r3, [pc, #232]	; (80062c8 <HAL_RCC_ClockConfig+0x1f0>)
 80061e0:	689b      	ldr	r3, [r3, #8]
 80061e2:	f003 020c 	and.w	r2, r3, #12
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	685b      	ldr	r3, [r3, #4]
 80061ea:	009b      	lsls	r3, r3, #2
 80061ec:	429a      	cmp	r2, r3
 80061ee:	d1eb      	bne.n	80061c8 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	681b      	ldr	r3, [r3, #0]
 80061f4:	f003 0302 	and.w	r3, r3, #2
 80061f8:	2b00      	cmp	r3, #0
 80061fa:	d010      	beq.n	800621e <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	689a      	ldr	r2, [r3, #8]
 8006200:	4b31      	ldr	r3, [pc, #196]	; (80062c8 <HAL_RCC_ClockConfig+0x1f0>)
 8006202:	689b      	ldr	r3, [r3, #8]
 8006204:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006208:	429a      	cmp	r2, r3
 800620a:	d208      	bcs.n	800621e <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800620c:	4b2e      	ldr	r3, [pc, #184]	; (80062c8 <HAL_RCC_ClockConfig+0x1f0>)
 800620e:	689b      	ldr	r3, [r3, #8]
 8006210:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	689b      	ldr	r3, [r3, #8]
 8006218:	492b      	ldr	r1, [pc, #172]	; (80062c8 <HAL_RCC_ClockConfig+0x1f0>)
 800621a:	4313      	orrs	r3, r2
 800621c:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800621e:	4b29      	ldr	r3, [pc, #164]	; (80062c4 <HAL_RCC_ClockConfig+0x1ec>)
 8006220:	681b      	ldr	r3, [r3, #0]
 8006222:	f003 0307 	and.w	r3, r3, #7
 8006226:	683a      	ldr	r2, [r7, #0]
 8006228:	429a      	cmp	r2, r3
 800622a:	d210      	bcs.n	800624e <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800622c:	4b25      	ldr	r3, [pc, #148]	; (80062c4 <HAL_RCC_ClockConfig+0x1ec>)
 800622e:	681b      	ldr	r3, [r3, #0]
 8006230:	f023 0207 	bic.w	r2, r3, #7
 8006234:	4923      	ldr	r1, [pc, #140]	; (80062c4 <HAL_RCC_ClockConfig+0x1ec>)
 8006236:	683b      	ldr	r3, [r7, #0]
 8006238:	4313      	orrs	r3, r2
 800623a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800623c:	4b21      	ldr	r3, [pc, #132]	; (80062c4 <HAL_RCC_ClockConfig+0x1ec>)
 800623e:	681b      	ldr	r3, [r3, #0]
 8006240:	f003 0307 	and.w	r3, r3, #7
 8006244:	683a      	ldr	r2, [r7, #0]
 8006246:	429a      	cmp	r2, r3
 8006248:	d001      	beq.n	800624e <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 800624a:	2301      	movs	r3, #1
 800624c:	e036      	b.n	80062bc <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	681b      	ldr	r3, [r3, #0]
 8006252:	f003 0304 	and.w	r3, r3, #4
 8006256:	2b00      	cmp	r3, #0
 8006258:	d008      	beq.n	800626c <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800625a:	4b1b      	ldr	r3, [pc, #108]	; (80062c8 <HAL_RCC_ClockConfig+0x1f0>)
 800625c:	689b      	ldr	r3, [r3, #8]
 800625e:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	68db      	ldr	r3, [r3, #12]
 8006266:	4918      	ldr	r1, [pc, #96]	; (80062c8 <HAL_RCC_ClockConfig+0x1f0>)
 8006268:	4313      	orrs	r3, r2
 800626a:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	f003 0308 	and.w	r3, r3, #8
 8006274:	2b00      	cmp	r3, #0
 8006276:	d009      	beq.n	800628c <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006278:	4b13      	ldr	r3, [pc, #76]	; (80062c8 <HAL_RCC_ClockConfig+0x1f0>)
 800627a:	689b      	ldr	r3, [r3, #8]
 800627c:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	691b      	ldr	r3, [r3, #16]
 8006284:	00db      	lsls	r3, r3, #3
 8006286:	4910      	ldr	r1, [pc, #64]	; (80062c8 <HAL_RCC_ClockConfig+0x1f0>)
 8006288:	4313      	orrs	r3, r2
 800628a:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800628c:	f000 f824 	bl	80062d8 <HAL_RCC_GetSysClockFreq>
 8006290:	4602      	mov	r2, r0
 8006292:	4b0d      	ldr	r3, [pc, #52]	; (80062c8 <HAL_RCC_ClockConfig+0x1f0>)
 8006294:	689b      	ldr	r3, [r3, #8]
 8006296:	091b      	lsrs	r3, r3, #4
 8006298:	f003 030f 	and.w	r3, r3, #15
 800629c:	490b      	ldr	r1, [pc, #44]	; (80062cc <HAL_RCC_ClockConfig+0x1f4>)
 800629e:	5ccb      	ldrb	r3, [r1, r3]
 80062a0:	f003 031f 	and.w	r3, r3, #31
 80062a4:	fa22 f303 	lsr.w	r3, r2, r3
 80062a8:	4a09      	ldr	r2, [pc, #36]	; (80062d0 <HAL_RCC_ClockConfig+0x1f8>)
 80062aa:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80062ac:	4b09      	ldr	r3, [pc, #36]	; (80062d4 <HAL_RCC_ClockConfig+0x1fc>)
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	4618      	mov	r0, r3
 80062b2:	f7fe fd45 	bl	8004d40 <HAL_InitTick>
 80062b6:	4603      	mov	r3, r0
 80062b8:	72fb      	strb	r3, [r7, #11]

  return status;
 80062ba:	7afb      	ldrb	r3, [r7, #11]
}
 80062bc:	4618      	mov	r0, r3
 80062be:	3710      	adds	r7, #16
 80062c0:	46bd      	mov	sp, r7
 80062c2:	bd80      	pop	{r7, pc}
 80062c4:	40022000 	.word	0x40022000
 80062c8:	40021000 	.word	0x40021000
 80062cc:	0800e0d0 	.word	0x0800e0d0
 80062d0:	200010a0 	.word	0x200010a0
 80062d4:	200010a4 	.word	0x200010a4

080062d8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80062d8:	b480      	push	{r7}
 80062da:	b089      	sub	sp, #36	; 0x24
 80062dc:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80062de:	2300      	movs	r3, #0
 80062e0:	61fb      	str	r3, [r7, #28]
 80062e2:	2300      	movs	r3, #0
 80062e4:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80062e6:	4b3e      	ldr	r3, [pc, #248]	; (80063e0 <HAL_RCC_GetSysClockFreq+0x108>)
 80062e8:	689b      	ldr	r3, [r3, #8]
 80062ea:	f003 030c 	and.w	r3, r3, #12
 80062ee:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80062f0:	4b3b      	ldr	r3, [pc, #236]	; (80063e0 <HAL_RCC_GetSysClockFreq+0x108>)
 80062f2:	68db      	ldr	r3, [r3, #12]
 80062f4:	f003 0303 	and.w	r3, r3, #3
 80062f8:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80062fa:	693b      	ldr	r3, [r7, #16]
 80062fc:	2b00      	cmp	r3, #0
 80062fe:	d005      	beq.n	800630c <HAL_RCC_GetSysClockFreq+0x34>
 8006300:	693b      	ldr	r3, [r7, #16]
 8006302:	2b0c      	cmp	r3, #12
 8006304:	d121      	bne.n	800634a <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8006306:	68fb      	ldr	r3, [r7, #12]
 8006308:	2b01      	cmp	r3, #1
 800630a:	d11e      	bne.n	800634a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 800630c:	4b34      	ldr	r3, [pc, #208]	; (80063e0 <HAL_RCC_GetSysClockFreq+0x108>)
 800630e:	681b      	ldr	r3, [r3, #0]
 8006310:	f003 0308 	and.w	r3, r3, #8
 8006314:	2b00      	cmp	r3, #0
 8006316:	d107      	bne.n	8006328 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8006318:	4b31      	ldr	r3, [pc, #196]	; (80063e0 <HAL_RCC_GetSysClockFreq+0x108>)
 800631a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800631e:	0a1b      	lsrs	r3, r3, #8
 8006320:	f003 030f 	and.w	r3, r3, #15
 8006324:	61fb      	str	r3, [r7, #28]
 8006326:	e005      	b.n	8006334 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8006328:	4b2d      	ldr	r3, [pc, #180]	; (80063e0 <HAL_RCC_GetSysClockFreq+0x108>)
 800632a:	681b      	ldr	r3, [r3, #0]
 800632c:	091b      	lsrs	r3, r3, #4
 800632e:	f003 030f 	and.w	r3, r3, #15
 8006332:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8006334:	4a2b      	ldr	r2, [pc, #172]	; (80063e4 <HAL_RCC_GetSysClockFreq+0x10c>)
 8006336:	69fb      	ldr	r3, [r7, #28]
 8006338:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800633c:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800633e:	693b      	ldr	r3, [r7, #16]
 8006340:	2b00      	cmp	r3, #0
 8006342:	d10d      	bne.n	8006360 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8006344:	69fb      	ldr	r3, [r7, #28]
 8006346:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8006348:	e00a      	b.n	8006360 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800634a:	693b      	ldr	r3, [r7, #16]
 800634c:	2b04      	cmp	r3, #4
 800634e:	d102      	bne.n	8006356 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8006350:	4b25      	ldr	r3, [pc, #148]	; (80063e8 <HAL_RCC_GetSysClockFreq+0x110>)
 8006352:	61bb      	str	r3, [r7, #24]
 8006354:	e004      	b.n	8006360 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8006356:	693b      	ldr	r3, [r7, #16]
 8006358:	2b08      	cmp	r3, #8
 800635a:	d101      	bne.n	8006360 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800635c:	4b23      	ldr	r3, [pc, #140]	; (80063ec <HAL_RCC_GetSysClockFreq+0x114>)
 800635e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8006360:	693b      	ldr	r3, [r7, #16]
 8006362:	2b0c      	cmp	r3, #12
 8006364:	d134      	bne.n	80063d0 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8006366:	4b1e      	ldr	r3, [pc, #120]	; (80063e0 <HAL_RCC_GetSysClockFreq+0x108>)
 8006368:	68db      	ldr	r3, [r3, #12]
 800636a:	f003 0303 	and.w	r3, r3, #3
 800636e:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8006370:	68bb      	ldr	r3, [r7, #8]
 8006372:	2b02      	cmp	r3, #2
 8006374:	d003      	beq.n	800637e <HAL_RCC_GetSysClockFreq+0xa6>
 8006376:	68bb      	ldr	r3, [r7, #8]
 8006378:	2b03      	cmp	r3, #3
 800637a:	d003      	beq.n	8006384 <HAL_RCC_GetSysClockFreq+0xac>
 800637c:	e005      	b.n	800638a <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800637e:	4b1a      	ldr	r3, [pc, #104]	; (80063e8 <HAL_RCC_GetSysClockFreq+0x110>)
 8006380:	617b      	str	r3, [r7, #20]
      break;
 8006382:	e005      	b.n	8006390 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8006384:	4b19      	ldr	r3, [pc, #100]	; (80063ec <HAL_RCC_GetSysClockFreq+0x114>)
 8006386:	617b      	str	r3, [r7, #20]
      break;
 8006388:	e002      	b.n	8006390 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800638a:	69fb      	ldr	r3, [r7, #28]
 800638c:	617b      	str	r3, [r7, #20]
      break;
 800638e:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8006390:	4b13      	ldr	r3, [pc, #76]	; (80063e0 <HAL_RCC_GetSysClockFreq+0x108>)
 8006392:	68db      	ldr	r3, [r3, #12]
 8006394:	091b      	lsrs	r3, r3, #4
 8006396:	f003 0307 	and.w	r3, r3, #7
 800639a:	3301      	adds	r3, #1
 800639c:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800639e:	4b10      	ldr	r3, [pc, #64]	; (80063e0 <HAL_RCC_GetSysClockFreq+0x108>)
 80063a0:	68db      	ldr	r3, [r3, #12]
 80063a2:	0a1b      	lsrs	r3, r3, #8
 80063a4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80063a8:	697a      	ldr	r2, [r7, #20]
 80063aa:	fb03 f202 	mul.w	r2, r3, r2
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	fbb2 f3f3 	udiv	r3, r2, r3
 80063b4:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80063b6:	4b0a      	ldr	r3, [pc, #40]	; (80063e0 <HAL_RCC_GetSysClockFreq+0x108>)
 80063b8:	68db      	ldr	r3, [r3, #12]
 80063ba:	0e5b      	lsrs	r3, r3, #25
 80063bc:	f003 0303 	and.w	r3, r3, #3
 80063c0:	3301      	adds	r3, #1
 80063c2:	005b      	lsls	r3, r3, #1
 80063c4:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80063c6:	697a      	ldr	r2, [r7, #20]
 80063c8:	683b      	ldr	r3, [r7, #0]
 80063ca:	fbb2 f3f3 	udiv	r3, r2, r3
 80063ce:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80063d0:	69bb      	ldr	r3, [r7, #24]
}
 80063d2:	4618      	mov	r0, r3
 80063d4:	3724      	adds	r7, #36	; 0x24
 80063d6:	46bd      	mov	sp, r7
 80063d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063dc:	4770      	bx	lr
 80063de:	bf00      	nop
 80063e0:	40021000 	.word	0x40021000
 80063e4:	0800e0e8 	.word	0x0800e0e8
 80063e8:	00f42400 	.word	0x00f42400
 80063ec:	007a1200 	.word	0x007a1200

080063f0 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80063f0:	b480      	push	{r7}
 80063f2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80063f4:	4b03      	ldr	r3, [pc, #12]	; (8006404 <HAL_RCC_GetHCLKFreq+0x14>)
 80063f6:	681b      	ldr	r3, [r3, #0]
}
 80063f8:	4618      	mov	r0, r3
 80063fa:	46bd      	mov	sp, r7
 80063fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006400:	4770      	bx	lr
 8006402:	bf00      	nop
 8006404:	200010a0 	.word	0x200010a0

08006408 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006408:	b580      	push	{r7, lr}
 800640a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 800640c:	f7ff fff0 	bl	80063f0 <HAL_RCC_GetHCLKFreq>
 8006410:	4602      	mov	r2, r0
 8006412:	4b06      	ldr	r3, [pc, #24]	; (800642c <HAL_RCC_GetPCLK1Freq+0x24>)
 8006414:	689b      	ldr	r3, [r3, #8]
 8006416:	0a1b      	lsrs	r3, r3, #8
 8006418:	f003 0307 	and.w	r3, r3, #7
 800641c:	4904      	ldr	r1, [pc, #16]	; (8006430 <HAL_RCC_GetPCLK1Freq+0x28>)
 800641e:	5ccb      	ldrb	r3, [r1, r3]
 8006420:	f003 031f 	and.w	r3, r3, #31
 8006424:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006428:	4618      	mov	r0, r3
 800642a:	bd80      	pop	{r7, pc}
 800642c:	40021000 	.word	0x40021000
 8006430:	0800e0e0 	.word	0x0800e0e0

08006434 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006434:	b580      	push	{r7, lr}
 8006436:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8006438:	f7ff ffda 	bl	80063f0 <HAL_RCC_GetHCLKFreq>
 800643c:	4602      	mov	r2, r0
 800643e:	4b06      	ldr	r3, [pc, #24]	; (8006458 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006440:	689b      	ldr	r3, [r3, #8]
 8006442:	0adb      	lsrs	r3, r3, #11
 8006444:	f003 0307 	and.w	r3, r3, #7
 8006448:	4904      	ldr	r1, [pc, #16]	; (800645c <HAL_RCC_GetPCLK2Freq+0x28>)
 800644a:	5ccb      	ldrb	r3, [r1, r3]
 800644c:	f003 031f 	and.w	r3, r3, #31
 8006450:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006454:	4618      	mov	r0, r3
 8006456:	bd80      	pop	{r7, pc}
 8006458:	40021000 	.word	0x40021000
 800645c:	0800e0e0 	.word	0x0800e0e0

08006460 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8006460:	b580      	push	{r7, lr}
 8006462:	b086      	sub	sp, #24
 8006464:	af00      	add	r7, sp, #0
 8006466:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8006468:	2300      	movs	r3, #0
 800646a:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 800646c:	4b2a      	ldr	r3, [pc, #168]	; (8006518 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800646e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006470:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006474:	2b00      	cmp	r3, #0
 8006476:	d003      	beq.n	8006480 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8006478:	f7ff f9b6 	bl	80057e8 <HAL_PWREx_GetVoltageRange>
 800647c:	6178      	str	r0, [r7, #20]
 800647e:	e014      	b.n	80064aa <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8006480:	4b25      	ldr	r3, [pc, #148]	; (8006518 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8006482:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006484:	4a24      	ldr	r2, [pc, #144]	; (8006518 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8006486:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800648a:	6593      	str	r3, [r2, #88]	; 0x58
 800648c:	4b22      	ldr	r3, [pc, #136]	; (8006518 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800648e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006490:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006494:	60fb      	str	r3, [r7, #12]
 8006496:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8006498:	f7ff f9a6 	bl	80057e8 <HAL_PWREx_GetVoltageRange>
 800649c:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800649e:	4b1e      	ldr	r3, [pc, #120]	; (8006518 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80064a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80064a2:	4a1d      	ldr	r2, [pc, #116]	; (8006518 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80064a4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80064a8:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80064aa:	697b      	ldr	r3, [r7, #20]
 80064ac:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80064b0:	d10b      	bne.n	80064ca <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	2b80      	cmp	r3, #128	; 0x80
 80064b6:	d919      	bls.n	80064ec <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	2ba0      	cmp	r3, #160	; 0xa0
 80064bc:	d902      	bls.n	80064c4 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80064be:	2302      	movs	r3, #2
 80064c0:	613b      	str	r3, [r7, #16]
 80064c2:	e013      	b.n	80064ec <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80064c4:	2301      	movs	r3, #1
 80064c6:	613b      	str	r3, [r7, #16]
 80064c8:	e010      	b.n	80064ec <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	2b80      	cmp	r3, #128	; 0x80
 80064ce:	d902      	bls.n	80064d6 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80064d0:	2303      	movs	r3, #3
 80064d2:	613b      	str	r3, [r7, #16]
 80064d4:	e00a      	b.n	80064ec <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	2b80      	cmp	r3, #128	; 0x80
 80064da:	d102      	bne.n	80064e2 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80064dc:	2302      	movs	r3, #2
 80064de:	613b      	str	r3, [r7, #16]
 80064e0:	e004      	b.n	80064ec <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	2b70      	cmp	r3, #112	; 0x70
 80064e6:	d101      	bne.n	80064ec <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80064e8:	2301      	movs	r3, #1
 80064ea:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80064ec:	4b0b      	ldr	r3, [pc, #44]	; (800651c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80064ee:	681b      	ldr	r3, [r3, #0]
 80064f0:	f023 0207 	bic.w	r2, r3, #7
 80064f4:	4909      	ldr	r1, [pc, #36]	; (800651c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80064f6:	693b      	ldr	r3, [r7, #16]
 80064f8:	4313      	orrs	r3, r2
 80064fa:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80064fc:	4b07      	ldr	r3, [pc, #28]	; (800651c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80064fe:	681b      	ldr	r3, [r3, #0]
 8006500:	f003 0307 	and.w	r3, r3, #7
 8006504:	693a      	ldr	r2, [r7, #16]
 8006506:	429a      	cmp	r2, r3
 8006508:	d001      	beq.n	800650e <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800650a:	2301      	movs	r3, #1
 800650c:	e000      	b.n	8006510 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800650e:	2300      	movs	r3, #0
}
 8006510:	4618      	mov	r0, r3
 8006512:	3718      	adds	r7, #24
 8006514:	46bd      	mov	sp, r7
 8006516:	bd80      	pop	{r7, pc}
 8006518:	40021000 	.word	0x40021000
 800651c:	40022000 	.word	0x40022000

08006520 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006520:	b580      	push	{r7, lr}
 8006522:	b086      	sub	sp, #24
 8006524:	af00      	add	r7, sp, #0
 8006526:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8006528:	2300      	movs	r3, #0
 800652a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800652c:	2300      	movs	r3, #0
 800652e:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	681b      	ldr	r3, [r3, #0]
 8006534:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006538:	2b00      	cmp	r3, #0
 800653a:	d031      	beq.n	80065a0 <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006540:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8006544:	d01a      	beq.n	800657c <HAL_RCCEx_PeriphCLKConfig+0x5c>
 8006546:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800654a:	d814      	bhi.n	8006576 <HAL_RCCEx_PeriphCLKConfig+0x56>
 800654c:	2b00      	cmp	r3, #0
 800654e:	d009      	beq.n	8006564 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8006550:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8006554:	d10f      	bne.n	8006576 <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 8006556:	4b5d      	ldr	r3, [pc, #372]	; (80066cc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8006558:	68db      	ldr	r3, [r3, #12]
 800655a:	4a5c      	ldr	r2, [pc, #368]	; (80066cc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800655c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006560:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8006562:	e00c      	b.n	800657e <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	3304      	adds	r3, #4
 8006568:	2100      	movs	r1, #0
 800656a:	4618      	mov	r0, r3
 800656c:	f000 f9ce 	bl	800690c <RCCEx_PLLSAI1_Config>
 8006570:	4603      	mov	r3, r0
 8006572:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8006574:	e003      	b.n	800657e <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006576:	2301      	movs	r3, #1
 8006578:	74fb      	strb	r3, [r7, #19]
      break;
 800657a:	e000      	b.n	800657e <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 800657c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800657e:	7cfb      	ldrb	r3, [r7, #19]
 8006580:	2b00      	cmp	r3, #0
 8006582:	d10b      	bne.n	800659c <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8006584:	4b51      	ldr	r3, [pc, #324]	; (80066cc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8006586:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800658a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006592:	494e      	ldr	r1, [pc, #312]	; (80066cc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8006594:	4313      	orrs	r3, r2
 8006596:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800659a:	e001      	b.n	80065a0 <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800659c:	7cfb      	ldrb	r3, [r7, #19]
 800659e:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	681b      	ldr	r3, [r3, #0]
 80065a4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80065a8:	2b00      	cmp	r3, #0
 80065aa:	f000 809e 	beq.w	80066ea <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 80065ae:	2300      	movs	r3, #0
 80065b0:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80065b2:	4b46      	ldr	r3, [pc, #280]	; (80066cc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80065b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80065b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80065ba:	2b00      	cmp	r3, #0
 80065bc:	d101      	bne.n	80065c2 <HAL_RCCEx_PeriphCLKConfig+0xa2>
 80065be:	2301      	movs	r3, #1
 80065c0:	e000      	b.n	80065c4 <HAL_RCCEx_PeriphCLKConfig+0xa4>
 80065c2:	2300      	movs	r3, #0
 80065c4:	2b00      	cmp	r3, #0
 80065c6:	d00d      	beq.n	80065e4 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80065c8:	4b40      	ldr	r3, [pc, #256]	; (80066cc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80065ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80065cc:	4a3f      	ldr	r2, [pc, #252]	; (80066cc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80065ce:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80065d2:	6593      	str	r3, [r2, #88]	; 0x58
 80065d4:	4b3d      	ldr	r3, [pc, #244]	; (80066cc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80065d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80065d8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80065dc:	60bb      	str	r3, [r7, #8]
 80065de:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80065e0:	2301      	movs	r3, #1
 80065e2:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80065e4:	4b3a      	ldr	r3, [pc, #232]	; (80066d0 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 80065e6:	681b      	ldr	r3, [r3, #0]
 80065e8:	4a39      	ldr	r2, [pc, #228]	; (80066d0 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 80065ea:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80065ee:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80065f0:	f7fe fbf6 	bl	8004de0 <HAL_GetTick>
 80065f4:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80065f6:	e009      	b.n	800660c <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80065f8:	f7fe fbf2 	bl	8004de0 <HAL_GetTick>
 80065fc:	4602      	mov	r2, r0
 80065fe:	68fb      	ldr	r3, [r7, #12]
 8006600:	1ad3      	subs	r3, r2, r3
 8006602:	2b02      	cmp	r3, #2
 8006604:	d902      	bls.n	800660c <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 8006606:	2303      	movs	r3, #3
 8006608:	74fb      	strb	r3, [r7, #19]
        break;
 800660a:	e005      	b.n	8006618 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800660c:	4b30      	ldr	r3, [pc, #192]	; (80066d0 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 800660e:	681b      	ldr	r3, [r3, #0]
 8006610:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006614:	2b00      	cmp	r3, #0
 8006616:	d0ef      	beq.n	80065f8 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 8006618:	7cfb      	ldrb	r3, [r7, #19]
 800661a:	2b00      	cmp	r3, #0
 800661c:	d15a      	bne.n	80066d4 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800661e:	4b2b      	ldr	r3, [pc, #172]	; (80066cc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8006620:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006624:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006628:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800662a:	697b      	ldr	r3, [r7, #20]
 800662c:	2b00      	cmp	r3, #0
 800662e:	d01e      	beq.n	800666e <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006634:	697a      	ldr	r2, [r7, #20]
 8006636:	429a      	cmp	r2, r3
 8006638:	d019      	beq.n	800666e <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800663a:	4b24      	ldr	r3, [pc, #144]	; (80066cc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800663c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006640:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006644:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8006646:	4b21      	ldr	r3, [pc, #132]	; (80066cc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8006648:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800664c:	4a1f      	ldr	r2, [pc, #124]	; (80066cc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800664e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006652:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8006656:	4b1d      	ldr	r3, [pc, #116]	; (80066cc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8006658:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800665c:	4a1b      	ldr	r2, [pc, #108]	; (80066cc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800665e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006662:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8006666:	4a19      	ldr	r2, [pc, #100]	; (80066cc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8006668:	697b      	ldr	r3, [r7, #20]
 800666a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800666e:	697b      	ldr	r3, [r7, #20]
 8006670:	f003 0301 	and.w	r3, r3, #1
 8006674:	2b00      	cmp	r3, #0
 8006676:	d016      	beq.n	80066a6 <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006678:	f7fe fbb2 	bl	8004de0 <HAL_GetTick>
 800667c:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800667e:	e00b      	b.n	8006698 <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006680:	f7fe fbae 	bl	8004de0 <HAL_GetTick>
 8006684:	4602      	mov	r2, r0
 8006686:	68fb      	ldr	r3, [r7, #12]
 8006688:	1ad3      	subs	r3, r2, r3
 800668a:	f241 3288 	movw	r2, #5000	; 0x1388
 800668e:	4293      	cmp	r3, r2
 8006690:	d902      	bls.n	8006698 <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 8006692:	2303      	movs	r3, #3
 8006694:	74fb      	strb	r3, [r7, #19]
            break;
 8006696:	e006      	b.n	80066a6 <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006698:	4b0c      	ldr	r3, [pc, #48]	; (80066cc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800669a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800669e:	f003 0302 	and.w	r3, r3, #2
 80066a2:	2b00      	cmp	r3, #0
 80066a4:	d0ec      	beq.n	8006680 <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 80066a6:	7cfb      	ldrb	r3, [r7, #19]
 80066a8:	2b00      	cmp	r3, #0
 80066aa:	d10b      	bne.n	80066c4 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80066ac:	4b07      	ldr	r3, [pc, #28]	; (80066cc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80066ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80066b2:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80066ba:	4904      	ldr	r1, [pc, #16]	; (80066cc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80066bc:	4313      	orrs	r3, r2
 80066be:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80066c2:	e009      	b.n	80066d8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80066c4:	7cfb      	ldrb	r3, [r7, #19]
 80066c6:	74bb      	strb	r3, [r7, #18]
 80066c8:	e006      	b.n	80066d8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 80066ca:	bf00      	nop
 80066cc:	40021000 	.word	0x40021000
 80066d0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80066d4:	7cfb      	ldrb	r3, [r7, #19]
 80066d6:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80066d8:	7c7b      	ldrb	r3, [r7, #17]
 80066da:	2b01      	cmp	r3, #1
 80066dc:	d105      	bne.n	80066ea <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80066de:	4b8a      	ldr	r3, [pc, #552]	; (8006908 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80066e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80066e2:	4a89      	ldr	r2, [pc, #548]	; (8006908 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80066e4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80066e8:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	681b      	ldr	r3, [r3, #0]
 80066ee:	f003 0301 	and.w	r3, r3, #1
 80066f2:	2b00      	cmp	r3, #0
 80066f4:	d00a      	beq.n	800670c <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80066f6:	4b84      	ldr	r3, [pc, #528]	; (8006908 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80066f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80066fc:	f023 0203 	bic.w	r2, r3, #3
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	6a1b      	ldr	r3, [r3, #32]
 8006704:	4980      	ldr	r1, [pc, #512]	; (8006908 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8006706:	4313      	orrs	r3, r2
 8006708:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	681b      	ldr	r3, [r3, #0]
 8006710:	f003 0302 	and.w	r3, r3, #2
 8006714:	2b00      	cmp	r3, #0
 8006716:	d00a      	beq.n	800672e <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8006718:	4b7b      	ldr	r3, [pc, #492]	; (8006908 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800671a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800671e:	f023 020c 	bic.w	r2, r3, #12
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006726:	4978      	ldr	r1, [pc, #480]	; (8006908 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8006728:	4313      	orrs	r3, r2
 800672a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	681b      	ldr	r3, [r3, #0]
 8006732:	f003 0320 	and.w	r3, r3, #32
 8006736:	2b00      	cmp	r3, #0
 8006738:	d00a      	beq.n	8006750 <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800673a:	4b73      	ldr	r3, [pc, #460]	; (8006908 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800673c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006740:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006748:	496f      	ldr	r1, [pc, #444]	; (8006908 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800674a:	4313      	orrs	r3, r2
 800674c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	681b      	ldr	r3, [r3, #0]
 8006754:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006758:	2b00      	cmp	r3, #0
 800675a:	d00a      	beq.n	8006772 <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800675c:	4b6a      	ldr	r3, [pc, #424]	; (8006908 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800675e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006762:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800676a:	4967      	ldr	r1, [pc, #412]	; (8006908 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800676c:	4313      	orrs	r3, r2
 800676e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	681b      	ldr	r3, [r3, #0]
 8006776:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800677a:	2b00      	cmp	r3, #0
 800677c:	d00a      	beq.n	8006794 <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800677e:	4b62      	ldr	r3, [pc, #392]	; (8006908 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8006780:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006784:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800678c:	495e      	ldr	r1, [pc, #376]	; (8006908 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800678e:	4313      	orrs	r3, r2
 8006790:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	681b      	ldr	r3, [r3, #0]
 8006798:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800679c:	2b00      	cmp	r3, #0
 800679e:	d00a      	beq.n	80067b6 <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80067a0:	4b59      	ldr	r3, [pc, #356]	; (8006908 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80067a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80067a6:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80067ae:	4956      	ldr	r1, [pc, #344]	; (8006908 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80067b0:	4313      	orrs	r3, r2
 80067b2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	681b      	ldr	r3, [r3, #0]
 80067ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80067be:	2b00      	cmp	r3, #0
 80067c0:	d00a      	beq.n	80067d8 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80067c2:	4b51      	ldr	r3, [pc, #324]	; (8006908 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80067c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80067c8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80067d0:	494d      	ldr	r1, [pc, #308]	; (8006908 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80067d2:	4313      	orrs	r3, r2
 80067d4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	681b      	ldr	r3, [r3, #0]
 80067dc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80067e0:	2b00      	cmp	r3, #0
 80067e2:	d028      	beq.n	8006836 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80067e4:	4b48      	ldr	r3, [pc, #288]	; (8006908 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80067e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80067ea:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80067f2:	4945      	ldr	r1, [pc, #276]	; (8006908 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80067f4:	4313      	orrs	r3, r2
 80067f6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80067fe:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006802:	d106      	bne.n	8006812 <HAL_RCCEx_PeriphCLKConfig+0x2f2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006804:	4b40      	ldr	r3, [pc, #256]	; (8006908 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8006806:	68db      	ldr	r3, [r3, #12]
 8006808:	4a3f      	ldr	r2, [pc, #252]	; (8006908 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800680a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800680e:	60d3      	str	r3, [r2, #12]
 8006810:	e011      	b.n	8006836 <HAL_RCCEx_PeriphCLKConfig+0x316>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006816:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800681a:	d10c      	bne.n	8006836 <HAL_RCCEx_PeriphCLKConfig+0x316>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	3304      	adds	r3, #4
 8006820:	2101      	movs	r1, #1
 8006822:	4618      	mov	r0, r3
 8006824:	f000 f872 	bl	800690c <RCCEx_PLLSAI1_Config>
 8006828:	4603      	mov	r3, r0
 800682a:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 800682c:	7cfb      	ldrb	r3, [r7, #19]
 800682e:	2b00      	cmp	r3, #0
 8006830:	d001      	beq.n	8006836 <HAL_RCCEx_PeriphCLKConfig+0x316>
        {
          /* set overall return value */
          status = ret;
 8006832:	7cfb      	ldrb	r3, [r7, #19]
 8006834:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	681b      	ldr	r3, [r3, #0]
 800683a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800683e:	2b00      	cmp	r3, #0
 8006840:	d028      	beq.n	8006894 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8006842:	4b31      	ldr	r3, [pc, #196]	; (8006908 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8006844:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006848:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006850:	492d      	ldr	r1, [pc, #180]	; (8006908 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8006852:	4313      	orrs	r3, r2
 8006854:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800685c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006860:	d106      	bne.n	8006870 <HAL_RCCEx_PeriphCLKConfig+0x350>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006862:	4b29      	ldr	r3, [pc, #164]	; (8006908 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8006864:	68db      	ldr	r3, [r3, #12]
 8006866:	4a28      	ldr	r2, [pc, #160]	; (8006908 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8006868:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800686c:	60d3      	str	r3, [r2, #12]
 800686e:	e011      	b.n	8006894 <HAL_RCCEx_PeriphCLKConfig+0x374>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006874:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006878:	d10c      	bne.n	8006894 <HAL_RCCEx_PeriphCLKConfig+0x374>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	3304      	adds	r3, #4
 800687e:	2101      	movs	r1, #1
 8006880:	4618      	mov	r0, r3
 8006882:	f000 f843 	bl	800690c <RCCEx_PLLSAI1_Config>
 8006886:	4603      	mov	r3, r0
 8006888:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800688a:	7cfb      	ldrb	r3, [r7, #19]
 800688c:	2b00      	cmp	r3, #0
 800688e:	d001      	beq.n	8006894 <HAL_RCCEx_PeriphCLKConfig+0x374>
      {
        /* set overall return value */
        status = ret;
 8006890:	7cfb      	ldrb	r3, [r7, #19]
 8006892:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	681b      	ldr	r3, [r3, #0]
 8006898:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800689c:	2b00      	cmp	r3, #0
 800689e:	d01c      	beq.n	80068da <HAL_RCCEx_PeriphCLKConfig+0x3ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80068a0:	4b19      	ldr	r3, [pc, #100]	; (8006908 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80068a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80068a6:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80068ae:	4916      	ldr	r1, [pc, #88]	; (8006908 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80068b0:	4313      	orrs	r3, r2
 80068b2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80068ba:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80068be:	d10c      	bne.n	80068da <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	3304      	adds	r3, #4
 80068c4:	2102      	movs	r1, #2
 80068c6:	4618      	mov	r0, r3
 80068c8:	f000 f820 	bl	800690c <RCCEx_PLLSAI1_Config>
 80068cc:	4603      	mov	r3, r0
 80068ce:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80068d0:	7cfb      	ldrb	r3, [r7, #19]
 80068d2:	2b00      	cmp	r3, #0
 80068d4:	d001      	beq.n	80068da <HAL_RCCEx_PeriphCLKConfig+0x3ba>
      {
        /* set overall return value */
        status = ret;
 80068d6:	7cfb      	ldrb	r3, [r7, #19]
 80068d8:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	681b      	ldr	r3, [r3, #0]
 80068de:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80068e2:	2b00      	cmp	r3, #0
 80068e4:	d00a      	beq.n	80068fc <HAL_RCCEx_PeriphCLKConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80068e6:	4b08      	ldr	r3, [pc, #32]	; (8006908 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80068e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80068ec:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80068f4:	4904      	ldr	r1, [pc, #16]	; (8006908 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80068f6:	4313      	orrs	r3, r2
 80068f8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80068fc:	7cbb      	ldrb	r3, [r7, #18]
}
 80068fe:	4618      	mov	r0, r3
 8006900:	3718      	adds	r7, #24
 8006902:	46bd      	mov	sp, r7
 8006904:	bd80      	pop	{r7, pc}
 8006906:	bf00      	nop
 8006908:	40021000 	.word	0x40021000

0800690c <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 800690c:	b580      	push	{r7, lr}
 800690e:	b084      	sub	sp, #16
 8006910:	af00      	add	r7, sp, #0
 8006912:	6078      	str	r0, [r7, #4]
 8006914:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006916:	2300      	movs	r3, #0
 8006918:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800691a:	4b74      	ldr	r3, [pc, #464]	; (8006aec <RCCEx_PLLSAI1_Config+0x1e0>)
 800691c:	68db      	ldr	r3, [r3, #12]
 800691e:	f003 0303 	and.w	r3, r3, #3
 8006922:	2b00      	cmp	r3, #0
 8006924:	d018      	beq.n	8006958 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8006926:	4b71      	ldr	r3, [pc, #452]	; (8006aec <RCCEx_PLLSAI1_Config+0x1e0>)
 8006928:	68db      	ldr	r3, [r3, #12]
 800692a:	f003 0203 	and.w	r2, r3, #3
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	681b      	ldr	r3, [r3, #0]
 8006932:	429a      	cmp	r2, r3
 8006934:	d10d      	bne.n	8006952 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	681b      	ldr	r3, [r3, #0]
       ||
 800693a:	2b00      	cmp	r3, #0
 800693c:	d009      	beq.n	8006952 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800693e:	4b6b      	ldr	r3, [pc, #428]	; (8006aec <RCCEx_PLLSAI1_Config+0x1e0>)
 8006940:	68db      	ldr	r3, [r3, #12]
 8006942:	091b      	lsrs	r3, r3, #4
 8006944:	f003 0307 	and.w	r3, r3, #7
 8006948:	1c5a      	adds	r2, r3, #1
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	685b      	ldr	r3, [r3, #4]
       ||
 800694e:	429a      	cmp	r2, r3
 8006950:	d047      	beq.n	80069e2 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8006952:	2301      	movs	r3, #1
 8006954:	73fb      	strb	r3, [r7, #15]
 8006956:	e044      	b.n	80069e2 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	681b      	ldr	r3, [r3, #0]
 800695c:	2b03      	cmp	r3, #3
 800695e:	d018      	beq.n	8006992 <RCCEx_PLLSAI1_Config+0x86>
 8006960:	2b03      	cmp	r3, #3
 8006962:	d825      	bhi.n	80069b0 <RCCEx_PLLSAI1_Config+0xa4>
 8006964:	2b01      	cmp	r3, #1
 8006966:	d002      	beq.n	800696e <RCCEx_PLLSAI1_Config+0x62>
 8006968:	2b02      	cmp	r3, #2
 800696a:	d009      	beq.n	8006980 <RCCEx_PLLSAI1_Config+0x74>
 800696c:	e020      	b.n	80069b0 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800696e:	4b5f      	ldr	r3, [pc, #380]	; (8006aec <RCCEx_PLLSAI1_Config+0x1e0>)
 8006970:	681b      	ldr	r3, [r3, #0]
 8006972:	f003 0302 	and.w	r3, r3, #2
 8006976:	2b00      	cmp	r3, #0
 8006978:	d11d      	bne.n	80069b6 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 800697a:	2301      	movs	r3, #1
 800697c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800697e:	e01a      	b.n	80069b6 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8006980:	4b5a      	ldr	r3, [pc, #360]	; (8006aec <RCCEx_PLLSAI1_Config+0x1e0>)
 8006982:	681b      	ldr	r3, [r3, #0]
 8006984:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006988:	2b00      	cmp	r3, #0
 800698a:	d116      	bne.n	80069ba <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 800698c:	2301      	movs	r3, #1
 800698e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006990:	e013      	b.n	80069ba <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8006992:	4b56      	ldr	r3, [pc, #344]	; (8006aec <RCCEx_PLLSAI1_Config+0x1e0>)
 8006994:	681b      	ldr	r3, [r3, #0]
 8006996:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800699a:	2b00      	cmp	r3, #0
 800699c:	d10f      	bne.n	80069be <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800699e:	4b53      	ldr	r3, [pc, #332]	; (8006aec <RCCEx_PLLSAI1_Config+0x1e0>)
 80069a0:	681b      	ldr	r3, [r3, #0]
 80069a2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80069a6:	2b00      	cmp	r3, #0
 80069a8:	d109      	bne.n	80069be <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 80069aa:	2301      	movs	r3, #1
 80069ac:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80069ae:	e006      	b.n	80069be <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 80069b0:	2301      	movs	r3, #1
 80069b2:	73fb      	strb	r3, [r7, #15]
      break;
 80069b4:	e004      	b.n	80069c0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80069b6:	bf00      	nop
 80069b8:	e002      	b.n	80069c0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80069ba:	bf00      	nop
 80069bc:	e000      	b.n	80069c0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80069be:	bf00      	nop
    }

    if(status == HAL_OK)
 80069c0:	7bfb      	ldrb	r3, [r7, #15]
 80069c2:	2b00      	cmp	r3, #0
 80069c4:	d10d      	bne.n	80069e2 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80069c6:	4b49      	ldr	r3, [pc, #292]	; (8006aec <RCCEx_PLLSAI1_Config+0x1e0>)
 80069c8:	68db      	ldr	r3, [r3, #12]
 80069ca:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	6819      	ldr	r1, [r3, #0]
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	685b      	ldr	r3, [r3, #4]
 80069d6:	3b01      	subs	r3, #1
 80069d8:	011b      	lsls	r3, r3, #4
 80069da:	430b      	orrs	r3, r1
 80069dc:	4943      	ldr	r1, [pc, #268]	; (8006aec <RCCEx_PLLSAI1_Config+0x1e0>)
 80069de:	4313      	orrs	r3, r2
 80069e0:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80069e2:	7bfb      	ldrb	r3, [r7, #15]
 80069e4:	2b00      	cmp	r3, #0
 80069e6:	d17c      	bne.n	8006ae2 <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80069e8:	4b40      	ldr	r3, [pc, #256]	; (8006aec <RCCEx_PLLSAI1_Config+0x1e0>)
 80069ea:	681b      	ldr	r3, [r3, #0]
 80069ec:	4a3f      	ldr	r2, [pc, #252]	; (8006aec <RCCEx_PLLSAI1_Config+0x1e0>)
 80069ee:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80069f2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80069f4:	f7fe f9f4 	bl	8004de0 <HAL_GetTick>
 80069f8:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80069fa:	e009      	b.n	8006a10 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80069fc:	f7fe f9f0 	bl	8004de0 <HAL_GetTick>
 8006a00:	4602      	mov	r2, r0
 8006a02:	68bb      	ldr	r3, [r7, #8]
 8006a04:	1ad3      	subs	r3, r2, r3
 8006a06:	2b02      	cmp	r3, #2
 8006a08:	d902      	bls.n	8006a10 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8006a0a:	2303      	movs	r3, #3
 8006a0c:	73fb      	strb	r3, [r7, #15]
        break;
 8006a0e:	e005      	b.n	8006a1c <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8006a10:	4b36      	ldr	r3, [pc, #216]	; (8006aec <RCCEx_PLLSAI1_Config+0x1e0>)
 8006a12:	681b      	ldr	r3, [r3, #0]
 8006a14:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006a18:	2b00      	cmp	r3, #0
 8006a1a:	d1ef      	bne.n	80069fc <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8006a1c:	7bfb      	ldrb	r3, [r7, #15]
 8006a1e:	2b00      	cmp	r3, #0
 8006a20:	d15f      	bne.n	8006ae2 <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8006a22:	683b      	ldr	r3, [r7, #0]
 8006a24:	2b00      	cmp	r3, #0
 8006a26:	d110      	bne.n	8006a4a <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8006a28:	4b30      	ldr	r3, [pc, #192]	; (8006aec <RCCEx_PLLSAI1_Config+0x1e0>)
 8006a2a:	691b      	ldr	r3, [r3, #16]
 8006a2c:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 8006a30:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8006a34:	687a      	ldr	r2, [r7, #4]
 8006a36:	6892      	ldr	r2, [r2, #8]
 8006a38:	0211      	lsls	r1, r2, #8
 8006a3a:	687a      	ldr	r2, [r7, #4]
 8006a3c:	68d2      	ldr	r2, [r2, #12]
 8006a3e:	06d2      	lsls	r2, r2, #27
 8006a40:	430a      	orrs	r2, r1
 8006a42:	492a      	ldr	r1, [pc, #168]	; (8006aec <RCCEx_PLLSAI1_Config+0x1e0>)
 8006a44:	4313      	orrs	r3, r2
 8006a46:	610b      	str	r3, [r1, #16]
 8006a48:	e027      	b.n	8006a9a <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8006a4a:	683b      	ldr	r3, [r7, #0]
 8006a4c:	2b01      	cmp	r3, #1
 8006a4e:	d112      	bne.n	8006a76 <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8006a50:	4b26      	ldr	r3, [pc, #152]	; (8006aec <RCCEx_PLLSAI1_Config+0x1e0>)
 8006a52:	691b      	ldr	r3, [r3, #16]
 8006a54:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8006a58:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8006a5c:	687a      	ldr	r2, [r7, #4]
 8006a5e:	6892      	ldr	r2, [r2, #8]
 8006a60:	0211      	lsls	r1, r2, #8
 8006a62:	687a      	ldr	r2, [r7, #4]
 8006a64:	6912      	ldr	r2, [r2, #16]
 8006a66:	0852      	lsrs	r2, r2, #1
 8006a68:	3a01      	subs	r2, #1
 8006a6a:	0552      	lsls	r2, r2, #21
 8006a6c:	430a      	orrs	r2, r1
 8006a6e:	491f      	ldr	r1, [pc, #124]	; (8006aec <RCCEx_PLLSAI1_Config+0x1e0>)
 8006a70:	4313      	orrs	r3, r2
 8006a72:	610b      	str	r3, [r1, #16]
 8006a74:	e011      	b.n	8006a9a <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8006a76:	4b1d      	ldr	r3, [pc, #116]	; (8006aec <RCCEx_PLLSAI1_Config+0x1e0>)
 8006a78:	691b      	ldr	r3, [r3, #16]
 8006a7a:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8006a7e:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8006a82:	687a      	ldr	r2, [r7, #4]
 8006a84:	6892      	ldr	r2, [r2, #8]
 8006a86:	0211      	lsls	r1, r2, #8
 8006a88:	687a      	ldr	r2, [r7, #4]
 8006a8a:	6952      	ldr	r2, [r2, #20]
 8006a8c:	0852      	lsrs	r2, r2, #1
 8006a8e:	3a01      	subs	r2, #1
 8006a90:	0652      	lsls	r2, r2, #25
 8006a92:	430a      	orrs	r2, r1
 8006a94:	4915      	ldr	r1, [pc, #84]	; (8006aec <RCCEx_PLLSAI1_Config+0x1e0>)
 8006a96:	4313      	orrs	r3, r2
 8006a98:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8006a9a:	4b14      	ldr	r3, [pc, #80]	; (8006aec <RCCEx_PLLSAI1_Config+0x1e0>)
 8006a9c:	681b      	ldr	r3, [r3, #0]
 8006a9e:	4a13      	ldr	r2, [pc, #76]	; (8006aec <RCCEx_PLLSAI1_Config+0x1e0>)
 8006aa0:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8006aa4:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006aa6:	f7fe f99b 	bl	8004de0 <HAL_GetTick>
 8006aaa:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8006aac:	e009      	b.n	8006ac2 <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8006aae:	f7fe f997 	bl	8004de0 <HAL_GetTick>
 8006ab2:	4602      	mov	r2, r0
 8006ab4:	68bb      	ldr	r3, [r7, #8]
 8006ab6:	1ad3      	subs	r3, r2, r3
 8006ab8:	2b02      	cmp	r3, #2
 8006aba:	d902      	bls.n	8006ac2 <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 8006abc:	2303      	movs	r3, #3
 8006abe:	73fb      	strb	r3, [r7, #15]
          break;
 8006ac0:	e005      	b.n	8006ace <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8006ac2:	4b0a      	ldr	r3, [pc, #40]	; (8006aec <RCCEx_PLLSAI1_Config+0x1e0>)
 8006ac4:	681b      	ldr	r3, [r3, #0]
 8006ac6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006aca:	2b00      	cmp	r3, #0
 8006acc:	d0ef      	beq.n	8006aae <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 8006ace:	7bfb      	ldrb	r3, [r7, #15]
 8006ad0:	2b00      	cmp	r3, #0
 8006ad2:	d106      	bne.n	8006ae2 <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8006ad4:	4b05      	ldr	r3, [pc, #20]	; (8006aec <RCCEx_PLLSAI1_Config+0x1e0>)
 8006ad6:	691a      	ldr	r2, [r3, #16]
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	699b      	ldr	r3, [r3, #24]
 8006adc:	4903      	ldr	r1, [pc, #12]	; (8006aec <RCCEx_PLLSAI1_Config+0x1e0>)
 8006ade:	4313      	orrs	r3, r2
 8006ae0:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8006ae2:	7bfb      	ldrb	r3, [r7, #15]
}
 8006ae4:	4618      	mov	r0, r3
 8006ae6:	3710      	adds	r7, #16
 8006ae8:	46bd      	mov	sp, r7
 8006aea:	bd80      	pop	{r7, pc}
 8006aec:	40021000 	.word	0x40021000

08006af0 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8006af0:	b580      	push	{r7, lr}
 8006af2:	b084      	sub	sp, #16
 8006af4:	af00      	add	r7, sp, #0
 8006af6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8006af8:	2301      	movs	r3, #1
 8006afa:	73fb      	strb	r3, [r7, #15]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	2b00      	cmp	r3, #0
 8006b00:	d06c      	beq.n	8006bdc <HAL_RTC_Init+0xec>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else /* #if (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */
    if (hrtc->State == HAL_RTC_STATE_RESET)
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8006b08:	b2db      	uxtb	r3, r3
 8006b0a:	2b00      	cmp	r3, #0
 8006b0c:	d106      	bne.n	8006b1c <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	2200      	movs	r2, #0
 8006b12:	f883 2020 	strb.w	r2, [r3, #32]

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 8006b16:	6878      	ldr	r0, [r7, #4]
 8006b18:	f7fd fe88 	bl	800482c <HAL_RTC_MspInit>
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
    /* Process TAMP ip offset from RTC one */
    hrtc->TampOffset = (TAMP_BASE - RTC_BASE);
#endif
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	2202      	movs	r2, #2
 8006b20:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	681b      	ldr	r3, [r3, #0]
 8006b28:	22ca      	movs	r2, #202	; 0xca
 8006b2a:	625a      	str	r2, [r3, #36]	; 0x24
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	681b      	ldr	r3, [r3, #0]
 8006b30:	2253      	movs	r2, #83	; 0x53
 8006b32:	625a      	str	r2, [r3, #36]	; 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 8006b34:	6878      	ldr	r0, [r7, #4]
 8006b36:	f000 fa49 	bl	8006fcc <RTC_EnterInitMode>
 8006b3a:	4603      	mov	r3, r0
 8006b3c:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 8006b3e:	7bfb      	ldrb	r3, [r7, #15]
 8006b40:	2b00      	cmp	r3, #0
 8006b42:	d14b      	bne.n	8006bdc <HAL_RTC_Init+0xec>
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
      /* Clear RTC_CR FMT, OSEL, POL and TAMPOE Bits */
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
#else
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL);
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	681b      	ldr	r3, [r3, #0]
 8006b48:	689b      	ldr	r3, [r3, #8]
 8006b4a:	687a      	ldr	r2, [r7, #4]
 8006b4c:	6812      	ldr	r2, [r2, #0]
 8006b4e:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8006b52:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006b56:	6093      	str	r3, [r2, #8]
#endif
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	681b      	ldr	r3, [r3, #0]
 8006b5c:	6899      	ldr	r1, [r3, #8]
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	685a      	ldr	r2, [r3, #4]
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	691b      	ldr	r3, [r3, #16]
 8006b66:	431a      	orrs	r2, r3
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	699b      	ldr	r3, [r3, #24]
 8006b6c:	431a      	orrs	r2, r3
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	681b      	ldr	r3, [r3, #0]
 8006b72:	430a      	orrs	r2, r1
 8006b74:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (hrtc->Init.SynchPrediv);
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	681b      	ldr	r3, [r3, #0]
 8006b7a:	687a      	ldr	r2, [r7, #4]
 8006b7c:	68d2      	ldr	r2, [r2, #12]
 8006b7e:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	681b      	ldr	r3, [r3, #0]
 8006b84:	6919      	ldr	r1, [r3, #16]
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	689b      	ldr	r3, [r3, #8]
 8006b8a:	041a      	lsls	r2, r3, #16
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	681b      	ldr	r3, [r3, #0]
 8006b90:	430a      	orrs	r2, r1
 8006b92:	611a      	str	r2, [r3, #16]
      /* Configure the Binary mode */
      MODIFY_REG(RTC->ICSR, RTC_ICSR_BIN | RTC_ICSR_BCDU, hrtc->Init.BinMode | hrtc->Init.BinMixBcdU);
#endif

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 8006b94:	6878      	ldr	r0, [r7, #4]
 8006b96:	f000 fa4d 	bl	8007034 <RTC_ExitInitMode>
 8006b9a:	4603      	mov	r3, r0
 8006b9c:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 8006b9e:	7bfb      	ldrb	r3, [r7, #15]
 8006ba0:	2b00      	cmp	r3, #0
 8006ba2:	d11b      	bne.n	8006bdc <HAL_RTC_Init+0xec>
      {
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU | RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
#else
        hrtc->Instance->OR &= ~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	681b      	ldr	r3, [r3, #0]
 8006ba8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	681b      	ldr	r3, [r3, #0]
 8006bae:	f022 0203 	bic.w	r2, r2, #3
 8006bb2:	64da      	str	r2, [r3, #76]	; 0x4c
        hrtc->Instance->OR |= (hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	681b      	ldr	r3, [r3, #0]
 8006bb8:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	69da      	ldr	r2, [r3, #28]
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	695b      	ldr	r3, [r3, #20]
 8006bc2:	431a      	orrs	r2, r3
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	681b      	ldr	r3, [r3, #0]
 8006bc8:	430a      	orrs	r2, r1
 8006bca:	64da      	str	r2, [r3, #76]	; 0x4c
#endif

        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	681b      	ldr	r3, [r3, #0]
 8006bd0:	22ff      	movs	r2, #255	; 0xff
 8006bd2:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_READY;
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	2201      	movs	r2, #1
 8006bd8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      }
    }
  }

  return status;
 8006bdc:	7bfb      	ldrb	r3, [r7, #15]
}
 8006bde:	4618      	mov	r0, r3
 8006be0:	3710      	adds	r7, #16
 8006be2:	46bd      	mov	sp, r7
 8006be4:	bd80      	pop	{r7, pc}

08006be6 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8006be6:	b590      	push	{r4, r7, lr}
 8006be8:	b087      	sub	sp, #28
 8006bea:	af00      	add	r7, sp, #0
 8006bec:	60f8      	str	r0, [r7, #12]
 8006bee:	60b9      	str	r1, [r7, #8]
 8006bf0:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8006bf2:	68fb      	ldr	r3, [r7, #12]
 8006bf4:	f893 3020 	ldrb.w	r3, [r3, #32]
 8006bf8:	2b01      	cmp	r3, #1
 8006bfa:	d101      	bne.n	8006c00 <HAL_RTC_SetTime+0x1a>
 8006bfc:	2302      	movs	r3, #2
 8006bfe:	e08b      	b.n	8006d18 <HAL_RTC_SetTime+0x132>
 8006c00:	68fb      	ldr	r3, [r7, #12]
 8006c02:	2201      	movs	r2, #1
 8006c04:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8006c08:	68fb      	ldr	r3, [r7, #12]
 8006c0a:	2202      	movs	r2, #2
 8006c0c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8006c10:	68fb      	ldr	r3, [r7, #12]
 8006c12:	681b      	ldr	r3, [r3, #0]
 8006c14:	22ca      	movs	r2, #202	; 0xca
 8006c16:	625a      	str	r2, [r3, #36]	; 0x24
 8006c18:	68fb      	ldr	r3, [r7, #12]
 8006c1a:	681b      	ldr	r3, [r3, #0]
 8006c1c:	2253      	movs	r2, #83	; 0x53
 8006c1e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8006c20:	68f8      	ldr	r0, [r7, #12]
 8006c22:	f000 f9d3 	bl	8006fcc <RTC_EnterInitMode>
 8006c26:	4603      	mov	r3, r0
 8006c28:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 8006c2a:	7cfb      	ldrb	r3, [r7, #19]
 8006c2c:	2b00      	cmp	r3, #0
 8006c2e:	d163      	bne.n	8006cf8 <HAL_RTC_SetTime+0x112>
  {
    if (Format == RTC_FORMAT_BIN)
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	2b00      	cmp	r3, #0
 8006c34:	d126      	bne.n	8006c84 <HAL_RTC_SetTime+0x9e>
    {
      if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8006c36:	68fb      	ldr	r3, [r7, #12]
 8006c38:	681b      	ldr	r3, [r3, #0]
 8006c3a:	689b      	ldr	r3, [r3, #8]
 8006c3c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006c40:	2b00      	cmp	r3, #0
 8006c42:	d102      	bne.n	8006c4a <HAL_RTC_SetTime+0x64>
        assert_param(IS_RTC_HOUR12(sTime->Hours));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 8006c44:	68bb      	ldr	r3, [r7, #8]
 8006c46:	2200      	movs	r2, #0
 8006c48:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(sTime->Hours));
      }
      assert_param(IS_RTC_MINUTES(sTime->Minutes));
      assert_param(IS_RTC_SECONDS(sTime->Seconds));

      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8006c4a:	68bb      	ldr	r3, [r7, #8]
 8006c4c:	781b      	ldrb	r3, [r3, #0]
 8006c4e:	4618      	mov	r0, r3
 8006c50:	f000 fa2e 	bl	80070b0 <RTC_ByteToBcd2>
 8006c54:	4603      	mov	r3, r0
 8006c56:	041c      	lsls	r4, r3, #16
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8006c58:	68bb      	ldr	r3, [r7, #8]
 8006c5a:	785b      	ldrb	r3, [r3, #1]
 8006c5c:	4618      	mov	r0, r3
 8006c5e:	f000 fa27 	bl	80070b0 <RTC_ByteToBcd2>
 8006c62:	4603      	mov	r3, r0
 8006c64:	021b      	lsls	r3, r3, #8
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8006c66:	431c      	orrs	r4, r3
                          ((uint32_t)RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos) | \
 8006c68:	68bb      	ldr	r3, [r7, #8]
 8006c6a:	789b      	ldrb	r3, [r3, #2]
 8006c6c:	4618      	mov	r0, r3
 8006c6e:	f000 fa1f 	bl	80070b0 <RTC_ByteToBcd2>
 8006c72:	4603      	mov	r3, r0
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8006c74:	ea44 0203 	orr.w	r2, r4, r3
                          (((uint32_t)sTime->TimeFormat) << RTC_TR_PM_Pos));
 8006c78:	68bb      	ldr	r3, [r7, #8]
 8006c7a:	78db      	ldrb	r3, [r3, #3]
 8006c7c:	059b      	lsls	r3, r3, #22
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8006c7e:	4313      	orrs	r3, r2
 8006c80:	617b      	str	r3, [r7, #20]
 8006c82:	e018      	b.n	8006cb6 <HAL_RTC_SetTime+0xd0>
    }
    else
    {
      if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8006c84:	68fb      	ldr	r3, [r7, #12]
 8006c86:	681b      	ldr	r3, [r3, #0]
 8006c88:	689b      	ldr	r3, [r3, #8]
 8006c8a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006c8e:	2b00      	cmp	r3, #0
 8006c90:	d102      	bne.n	8006c98 <HAL_RTC_SetTime+0xb2>
        assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 8006c92:	68bb      	ldr	r3, [r7, #8]
 8006c94:	2200      	movs	r2, #0
 8006c96:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
      }
      assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
      assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8006c98:	68bb      	ldr	r3, [r7, #8]
 8006c9a:	781b      	ldrb	r3, [r3, #0]
 8006c9c:	041a      	lsls	r2, r3, #16
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8006c9e:	68bb      	ldr	r3, [r7, #8]
 8006ca0:	785b      	ldrb	r3, [r3, #1]
 8006ca2:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8006ca4:	4313      	orrs	r3, r2
                ((uint32_t)(sTime->Seconds) << RTC_TR_SU_Pos) | \
 8006ca6:	68ba      	ldr	r2, [r7, #8]
 8006ca8:	7892      	ldrb	r2, [r2, #2]
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8006caa:	431a      	orrs	r2, r3
                ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8006cac:	68bb      	ldr	r3, [r7, #8]
 8006cae:	78db      	ldrb	r3, [r3, #3]
 8006cb0:	059b      	lsls	r3, r3, #22
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8006cb2:	4313      	orrs	r3, r2
 8006cb4:	617b      	str	r3, [r7, #20]
    }

    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8006cb6:	68fb      	ldr	r3, [r7, #12]
 8006cb8:	681a      	ldr	r2, [r3, #0]
 8006cba:	697b      	ldr	r3, [r7, #20]
 8006cbc:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8006cc0:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8006cc4:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 8006cc6:	68fb      	ldr	r3, [r7, #12]
 8006cc8:	681b      	ldr	r3, [r3, #0]
 8006cca:	689a      	ldr	r2, [r3, #8]
 8006ccc:	68fb      	ldr	r3, [r7, #12]
 8006cce:	681b      	ldr	r3, [r3, #0]
 8006cd0:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8006cd4:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8006cd6:	68fb      	ldr	r3, [r7, #12]
 8006cd8:	681b      	ldr	r3, [r3, #0]
 8006cda:	6899      	ldr	r1, [r3, #8]
 8006cdc:	68bb      	ldr	r3, [r7, #8]
 8006cde:	68da      	ldr	r2, [r3, #12]
 8006ce0:	68bb      	ldr	r3, [r7, #8]
 8006ce2:	691b      	ldr	r3, [r3, #16]
 8006ce4:	431a      	orrs	r2, r3
 8006ce6:	68fb      	ldr	r3, [r7, #12]
 8006ce8:	681b      	ldr	r3, [r3, #0]
 8006cea:	430a      	orrs	r2, r1
 8006cec:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8006cee:	68f8      	ldr	r0, [r7, #12]
 8006cf0:	f000 f9a0 	bl	8007034 <RTC_ExitInitMode>
 8006cf4:	4603      	mov	r3, r0
 8006cf6:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006cf8:	68fb      	ldr	r3, [r7, #12]
 8006cfa:	681b      	ldr	r3, [r3, #0]
 8006cfc:	22ff      	movs	r2, #255	; 0xff
 8006cfe:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 8006d00:	7cfb      	ldrb	r3, [r7, #19]
 8006d02:	2b00      	cmp	r3, #0
 8006d04:	d103      	bne.n	8006d0e <HAL_RTC_SetTime+0x128>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8006d06:	68fb      	ldr	r3, [r7, #12]
 8006d08:	2201      	movs	r2, #1
 8006d0a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8006d0e:	68fb      	ldr	r3, [r7, #12]
 8006d10:	2200      	movs	r2, #0
 8006d12:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 8006d16:	7cfb      	ldrb	r3, [r7, #19]
}
 8006d18:	4618      	mov	r0, r3
 8006d1a:	371c      	adds	r7, #28
 8006d1c:	46bd      	mov	sp, r7
 8006d1e:	bd90      	pop	{r4, r7, pc}

08006d20 <HAL_RTC_GetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8006d20:	b580      	push	{r7, lr}
 8006d22:	b086      	sub	sp, #24
 8006d24:	af00      	add	r7, sp, #0
 8006d26:	60f8      	str	r0, [r7, #12]
 8006d28:	60b9      	str	r1, [r7, #8]
 8006d2a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds structure field from the corresponding register*/
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8006d2c:	68fb      	ldr	r3, [r7, #12]
 8006d2e:	681b      	ldr	r3, [r3, #0]
 8006d30:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006d32:	68bb      	ldr	r3, [r7, #8]
 8006d34:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8006d36:	68fb      	ldr	r3, [r7, #12]
 8006d38:	681b      	ldr	r3, [r3, #0]
 8006d3a:	691b      	ldr	r3, [r3, #16]
 8006d3c:	f3c3 020e 	ubfx	r2, r3, #0, #15
 8006d40:	68bb      	ldr	r3, [r7, #8]
 8006d42:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8006d44:	68fb      	ldr	r3, [r7, #12]
 8006d46:	681b      	ldr	r3, [r3, #0]
 8006d48:	681b      	ldr	r3, [r3, #0]
 8006d4a:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8006d4e:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8006d52:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> RTC_TR_HU_Pos);
 8006d54:	697b      	ldr	r3, [r7, #20]
 8006d56:	0c1b      	lsrs	r3, r3, #16
 8006d58:	b2db      	uxtb	r3, r3
 8006d5a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006d5e:	b2da      	uxtb	r2, r3
 8006d60:	68bb      	ldr	r3, [r7, #8]
 8006d62:	701a      	strb	r2, [r3, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 8006d64:	697b      	ldr	r3, [r7, #20]
 8006d66:	0a1b      	lsrs	r3, r3, #8
 8006d68:	b2db      	uxtb	r3, r3
 8006d6a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006d6e:	b2da      	uxtb	r2, r3
 8006d70:	68bb      	ldr	r3, [r7, #8]
 8006d72:	705a      	strb	r2, [r3, #1]
  sTime->Seconds = (uint8_t)((tmpreg & (RTC_TR_ST | RTC_TR_SU)) >> RTC_TR_SU_Pos);
 8006d74:	697b      	ldr	r3, [r7, #20]
 8006d76:	b2db      	uxtb	r3, r3
 8006d78:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006d7c:	b2da      	uxtb	r2, r3
 8006d7e:	68bb      	ldr	r3, [r7, #8]
 8006d80:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> RTC_TR_PM_Pos);
 8006d82:	697b      	ldr	r3, [r7, #20]
 8006d84:	0d9b      	lsrs	r3, r3, #22
 8006d86:	b2db      	uxtb	r3, r3
 8006d88:	f003 0301 	and.w	r3, r3, #1
 8006d8c:	b2da      	uxtb	r2, r3
 8006d8e:	68bb      	ldr	r3, [r7, #8]
 8006d90:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	2b00      	cmp	r3, #0
 8006d96:	d11a      	bne.n	8006dce <HAL_RTC_GetTime+0xae>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8006d98:	68bb      	ldr	r3, [r7, #8]
 8006d9a:	781b      	ldrb	r3, [r3, #0]
 8006d9c:	4618      	mov	r0, r3
 8006d9e:	f000 f9a7 	bl	80070f0 <RTC_Bcd2ToByte>
 8006da2:	4603      	mov	r3, r0
 8006da4:	461a      	mov	r2, r3
 8006da6:	68bb      	ldr	r3, [r7, #8]
 8006da8:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8006daa:	68bb      	ldr	r3, [r7, #8]
 8006dac:	785b      	ldrb	r3, [r3, #1]
 8006dae:	4618      	mov	r0, r3
 8006db0:	f000 f99e 	bl	80070f0 <RTC_Bcd2ToByte>
 8006db4:	4603      	mov	r3, r0
 8006db6:	461a      	mov	r2, r3
 8006db8:	68bb      	ldr	r3, [r7, #8]
 8006dba:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8006dbc:	68bb      	ldr	r3, [r7, #8]
 8006dbe:	789b      	ldrb	r3, [r3, #2]
 8006dc0:	4618      	mov	r0, r3
 8006dc2:	f000 f995 	bl	80070f0 <RTC_Bcd2ToByte>
 8006dc6:	4603      	mov	r3, r0
 8006dc8:	461a      	mov	r2, r3
 8006dca:	68bb      	ldr	r3, [r7, #8]
 8006dcc:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 8006dce:	2300      	movs	r3, #0
}
 8006dd0:	4618      	mov	r0, r3
 8006dd2:	3718      	adds	r7, #24
 8006dd4:	46bd      	mov	sp, r7
 8006dd6:	bd80      	pop	{r7, pc}

08006dd8 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8006dd8:	b590      	push	{r4, r7, lr}
 8006dda:	b087      	sub	sp, #28
 8006ddc:	af00      	add	r7, sp, #0
 8006dde:	60f8      	str	r0, [r7, #12]
 8006de0:	60b9      	str	r1, [r7, #8]
 8006de2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8006de4:	68fb      	ldr	r3, [r7, #12]
 8006de6:	f893 3020 	ldrb.w	r3, [r3, #32]
 8006dea:	2b01      	cmp	r3, #1
 8006dec:	d101      	bne.n	8006df2 <HAL_RTC_SetDate+0x1a>
 8006dee:	2302      	movs	r3, #2
 8006df0:	e075      	b.n	8006ede <HAL_RTC_SetDate+0x106>
 8006df2:	68fb      	ldr	r3, [r7, #12]
 8006df4:	2201      	movs	r2, #1
 8006df6:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8006dfa:	68fb      	ldr	r3, [r7, #12]
 8006dfc:	2202      	movs	r2, #2
 8006dfe:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	2b00      	cmp	r3, #0
 8006e06:	d10e      	bne.n	8006e26 <HAL_RTC_SetDate+0x4e>
 8006e08:	68bb      	ldr	r3, [r7, #8]
 8006e0a:	785b      	ldrb	r3, [r3, #1]
 8006e0c:	f003 0310 	and.w	r3, r3, #16
 8006e10:	2b00      	cmp	r3, #0
 8006e12:	d008      	beq.n	8006e26 <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8006e14:	68bb      	ldr	r3, [r7, #8]
 8006e16:	785b      	ldrb	r3, [r3, #1]
 8006e18:	f023 0310 	bic.w	r3, r3, #16
 8006e1c:	b2db      	uxtb	r3, r3
 8006e1e:	330a      	adds	r3, #10
 8006e20:	b2da      	uxtb	r2, r3
 8006e22:	68bb      	ldr	r3, [r7, #8]
 8006e24:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	2b00      	cmp	r3, #0
 8006e2a:	d11c      	bne.n	8006e66 <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 8006e2c:	68bb      	ldr	r3, [r7, #8]
 8006e2e:	78db      	ldrb	r3, [r3, #3]
 8006e30:	4618      	mov	r0, r3
 8006e32:	f000 f93d 	bl	80070b0 <RTC_ByteToBcd2>
 8006e36:	4603      	mov	r3, r0
 8006e38:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8006e3a:	68bb      	ldr	r3, [r7, #8]
 8006e3c:	785b      	ldrb	r3, [r3, #1]
 8006e3e:	4618      	mov	r0, r3
 8006e40:	f000 f936 	bl	80070b0 <RTC_ByteToBcd2>
 8006e44:	4603      	mov	r3, r0
 8006e46:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 8006e48:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date) << RTC_DR_DU_Pos) | \
 8006e4a:	68bb      	ldr	r3, [r7, #8]
 8006e4c:	789b      	ldrb	r3, [r3, #2]
 8006e4e:	4618      	mov	r0, r3
 8006e50:	f000 f92e 	bl	80070b0 <RTC_ByteToBcd2>
 8006e54:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8006e56:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay << RTC_DR_WDU_Pos));
 8006e5a:	68bb      	ldr	r3, [r7, #8]
 8006e5c:	781b      	ldrb	r3, [r3, #0]
 8006e5e:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 8006e60:	4313      	orrs	r3, r2
 8006e62:	617b      	str	r3, [r7, #20]
 8006e64:	e00e      	b.n	8006e84 <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8006e66:	68bb      	ldr	r3, [r7, #8]
 8006e68:	78db      	ldrb	r3, [r3, #3]
 8006e6a:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 8006e6c:	68bb      	ldr	r3, [r7, #8]
 8006e6e:	785b      	ldrb	r3, [r3, #1]
 8006e70:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8006e72:	4313      	orrs	r3, r2
                  (((uint32_t)sDate->Date) << RTC_DR_DU_Pos) | \
 8006e74:	68ba      	ldr	r2, [r7, #8]
 8006e76:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 8006e78:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 8006e7a:	68bb      	ldr	r3, [r7, #8]
 8006e7c:	781b      	ldrb	r3, [r3, #0]
 8006e7e:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8006e80:	4313      	orrs	r3, r2
 8006e82:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8006e84:	68fb      	ldr	r3, [r7, #12]
 8006e86:	681b      	ldr	r3, [r3, #0]
 8006e88:	22ca      	movs	r2, #202	; 0xca
 8006e8a:	625a      	str	r2, [r3, #36]	; 0x24
 8006e8c:	68fb      	ldr	r3, [r7, #12]
 8006e8e:	681b      	ldr	r3, [r3, #0]
 8006e90:	2253      	movs	r2, #83	; 0x53
 8006e92:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8006e94:	68f8      	ldr	r0, [r7, #12]
 8006e96:	f000 f899 	bl	8006fcc <RTC_EnterInitMode>
 8006e9a:	4603      	mov	r3, r0
 8006e9c:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 8006e9e:	7cfb      	ldrb	r3, [r7, #19]
 8006ea0:	2b00      	cmp	r3, #0
 8006ea2:	d10c      	bne.n	8006ebe <HAL_RTC_SetDate+0xe6>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8006ea4:	68fb      	ldr	r3, [r7, #12]
 8006ea6:	681a      	ldr	r2, [r3, #0]
 8006ea8:	697b      	ldr	r3, [r7, #20]
 8006eaa:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8006eae:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8006eb2:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8006eb4:	68f8      	ldr	r0, [r7, #12]
 8006eb6:	f000 f8bd 	bl	8007034 <RTC_ExitInitMode>
 8006eba:	4603      	mov	r3, r0
 8006ebc:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006ebe:	68fb      	ldr	r3, [r7, #12]
 8006ec0:	681b      	ldr	r3, [r3, #0]
 8006ec2:	22ff      	movs	r2, #255	; 0xff
 8006ec4:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 8006ec6:	7cfb      	ldrb	r3, [r7, #19]
 8006ec8:	2b00      	cmp	r3, #0
 8006eca:	d103      	bne.n	8006ed4 <HAL_RTC_SetDate+0xfc>
  {
    hrtc->State = HAL_RTC_STATE_READY ;
 8006ecc:	68fb      	ldr	r3, [r7, #12]
 8006ece:	2201      	movs	r2, #1
 8006ed0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8006ed4:	68fb      	ldr	r3, [r7, #12]
 8006ed6:	2200      	movs	r2, #0
 8006ed8:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 8006edc:	7cfb      	ldrb	r3, [r7, #19]
}
 8006ede:	4618      	mov	r0, r3
 8006ee0:	371c      	adds	r7, #28
 8006ee2:	46bd      	mov	sp, r7
 8006ee4:	bd90      	pop	{r4, r7, pc}

08006ee6 <HAL_RTC_GetDate>:
  *            @arg RTC_FORMAT_BIN:  Binary data format
  *            @arg RTC_FORMAT_BCD:  BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8006ee6:	b580      	push	{r7, lr}
 8006ee8:	b086      	sub	sp, #24
 8006eea:	af00      	add	r7, sp, #0
 8006eec:	60f8      	str	r0, [r7, #12]
 8006eee:	60b9      	str	r1, [r7, #8]
 8006ef0:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 8006ef2:	68fb      	ldr	r3, [r7, #12]
 8006ef4:	681b      	ldr	r3, [r3, #0]
 8006ef6:	685b      	ldr	r3, [r3, #4]
 8006ef8:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8006efc:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8006f00:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 8006f02:	697b      	ldr	r3, [r7, #20]
 8006f04:	0c1b      	lsrs	r3, r3, #16
 8006f06:	b2da      	uxtb	r2, r3
 8006f08:	68bb      	ldr	r3, [r7, #8]
 8006f0a:	70da      	strb	r2, [r3, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 8006f0c:	697b      	ldr	r3, [r7, #20]
 8006f0e:	0a1b      	lsrs	r3, r3, #8
 8006f10:	b2db      	uxtb	r3, r3
 8006f12:	f003 031f 	and.w	r3, r3, #31
 8006f16:	b2da      	uxtb	r2, r3
 8006f18:	68bb      	ldr	r3, [r7, #8]
 8006f1a:	705a      	strb	r2, [r3, #1]
  sDate->Date = (uint8_t)((datetmpreg & (RTC_DR_DT | RTC_DR_DU)) >> RTC_DR_DU_Pos);
 8006f1c:	697b      	ldr	r3, [r7, #20]
 8006f1e:	b2db      	uxtb	r3, r3
 8006f20:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006f24:	b2da      	uxtb	r2, r3
 8006f26:	68bb      	ldr	r3, [r7, #8]
 8006f28:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> RTC_DR_WDU_Pos);
 8006f2a:	697b      	ldr	r3, [r7, #20]
 8006f2c:	0b5b      	lsrs	r3, r3, #13
 8006f2e:	b2db      	uxtb	r3, r3
 8006f30:	f003 0307 	and.w	r3, r3, #7
 8006f34:	b2da      	uxtb	r2, r3
 8006f36:	68bb      	ldr	r3, [r7, #8]
 8006f38:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	2b00      	cmp	r3, #0
 8006f3e:	d11a      	bne.n	8006f76 <HAL_RTC_GetDate+0x90>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8006f40:	68bb      	ldr	r3, [r7, #8]
 8006f42:	78db      	ldrb	r3, [r3, #3]
 8006f44:	4618      	mov	r0, r3
 8006f46:	f000 f8d3 	bl	80070f0 <RTC_Bcd2ToByte>
 8006f4a:	4603      	mov	r3, r0
 8006f4c:	461a      	mov	r2, r3
 8006f4e:	68bb      	ldr	r3, [r7, #8]
 8006f50:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8006f52:	68bb      	ldr	r3, [r7, #8]
 8006f54:	785b      	ldrb	r3, [r3, #1]
 8006f56:	4618      	mov	r0, r3
 8006f58:	f000 f8ca 	bl	80070f0 <RTC_Bcd2ToByte>
 8006f5c:	4603      	mov	r3, r0
 8006f5e:	461a      	mov	r2, r3
 8006f60:	68bb      	ldr	r3, [r7, #8]
 8006f62:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8006f64:	68bb      	ldr	r3, [r7, #8]
 8006f66:	789b      	ldrb	r3, [r3, #2]
 8006f68:	4618      	mov	r0, r3
 8006f6a:	f000 f8c1 	bl	80070f0 <RTC_Bcd2ToByte>
 8006f6e:	4603      	mov	r3, r0
 8006f70:	461a      	mov	r2, r3
 8006f72:	68bb      	ldr	r3, [r7, #8]
 8006f74:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8006f76:	2300      	movs	r3, #0
}
 8006f78:	4618      	mov	r0, r3
 8006f7a:	3718      	adds	r7, #24
 8006f7c:	46bd      	mov	sp, r7
 8006f7e:	bd80      	pop	{r7, pc}

08006f80 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8006f80:	b580      	push	{r7, lr}
 8006f82:	b084      	sub	sp, #16
 8006f84:	af00      	add	r7, sp, #0
 8006f86:	6078      	str	r0, [r7, #4]

  /* Clear RSF flag */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  hrtc->Instance->ICSR &= (uint32_t)RTC_RSF_MASK;
#else
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	681b      	ldr	r3, [r3, #0]
 8006f8c:	68da      	ldr	r2, [r3, #12]
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	681b      	ldr	r3, [r3, #0]
 8006f92:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8006f96:	60da      	str	r2, [r3, #12]
#endif

  tickstart = HAL_GetTick();
 8006f98:	f7fd ff22 	bl	8004de0 <HAL_GetTick>
 8006f9c:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
#else
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8006f9e:	e009      	b.n	8006fb4 <HAL_RTC_WaitForSynchro+0x34>
#endif
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8006fa0:	f7fd ff1e 	bl	8004de0 <HAL_GetTick>
 8006fa4:	4602      	mov	r2, r0
 8006fa6:	68fb      	ldr	r3, [r7, #12]
 8006fa8:	1ad3      	subs	r3, r2, r3
 8006faa:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006fae:	d901      	bls.n	8006fb4 <HAL_RTC_WaitForSynchro+0x34>
    {
      return HAL_TIMEOUT;
 8006fb0:	2303      	movs	r3, #3
 8006fb2:	e007      	b.n	8006fc4 <HAL_RTC_WaitForSynchro+0x44>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	681b      	ldr	r3, [r3, #0]
 8006fb8:	68db      	ldr	r3, [r3, #12]
 8006fba:	f003 0320 	and.w	r3, r3, #32
 8006fbe:	2b00      	cmp	r3, #0
 8006fc0:	d0ee      	beq.n	8006fa0 <HAL_RTC_WaitForSynchro+0x20>
    }
  }

  return HAL_OK;
 8006fc2:	2300      	movs	r3, #0
}
 8006fc4:	4618      	mov	r0, r3
 8006fc6:	3710      	adds	r7, #16
 8006fc8:	46bd      	mov	sp, r7
 8006fca:	bd80      	pop	{r7, pc}

08006fcc <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8006fcc:	b580      	push	{r7, lr}
 8006fce:	b084      	sub	sp, #16
 8006fd0:	af00      	add	r7, sp, #0
 8006fd2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006fd4:	2300      	movs	r3, #0
 8006fd6:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
      }
    }
  }
#else /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	681b      	ldr	r3, [r3, #0]
 8006fdc:	68db      	ldr	r3, [r3, #12]
 8006fde:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006fe2:	2b00      	cmp	r3, #0
 8006fe4:	d120      	bne.n	8007028 <RTC_EnterInitMode+0x5c>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	681b      	ldr	r3, [r3, #0]
 8006fea:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006fee:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8006ff0:	f7fd fef6 	bl	8004de0 <HAL_GetTick>
 8006ff4:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8006ff6:	e00d      	b.n	8007014 <RTC_EnterInitMode+0x48>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8006ff8:	f7fd fef2 	bl	8004de0 <HAL_GetTick>
 8006ffc:	4602      	mov	r2, r0
 8006ffe:	68bb      	ldr	r3, [r7, #8]
 8007000:	1ad3      	subs	r3, r2, r3
 8007002:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007006:	d905      	bls.n	8007014 <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 8007008:	2303      	movs	r3, #3
 800700a:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	2203      	movs	r2, #3
 8007010:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	681b      	ldr	r3, [r3, #0]
 8007018:	68db      	ldr	r3, [r3, #12]
 800701a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800701e:	2b00      	cmp	r3, #0
 8007020:	d102      	bne.n	8007028 <RTC_EnterInitMode+0x5c>
 8007022:	7bfb      	ldrb	r3, [r7, #15]
 8007024:	2b03      	cmp	r3, #3
 8007026:	d1e7      	bne.n	8006ff8 <RTC_EnterInitMode+0x2c>
      }
    }
  }
#endif /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */

  return status;
 8007028:	7bfb      	ldrb	r3, [r7, #15]
}
 800702a:	4618      	mov	r0, r3
 800702c:	3710      	adds	r7, #16
 800702e:	46bd      	mov	sp, r7
 8007030:	bd80      	pop	{r7, pc}
	...

08007034 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8007034:	b580      	push	{r7, lr}
 8007036:	b084      	sub	sp, #16
 8007038:	af00      	add	r7, sp, #0
 800703a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800703c:	2300      	movs	r3, #0
 800703e:	73fb      	strb	r3, [r7, #15]
  /* Exit Initialization mode */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined(STM32L4P5xx) || defined(STM32L4Q5xx)
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
#else
  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ISR, RTC_ISR_INIT);
 8007040:	4b1a      	ldr	r3, [pc, #104]	; (80070ac <RTC_ExitInitMode+0x78>)
 8007042:	68db      	ldr	r3, [r3, #12]
 8007044:	4a19      	ldr	r2, [pc, #100]	; (80070ac <RTC_ExitInitMode+0x78>)
 8007046:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800704a:	60d3      	str	r3, [r2, #12]
#endif

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 800704c:	4b17      	ldr	r3, [pc, #92]	; (80070ac <RTC_ExitInitMode+0x78>)
 800704e:	689b      	ldr	r3, [r3, #8]
 8007050:	f003 0320 	and.w	r3, r3, #32
 8007054:	2b00      	cmp	r3, #0
 8007056:	d10c      	bne.n	8007072 <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8007058:	6878      	ldr	r0, [r7, #4]
 800705a:	f7ff ff91 	bl	8006f80 <HAL_RTC_WaitForSynchro>
 800705e:	4603      	mov	r3, r0
 8007060:	2b00      	cmp	r3, #0
 8007062:	d01e      	beq.n	80070a2 <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	2203      	movs	r2, #3
 8007068:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 800706c:	2303      	movs	r3, #3
 800706e:	73fb      	strb	r3, [r7, #15]
 8007070:	e017      	b.n	80070a2 <RTC_ExitInitMode+0x6e>
    }
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8007072:	4b0e      	ldr	r3, [pc, #56]	; (80070ac <RTC_ExitInitMode+0x78>)
 8007074:	689b      	ldr	r3, [r3, #8]
 8007076:	4a0d      	ldr	r2, [pc, #52]	; (80070ac <RTC_ExitInitMode+0x78>)
 8007078:	f023 0320 	bic.w	r3, r3, #32
 800707c:	6093      	str	r3, [r2, #8]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800707e:	6878      	ldr	r0, [r7, #4]
 8007080:	f7ff ff7e 	bl	8006f80 <HAL_RTC_WaitForSynchro>
 8007084:	4603      	mov	r3, r0
 8007086:	2b00      	cmp	r3, #0
 8007088:	d005      	beq.n	8007096 <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	2203      	movs	r2, #3
 800708e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 8007092:	2303      	movs	r3, #3
 8007094:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8007096:	4b05      	ldr	r3, [pc, #20]	; (80070ac <RTC_ExitInitMode+0x78>)
 8007098:	689b      	ldr	r3, [r3, #8]
 800709a:	4a04      	ldr	r2, [pc, #16]	; (80070ac <RTC_ExitInitMode+0x78>)
 800709c:	f043 0320 	orr.w	r3, r3, #32
 80070a0:	6093      	str	r3, [r2, #8]
  }

  return status;
 80070a2:	7bfb      	ldrb	r3, [r7, #15]
}
 80070a4:	4618      	mov	r0, r3
 80070a6:	3710      	adds	r7, #16
 80070a8:	46bd      	mov	sp, r7
 80070aa:	bd80      	pop	{r7, pc}
 80070ac:	40002800 	.word	0x40002800

080070b0 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 80070b0:	b480      	push	{r7}
 80070b2:	b085      	sub	sp, #20
 80070b4:	af00      	add	r7, sp, #0
 80070b6:	4603      	mov	r3, r0
 80070b8:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 80070ba:	2300      	movs	r3, #0
 80070bc:	60fb      	str	r3, [r7, #12]
  uint8_t temp = Value;
 80070be:	79fb      	ldrb	r3, [r7, #7]
 80070c0:	72fb      	strb	r3, [r7, #11]

  while (temp >= 10U)
 80070c2:	e005      	b.n	80070d0 <RTC_ByteToBcd2+0x20>
  {
    bcdhigh++;
 80070c4:	68fb      	ldr	r3, [r7, #12]
 80070c6:	3301      	adds	r3, #1
 80070c8:	60fb      	str	r3, [r7, #12]
    temp -= 10U;
 80070ca:	7afb      	ldrb	r3, [r7, #11]
 80070cc:	3b0a      	subs	r3, #10
 80070ce:	72fb      	strb	r3, [r7, #11]
  while (temp >= 10U)
 80070d0:	7afb      	ldrb	r3, [r7, #11]
 80070d2:	2b09      	cmp	r3, #9
 80070d4:	d8f6      	bhi.n	80070c4 <RTC_ByteToBcd2+0x14>
  }

  return ((uint8_t)(bcdhigh << 4U) | temp);
 80070d6:	68fb      	ldr	r3, [r7, #12]
 80070d8:	b2db      	uxtb	r3, r3
 80070da:	011b      	lsls	r3, r3, #4
 80070dc:	b2da      	uxtb	r2, r3
 80070de:	7afb      	ldrb	r3, [r7, #11]
 80070e0:	4313      	orrs	r3, r2
 80070e2:	b2db      	uxtb	r3, r3
}
 80070e4:	4618      	mov	r0, r3
 80070e6:	3714      	adds	r7, #20
 80070e8:	46bd      	mov	sp, r7
 80070ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070ee:	4770      	bx	lr

080070f0 <RTC_Bcd2ToByte>:
  * @brief  Convert from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 80070f0:	b480      	push	{r7}
 80070f2:	b085      	sub	sp, #20
 80070f4:	af00      	add	r7, sp, #0
 80070f6:	4603      	mov	r3, r0
 80070f8:	71fb      	strb	r3, [r7, #7]
  uint8_t tmp;
  tmp = ((Value & 0xF0U) >> 4U) * 10U;
 80070fa:	79fb      	ldrb	r3, [r7, #7]
 80070fc:	091b      	lsrs	r3, r3, #4
 80070fe:	b2db      	uxtb	r3, r3
 8007100:	461a      	mov	r2, r3
 8007102:	0092      	lsls	r2, r2, #2
 8007104:	4413      	add	r3, r2
 8007106:	005b      	lsls	r3, r3, #1
 8007108:	73fb      	strb	r3, [r7, #15]
  return (tmp + (Value & 0x0FU));
 800710a:	79fb      	ldrb	r3, [r7, #7]
 800710c:	f003 030f 	and.w	r3, r3, #15
 8007110:	b2da      	uxtb	r2, r3
 8007112:	7bfb      	ldrb	r3, [r7, #15]
 8007114:	4413      	add	r3, r2
 8007116:	b2db      	uxtb	r3, r3
}
 8007118:	4618      	mov	r0, r3
 800711a:	3714      	adds	r7, #20
 800711c:	46bd      	mov	sp, r7
 800711e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007122:	4770      	bx	lr

08007124 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007124:	b580      	push	{r7, lr}
 8007126:	b082      	sub	sp, #8
 8007128:	af00      	add	r7, sp, #0
 800712a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	2b00      	cmp	r3, #0
 8007130:	d101      	bne.n	8007136 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007132:	2301      	movs	r3, #1
 8007134:	e049      	b.n	80071ca <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800713c:	b2db      	uxtb	r3, r3
 800713e:	2b00      	cmp	r3, #0
 8007140:	d106      	bne.n	8007150 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	2200      	movs	r2, #0
 8007146:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800714a:	6878      	ldr	r0, [r7, #4]
 800714c:	f7fd fbbc 	bl	80048c8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	2202      	movs	r2, #2
 8007154:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	681a      	ldr	r2, [r3, #0]
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	3304      	adds	r3, #4
 8007160:	4619      	mov	r1, r3
 8007162:	4610      	mov	r0, r2
 8007164:	f000 fca4 	bl	8007ab0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	2201      	movs	r2, #1
 800716c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	2201      	movs	r2, #1
 8007174:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	2201      	movs	r2, #1
 800717c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	2201      	movs	r2, #1
 8007184:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	2201      	movs	r2, #1
 800718c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	2201      	movs	r2, #1
 8007194:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	2201      	movs	r2, #1
 800719c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	2201      	movs	r2, #1
 80071a4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	2201      	movs	r2, #1
 80071ac:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	2201      	movs	r2, #1
 80071b4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	2201      	movs	r2, #1
 80071bc:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	2201      	movs	r2, #1
 80071c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80071c8:	2300      	movs	r3, #0
}
 80071ca:	4618      	mov	r0, r3
 80071cc:	3708      	adds	r7, #8
 80071ce:	46bd      	mov	sp, r7
 80071d0:	bd80      	pop	{r7, pc}
	...

080071d4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80071d4:	b480      	push	{r7}
 80071d6:	b085      	sub	sp, #20
 80071d8:	af00      	add	r7, sp, #0
 80071da:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80071e2:	b2db      	uxtb	r3, r3
 80071e4:	2b01      	cmp	r3, #1
 80071e6:	d001      	beq.n	80071ec <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80071e8:	2301      	movs	r3, #1
 80071ea:	e03b      	b.n	8007264 <HAL_TIM_Base_Start_IT+0x90>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	2202      	movs	r2, #2
 80071f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	681b      	ldr	r3, [r3, #0]
 80071f8:	68da      	ldr	r2, [r3, #12]
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	681b      	ldr	r3, [r3, #0]
 80071fe:	f042 0201 	orr.w	r2, r2, #1
 8007202:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	681b      	ldr	r3, [r3, #0]
 8007208:	4a19      	ldr	r2, [pc, #100]	; (8007270 <HAL_TIM_Base_Start_IT+0x9c>)
 800720a:	4293      	cmp	r3, r2
 800720c:	d009      	beq.n	8007222 <HAL_TIM_Base_Start_IT+0x4e>
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	681b      	ldr	r3, [r3, #0]
 8007212:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007216:	d004      	beq.n	8007222 <HAL_TIM_Base_Start_IT+0x4e>
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	681b      	ldr	r3, [r3, #0]
 800721c:	4a15      	ldr	r2, [pc, #84]	; (8007274 <HAL_TIM_Base_Start_IT+0xa0>)
 800721e:	4293      	cmp	r3, r2
 8007220:	d115      	bne.n	800724e <HAL_TIM_Base_Start_IT+0x7a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	681b      	ldr	r3, [r3, #0]
 8007226:	689a      	ldr	r2, [r3, #8]
 8007228:	4b13      	ldr	r3, [pc, #76]	; (8007278 <HAL_TIM_Base_Start_IT+0xa4>)
 800722a:	4013      	ands	r3, r2
 800722c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800722e:	68fb      	ldr	r3, [r7, #12]
 8007230:	2b06      	cmp	r3, #6
 8007232:	d015      	beq.n	8007260 <HAL_TIM_Base_Start_IT+0x8c>
 8007234:	68fb      	ldr	r3, [r7, #12]
 8007236:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800723a:	d011      	beq.n	8007260 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	681b      	ldr	r3, [r3, #0]
 8007240:	681a      	ldr	r2, [r3, #0]
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	681b      	ldr	r3, [r3, #0]
 8007246:	f042 0201 	orr.w	r2, r2, #1
 800724a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800724c:	e008      	b.n	8007260 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	681b      	ldr	r3, [r3, #0]
 8007252:	681a      	ldr	r2, [r3, #0]
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	681b      	ldr	r3, [r3, #0]
 8007258:	f042 0201 	orr.w	r2, r2, #1
 800725c:	601a      	str	r2, [r3, #0]
 800725e:	e000      	b.n	8007262 <HAL_TIM_Base_Start_IT+0x8e>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007260:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8007262:	2300      	movs	r3, #0
}
 8007264:	4618      	mov	r0, r3
 8007266:	3714      	adds	r7, #20
 8007268:	46bd      	mov	sp, r7
 800726a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800726e:	4770      	bx	lr
 8007270:	40012c00 	.word	0x40012c00
 8007274:	40014000 	.word	0x40014000
 8007278:	00010007 	.word	0x00010007

0800727c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800727c:	b580      	push	{r7, lr}
 800727e:	b082      	sub	sp, #8
 8007280:	af00      	add	r7, sp, #0
 8007282:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	2b00      	cmp	r3, #0
 8007288:	d101      	bne.n	800728e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800728a:	2301      	movs	r3, #1
 800728c:	e049      	b.n	8007322 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007294:	b2db      	uxtb	r3, r3
 8007296:	2b00      	cmp	r3, #0
 8007298:	d106      	bne.n	80072a8 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	2200      	movs	r2, #0
 800729e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80072a2:	6878      	ldr	r0, [r7, #4]
 80072a4:	f7fd faf2 	bl	800488c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	2202      	movs	r2, #2
 80072ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	681a      	ldr	r2, [r3, #0]
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	3304      	adds	r3, #4
 80072b8:	4619      	mov	r1, r3
 80072ba:	4610      	mov	r0, r2
 80072bc:	f000 fbf8 	bl	8007ab0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	2201      	movs	r2, #1
 80072c4:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	2201      	movs	r2, #1
 80072cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	2201      	movs	r2, #1
 80072d4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	2201      	movs	r2, #1
 80072dc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	2201      	movs	r2, #1
 80072e4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	2201      	movs	r2, #1
 80072ec:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	2201      	movs	r2, #1
 80072f4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	2201      	movs	r2, #1
 80072fc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	2201      	movs	r2, #1
 8007304:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	2201      	movs	r2, #1
 800730c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	2201      	movs	r2, #1
 8007314:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	2201      	movs	r2, #1
 800731c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007320:	2300      	movs	r3, #0
}
 8007322:	4618      	mov	r0, r3
 8007324:	3708      	adds	r7, #8
 8007326:	46bd      	mov	sp, r7
 8007328:	bd80      	pop	{r7, pc}
	...

0800732c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800732c:	b580      	push	{r7, lr}
 800732e:	b084      	sub	sp, #16
 8007330:	af00      	add	r7, sp, #0
 8007332:	6078      	str	r0, [r7, #4]
 8007334:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8007336:	683b      	ldr	r3, [r7, #0]
 8007338:	2b00      	cmp	r3, #0
 800733a:	d109      	bne.n	8007350 <HAL_TIM_PWM_Start+0x24>
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007342:	b2db      	uxtb	r3, r3
 8007344:	2b01      	cmp	r3, #1
 8007346:	bf14      	ite	ne
 8007348:	2301      	movne	r3, #1
 800734a:	2300      	moveq	r3, #0
 800734c:	b2db      	uxtb	r3, r3
 800734e:	e03c      	b.n	80073ca <HAL_TIM_PWM_Start+0x9e>
 8007350:	683b      	ldr	r3, [r7, #0]
 8007352:	2b04      	cmp	r3, #4
 8007354:	d109      	bne.n	800736a <HAL_TIM_PWM_Start+0x3e>
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800735c:	b2db      	uxtb	r3, r3
 800735e:	2b01      	cmp	r3, #1
 8007360:	bf14      	ite	ne
 8007362:	2301      	movne	r3, #1
 8007364:	2300      	moveq	r3, #0
 8007366:	b2db      	uxtb	r3, r3
 8007368:	e02f      	b.n	80073ca <HAL_TIM_PWM_Start+0x9e>
 800736a:	683b      	ldr	r3, [r7, #0]
 800736c:	2b08      	cmp	r3, #8
 800736e:	d109      	bne.n	8007384 <HAL_TIM_PWM_Start+0x58>
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007376:	b2db      	uxtb	r3, r3
 8007378:	2b01      	cmp	r3, #1
 800737a:	bf14      	ite	ne
 800737c:	2301      	movne	r3, #1
 800737e:	2300      	moveq	r3, #0
 8007380:	b2db      	uxtb	r3, r3
 8007382:	e022      	b.n	80073ca <HAL_TIM_PWM_Start+0x9e>
 8007384:	683b      	ldr	r3, [r7, #0]
 8007386:	2b0c      	cmp	r3, #12
 8007388:	d109      	bne.n	800739e <HAL_TIM_PWM_Start+0x72>
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007390:	b2db      	uxtb	r3, r3
 8007392:	2b01      	cmp	r3, #1
 8007394:	bf14      	ite	ne
 8007396:	2301      	movne	r3, #1
 8007398:	2300      	moveq	r3, #0
 800739a:	b2db      	uxtb	r3, r3
 800739c:	e015      	b.n	80073ca <HAL_TIM_PWM_Start+0x9e>
 800739e:	683b      	ldr	r3, [r7, #0]
 80073a0:	2b10      	cmp	r3, #16
 80073a2:	d109      	bne.n	80073b8 <HAL_TIM_PWM_Start+0x8c>
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80073aa:	b2db      	uxtb	r3, r3
 80073ac:	2b01      	cmp	r3, #1
 80073ae:	bf14      	ite	ne
 80073b0:	2301      	movne	r3, #1
 80073b2:	2300      	moveq	r3, #0
 80073b4:	b2db      	uxtb	r3, r3
 80073b6:	e008      	b.n	80073ca <HAL_TIM_PWM_Start+0x9e>
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80073be:	b2db      	uxtb	r3, r3
 80073c0:	2b01      	cmp	r3, #1
 80073c2:	bf14      	ite	ne
 80073c4:	2301      	movne	r3, #1
 80073c6:	2300      	moveq	r3, #0
 80073c8:	b2db      	uxtb	r3, r3
 80073ca:	2b00      	cmp	r3, #0
 80073cc:	d001      	beq.n	80073d2 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 80073ce:	2301      	movs	r3, #1
 80073d0:	e07e      	b.n	80074d0 <HAL_TIM_PWM_Start+0x1a4>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80073d2:	683b      	ldr	r3, [r7, #0]
 80073d4:	2b00      	cmp	r3, #0
 80073d6:	d104      	bne.n	80073e2 <HAL_TIM_PWM_Start+0xb6>
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	2202      	movs	r2, #2
 80073dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80073e0:	e023      	b.n	800742a <HAL_TIM_PWM_Start+0xfe>
 80073e2:	683b      	ldr	r3, [r7, #0]
 80073e4:	2b04      	cmp	r3, #4
 80073e6:	d104      	bne.n	80073f2 <HAL_TIM_PWM_Start+0xc6>
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	2202      	movs	r2, #2
 80073ec:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80073f0:	e01b      	b.n	800742a <HAL_TIM_PWM_Start+0xfe>
 80073f2:	683b      	ldr	r3, [r7, #0]
 80073f4:	2b08      	cmp	r3, #8
 80073f6:	d104      	bne.n	8007402 <HAL_TIM_PWM_Start+0xd6>
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	2202      	movs	r2, #2
 80073fc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007400:	e013      	b.n	800742a <HAL_TIM_PWM_Start+0xfe>
 8007402:	683b      	ldr	r3, [r7, #0]
 8007404:	2b0c      	cmp	r3, #12
 8007406:	d104      	bne.n	8007412 <HAL_TIM_PWM_Start+0xe6>
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	2202      	movs	r2, #2
 800740c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8007410:	e00b      	b.n	800742a <HAL_TIM_PWM_Start+0xfe>
 8007412:	683b      	ldr	r3, [r7, #0]
 8007414:	2b10      	cmp	r3, #16
 8007416:	d104      	bne.n	8007422 <HAL_TIM_PWM_Start+0xf6>
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	2202      	movs	r2, #2
 800741c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007420:	e003      	b.n	800742a <HAL_TIM_PWM_Start+0xfe>
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	2202      	movs	r2, #2
 8007426:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	681b      	ldr	r3, [r3, #0]
 800742e:	2201      	movs	r2, #1
 8007430:	6839      	ldr	r1, [r7, #0]
 8007432:	4618      	mov	r0, r3
 8007434:	f000 fe1e 	bl	8008074 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	681b      	ldr	r3, [r3, #0]
 800743c:	4a26      	ldr	r2, [pc, #152]	; (80074d8 <HAL_TIM_PWM_Start+0x1ac>)
 800743e:	4293      	cmp	r3, r2
 8007440:	d009      	beq.n	8007456 <HAL_TIM_PWM_Start+0x12a>
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	681b      	ldr	r3, [r3, #0]
 8007446:	4a25      	ldr	r2, [pc, #148]	; (80074dc <HAL_TIM_PWM_Start+0x1b0>)
 8007448:	4293      	cmp	r3, r2
 800744a:	d004      	beq.n	8007456 <HAL_TIM_PWM_Start+0x12a>
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	681b      	ldr	r3, [r3, #0]
 8007450:	4a23      	ldr	r2, [pc, #140]	; (80074e0 <HAL_TIM_PWM_Start+0x1b4>)
 8007452:	4293      	cmp	r3, r2
 8007454:	d101      	bne.n	800745a <HAL_TIM_PWM_Start+0x12e>
 8007456:	2301      	movs	r3, #1
 8007458:	e000      	b.n	800745c <HAL_TIM_PWM_Start+0x130>
 800745a:	2300      	movs	r3, #0
 800745c:	2b00      	cmp	r3, #0
 800745e:	d007      	beq.n	8007470 <HAL_TIM_PWM_Start+0x144>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	681b      	ldr	r3, [r3, #0]
 8007464:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	681b      	ldr	r3, [r3, #0]
 800746a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800746e:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	681b      	ldr	r3, [r3, #0]
 8007474:	4a18      	ldr	r2, [pc, #96]	; (80074d8 <HAL_TIM_PWM_Start+0x1ac>)
 8007476:	4293      	cmp	r3, r2
 8007478:	d009      	beq.n	800748e <HAL_TIM_PWM_Start+0x162>
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	681b      	ldr	r3, [r3, #0]
 800747e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007482:	d004      	beq.n	800748e <HAL_TIM_PWM_Start+0x162>
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	681b      	ldr	r3, [r3, #0]
 8007488:	4a14      	ldr	r2, [pc, #80]	; (80074dc <HAL_TIM_PWM_Start+0x1b0>)
 800748a:	4293      	cmp	r3, r2
 800748c:	d115      	bne.n	80074ba <HAL_TIM_PWM_Start+0x18e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	681b      	ldr	r3, [r3, #0]
 8007492:	689a      	ldr	r2, [r3, #8]
 8007494:	4b13      	ldr	r3, [pc, #76]	; (80074e4 <HAL_TIM_PWM_Start+0x1b8>)
 8007496:	4013      	ands	r3, r2
 8007498:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800749a:	68fb      	ldr	r3, [r7, #12]
 800749c:	2b06      	cmp	r3, #6
 800749e:	d015      	beq.n	80074cc <HAL_TIM_PWM_Start+0x1a0>
 80074a0:	68fb      	ldr	r3, [r7, #12]
 80074a2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80074a6:	d011      	beq.n	80074cc <HAL_TIM_PWM_Start+0x1a0>
    {
      __HAL_TIM_ENABLE(htim);
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	681b      	ldr	r3, [r3, #0]
 80074ac:	681a      	ldr	r2, [r3, #0]
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	681b      	ldr	r3, [r3, #0]
 80074b2:	f042 0201 	orr.w	r2, r2, #1
 80074b6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80074b8:	e008      	b.n	80074cc <HAL_TIM_PWM_Start+0x1a0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	681b      	ldr	r3, [r3, #0]
 80074be:	681a      	ldr	r2, [r3, #0]
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	681b      	ldr	r3, [r3, #0]
 80074c4:	f042 0201 	orr.w	r2, r2, #1
 80074c8:	601a      	str	r2, [r3, #0]
 80074ca:	e000      	b.n	80074ce <HAL_TIM_PWM_Start+0x1a2>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80074cc:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80074ce:	2300      	movs	r3, #0
}
 80074d0:	4618      	mov	r0, r3
 80074d2:	3710      	adds	r7, #16
 80074d4:	46bd      	mov	sp, r7
 80074d6:	bd80      	pop	{r7, pc}
 80074d8:	40012c00 	.word	0x40012c00
 80074dc:	40014000 	.word	0x40014000
 80074e0:	40014400 	.word	0x40014400
 80074e4:	00010007 	.word	0x00010007

080074e8 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80074e8:	b580      	push	{r7, lr}
 80074ea:	b082      	sub	sp, #8
 80074ec:	af00      	add	r7, sp, #0
 80074ee:	6078      	str	r0, [r7, #4]
 80074f0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	681b      	ldr	r3, [r3, #0]
 80074f6:	2200      	movs	r2, #0
 80074f8:	6839      	ldr	r1, [r7, #0]
 80074fa:	4618      	mov	r0, r3
 80074fc:	f000 fdba 	bl	8008074 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	681b      	ldr	r3, [r3, #0]
 8007504:	4a39      	ldr	r2, [pc, #228]	; (80075ec <HAL_TIM_PWM_Stop+0x104>)
 8007506:	4293      	cmp	r3, r2
 8007508:	d009      	beq.n	800751e <HAL_TIM_PWM_Stop+0x36>
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	681b      	ldr	r3, [r3, #0]
 800750e:	4a38      	ldr	r2, [pc, #224]	; (80075f0 <HAL_TIM_PWM_Stop+0x108>)
 8007510:	4293      	cmp	r3, r2
 8007512:	d004      	beq.n	800751e <HAL_TIM_PWM_Stop+0x36>
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	681b      	ldr	r3, [r3, #0]
 8007518:	4a36      	ldr	r2, [pc, #216]	; (80075f4 <HAL_TIM_PWM_Stop+0x10c>)
 800751a:	4293      	cmp	r3, r2
 800751c:	d101      	bne.n	8007522 <HAL_TIM_PWM_Stop+0x3a>
 800751e:	2301      	movs	r3, #1
 8007520:	e000      	b.n	8007524 <HAL_TIM_PWM_Stop+0x3c>
 8007522:	2300      	movs	r3, #0
 8007524:	2b00      	cmp	r3, #0
 8007526:	d017      	beq.n	8007558 <HAL_TIM_PWM_Stop+0x70>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	681b      	ldr	r3, [r3, #0]
 800752c:	6a1a      	ldr	r2, [r3, #32]
 800752e:	f241 1311 	movw	r3, #4369	; 0x1111
 8007532:	4013      	ands	r3, r2
 8007534:	2b00      	cmp	r3, #0
 8007536:	d10f      	bne.n	8007558 <HAL_TIM_PWM_Stop+0x70>
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	681b      	ldr	r3, [r3, #0]
 800753c:	6a1a      	ldr	r2, [r3, #32]
 800753e:	f240 4344 	movw	r3, #1092	; 0x444
 8007542:	4013      	ands	r3, r2
 8007544:	2b00      	cmp	r3, #0
 8007546:	d107      	bne.n	8007558 <HAL_TIM_PWM_Stop+0x70>
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	681b      	ldr	r3, [r3, #0]
 800754c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	681b      	ldr	r3, [r3, #0]
 8007552:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8007556:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	681b      	ldr	r3, [r3, #0]
 800755c:	6a1a      	ldr	r2, [r3, #32]
 800755e:	f241 1311 	movw	r3, #4369	; 0x1111
 8007562:	4013      	ands	r3, r2
 8007564:	2b00      	cmp	r3, #0
 8007566:	d10f      	bne.n	8007588 <HAL_TIM_PWM_Stop+0xa0>
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	681b      	ldr	r3, [r3, #0]
 800756c:	6a1a      	ldr	r2, [r3, #32]
 800756e:	f240 4344 	movw	r3, #1092	; 0x444
 8007572:	4013      	ands	r3, r2
 8007574:	2b00      	cmp	r3, #0
 8007576:	d107      	bne.n	8007588 <HAL_TIM_PWM_Stop+0xa0>
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	681b      	ldr	r3, [r3, #0]
 800757c:	681a      	ldr	r2, [r3, #0]
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	681b      	ldr	r3, [r3, #0]
 8007582:	f022 0201 	bic.w	r2, r2, #1
 8007586:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8007588:	683b      	ldr	r3, [r7, #0]
 800758a:	2b00      	cmp	r3, #0
 800758c:	d104      	bne.n	8007598 <HAL_TIM_PWM_Stop+0xb0>
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	2201      	movs	r2, #1
 8007592:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007596:	e023      	b.n	80075e0 <HAL_TIM_PWM_Stop+0xf8>
 8007598:	683b      	ldr	r3, [r7, #0]
 800759a:	2b04      	cmp	r3, #4
 800759c:	d104      	bne.n	80075a8 <HAL_TIM_PWM_Stop+0xc0>
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	2201      	movs	r2, #1
 80075a2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80075a6:	e01b      	b.n	80075e0 <HAL_TIM_PWM_Stop+0xf8>
 80075a8:	683b      	ldr	r3, [r7, #0]
 80075aa:	2b08      	cmp	r3, #8
 80075ac:	d104      	bne.n	80075b8 <HAL_TIM_PWM_Stop+0xd0>
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	2201      	movs	r2, #1
 80075b2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80075b6:	e013      	b.n	80075e0 <HAL_TIM_PWM_Stop+0xf8>
 80075b8:	683b      	ldr	r3, [r7, #0]
 80075ba:	2b0c      	cmp	r3, #12
 80075bc:	d104      	bne.n	80075c8 <HAL_TIM_PWM_Stop+0xe0>
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	2201      	movs	r2, #1
 80075c2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80075c6:	e00b      	b.n	80075e0 <HAL_TIM_PWM_Stop+0xf8>
 80075c8:	683b      	ldr	r3, [r7, #0]
 80075ca:	2b10      	cmp	r3, #16
 80075cc:	d104      	bne.n	80075d8 <HAL_TIM_PWM_Stop+0xf0>
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	2201      	movs	r2, #1
 80075d2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80075d6:	e003      	b.n	80075e0 <HAL_TIM_PWM_Stop+0xf8>
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	2201      	movs	r2, #1
 80075dc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Return function status */
  return HAL_OK;
 80075e0:	2300      	movs	r3, #0
}
 80075e2:	4618      	mov	r0, r3
 80075e4:	3708      	adds	r7, #8
 80075e6:	46bd      	mov	sp, r7
 80075e8:	bd80      	pop	{r7, pc}
 80075ea:	bf00      	nop
 80075ec:	40012c00 	.word	0x40012c00
 80075f0:	40014000 	.word	0x40014000
 80075f4:	40014400 	.word	0x40014400

080075f8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80075f8:	b580      	push	{r7, lr}
 80075fa:	b082      	sub	sp, #8
 80075fc:	af00      	add	r7, sp, #0
 80075fe:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	681b      	ldr	r3, [r3, #0]
 8007604:	691b      	ldr	r3, [r3, #16]
 8007606:	f003 0302 	and.w	r3, r3, #2
 800760a:	2b02      	cmp	r3, #2
 800760c:	d122      	bne.n	8007654 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	681b      	ldr	r3, [r3, #0]
 8007612:	68db      	ldr	r3, [r3, #12]
 8007614:	f003 0302 	and.w	r3, r3, #2
 8007618:	2b02      	cmp	r3, #2
 800761a:	d11b      	bne.n	8007654 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	681b      	ldr	r3, [r3, #0]
 8007620:	f06f 0202 	mvn.w	r2, #2
 8007624:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	2201      	movs	r2, #1
 800762a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	681b      	ldr	r3, [r3, #0]
 8007630:	699b      	ldr	r3, [r3, #24]
 8007632:	f003 0303 	and.w	r3, r3, #3
 8007636:	2b00      	cmp	r3, #0
 8007638:	d003      	beq.n	8007642 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800763a:	6878      	ldr	r0, [r7, #4]
 800763c:	f000 fa1a 	bl	8007a74 <HAL_TIM_IC_CaptureCallback>
 8007640:	e005      	b.n	800764e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8007642:	6878      	ldr	r0, [r7, #4]
 8007644:	f000 fa0c 	bl	8007a60 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007648:	6878      	ldr	r0, [r7, #4]
 800764a:	f000 fa1d 	bl	8007a88 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	2200      	movs	r2, #0
 8007652:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	681b      	ldr	r3, [r3, #0]
 8007658:	691b      	ldr	r3, [r3, #16]
 800765a:	f003 0304 	and.w	r3, r3, #4
 800765e:	2b04      	cmp	r3, #4
 8007660:	d122      	bne.n	80076a8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	681b      	ldr	r3, [r3, #0]
 8007666:	68db      	ldr	r3, [r3, #12]
 8007668:	f003 0304 	and.w	r3, r3, #4
 800766c:	2b04      	cmp	r3, #4
 800766e:	d11b      	bne.n	80076a8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	681b      	ldr	r3, [r3, #0]
 8007674:	f06f 0204 	mvn.w	r2, #4
 8007678:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	2202      	movs	r2, #2
 800767e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	681b      	ldr	r3, [r3, #0]
 8007684:	699b      	ldr	r3, [r3, #24]
 8007686:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800768a:	2b00      	cmp	r3, #0
 800768c:	d003      	beq.n	8007696 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800768e:	6878      	ldr	r0, [r7, #4]
 8007690:	f000 f9f0 	bl	8007a74 <HAL_TIM_IC_CaptureCallback>
 8007694:	e005      	b.n	80076a2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007696:	6878      	ldr	r0, [r7, #4]
 8007698:	f000 f9e2 	bl	8007a60 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800769c:	6878      	ldr	r0, [r7, #4]
 800769e:	f000 f9f3 	bl	8007a88 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	2200      	movs	r2, #0
 80076a6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	681b      	ldr	r3, [r3, #0]
 80076ac:	691b      	ldr	r3, [r3, #16]
 80076ae:	f003 0308 	and.w	r3, r3, #8
 80076b2:	2b08      	cmp	r3, #8
 80076b4:	d122      	bne.n	80076fc <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	681b      	ldr	r3, [r3, #0]
 80076ba:	68db      	ldr	r3, [r3, #12]
 80076bc:	f003 0308 	and.w	r3, r3, #8
 80076c0:	2b08      	cmp	r3, #8
 80076c2:	d11b      	bne.n	80076fc <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	681b      	ldr	r3, [r3, #0]
 80076c8:	f06f 0208 	mvn.w	r2, #8
 80076cc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	2204      	movs	r2, #4
 80076d2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	681b      	ldr	r3, [r3, #0]
 80076d8:	69db      	ldr	r3, [r3, #28]
 80076da:	f003 0303 	and.w	r3, r3, #3
 80076de:	2b00      	cmp	r3, #0
 80076e0:	d003      	beq.n	80076ea <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80076e2:	6878      	ldr	r0, [r7, #4]
 80076e4:	f000 f9c6 	bl	8007a74 <HAL_TIM_IC_CaptureCallback>
 80076e8:	e005      	b.n	80076f6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80076ea:	6878      	ldr	r0, [r7, #4]
 80076ec:	f000 f9b8 	bl	8007a60 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80076f0:	6878      	ldr	r0, [r7, #4]
 80076f2:	f000 f9c9 	bl	8007a88 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	2200      	movs	r2, #0
 80076fa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	681b      	ldr	r3, [r3, #0]
 8007700:	691b      	ldr	r3, [r3, #16]
 8007702:	f003 0310 	and.w	r3, r3, #16
 8007706:	2b10      	cmp	r3, #16
 8007708:	d122      	bne.n	8007750 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	681b      	ldr	r3, [r3, #0]
 800770e:	68db      	ldr	r3, [r3, #12]
 8007710:	f003 0310 	and.w	r3, r3, #16
 8007714:	2b10      	cmp	r3, #16
 8007716:	d11b      	bne.n	8007750 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	681b      	ldr	r3, [r3, #0]
 800771c:	f06f 0210 	mvn.w	r2, #16
 8007720:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	2208      	movs	r2, #8
 8007726:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	681b      	ldr	r3, [r3, #0]
 800772c:	69db      	ldr	r3, [r3, #28]
 800772e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007732:	2b00      	cmp	r3, #0
 8007734:	d003      	beq.n	800773e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007736:	6878      	ldr	r0, [r7, #4]
 8007738:	f000 f99c 	bl	8007a74 <HAL_TIM_IC_CaptureCallback>
 800773c:	e005      	b.n	800774a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800773e:	6878      	ldr	r0, [r7, #4]
 8007740:	f000 f98e 	bl	8007a60 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007744:	6878      	ldr	r0, [r7, #4]
 8007746:	f000 f99f 	bl	8007a88 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	2200      	movs	r2, #0
 800774e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	681b      	ldr	r3, [r3, #0]
 8007754:	691b      	ldr	r3, [r3, #16]
 8007756:	f003 0301 	and.w	r3, r3, #1
 800775a:	2b01      	cmp	r3, #1
 800775c:	d10e      	bne.n	800777c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	681b      	ldr	r3, [r3, #0]
 8007762:	68db      	ldr	r3, [r3, #12]
 8007764:	f003 0301 	and.w	r3, r3, #1
 8007768:	2b01      	cmp	r3, #1
 800776a:	d107      	bne.n	800777c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	681b      	ldr	r3, [r3, #0]
 8007770:	f06f 0201 	mvn.w	r2, #1
 8007774:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8007776:	6878      	ldr	r0, [r7, #4]
 8007778:	f7fb f980 	bl	8002a7c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	681b      	ldr	r3, [r3, #0]
 8007780:	691b      	ldr	r3, [r3, #16]
 8007782:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007786:	2b80      	cmp	r3, #128	; 0x80
 8007788:	d10e      	bne.n	80077a8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	681b      	ldr	r3, [r3, #0]
 800778e:	68db      	ldr	r3, [r3, #12]
 8007790:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007794:	2b80      	cmp	r3, #128	; 0x80
 8007796:	d107      	bne.n	80077a8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	681b      	ldr	r3, [r3, #0]
 800779c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80077a0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80077a2:	6878      	ldr	r0, [r7, #4]
 80077a4:	f000 fcfc 	bl	80081a0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	681b      	ldr	r3, [r3, #0]
 80077ac:	691b      	ldr	r3, [r3, #16]
 80077ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80077b2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80077b6:	d10e      	bne.n	80077d6 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	681b      	ldr	r3, [r3, #0]
 80077bc:	68db      	ldr	r3, [r3, #12]
 80077be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80077c2:	2b80      	cmp	r3, #128	; 0x80
 80077c4:	d107      	bne.n	80077d6 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	681b      	ldr	r3, [r3, #0]
 80077ca:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80077ce:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80077d0:	6878      	ldr	r0, [r7, #4]
 80077d2:	f000 fcef 	bl	80081b4 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	681b      	ldr	r3, [r3, #0]
 80077da:	691b      	ldr	r3, [r3, #16]
 80077dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80077e0:	2b40      	cmp	r3, #64	; 0x40
 80077e2:	d10e      	bne.n	8007802 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	681b      	ldr	r3, [r3, #0]
 80077e8:	68db      	ldr	r3, [r3, #12]
 80077ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80077ee:	2b40      	cmp	r3, #64	; 0x40
 80077f0:	d107      	bne.n	8007802 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	681b      	ldr	r3, [r3, #0]
 80077f6:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80077fa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80077fc:	6878      	ldr	r0, [r7, #4]
 80077fe:	f000 f94d 	bl	8007a9c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	681b      	ldr	r3, [r3, #0]
 8007806:	691b      	ldr	r3, [r3, #16]
 8007808:	f003 0320 	and.w	r3, r3, #32
 800780c:	2b20      	cmp	r3, #32
 800780e:	d10e      	bne.n	800782e <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	681b      	ldr	r3, [r3, #0]
 8007814:	68db      	ldr	r3, [r3, #12]
 8007816:	f003 0320 	and.w	r3, r3, #32
 800781a:	2b20      	cmp	r3, #32
 800781c:	d107      	bne.n	800782e <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	681b      	ldr	r3, [r3, #0]
 8007822:	f06f 0220 	mvn.w	r2, #32
 8007826:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8007828:	6878      	ldr	r0, [r7, #4]
 800782a:	f000 fcaf 	bl	800818c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800782e:	bf00      	nop
 8007830:	3708      	adds	r7, #8
 8007832:	46bd      	mov	sp, r7
 8007834:	bd80      	pop	{r7, pc}
	...

08007838 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8007838:	b580      	push	{r7, lr}
 800783a:	b086      	sub	sp, #24
 800783c:	af00      	add	r7, sp, #0
 800783e:	60f8      	str	r0, [r7, #12]
 8007840:	60b9      	str	r1, [r7, #8]
 8007842:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007844:	2300      	movs	r3, #0
 8007846:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8007848:	68fb      	ldr	r3, [r7, #12]
 800784a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800784e:	2b01      	cmp	r3, #1
 8007850:	d101      	bne.n	8007856 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8007852:	2302      	movs	r3, #2
 8007854:	e0ff      	b.n	8007a56 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8007856:	68fb      	ldr	r3, [r7, #12]
 8007858:	2201      	movs	r2, #1
 800785a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	2b14      	cmp	r3, #20
 8007862:	f200 80f0 	bhi.w	8007a46 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8007866:	a201      	add	r2, pc, #4	; (adr r2, 800786c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8007868:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800786c:	080078c1 	.word	0x080078c1
 8007870:	08007a47 	.word	0x08007a47
 8007874:	08007a47 	.word	0x08007a47
 8007878:	08007a47 	.word	0x08007a47
 800787c:	08007901 	.word	0x08007901
 8007880:	08007a47 	.word	0x08007a47
 8007884:	08007a47 	.word	0x08007a47
 8007888:	08007a47 	.word	0x08007a47
 800788c:	08007943 	.word	0x08007943
 8007890:	08007a47 	.word	0x08007a47
 8007894:	08007a47 	.word	0x08007a47
 8007898:	08007a47 	.word	0x08007a47
 800789c:	08007983 	.word	0x08007983
 80078a0:	08007a47 	.word	0x08007a47
 80078a4:	08007a47 	.word	0x08007a47
 80078a8:	08007a47 	.word	0x08007a47
 80078ac:	080079c5 	.word	0x080079c5
 80078b0:	08007a47 	.word	0x08007a47
 80078b4:	08007a47 	.word	0x08007a47
 80078b8:	08007a47 	.word	0x08007a47
 80078bc:	08007a05 	.word	0x08007a05
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80078c0:	68fb      	ldr	r3, [r7, #12]
 80078c2:	681b      	ldr	r3, [r3, #0]
 80078c4:	68b9      	ldr	r1, [r7, #8]
 80078c6:	4618      	mov	r0, r3
 80078c8:	f000 f956 	bl	8007b78 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80078cc:	68fb      	ldr	r3, [r7, #12]
 80078ce:	681b      	ldr	r3, [r3, #0]
 80078d0:	699a      	ldr	r2, [r3, #24]
 80078d2:	68fb      	ldr	r3, [r7, #12]
 80078d4:	681b      	ldr	r3, [r3, #0]
 80078d6:	f042 0208 	orr.w	r2, r2, #8
 80078da:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80078dc:	68fb      	ldr	r3, [r7, #12]
 80078de:	681b      	ldr	r3, [r3, #0]
 80078e0:	699a      	ldr	r2, [r3, #24]
 80078e2:	68fb      	ldr	r3, [r7, #12]
 80078e4:	681b      	ldr	r3, [r3, #0]
 80078e6:	f022 0204 	bic.w	r2, r2, #4
 80078ea:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80078ec:	68fb      	ldr	r3, [r7, #12]
 80078ee:	681b      	ldr	r3, [r3, #0]
 80078f0:	6999      	ldr	r1, [r3, #24]
 80078f2:	68bb      	ldr	r3, [r7, #8]
 80078f4:	691a      	ldr	r2, [r3, #16]
 80078f6:	68fb      	ldr	r3, [r7, #12]
 80078f8:	681b      	ldr	r3, [r3, #0]
 80078fa:	430a      	orrs	r2, r1
 80078fc:	619a      	str	r2, [r3, #24]
      break;
 80078fe:	e0a5      	b.n	8007a4c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8007900:	68fb      	ldr	r3, [r7, #12]
 8007902:	681b      	ldr	r3, [r3, #0]
 8007904:	68b9      	ldr	r1, [r7, #8]
 8007906:	4618      	mov	r0, r3
 8007908:	f000 f9b2 	bl	8007c70 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800790c:	68fb      	ldr	r3, [r7, #12]
 800790e:	681b      	ldr	r3, [r3, #0]
 8007910:	699a      	ldr	r2, [r3, #24]
 8007912:	68fb      	ldr	r3, [r7, #12]
 8007914:	681b      	ldr	r3, [r3, #0]
 8007916:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800791a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800791c:	68fb      	ldr	r3, [r7, #12]
 800791e:	681b      	ldr	r3, [r3, #0]
 8007920:	699a      	ldr	r2, [r3, #24]
 8007922:	68fb      	ldr	r3, [r7, #12]
 8007924:	681b      	ldr	r3, [r3, #0]
 8007926:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800792a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800792c:	68fb      	ldr	r3, [r7, #12]
 800792e:	681b      	ldr	r3, [r3, #0]
 8007930:	6999      	ldr	r1, [r3, #24]
 8007932:	68bb      	ldr	r3, [r7, #8]
 8007934:	691b      	ldr	r3, [r3, #16]
 8007936:	021a      	lsls	r2, r3, #8
 8007938:	68fb      	ldr	r3, [r7, #12]
 800793a:	681b      	ldr	r3, [r3, #0]
 800793c:	430a      	orrs	r2, r1
 800793e:	619a      	str	r2, [r3, #24]
      break;
 8007940:	e084      	b.n	8007a4c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8007942:	68fb      	ldr	r3, [r7, #12]
 8007944:	681b      	ldr	r3, [r3, #0]
 8007946:	68b9      	ldr	r1, [r7, #8]
 8007948:	4618      	mov	r0, r3
 800794a:	f000 fa0b 	bl	8007d64 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800794e:	68fb      	ldr	r3, [r7, #12]
 8007950:	681b      	ldr	r3, [r3, #0]
 8007952:	69da      	ldr	r2, [r3, #28]
 8007954:	68fb      	ldr	r3, [r7, #12]
 8007956:	681b      	ldr	r3, [r3, #0]
 8007958:	f042 0208 	orr.w	r2, r2, #8
 800795c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800795e:	68fb      	ldr	r3, [r7, #12]
 8007960:	681b      	ldr	r3, [r3, #0]
 8007962:	69da      	ldr	r2, [r3, #28]
 8007964:	68fb      	ldr	r3, [r7, #12]
 8007966:	681b      	ldr	r3, [r3, #0]
 8007968:	f022 0204 	bic.w	r2, r2, #4
 800796c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800796e:	68fb      	ldr	r3, [r7, #12]
 8007970:	681b      	ldr	r3, [r3, #0]
 8007972:	69d9      	ldr	r1, [r3, #28]
 8007974:	68bb      	ldr	r3, [r7, #8]
 8007976:	691a      	ldr	r2, [r3, #16]
 8007978:	68fb      	ldr	r3, [r7, #12]
 800797a:	681b      	ldr	r3, [r3, #0]
 800797c:	430a      	orrs	r2, r1
 800797e:	61da      	str	r2, [r3, #28]
      break;
 8007980:	e064      	b.n	8007a4c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8007982:	68fb      	ldr	r3, [r7, #12]
 8007984:	681b      	ldr	r3, [r3, #0]
 8007986:	68b9      	ldr	r1, [r7, #8]
 8007988:	4618      	mov	r0, r3
 800798a:	f000 fa63 	bl	8007e54 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800798e:	68fb      	ldr	r3, [r7, #12]
 8007990:	681b      	ldr	r3, [r3, #0]
 8007992:	69da      	ldr	r2, [r3, #28]
 8007994:	68fb      	ldr	r3, [r7, #12]
 8007996:	681b      	ldr	r3, [r3, #0]
 8007998:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800799c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800799e:	68fb      	ldr	r3, [r7, #12]
 80079a0:	681b      	ldr	r3, [r3, #0]
 80079a2:	69da      	ldr	r2, [r3, #28]
 80079a4:	68fb      	ldr	r3, [r7, #12]
 80079a6:	681b      	ldr	r3, [r3, #0]
 80079a8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80079ac:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80079ae:	68fb      	ldr	r3, [r7, #12]
 80079b0:	681b      	ldr	r3, [r3, #0]
 80079b2:	69d9      	ldr	r1, [r3, #28]
 80079b4:	68bb      	ldr	r3, [r7, #8]
 80079b6:	691b      	ldr	r3, [r3, #16]
 80079b8:	021a      	lsls	r2, r3, #8
 80079ba:	68fb      	ldr	r3, [r7, #12]
 80079bc:	681b      	ldr	r3, [r3, #0]
 80079be:	430a      	orrs	r2, r1
 80079c0:	61da      	str	r2, [r3, #28]
      break;
 80079c2:	e043      	b.n	8007a4c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80079c4:	68fb      	ldr	r3, [r7, #12]
 80079c6:	681b      	ldr	r3, [r3, #0]
 80079c8:	68b9      	ldr	r1, [r7, #8]
 80079ca:	4618      	mov	r0, r3
 80079cc:	f000 faa0 	bl	8007f10 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80079d0:	68fb      	ldr	r3, [r7, #12]
 80079d2:	681b      	ldr	r3, [r3, #0]
 80079d4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80079d6:	68fb      	ldr	r3, [r7, #12]
 80079d8:	681b      	ldr	r3, [r3, #0]
 80079da:	f042 0208 	orr.w	r2, r2, #8
 80079de:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80079e0:	68fb      	ldr	r3, [r7, #12]
 80079e2:	681b      	ldr	r3, [r3, #0]
 80079e4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80079e6:	68fb      	ldr	r3, [r7, #12]
 80079e8:	681b      	ldr	r3, [r3, #0]
 80079ea:	f022 0204 	bic.w	r2, r2, #4
 80079ee:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80079f0:	68fb      	ldr	r3, [r7, #12]
 80079f2:	681b      	ldr	r3, [r3, #0]
 80079f4:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80079f6:	68bb      	ldr	r3, [r7, #8]
 80079f8:	691a      	ldr	r2, [r3, #16]
 80079fa:	68fb      	ldr	r3, [r7, #12]
 80079fc:	681b      	ldr	r3, [r3, #0]
 80079fe:	430a      	orrs	r2, r1
 8007a00:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8007a02:	e023      	b.n	8007a4c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8007a04:	68fb      	ldr	r3, [r7, #12]
 8007a06:	681b      	ldr	r3, [r3, #0]
 8007a08:	68b9      	ldr	r1, [r7, #8]
 8007a0a:	4618      	mov	r0, r3
 8007a0c:	f000 fad8 	bl	8007fc0 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8007a10:	68fb      	ldr	r3, [r7, #12]
 8007a12:	681b      	ldr	r3, [r3, #0]
 8007a14:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007a16:	68fb      	ldr	r3, [r7, #12]
 8007a18:	681b      	ldr	r3, [r3, #0]
 8007a1a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007a1e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8007a20:	68fb      	ldr	r3, [r7, #12]
 8007a22:	681b      	ldr	r3, [r3, #0]
 8007a24:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007a26:	68fb      	ldr	r3, [r7, #12]
 8007a28:	681b      	ldr	r3, [r3, #0]
 8007a2a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007a2e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8007a30:	68fb      	ldr	r3, [r7, #12]
 8007a32:	681b      	ldr	r3, [r3, #0]
 8007a34:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8007a36:	68bb      	ldr	r3, [r7, #8]
 8007a38:	691b      	ldr	r3, [r3, #16]
 8007a3a:	021a      	lsls	r2, r3, #8
 8007a3c:	68fb      	ldr	r3, [r7, #12]
 8007a3e:	681b      	ldr	r3, [r3, #0]
 8007a40:	430a      	orrs	r2, r1
 8007a42:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8007a44:	e002      	b.n	8007a4c <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8007a46:	2301      	movs	r3, #1
 8007a48:	75fb      	strb	r3, [r7, #23]
      break;
 8007a4a:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8007a4c:	68fb      	ldr	r3, [r7, #12]
 8007a4e:	2200      	movs	r2, #0
 8007a50:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8007a54:	7dfb      	ldrb	r3, [r7, #23]
}
 8007a56:	4618      	mov	r0, r3
 8007a58:	3718      	adds	r7, #24
 8007a5a:	46bd      	mov	sp, r7
 8007a5c:	bd80      	pop	{r7, pc}
 8007a5e:	bf00      	nop

08007a60 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007a60:	b480      	push	{r7}
 8007a62:	b083      	sub	sp, #12
 8007a64:	af00      	add	r7, sp, #0
 8007a66:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007a68:	bf00      	nop
 8007a6a:	370c      	adds	r7, #12
 8007a6c:	46bd      	mov	sp, r7
 8007a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a72:	4770      	bx	lr

08007a74 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8007a74:	b480      	push	{r7}
 8007a76:	b083      	sub	sp, #12
 8007a78:	af00      	add	r7, sp, #0
 8007a7a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8007a7c:	bf00      	nop
 8007a7e:	370c      	adds	r7, #12
 8007a80:	46bd      	mov	sp, r7
 8007a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a86:	4770      	bx	lr

08007a88 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007a88:	b480      	push	{r7}
 8007a8a:	b083      	sub	sp, #12
 8007a8c:	af00      	add	r7, sp, #0
 8007a8e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007a90:	bf00      	nop
 8007a92:	370c      	adds	r7, #12
 8007a94:	46bd      	mov	sp, r7
 8007a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a9a:	4770      	bx	lr

08007a9c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007a9c:	b480      	push	{r7}
 8007a9e:	b083      	sub	sp, #12
 8007aa0:	af00      	add	r7, sp, #0
 8007aa2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007aa4:	bf00      	nop
 8007aa6:	370c      	adds	r7, #12
 8007aa8:	46bd      	mov	sp, r7
 8007aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007aae:	4770      	bx	lr

08007ab0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8007ab0:	b480      	push	{r7}
 8007ab2:	b085      	sub	sp, #20
 8007ab4:	af00      	add	r7, sp, #0
 8007ab6:	6078      	str	r0, [r7, #4]
 8007ab8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	681b      	ldr	r3, [r3, #0]
 8007abe:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	4a2a      	ldr	r2, [pc, #168]	; (8007b6c <TIM_Base_SetConfig+0xbc>)
 8007ac4:	4293      	cmp	r3, r2
 8007ac6:	d003      	beq.n	8007ad0 <TIM_Base_SetConfig+0x20>
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007ace:	d108      	bne.n	8007ae2 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007ad0:	68fb      	ldr	r3, [r7, #12]
 8007ad2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007ad6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007ad8:	683b      	ldr	r3, [r7, #0]
 8007ada:	685b      	ldr	r3, [r3, #4]
 8007adc:	68fa      	ldr	r2, [r7, #12]
 8007ade:	4313      	orrs	r3, r2
 8007ae0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	4a21      	ldr	r2, [pc, #132]	; (8007b6c <TIM_Base_SetConfig+0xbc>)
 8007ae6:	4293      	cmp	r3, r2
 8007ae8:	d00b      	beq.n	8007b02 <TIM_Base_SetConfig+0x52>
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007af0:	d007      	beq.n	8007b02 <TIM_Base_SetConfig+0x52>
 8007af2:	687b      	ldr	r3, [r7, #4]
 8007af4:	4a1e      	ldr	r2, [pc, #120]	; (8007b70 <TIM_Base_SetConfig+0xc0>)
 8007af6:	4293      	cmp	r3, r2
 8007af8:	d003      	beq.n	8007b02 <TIM_Base_SetConfig+0x52>
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	4a1d      	ldr	r2, [pc, #116]	; (8007b74 <TIM_Base_SetConfig+0xc4>)
 8007afe:	4293      	cmp	r3, r2
 8007b00:	d108      	bne.n	8007b14 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007b02:	68fb      	ldr	r3, [r7, #12]
 8007b04:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007b08:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007b0a:	683b      	ldr	r3, [r7, #0]
 8007b0c:	68db      	ldr	r3, [r3, #12]
 8007b0e:	68fa      	ldr	r2, [r7, #12]
 8007b10:	4313      	orrs	r3, r2
 8007b12:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007b14:	68fb      	ldr	r3, [r7, #12]
 8007b16:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8007b1a:	683b      	ldr	r3, [r7, #0]
 8007b1c:	695b      	ldr	r3, [r3, #20]
 8007b1e:	4313      	orrs	r3, r2
 8007b20:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	68fa      	ldr	r2, [r7, #12]
 8007b26:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007b28:	683b      	ldr	r3, [r7, #0]
 8007b2a:	689a      	ldr	r2, [r3, #8]
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007b30:	683b      	ldr	r3, [r7, #0]
 8007b32:	681a      	ldr	r2, [r3, #0]
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	4a0c      	ldr	r2, [pc, #48]	; (8007b6c <TIM_Base_SetConfig+0xbc>)
 8007b3c:	4293      	cmp	r3, r2
 8007b3e:	d007      	beq.n	8007b50 <TIM_Base_SetConfig+0xa0>
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	4a0b      	ldr	r2, [pc, #44]	; (8007b70 <TIM_Base_SetConfig+0xc0>)
 8007b44:	4293      	cmp	r3, r2
 8007b46:	d003      	beq.n	8007b50 <TIM_Base_SetConfig+0xa0>
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	4a0a      	ldr	r2, [pc, #40]	; (8007b74 <TIM_Base_SetConfig+0xc4>)
 8007b4c:	4293      	cmp	r3, r2
 8007b4e:	d103      	bne.n	8007b58 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007b50:	683b      	ldr	r3, [r7, #0]
 8007b52:	691a      	ldr	r2, [r3, #16]
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	2201      	movs	r2, #1
 8007b5c:	615a      	str	r2, [r3, #20]
}
 8007b5e:	bf00      	nop
 8007b60:	3714      	adds	r7, #20
 8007b62:	46bd      	mov	sp, r7
 8007b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b68:	4770      	bx	lr
 8007b6a:	bf00      	nop
 8007b6c:	40012c00 	.word	0x40012c00
 8007b70:	40014000 	.word	0x40014000
 8007b74:	40014400 	.word	0x40014400

08007b78 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007b78:	b480      	push	{r7}
 8007b7a:	b087      	sub	sp, #28
 8007b7c:	af00      	add	r7, sp, #0
 8007b7e:	6078      	str	r0, [r7, #4]
 8007b80:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	6a1b      	ldr	r3, [r3, #32]
 8007b86:	f023 0201 	bic.w	r2, r3, #1
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	6a1b      	ldr	r3, [r3, #32]
 8007b92:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	685b      	ldr	r3, [r3, #4]
 8007b98:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	699b      	ldr	r3, [r3, #24]
 8007b9e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8007ba0:	68fb      	ldr	r3, [r7, #12]
 8007ba2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007ba6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007baa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8007bac:	68fb      	ldr	r3, [r7, #12]
 8007bae:	f023 0303 	bic.w	r3, r3, #3
 8007bb2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007bb4:	683b      	ldr	r3, [r7, #0]
 8007bb6:	681b      	ldr	r3, [r3, #0]
 8007bb8:	68fa      	ldr	r2, [r7, #12]
 8007bba:	4313      	orrs	r3, r2
 8007bbc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8007bbe:	697b      	ldr	r3, [r7, #20]
 8007bc0:	f023 0302 	bic.w	r3, r3, #2
 8007bc4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8007bc6:	683b      	ldr	r3, [r7, #0]
 8007bc8:	689b      	ldr	r3, [r3, #8]
 8007bca:	697a      	ldr	r2, [r7, #20]
 8007bcc:	4313      	orrs	r3, r2
 8007bce:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	4a24      	ldr	r2, [pc, #144]	; (8007c64 <TIM_OC1_SetConfig+0xec>)
 8007bd4:	4293      	cmp	r3, r2
 8007bd6:	d007      	beq.n	8007be8 <TIM_OC1_SetConfig+0x70>
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	4a23      	ldr	r2, [pc, #140]	; (8007c68 <TIM_OC1_SetConfig+0xf0>)
 8007bdc:	4293      	cmp	r3, r2
 8007bde:	d003      	beq.n	8007be8 <TIM_OC1_SetConfig+0x70>
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	4a22      	ldr	r2, [pc, #136]	; (8007c6c <TIM_OC1_SetConfig+0xf4>)
 8007be4:	4293      	cmp	r3, r2
 8007be6:	d10c      	bne.n	8007c02 <TIM_OC1_SetConfig+0x8a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8007be8:	697b      	ldr	r3, [r7, #20]
 8007bea:	f023 0308 	bic.w	r3, r3, #8
 8007bee:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8007bf0:	683b      	ldr	r3, [r7, #0]
 8007bf2:	68db      	ldr	r3, [r3, #12]
 8007bf4:	697a      	ldr	r2, [r7, #20]
 8007bf6:	4313      	orrs	r3, r2
 8007bf8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8007bfa:	697b      	ldr	r3, [r7, #20]
 8007bfc:	f023 0304 	bic.w	r3, r3, #4
 8007c00:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	4a17      	ldr	r2, [pc, #92]	; (8007c64 <TIM_OC1_SetConfig+0xec>)
 8007c06:	4293      	cmp	r3, r2
 8007c08:	d007      	beq.n	8007c1a <TIM_OC1_SetConfig+0xa2>
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	4a16      	ldr	r2, [pc, #88]	; (8007c68 <TIM_OC1_SetConfig+0xf0>)
 8007c0e:	4293      	cmp	r3, r2
 8007c10:	d003      	beq.n	8007c1a <TIM_OC1_SetConfig+0xa2>
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	4a15      	ldr	r2, [pc, #84]	; (8007c6c <TIM_OC1_SetConfig+0xf4>)
 8007c16:	4293      	cmp	r3, r2
 8007c18:	d111      	bne.n	8007c3e <TIM_OC1_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8007c1a:	693b      	ldr	r3, [r7, #16]
 8007c1c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007c20:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8007c22:	693b      	ldr	r3, [r7, #16]
 8007c24:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007c28:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8007c2a:	683b      	ldr	r3, [r7, #0]
 8007c2c:	695b      	ldr	r3, [r3, #20]
 8007c2e:	693a      	ldr	r2, [r7, #16]
 8007c30:	4313      	orrs	r3, r2
 8007c32:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8007c34:	683b      	ldr	r3, [r7, #0]
 8007c36:	699b      	ldr	r3, [r3, #24]
 8007c38:	693a      	ldr	r2, [r7, #16]
 8007c3a:	4313      	orrs	r3, r2
 8007c3c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	693a      	ldr	r2, [r7, #16]
 8007c42:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	68fa      	ldr	r2, [r7, #12]
 8007c48:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8007c4a:	683b      	ldr	r3, [r7, #0]
 8007c4c:	685a      	ldr	r2, [r3, #4]
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	697a      	ldr	r2, [r7, #20]
 8007c56:	621a      	str	r2, [r3, #32]
}
 8007c58:	bf00      	nop
 8007c5a:	371c      	adds	r7, #28
 8007c5c:	46bd      	mov	sp, r7
 8007c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c62:	4770      	bx	lr
 8007c64:	40012c00 	.word	0x40012c00
 8007c68:	40014000 	.word	0x40014000
 8007c6c:	40014400 	.word	0x40014400

08007c70 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007c70:	b480      	push	{r7}
 8007c72:	b087      	sub	sp, #28
 8007c74:	af00      	add	r7, sp, #0
 8007c76:	6078      	str	r0, [r7, #4]
 8007c78:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	6a1b      	ldr	r3, [r3, #32]
 8007c7e:	f023 0210 	bic.w	r2, r3, #16
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	6a1b      	ldr	r3, [r3, #32]
 8007c8a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	685b      	ldr	r3, [r3, #4]
 8007c90:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007c92:	687b      	ldr	r3, [r7, #4]
 8007c94:	699b      	ldr	r3, [r3, #24]
 8007c96:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8007c98:	68fb      	ldr	r3, [r7, #12]
 8007c9a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007c9e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007ca2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8007ca4:	68fb      	ldr	r3, [r7, #12]
 8007ca6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007caa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007cac:	683b      	ldr	r3, [r7, #0]
 8007cae:	681b      	ldr	r3, [r3, #0]
 8007cb0:	021b      	lsls	r3, r3, #8
 8007cb2:	68fa      	ldr	r2, [r7, #12]
 8007cb4:	4313      	orrs	r3, r2
 8007cb6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8007cb8:	697b      	ldr	r3, [r7, #20]
 8007cba:	f023 0320 	bic.w	r3, r3, #32
 8007cbe:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8007cc0:	683b      	ldr	r3, [r7, #0]
 8007cc2:	689b      	ldr	r3, [r3, #8]
 8007cc4:	011b      	lsls	r3, r3, #4
 8007cc6:	697a      	ldr	r2, [r7, #20]
 8007cc8:	4313      	orrs	r3, r2
 8007cca:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	4a22      	ldr	r2, [pc, #136]	; (8007d58 <TIM_OC2_SetConfig+0xe8>)
 8007cd0:	4293      	cmp	r3, r2
 8007cd2:	d10d      	bne.n	8007cf0 <TIM_OC2_SetConfig+0x80>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8007cd4:	697b      	ldr	r3, [r7, #20]
 8007cd6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007cda:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8007cdc:	683b      	ldr	r3, [r7, #0]
 8007cde:	68db      	ldr	r3, [r3, #12]
 8007ce0:	011b      	lsls	r3, r3, #4
 8007ce2:	697a      	ldr	r2, [r7, #20]
 8007ce4:	4313      	orrs	r3, r2
 8007ce6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8007ce8:	697b      	ldr	r3, [r7, #20]
 8007cea:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007cee:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	4a19      	ldr	r2, [pc, #100]	; (8007d58 <TIM_OC2_SetConfig+0xe8>)
 8007cf4:	4293      	cmp	r3, r2
 8007cf6:	d007      	beq.n	8007d08 <TIM_OC2_SetConfig+0x98>
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	4a18      	ldr	r2, [pc, #96]	; (8007d5c <TIM_OC2_SetConfig+0xec>)
 8007cfc:	4293      	cmp	r3, r2
 8007cfe:	d003      	beq.n	8007d08 <TIM_OC2_SetConfig+0x98>
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	4a17      	ldr	r2, [pc, #92]	; (8007d60 <TIM_OC2_SetConfig+0xf0>)
 8007d04:	4293      	cmp	r3, r2
 8007d06:	d113      	bne.n	8007d30 <TIM_OC2_SetConfig+0xc0>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8007d08:	693b      	ldr	r3, [r7, #16]
 8007d0a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007d0e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8007d10:	693b      	ldr	r3, [r7, #16]
 8007d12:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007d16:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8007d18:	683b      	ldr	r3, [r7, #0]
 8007d1a:	695b      	ldr	r3, [r3, #20]
 8007d1c:	009b      	lsls	r3, r3, #2
 8007d1e:	693a      	ldr	r2, [r7, #16]
 8007d20:	4313      	orrs	r3, r2
 8007d22:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8007d24:	683b      	ldr	r3, [r7, #0]
 8007d26:	699b      	ldr	r3, [r3, #24]
 8007d28:	009b      	lsls	r3, r3, #2
 8007d2a:	693a      	ldr	r2, [r7, #16]
 8007d2c:	4313      	orrs	r3, r2
 8007d2e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	693a      	ldr	r2, [r7, #16]
 8007d34:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	68fa      	ldr	r2, [r7, #12]
 8007d3a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8007d3c:	683b      	ldr	r3, [r7, #0]
 8007d3e:	685a      	ldr	r2, [r3, #4]
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	697a      	ldr	r2, [r7, #20]
 8007d48:	621a      	str	r2, [r3, #32]
}
 8007d4a:	bf00      	nop
 8007d4c:	371c      	adds	r7, #28
 8007d4e:	46bd      	mov	sp, r7
 8007d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d54:	4770      	bx	lr
 8007d56:	bf00      	nop
 8007d58:	40012c00 	.word	0x40012c00
 8007d5c:	40014000 	.word	0x40014000
 8007d60:	40014400 	.word	0x40014400

08007d64 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007d64:	b480      	push	{r7}
 8007d66:	b087      	sub	sp, #28
 8007d68:	af00      	add	r7, sp, #0
 8007d6a:	6078      	str	r0, [r7, #4]
 8007d6c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007d6e:	687b      	ldr	r3, [r7, #4]
 8007d70:	6a1b      	ldr	r3, [r3, #32]
 8007d72:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	6a1b      	ldr	r3, [r3, #32]
 8007d7e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	685b      	ldr	r3, [r3, #4]
 8007d84:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	69db      	ldr	r3, [r3, #28]
 8007d8a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8007d8c:	68fb      	ldr	r3, [r7, #12]
 8007d8e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007d92:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007d96:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8007d98:	68fb      	ldr	r3, [r7, #12]
 8007d9a:	f023 0303 	bic.w	r3, r3, #3
 8007d9e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007da0:	683b      	ldr	r3, [r7, #0]
 8007da2:	681b      	ldr	r3, [r3, #0]
 8007da4:	68fa      	ldr	r2, [r7, #12]
 8007da6:	4313      	orrs	r3, r2
 8007da8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8007daa:	697b      	ldr	r3, [r7, #20]
 8007dac:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007db0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8007db2:	683b      	ldr	r3, [r7, #0]
 8007db4:	689b      	ldr	r3, [r3, #8]
 8007db6:	021b      	lsls	r3, r3, #8
 8007db8:	697a      	ldr	r2, [r7, #20]
 8007dba:	4313      	orrs	r3, r2
 8007dbc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8007dbe:	687b      	ldr	r3, [r7, #4]
 8007dc0:	4a21      	ldr	r2, [pc, #132]	; (8007e48 <TIM_OC3_SetConfig+0xe4>)
 8007dc2:	4293      	cmp	r3, r2
 8007dc4:	d10d      	bne.n	8007de2 <TIM_OC3_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8007dc6:	697b      	ldr	r3, [r7, #20]
 8007dc8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007dcc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8007dce:	683b      	ldr	r3, [r7, #0]
 8007dd0:	68db      	ldr	r3, [r3, #12]
 8007dd2:	021b      	lsls	r3, r3, #8
 8007dd4:	697a      	ldr	r2, [r7, #20]
 8007dd6:	4313      	orrs	r3, r2
 8007dd8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8007dda:	697b      	ldr	r3, [r7, #20]
 8007ddc:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007de0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	4a18      	ldr	r2, [pc, #96]	; (8007e48 <TIM_OC3_SetConfig+0xe4>)
 8007de6:	4293      	cmp	r3, r2
 8007de8:	d007      	beq.n	8007dfa <TIM_OC3_SetConfig+0x96>
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	4a17      	ldr	r2, [pc, #92]	; (8007e4c <TIM_OC3_SetConfig+0xe8>)
 8007dee:	4293      	cmp	r3, r2
 8007df0:	d003      	beq.n	8007dfa <TIM_OC3_SetConfig+0x96>
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	4a16      	ldr	r2, [pc, #88]	; (8007e50 <TIM_OC3_SetConfig+0xec>)
 8007df6:	4293      	cmp	r3, r2
 8007df8:	d113      	bne.n	8007e22 <TIM_OC3_SetConfig+0xbe>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8007dfa:	693b      	ldr	r3, [r7, #16]
 8007dfc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007e00:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8007e02:	693b      	ldr	r3, [r7, #16]
 8007e04:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007e08:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8007e0a:	683b      	ldr	r3, [r7, #0]
 8007e0c:	695b      	ldr	r3, [r3, #20]
 8007e0e:	011b      	lsls	r3, r3, #4
 8007e10:	693a      	ldr	r2, [r7, #16]
 8007e12:	4313      	orrs	r3, r2
 8007e14:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8007e16:	683b      	ldr	r3, [r7, #0]
 8007e18:	699b      	ldr	r3, [r3, #24]
 8007e1a:	011b      	lsls	r3, r3, #4
 8007e1c:	693a      	ldr	r2, [r7, #16]
 8007e1e:	4313      	orrs	r3, r2
 8007e20:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	693a      	ldr	r2, [r7, #16]
 8007e26:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	68fa      	ldr	r2, [r7, #12]
 8007e2c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8007e2e:	683b      	ldr	r3, [r7, #0]
 8007e30:	685a      	ldr	r2, [r3, #4]
 8007e32:	687b      	ldr	r3, [r7, #4]
 8007e34:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	697a      	ldr	r2, [r7, #20]
 8007e3a:	621a      	str	r2, [r3, #32]
}
 8007e3c:	bf00      	nop
 8007e3e:	371c      	adds	r7, #28
 8007e40:	46bd      	mov	sp, r7
 8007e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e46:	4770      	bx	lr
 8007e48:	40012c00 	.word	0x40012c00
 8007e4c:	40014000 	.word	0x40014000
 8007e50:	40014400 	.word	0x40014400

08007e54 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007e54:	b480      	push	{r7}
 8007e56:	b087      	sub	sp, #28
 8007e58:	af00      	add	r7, sp, #0
 8007e5a:	6078      	str	r0, [r7, #4]
 8007e5c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007e5e:	687b      	ldr	r3, [r7, #4]
 8007e60:	6a1b      	ldr	r3, [r3, #32]
 8007e62:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007e66:	687b      	ldr	r3, [r7, #4]
 8007e68:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007e6a:	687b      	ldr	r3, [r7, #4]
 8007e6c:	6a1b      	ldr	r3, [r3, #32]
 8007e6e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	685b      	ldr	r3, [r3, #4]
 8007e74:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007e76:	687b      	ldr	r3, [r7, #4]
 8007e78:	69db      	ldr	r3, [r3, #28]
 8007e7a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8007e7c:	68fb      	ldr	r3, [r7, #12]
 8007e7e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007e82:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007e86:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8007e88:	68fb      	ldr	r3, [r7, #12]
 8007e8a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007e8e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007e90:	683b      	ldr	r3, [r7, #0]
 8007e92:	681b      	ldr	r3, [r3, #0]
 8007e94:	021b      	lsls	r3, r3, #8
 8007e96:	68fa      	ldr	r2, [r7, #12]
 8007e98:	4313      	orrs	r3, r2
 8007e9a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8007e9c:	693b      	ldr	r3, [r7, #16]
 8007e9e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007ea2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007ea4:	683b      	ldr	r3, [r7, #0]
 8007ea6:	689b      	ldr	r3, [r3, #8]
 8007ea8:	031b      	lsls	r3, r3, #12
 8007eaa:	693a      	ldr	r2, [r7, #16]
 8007eac:	4313      	orrs	r3, r2
 8007eae:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007eb0:	687b      	ldr	r3, [r7, #4]
 8007eb2:	4a14      	ldr	r2, [pc, #80]	; (8007f04 <TIM_OC4_SetConfig+0xb0>)
 8007eb4:	4293      	cmp	r3, r2
 8007eb6:	d007      	beq.n	8007ec8 <TIM_OC4_SetConfig+0x74>
 8007eb8:	687b      	ldr	r3, [r7, #4]
 8007eba:	4a13      	ldr	r2, [pc, #76]	; (8007f08 <TIM_OC4_SetConfig+0xb4>)
 8007ebc:	4293      	cmp	r3, r2
 8007ebe:	d003      	beq.n	8007ec8 <TIM_OC4_SetConfig+0x74>
 8007ec0:	687b      	ldr	r3, [r7, #4]
 8007ec2:	4a12      	ldr	r2, [pc, #72]	; (8007f0c <TIM_OC4_SetConfig+0xb8>)
 8007ec4:	4293      	cmp	r3, r2
 8007ec6:	d109      	bne.n	8007edc <TIM_OC4_SetConfig+0x88>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8007ec8:	697b      	ldr	r3, [r7, #20]
 8007eca:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007ece:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8007ed0:	683b      	ldr	r3, [r7, #0]
 8007ed2:	695b      	ldr	r3, [r3, #20]
 8007ed4:	019b      	lsls	r3, r3, #6
 8007ed6:	697a      	ldr	r2, [r7, #20]
 8007ed8:	4313      	orrs	r3, r2
 8007eda:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007edc:	687b      	ldr	r3, [r7, #4]
 8007ede:	697a      	ldr	r2, [r7, #20]
 8007ee0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007ee2:	687b      	ldr	r3, [r7, #4]
 8007ee4:	68fa      	ldr	r2, [r7, #12]
 8007ee6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007ee8:	683b      	ldr	r3, [r7, #0]
 8007eea:	685a      	ldr	r2, [r3, #4]
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	693a      	ldr	r2, [r7, #16]
 8007ef4:	621a      	str	r2, [r3, #32]
}
 8007ef6:	bf00      	nop
 8007ef8:	371c      	adds	r7, #28
 8007efa:	46bd      	mov	sp, r7
 8007efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f00:	4770      	bx	lr
 8007f02:	bf00      	nop
 8007f04:	40012c00 	.word	0x40012c00
 8007f08:	40014000 	.word	0x40014000
 8007f0c:	40014400 	.word	0x40014400

08007f10 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8007f10:	b480      	push	{r7}
 8007f12:	b087      	sub	sp, #28
 8007f14:	af00      	add	r7, sp, #0
 8007f16:	6078      	str	r0, [r7, #4]
 8007f18:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8007f1a:	687b      	ldr	r3, [r7, #4]
 8007f1c:	6a1b      	ldr	r3, [r3, #32]
 8007f1e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	6a1b      	ldr	r3, [r3, #32]
 8007f2a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	685b      	ldr	r3, [r3, #4]
 8007f30:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8007f32:	687b      	ldr	r3, [r7, #4]
 8007f34:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007f36:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8007f38:	68fb      	ldr	r3, [r7, #12]
 8007f3a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007f3e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007f42:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007f44:	683b      	ldr	r3, [r7, #0]
 8007f46:	681b      	ldr	r3, [r3, #0]
 8007f48:	68fa      	ldr	r2, [r7, #12]
 8007f4a:	4313      	orrs	r3, r2
 8007f4c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8007f4e:	693b      	ldr	r3, [r7, #16]
 8007f50:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8007f54:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8007f56:	683b      	ldr	r3, [r7, #0]
 8007f58:	689b      	ldr	r3, [r3, #8]
 8007f5a:	041b      	lsls	r3, r3, #16
 8007f5c:	693a      	ldr	r2, [r7, #16]
 8007f5e:	4313      	orrs	r3, r2
 8007f60:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007f62:	687b      	ldr	r3, [r7, #4]
 8007f64:	4a13      	ldr	r2, [pc, #76]	; (8007fb4 <TIM_OC5_SetConfig+0xa4>)
 8007f66:	4293      	cmp	r3, r2
 8007f68:	d007      	beq.n	8007f7a <TIM_OC5_SetConfig+0x6a>
 8007f6a:	687b      	ldr	r3, [r7, #4]
 8007f6c:	4a12      	ldr	r2, [pc, #72]	; (8007fb8 <TIM_OC5_SetConfig+0xa8>)
 8007f6e:	4293      	cmp	r3, r2
 8007f70:	d003      	beq.n	8007f7a <TIM_OC5_SetConfig+0x6a>
 8007f72:	687b      	ldr	r3, [r7, #4]
 8007f74:	4a11      	ldr	r2, [pc, #68]	; (8007fbc <TIM_OC5_SetConfig+0xac>)
 8007f76:	4293      	cmp	r3, r2
 8007f78:	d109      	bne.n	8007f8e <TIM_OC5_SetConfig+0x7e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8007f7a:	697b      	ldr	r3, [r7, #20]
 8007f7c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007f80:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8007f82:	683b      	ldr	r3, [r7, #0]
 8007f84:	695b      	ldr	r3, [r3, #20]
 8007f86:	021b      	lsls	r3, r3, #8
 8007f88:	697a      	ldr	r2, [r7, #20]
 8007f8a:	4313      	orrs	r3, r2
 8007f8c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007f8e:	687b      	ldr	r3, [r7, #4]
 8007f90:	697a      	ldr	r2, [r7, #20]
 8007f92:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	68fa      	ldr	r2, [r7, #12]
 8007f98:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8007f9a:	683b      	ldr	r3, [r7, #0]
 8007f9c:	685a      	ldr	r2, [r3, #4]
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007fa2:	687b      	ldr	r3, [r7, #4]
 8007fa4:	693a      	ldr	r2, [r7, #16]
 8007fa6:	621a      	str	r2, [r3, #32]
}
 8007fa8:	bf00      	nop
 8007faa:	371c      	adds	r7, #28
 8007fac:	46bd      	mov	sp, r7
 8007fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fb2:	4770      	bx	lr
 8007fb4:	40012c00 	.word	0x40012c00
 8007fb8:	40014000 	.word	0x40014000
 8007fbc:	40014400 	.word	0x40014400

08007fc0 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8007fc0:	b480      	push	{r7}
 8007fc2:	b087      	sub	sp, #28
 8007fc4:	af00      	add	r7, sp, #0
 8007fc6:	6078      	str	r0, [r7, #4]
 8007fc8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8007fca:	687b      	ldr	r3, [r7, #4]
 8007fcc:	6a1b      	ldr	r3, [r3, #32]
 8007fce:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8007fd2:	687b      	ldr	r3, [r7, #4]
 8007fd4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007fd6:	687b      	ldr	r3, [r7, #4]
 8007fd8:	6a1b      	ldr	r3, [r3, #32]
 8007fda:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007fdc:	687b      	ldr	r3, [r7, #4]
 8007fde:	685b      	ldr	r3, [r3, #4]
 8007fe0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8007fe2:	687b      	ldr	r3, [r7, #4]
 8007fe4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007fe6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8007fe8:	68fb      	ldr	r3, [r7, #12]
 8007fea:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007fee:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007ff2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007ff4:	683b      	ldr	r3, [r7, #0]
 8007ff6:	681b      	ldr	r3, [r3, #0]
 8007ff8:	021b      	lsls	r3, r3, #8
 8007ffa:	68fa      	ldr	r2, [r7, #12]
 8007ffc:	4313      	orrs	r3, r2
 8007ffe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8008000:	693b      	ldr	r3, [r7, #16]
 8008002:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8008006:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8008008:	683b      	ldr	r3, [r7, #0]
 800800a:	689b      	ldr	r3, [r3, #8]
 800800c:	051b      	lsls	r3, r3, #20
 800800e:	693a      	ldr	r2, [r7, #16]
 8008010:	4313      	orrs	r3, r2
 8008012:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	4a14      	ldr	r2, [pc, #80]	; (8008068 <TIM_OC6_SetConfig+0xa8>)
 8008018:	4293      	cmp	r3, r2
 800801a:	d007      	beq.n	800802c <TIM_OC6_SetConfig+0x6c>
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	4a13      	ldr	r2, [pc, #76]	; (800806c <TIM_OC6_SetConfig+0xac>)
 8008020:	4293      	cmp	r3, r2
 8008022:	d003      	beq.n	800802c <TIM_OC6_SetConfig+0x6c>
 8008024:	687b      	ldr	r3, [r7, #4]
 8008026:	4a12      	ldr	r2, [pc, #72]	; (8008070 <TIM_OC6_SetConfig+0xb0>)
 8008028:	4293      	cmp	r3, r2
 800802a:	d109      	bne.n	8008040 <TIM_OC6_SetConfig+0x80>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800802c:	697b      	ldr	r3, [r7, #20]
 800802e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8008032:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8008034:	683b      	ldr	r3, [r7, #0]
 8008036:	695b      	ldr	r3, [r3, #20]
 8008038:	029b      	lsls	r3, r3, #10
 800803a:	697a      	ldr	r2, [r7, #20]
 800803c:	4313      	orrs	r3, r2
 800803e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	697a      	ldr	r2, [r7, #20]
 8008044:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	68fa      	ldr	r2, [r7, #12]
 800804a:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800804c:	683b      	ldr	r3, [r7, #0]
 800804e:	685a      	ldr	r2, [r3, #4]
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008054:	687b      	ldr	r3, [r7, #4]
 8008056:	693a      	ldr	r2, [r7, #16]
 8008058:	621a      	str	r2, [r3, #32]
}
 800805a:	bf00      	nop
 800805c:	371c      	adds	r7, #28
 800805e:	46bd      	mov	sp, r7
 8008060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008064:	4770      	bx	lr
 8008066:	bf00      	nop
 8008068:	40012c00 	.word	0x40012c00
 800806c:	40014000 	.word	0x40014000
 8008070:	40014400 	.word	0x40014400

08008074 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8008074:	b480      	push	{r7}
 8008076:	b087      	sub	sp, #28
 8008078:	af00      	add	r7, sp, #0
 800807a:	60f8      	str	r0, [r7, #12]
 800807c:	60b9      	str	r1, [r7, #8]
 800807e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8008080:	68bb      	ldr	r3, [r7, #8]
 8008082:	f003 031f 	and.w	r3, r3, #31
 8008086:	2201      	movs	r2, #1
 8008088:	fa02 f303 	lsl.w	r3, r2, r3
 800808c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800808e:	68fb      	ldr	r3, [r7, #12]
 8008090:	6a1a      	ldr	r2, [r3, #32]
 8008092:	697b      	ldr	r3, [r7, #20]
 8008094:	43db      	mvns	r3, r3
 8008096:	401a      	ands	r2, r3
 8008098:	68fb      	ldr	r3, [r7, #12]
 800809a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800809c:	68fb      	ldr	r3, [r7, #12]
 800809e:	6a1a      	ldr	r2, [r3, #32]
 80080a0:	68bb      	ldr	r3, [r7, #8]
 80080a2:	f003 031f 	and.w	r3, r3, #31
 80080a6:	6879      	ldr	r1, [r7, #4]
 80080a8:	fa01 f303 	lsl.w	r3, r1, r3
 80080ac:	431a      	orrs	r2, r3
 80080ae:	68fb      	ldr	r3, [r7, #12]
 80080b0:	621a      	str	r2, [r3, #32]
}
 80080b2:	bf00      	nop
 80080b4:	371c      	adds	r7, #28
 80080b6:	46bd      	mov	sp, r7
 80080b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080bc:	4770      	bx	lr
	...

080080c0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80080c0:	b480      	push	{r7}
 80080c2:	b085      	sub	sp, #20
 80080c4:	af00      	add	r7, sp, #0
 80080c6:	6078      	str	r0, [r7, #4]
 80080c8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80080ca:	687b      	ldr	r3, [r7, #4]
 80080cc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80080d0:	2b01      	cmp	r3, #1
 80080d2:	d101      	bne.n	80080d8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80080d4:	2302      	movs	r3, #2
 80080d6:	e04f      	b.n	8008178 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	2201      	movs	r2, #1
 80080dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	2202      	movs	r2, #2
 80080e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	681b      	ldr	r3, [r3, #0]
 80080ec:	685b      	ldr	r3, [r3, #4]
 80080ee:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80080f0:	687b      	ldr	r3, [r7, #4]
 80080f2:	681b      	ldr	r3, [r3, #0]
 80080f4:	689b      	ldr	r3, [r3, #8]
 80080f6:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80080f8:	687b      	ldr	r3, [r7, #4]
 80080fa:	681b      	ldr	r3, [r3, #0]
 80080fc:	4a21      	ldr	r2, [pc, #132]	; (8008184 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 80080fe:	4293      	cmp	r3, r2
 8008100:	d108      	bne.n	8008114 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8008102:	68fb      	ldr	r3, [r7, #12]
 8008104:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8008108:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800810a:	683b      	ldr	r3, [r7, #0]
 800810c:	685b      	ldr	r3, [r3, #4]
 800810e:	68fa      	ldr	r2, [r7, #12]
 8008110:	4313      	orrs	r3, r2
 8008112:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008114:	68fb      	ldr	r3, [r7, #12]
 8008116:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800811a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800811c:	683b      	ldr	r3, [r7, #0]
 800811e:	681b      	ldr	r3, [r3, #0]
 8008120:	68fa      	ldr	r2, [r7, #12]
 8008122:	4313      	orrs	r3, r2
 8008124:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8008126:	687b      	ldr	r3, [r7, #4]
 8008128:	681b      	ldr	r3, [r3, #0]
 800812a:	68fa      	ldr	r2, [r7, #12]
 800812c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800812e:	687b      	ldr	r3, [r7, #4]
 8008130:	681b      	ldr	r3, [r3, #0]
 8008132:	4a14      	ldr	r2, [pc, #80]	; (8008184 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8008134:	4293      	cmp	r3, r2
 8008136:	d009      	beq.n	800814c <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	681b      	ldr	r3, [r3, #0]
 800813c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008140:	d004      	beq.n	800814c <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8008142:	687b      	ldr	r3, [r7, #4]
 8008144:	681b      	ldr	r3, [r3, #0]
 8008146:	4a10      	ldr	r2, [pc, #64]	; (8008188 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8008148:	4293      	cmp	r3, r2
 800814a:	d10c      	bne.n	8008166 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800814c:	68bb      	ldr	r3, [r7, #8]
 800814e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008152:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008154:	683b      	ldr	r3, [r7, #0]
 8008156:	689b      	ldr	r3, [r3, #8]
 8008158:	68ba      	ldr	r2, [r7, #8]
 800815a:	4313      	orrs	r3, r2
 800815c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800815e:	687b      	ldr	r3, [r7, #4]
 8008160:	681b      	ldr	r3, [r3, #0]
 8008162:	68ba      	ldr	r2, [r7, #8]
 8008164:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008166:	687b      	ldr	r3, [r7, #4]
 8008168:	2201      	movs	r2, #1
 800816a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800816e:	687b      	ldr	r3, [r7, #4]
 8008170:	2200      	movs	r2, #0
 8008172:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008176:	2300      	movs	r3, #0
}
 8008178:	4618      	mov	r0, r3
 800817a:	3714      	adds	r7, #20
 800817c:	46bd      	mov	sp, r7
 800817e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008182:	4770      	bx	lr
 8008184:	40012c00 	.word	0x40012c00
 8008188:	40014000 	.word	0x40014000

0800818c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800818c:	b480      	push	{r7}
 800818e:	b083      	sub	sp, #12
 8008190:	af00      	add	r7, sp, #0
 8008192:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8008194:	bf00      	nop
 8008196:	370c      	adds	r7, #12
 8008198:	46bd      	mov	sp, r7
 800819a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800819e:	4770      	bx	lr

080081a0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80081a0:	b480      	push	{r7}
 80081a2:	b083      	sub	sp, #12
 80081a4:	af00      	add	r7, sp, #0
 80081a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80081a8:	bf00      	nop
 80081aa:	370c      	adds	r7, #12
 80081ac:	46bd      	mov	sp, r7
 80081ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081b2:	4770      	bx	lr

080081b4 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80081b4:	b480      	push	{r7}
 80081b6:	b083      	sub	sp, #12
 80081b8:	af00      	add	r7, sp, #0
 80081ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80081bc:	bf00      	nop
 80081be:	370c      	adds	r7, #12
 80081c0:	46bd      	mov	sp, r7
 80081c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081c6:	4770      	bx	lr

080081c8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80081c8:	b580      	push	{r7, lr}
 80081ca:	b082      	sub	sp, #8
 80081cc:	af00      	add	r7, sp, #0
 80081ce:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	2b00      	cmp	r3, #0
 80081d4:	d101      	bne.n	80081da <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80081d6:	2301      	movs	r3, #1
 80081d8:	e040      	b.n	800825c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80081da:	687b      	ldr	r3, [r7, #4]
 80081dc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80081de:	2b00      	cmp	r3, #0
 80081e0:	d106      	bne.n	80081f0 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80081e2:	687b      	ldr	r3, [r7, #4]
 80081e4:	2200      	movs	r2, #0
 80081e6:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80081ea:	6878      	ldr	r0, [r7, #4]
 80081ec:	f7fc fbe2 	bl	80049b4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80081f0:	687b      	ldr	r3, [r7, #4]
 80081f2:	2224      	movs	r2, #36	; 0x24
 80081f4:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 80081f6:	687b      	ldr	r3, [r7, #4]
 80081f8:	681b      	ldr	r3, [r3, #0]
 80081fa:	681a      	ldr	r2, [r3, #0]
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	681b      	ldr	r3, [r3, #0]
 8008200:	f022 0201 	bic.w	r2, r2, #1
 8008204:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8008206:	6878      	ldr	r0, [r7, #4]
 8008208:	f000 fc18 	bl	8008a3c <UART_SetConfig>
 800820c:	4603      	mov	r3, r0
 800820e:	2b01      	cmp	r3, #1
 8008210:	d101      	bne.n	8008216 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8008212:	2301      	movs	r3, #1
 8008214:	e022      	b.n	800825c <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8008216:	687b      	ldr	r3, [r7, #4]
 8008218:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800821a:	2b00      	cmp	r3, #0
 800821c:	d002      	beq.n	8008224 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800821e:	6878      	ldr	r0, [r7, #4]
 8008220:	f000 fe38 	bl	8008e94 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008224:	687b      	ldr	r3, [r7, #4]
 8008226:	681b      	ldr	r3, [r3, #0]
 8008228:	685a      	ldr	r2, [r3, #4]
 800822a:	687b      	ldr	r3, [r7, #4]
 800822c:	681b      	ldr	r3, [r3, #0]
 800822e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8008232:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008234:	687b      	ldr	r3, [r7, #4]
 8008236:	681b      	ldr	r3, [r3, #0]
 8008238:	689a      	ldr	r2, [r3, #8]
 800823a:	687b      	ldr	r3, [r7, #4]
 800823c:	681b      	ldr	r3, [r3, #0]
 800823e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8008242:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8008244:	687b      	ldr	r3, [r7, #4]
 8008246:	681b      	ldr	r3, [r3, #0]
 8008248:	681a      	ldr	r2, [r3, #0]
 800824a:	687b      	ldr	r3, [r7, #4]
 800824c:	681b      	ldr	r3, [r3, #0]
 800824e:	f042 0201 	orr.w	r2, r2, #1
 8008252:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8008254:	6878      	ldr	r0, [r7, #4]
 8008256:	f000 febf 	bl	8008fd8 <UART_CheckIdleState>
 800825a:	4603      	mov	r3, r0
}
 800825c:	4618      	mov	r0, r3
 800825e:	3708      	adds	r7, #8
 8008260:	46bd      	mov	sp, r7
 8008262:	bd80      	pop	{r7, pc}

08008264 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008264:	b580      	push	{r7, lr}
 8008266:	b08a      	sub	sp, #40	; 0x28
 8008268:	af02      	add	r7, sp, #8
 800826a:	60f8      	str	r0, [r7, #12]
 800826c:	60b9      	str	r1, [r7, #8]
 800826e:	603b      	str	r3, [r7, #0]
 8008270:	4613      	mov	r3, r2
 8008272:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8008274:	68fb      	ldr	r3, [r7, #12]
 8008276:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008278:	2b20      	cmp	r3, #32
 800827a:	f040 8082 	bne.w	8008382 <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 800827e:	68bb      	ldr	r3, [r7, #8]
 8008280:	2b00      	cmp	r3, #0
 8008282:	d002      	beq.n	800828a <HAL_UART_Transmit+0x26>
 8008284:	88fb      	ldrh	r3, [r7, #6]
 8008286:	2b00      	cmp	r3, #0
 8008288:	d101      	bne.n	800828e <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800828a:	2301      	movs	r3, #1
 800828c:	e07a      	b.n	8008384 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 800828e:	68fb      	ldr	r3, [r7, #12]
 8008290:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8008294:	2b01      	cmp	r3, #1
 8008296:	d101      	bne.n	800829c <HAL_UART_Transmit+0x38>
 8008298:	2302      	movs	r3, #2
 800829a:	e073      	b.n	8008384 <HAL_UART_Transmit+0x120>
 800829c:	68fb      	ldr	r3, [r7, #12]
 800829e:	2201      	movs	r2, #1
 80082a0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80082a4:	68fb      	ldr	r3, [r7, #12]
 80082a6:	2200      	movs	r2, #0
 80082a8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80082ac:	68fb      	ldr	r3, [r7, #12]
 80082ae:	2221      	movs	r2, #33	; 0x21
 80082b0:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80082b2:	f7fc fd95 	bl	8004de0 <HAL_GetTick>
 80082b6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80082b8:	68fb      	ldr	r3, [r7, #12]
 80082ba:	88fa      	ldrh	r2, [r7, #6]
 80082bc:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80082c0:	68fb      	ldr	r3, [r7, #12]
 80082c2:	88fa      	ldrh	r2, [r7, #6]
 80082c4:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80082c8:	68fb      	ldr	r3, [r7, #12]
 80082ca:	689b      	ldr	r3, [r3, #8]
 80082cc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80082d0:	d108      	bne.n	80082e4 <HAL_UART_Transmit+0x80>
 80082d2:	68fb      	ldr	r3, [r7, #12]
 80082d4:	691b      	ldr	r3, [r3, #16]
 80082d6:	2b00      	cmp	r3, #0
 80082d8:	d104      	bne.n	80082e4 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 80082da:	2300      	movs	r3, #0
 80082dc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80082de:	68bb      	ldr	r3, [r7, #8]
 80082e0:	61bb      	str	r3, [r7, #24]
 80082e2:	e003      	b.n	80082ec <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 80082e4:	68bb      	ldr	r3, [r7, #8]
 80082e6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80082e8:	2300      	movs	r3, #0
 80082ea:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80082ec:	68fb      	ldr	r3, [r7, #12]
 80082ee:	2200      	movs	r2, #0
 80082f0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 80082f4:	e02d      	b.n	8008352 <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80082f6:	683b      	ldr	r3, [r7, #0]
 80082f8:	9300      	str	r3, [sp, #0]
 80082fa:	697b      	ldr	r3, [r7, #20]
 80082fc:	2200      	movs	r2, #0
 80082fe:	2180      	movs	r1, #128	; 0x80
 8008300:	68f8      	ldr	r0, [r7, #12]
 8008302:	f000 feb2 	bl	800906a <UART_WaitOnFlagUntilTimeout>
 8008306:	4603      	mov	r3, r0
 8008308:	2b00      	cmp	r3, #0
 800830a:	d001      	beq.n	8008310 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 800830c:	2303      	movs	r3, #3
 800830e:	e039      	b.n	8008384 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 8008310:	69fb      	ldr	r3, [r7, #28]
 8008312:	2b00      	cmp	r3, #0
 8008314:	d10b      	bne.n	800832e <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8008316:	69bb      	ldr	r3, [r7, #24]
 8008318:	881a      	ldrh	r2, [r3, #0]
 800831a:	68fb      	ldr	r3, [r7, #12]
 800831c:	681b      	ldr	r3, [r3, #0]
 800831e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008322:	b292      	uxth	r2, r2
 8008324:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8008326:	69bb      	ldr	r3, [r7, #24]
 8008328:	3302      	adds	r3, #2
 800832a:	61bb      	str	r3, [r7, #24]
 800832c:	e008      	b.n	8008340 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800832e:	69fb      	ldr	r3, [r7, #28]
 8008330:	781a      	ldrb	r2, [r3, #0]
 8008332:	68fb      	ldr	r3, [r7, #12]
 8008334:	681b      	ldr	r3, [r3, #0]
 8008336:	b292      	uxth	r2, r2
 8008338:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800833a:	69fb      	ldr	r3, [r7, #28]
 800833c:	3301      	adds	r3, #1
 800833e:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8008340:	68fb      	ldr	r3, [r7, #12]
 8008342:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8008346:	b29b      	uxth	r3, r3
 8008348:	3b01      	subs	r3, #1
 800834a:	b29a      	uxth	r2, r3
 800834c:	68fb      	ldr	r3, [r7, #12]
 800834e:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8008352:	68fb      	ldr	r3, [r7, #12]
 8008354:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8008358:	b29b      	uxth	r3, r3
 800835a:	2b00      	cmp	r3, #0
 800835c:	d1cb      	bne.n	80082f6 <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800835e:	683b      	ldr	r3, [r7, #0]
 8008360:	9300      	str	r3, [sp, #0]
 8008362:	697b      	ldr	r3, [r7, #20]
 8008364:	2200      	movs	r2, #0
 8008366:	2140      	movs	r1, #64	; 0x40
 8008368:	68f8      	ldr	r0, [r7, #12]
 800836a:	f000 fe7e 	bl	800906a <UART_WaitOnFlagUntilTimeout>
 800836e:	4603      	mov	r3, r0
 8008370:	2b00      	cmp	r3, #0
 8008372:	d001      	beq.n	8008378 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8008374:	2303      	movs	r3, #3
 8008376:	e005      	b.n	8008384 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8008378:	68fb      	ldr	r3, [r7, #12]
 800837a:	2220      	movs	r2, #32
 800837c:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 800837e:	2300      	movs	r3, #0
 8008380:	e000      	b.n	8008384 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 8008382:	2302      	movs	r3, #2
  }
}
 8008384:	4618      	mov	r0, r3
 8008386:	3720      	adds	r7, #32
 8008388:	46bd      	mov	sp, r7
 800838a:	bd80      	pop	{r7, pc}

0800838c <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800838c:	b580      	push	{r7, lr}
 800838e:	b08a      	sub	sp, #40	; 0x28
 8008390:	af00      	add	r7, sp, #0
 8008392:	60f8      	str	r0, [r7, #12]
 8008394:	60b9      	str	r1, [r7, #8]
 8008396:	4613      	mov	r3, r2
 8008398:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800839a:	68fb      	ldr	r3, [r7, #12]
 800839c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800839e:	2b20      	cmp	r3, #32
 80083a0:	d142      	bne.n	8008428 <HAL_UART_Receive_IT+0x9c>
  {
    if ((pData == NULL) || (Size == 0U))
 80083a2:	68bb      	ldr	r3, [r7, #8]
 80083a4:	2b00      	cmp	r3, #0
 80083a6:	d002      	beq.n	80083ae <HAL_UART_Receive_IT+0x22>
 80083a8:	88fb      	ldrh	r3, [r7, #6]
 80083aa:	2b00      	cmp	r3, #0
 80083ac:	d101      	bne.n	80083b2 <HAL_UART_Receive_IT+0x26>
    {
      return HAL_ERROR;
 80083ae:	2301      	movs	r3, #1
 80083b0:	e03b      	b.n	800842a <HAL_UART_Receive_IT+0x9e>
    }

    __HAL_LOCK(huart);
 80083b2:	68fb      	ldr	r3, [r7, #12]
 80083b4:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 80083b8:	2b01      	cmp	r3, #1
 80083ba:	d101      	bne.n	80083c0 <HAL_UART_Receive_IT+0x34>
 80083bc:	2302      	movs	r3, #2
 80083be:	e034      	b.n	800842a <HAL_UART_Receive_IT+0x9e>
 80083c0:	68fb      	ldr	r3, [r7, #12]
 80083c2:	2201      	movs	r2, #1
 80083c4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80083c8:	68fb      	ldr	r3, [r7, #12]
 80083ca:	2200      	movs	r2, #0
 80083cc:	661a      	str	r2, [r3, #96]	; 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80083ce:	68fb      	ldr	r3, [r7, #12]
 80083d0:	681b      	ldr	r3, [r3, #0]
 80083d2:	4a18      	ldr	r2, [pc, #96]	; (8008434 <HAL_UART_Receive_IT+0xa8>)
 80083d4:	4293      	cmp	r3, r2
 80083d6:	d01f      	beq.n	8008418 <HAL_UART_Receive_IT+0x8c>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80083d8:	68fb      	ldr	r3, [r7, #12]
 80083da:	681b      	ldr	r3, [r3, #0]
 80083dc:	685b      	ldr	r3, [r3, #4]
 80083de:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80083e2:	2b00      	cmp	r3, #0
 80083e4:	d018      	beq.n	8008418 <HAL_UART_Receive_IT+0x8c>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80083e6:	68fb      	ldr	r3, [r7, #12]
 80083e8:	681b      	ldr	r3, [r3, #0]
 80083ea:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80083ec:	697b      	ldr	r3, [r7, #20]
 80083ee:	e853 3f00 	ldrex	r3, [r3]
 80083f2:	613b      	str	r3, [r7, #16]
   return(result);
 80083f4:	693b      	ldr	r3, [r7, #16]
 80083f6:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80083fa:	627b      	str	r3, [r7, #36]	; 0x24
 80083fc:	68fb      	ldr	r3, [r7, #12]
 80083fe:	681b      	ldr	r3, [r3, #0]
 8008400:	461a      	mov	r2, r3
 8008402:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008404:	623b      	str	r3, [r7, #32]
 8008406:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008408:	69f9      	ldr	r1, [r7, #28]
 800840a:	6a3a      	ldr	r2, [r7, #32]
 800840c:	e841 2300 	strex	r3, r2, [r1]
 8008410:	61bb      	str	r3, [r7, #24]
   return(result);
 8008412:	69bb      	ldr	r3, [r7, #24]
 8008414:	2b00      	cmp	r3, #0
 8008416:	d1e6      	bne.n	80083e6 <HAL_UART_Receive_IT+0x5a>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8008418:	88fb      	ldrh	r3, [r7, #6]
 800841a:	461a      	mov	r2, r3
 800841c:	68b9      	ldr	r1, [r7, #8]
 800841e:	68f8      	ldr	r0, [r7, #12]
 8008420:	f000 fee8 	bl	80091f4 <UART_Start_Receive_IT>
 8008424:	4603      	mov	r3, r0
 8008426:	e000      	b.n	800842a <HAL_UART_Receive_IT+0x9e>
  }
  else
  {
    return HAL_BUSY;
 8008428:	2302      	movs	r3, #2
  }
}
 800842a:	4618      	mov	r0, r3
 800842c:	3728      	adds	r7, #40	; 0x28
 800842e:	46bd      	mov	sp, r7
 8008430:	bd80      	pop	{r7, pc}
 8008432:	bf00      	nop
 8008434:	40008000 	.word	0x40008000

08008438 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8008438:	b580      	push	{r7, lr}
 800843a:	b0ba      	sub	sp, #232	; 0xe8
 800843c:	af00      	add	r7, sp, #0
 800843e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8008440:	687b      	ldr	r3, [r7, #4]
 8008442:	681b      	ldr	r3, [r3, #0]
 8008444:	69db      	ldr	r3, [r3, #28]
 8008446:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800844a:	687b      	ldr	r3, [r7, #4]
 800844c:	681b      	ldr	r3, [r3, #0]
 800844e:	681b      	ldr	r3, [r3, #0]
 8008450:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8008454:	687b      	ldr	r3, [r7, #4]
 8008456:	681b      	ldr	r3, [r3, #0]
 8008458:	689b      	ldr	r3, [r3, #8]
 800845a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800845e:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8008462:	f640 030f 	movw	r3, #2063	; 0x80f
 8008466:	4013      	ands	r3, r2
 8008468:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 800846c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008470:	2b00      	cmp	r3, #0
 8008472:	d115      	bne.n	80084a0 <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8008474:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008478:	f003 0320 	and.w	r3, r3, #32
 800847c:	2b00      	cmp	r3, #0
 800847e:	d00f      	beq.n	80084a0 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8008480:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008484:	f003 0320 	and.w	r3, r3, #32
 8008488:	2b00      	cmp	r3, #0
 800848a:	d009      	beq.n	80084a0 <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 800848c:	687b      	ldr	r3, [r7, #4]
 800848e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008490:	2b00      	cmp	r3, #0
 8008492:	f000 82a6 	beq.w	80089e2 <HAL_UART_IRQHandler+0x5aa>
      {
        huart->RxISR(huart);
 8008496:	687b      	ldr	r3, [r7, #4]
 8008498:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800849a:	6878      	ldr	r0, [r7, #4]
 800849c:	4798      	blx	r3
      }
      return;
 800849e:	e2a0      	b.n	80089e2 <HAL_UART_IRQHandler+0x5aa>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 80084a0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80084a4:	2b00      	cmp	r3, #0
 80084a6:	f000 8117 	beq.w	80086d8 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 80084aa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80084ae:	f003 0301 	and.w	r3, r3, #1
 80084b2:	2b00      	cmp	r3, #0
 80084b4:	d106      	bne.n	80084c4 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 80084b6:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 80084ba:	4b85      	ldr	r3, [pc, #532]	; (80086d0 <HAL_UART_IRQHandler+0x298>)
 80084bc:	4013      	ands	r3, r2
 80084be:	2b00      	cmp	r3, #0
 80084c0:	f000 810a 	beq.w	80086d8 <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80084c4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80084c8:	f003 0301 	and.w	r3, r3, #1
 80084cc:	2b00      	cmp	r3, #0
 80084ce:	d011      	beq.n	80084f4 <HAL_UART_IRQHandler+0xbc>
 80084d0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80084d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80084d8:	2b00      	cmp	r3, #0
 80084da:	d00b      	beq.n	80084f4 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80084dc:	687b      	ldr	r3, [r7, #4]
 80084de:	681b      	ldr	r3, [r3, #0]
 80084e0:	2201      	movs	r2, #1
 80084e2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80084e4:	687b      	ldr	r3, [r7, #4]
 80084e6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80084ea:	f043 0201 	orr.w	r2, r3, #1
 80084ee:	687b      	ldr	r3, [r7, #4]
 80084f0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80084f4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80084f8:	f003 0302 	and.w	r3, r3, #2
 80084fc:	2b00      	cmp	r3, #0
 80084fe:	d011      	beq.n	8008524 <HAL_UART_IRQHandler+0xec>
 8008500:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008504:	f003 0301 	and.w	r3, r3, #1
 8008508:	2b00      	cmp	r3, #0
 800850a:	d00b      	beq.n	8008524 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800850c:	687b      	ldr	r3, [r7, #4]
 800850e:	681b      	ldr	r3, [r3, #0]
 8008510:	2202      	movs	r2, #2
 8008512:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8008514:	687b      	ldr	r3, [r7, #4]
 8008516:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800851a:	f043 0204 	orr.w	r2, r3, #4
 800851e:	687b      	ldr	r3, [r7, #4]
 8008520:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008524:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008528:	f003 0304 	and.w	r3, r3, #4
 800852c:	2b00      	cmp	r3, #0
 800852e:	d011      	beq.n	8008554 <HAL_UART_IRQHandler+0x11c>
 8008530:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008534:	f003 0301 	and.w	r3, r3, #1
 8008538:	2b00      	cmp	r3, #0
 800853a:	d00b      	beq.n	8008554 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800853c:	687b      	ldr	r3, [r7, #4]
 800853e:	681b      	ldr	r3, [r3, #0]
 8008540:	2204      	movs	r2, #4
 8008542:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8008544:	687b      	ldr	r3, [r7, #4]
 8008546:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800854a:	f043 0202 	orr.w	r2, r3, #2
 800854e:	687b      	ldr	r3, [r7, #4]
 8008550:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 8008554:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008558:	f003 0308 	and.w	r3, r3, #8
 800855c:	2b00      	cmp	r3, #0
 800855e:	d017      	beq.n	8008590 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8008560:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008564:	f003 0320 	and.w	r3, r3, #32
 8008568:	2b00      	cmp	r3, #0
 800856a:	d105      	bne.n	8008578 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 800856c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008570:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8008574:	2b00      	cmp	r3, #0
 8008576:	d00b      	beq.n	8008590 <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8008578:	687b      	ldr	r3, [r7, #4]
 800857a:	681b      	ldr	r3, [r3, #0]
 800857c:	2208      	movs	r2, #8
 800857e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8008580:	687b      	ldr	r3, [r7, #4]
 8008582:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008586:	f043 0208 	orr.w	r2, r3, #8
 800858a:	687b      	ldr	r3, [r7, #4]
 800858c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8008590:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008594:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008598:	2b00      	cmp	r3, #0
 800859a:	d012      	beq.n	80085c2 <HAL_UART_IRQHandler+0x18a>
 800859c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80085a0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80085a4:	2b00      	cmp	r3, #0
 80085a6:	d00c      	beq.n	80085c2 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80085a8:	687b      	ldr	r3, [r7, #4]
 80085aa:	681b      	ldr	r3, [r3, #0]
 80085ac:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80085b0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80085b2:	687b      	ldr	r3, [r7, #4]
 80085b4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80085b8:	f043 0220 	orr.w	r2, r3, #32
 80085bc:	687b      	ldr	r3, [r7, #4]
 80085be:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80085c2:	687b      	ldr	r3, [r7, #4]
 80085c4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80085c8:	2b00      	cmp	r3, #0
 80085ca:	f000 820c 	beq.w	80089e6 <HAL_UART_IRQHandler+0x5ae>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 80085ce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80085d2:	f003 0320 	and.w	r3, r3, #32
 80085d6:	2b00      	cmp	r3, #0
 80085d8:	d00d      	beq.n	80085f6 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80085da:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80085de:	f003 0320 	and.w	r3, r3, #32
 80085e2:	2b00      	cmp	r3, #0
 80085e4:	d007      	beq.n	80085f6 <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 80085e6:	687b      	ldr	r3, [r7, #4]
 80085e8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80085ea:	2b00      	cmp	r3, #0
 80085ec:	d003      	beq.n	80085f6 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 80085ee:	687b      	ldr	r3, [r7, #4]
 80085f0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80085f2:	6878      	ldr	r0, [r7, #4]
 80085f4:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80085f6:	687b      	ldr	r3, [r7, #4]
 80085f8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80085fc:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8008600:	687b      	ldr	r3, [r7, #4]
 8008602:	681b      	ldr	r3, [r3, #0]
 8008604:	689b      	ldr	r3, [r3, #8]
 8008606:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800860a:	2b40      	cmp	r3, #64	; 0x40
 800860c:	d005      	beq.n	800861a <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800860e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8008612:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8008616:	2b00      	cmp	r3, #0
 8008618:	d04f      	beq.n	80086ba <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800861a:	6878      	ldr	r0, [r7, #4]
 800861c:	f000 feb4 	bl	8009388 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008620:	687b      	ldr	r3, [r7, #4]
 8008622:	681b      	ldr	r3, [r3, #0]
 8008624:	689b      	ldr	r3, [r3, #8]
 8008626:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800862a:	2b40      	cmp	r3, #64	; 0x40
 800862c:	d141      	bne.n	80086b2 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800862e:	687b      	ldr	r3, [r7, #4]
 8008630:	681b      	ldr	r3, [r3, #0]
 8008632:	3308      	adds	r3, #8
 8008634:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008638:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800863c:	e853 3f00 	ldrex	r3, [r3]
 8008640:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8008644:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8008648:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800864c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8008650:	687b      	ldr	r3, [r7, #4]
 8008652:	681b      	ldr	r3, [r3, #0]
 8008654:	3308      	adds	r3, #8
 8008656:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800865a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800865e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008662:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8008666:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800866a:	e841 2300 	strex	r3, r2, [r1]
 800866e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8008672:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8008676:	2b00      	cmp	r3, #0
 8008678:	d1d9      	bne.n	800862e <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800867a:	687b      	ldr	r3, [r7, #4]
 800867c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800867e:	2b00      	cmp	r3, #0
 8008680:	d013      	beq.n	80086aa <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8008682:	687b      	ldr	r3, [r7, #4]
 8008684:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008686:	4a13      	ldr	r2, [pc, #76]	; (80086d4 <HAL_UART_IRQHandler+0x29c>)
 8008688:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800868a:	687b      	ldr	r3, [r7, #4]
 800868c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800868e:	4618      	mov	r0, r3
 8008690:	f7fc fecf 	bl	8005432 <HAL_DMA_Abort_IT>
 8008694:	4603      	mov	r3, r0
 8008696:	2b00      	cmp	r3, #0
 8008698:	d017      	beq.n	80086ca <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800869a:	687b      	ldr	r3, [r7, #4]
 800869c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800869e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80086a0:	687a      	ldr	r2, [r7, #4]
 80086a2:	6f12      	ldr	r2, [r2, #112]	; 0x70
 80086a4:	4610      	mov	r0, r2
 80086a6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80086a8:	e00f      	b.n	80086ca <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80086aa:	6878      	ldr	r0, [r7, #4]
 80086ac:	f000 f9b0 	bl	8008a10 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80086b0:	e00b      	b.n	80086ca <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80086b2:	6878      	ldr	r0, [r7, #4]
 80086b4:	f000 f9ac 	bl	8008a10 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80086b8:	e007      	b.n	80086ca <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80086ba:	6878      	ldr	r0, [r7, #4]
 80086bc:	f000 f9a8 	bl	8008a10 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80086c0:	687b      	ldr	r3, [r7, #4]
 80086c2:	2200      	movs	r2, #0
 80086c4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 80086c8:	e18d      	b.n	80089e6 <HAL_UART_IRQHandler+0x5ae>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80086ca:	bf00      	nop
    return;
 80086cc:	e18b      	b.n	80089e6 <HAL_UART_IRQHandler+0x5ae>
 80086ce:	bf00      	nop
 80086d0:	04000120 	.word	0x04000120
 80086d4:	0800944f 	.word	0x0800944f

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80086d8:	687b      	ldr	r3, [r7, #4]
 80086da:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80086dc:	2b01      	cmp	r3, #1
 80086de:	f040 8146 	bne.w	800896e <HAL_UART_IRQHandler+0x536>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80086e2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80086e6:	f003 0310 	and.w	r3, r3, #16
 80086ea:	2b00      	cmp	r3, #0
 80086ec:	f000 813f 	beq.w	800896e <HAL_UART_IRQHandler+0x536>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80086f0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80086f4:	f003 0310 	and.w	r3, r3, #16
 80086f8:	2b00      	cmp	r3, #0
 80086fa:	f000 8138 	beq.w	800896e <HAL_UART_IRQHandler+0x536>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80086fe:	687b      	ldr	r3, [r7, #4]
 8008700:	681b      	ldr	r3, [r3, #0]
 8008702:	2210      	movs	r2, #16
 8008704:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008706:	687b      	ldr	r3, [r7, #4]
 8008708:	681b      	ldr	r3, [r3, #0]
 800870a:	689b      	ldr	r3, [r3, #8]
 800870c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008710:	2b40      	cmp	r3, #64	; 0x40
 8008712:	f040 80b4 	bne.w	800887e <HAL_UART_IRQHandler+0x446>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8008716:	687b      	ldr	r3, [r7, #4]
 8008718:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800871a:	681b      	ldr	r3, [r3, #0]
 800871c:	685b      	ldr	r3, [r3, #4]
 800871e:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8008722:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8008726:	2b00      	cmp	r3, #0
 8008728:	f000 815f 	beq.w	80089ea <HAL_UART_IRQHandler+0x5b2>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800872c:	687b      	ldr	r3, [r7, #4]
 800872e:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8008732:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8008736:	429a      	cmp	r2, r3
 8008738:	f080 8157 	bcs.w	80089ea <HAL_UART_IRQHandler+0x5b2>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800873c:	687b      	ldr	r3, [r7, #4]
 800873e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8008742:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8008746:	687b      	ldr	r3, [r7, #4]
 8008748:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800874a:	681b      	ldr	r3, [r3, #0]
 800874c:	681b      	ldr	r3, [r3, #0]
 800874e:	f003 0320 	and.w	r3, r3, #32
 8008752:	2b00      	cmp	r3, #0
 8008754:	f040 8085 	bne.w	8008862 <HAL_UART_IRQHandler+0x42a>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008758:	687b      	ldr	r3, [r7, #4]
 800875a:	681b      	ldr	r3, [r3, #0]
 800875c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008760:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8008764:	e853 3f00 	ldrex	r3, [r3]
 8008768:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800876c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8008770:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008774:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8008778:	687b      	ldr	r3, [r7, #4]
 800877a:	681b      	ldr	r3, [r3, #0]
 800877c:	461a      	mov	r2, r3
 800877e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8008782:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8008786:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800878a:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800878e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8008792:	e841 2300 	strex	r3, r2, [r1]
 8008796:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800879a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800879e:	2b00      	cmp	r3, #0
 80087a0:	d1da      	bne.n	8008758 <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80087a2:	687b      	ldr	r3, [r7, #4]
 80087a4:	681b      	ldr	r3, [r3, #0]
 80087a6:	3308      	adds	r3, #8
 80087a8:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80087aa:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80087ac:	e853 3f00 	ldrex	r3, [r3]
 80087b0:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80087b2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80087b4:	f023 0301 	bic.w	r3, r3, #1
 80087b8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80087bc:	687b      	ldr	r3, [r7, #4]
 80087be:	681b      	ldr	r3, [r3, #0]
 80087c0:	3308      	adds	r3, #8
 80087c2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80087c6:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80087ca:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80087cc:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80087ce:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80087d2:	e841 2300 	strex	r3, r2, [r1]
 80087d6:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80087d8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80087da:	2b00      	cmp	r3, #0
 80087dc:	d1e1      	bne.n	80087a2 <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80087de:	687b      	ldr	r3, [r7, #4]
 80087e0:	681b      	ldr	r3, [r3, #0]
 80087e2:	3308      	adds	r3, #8
 80087e4:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80087e6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80087e8:	e853 3f00 	ldrex	r3, [r3]
 80087ec:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80087ee:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80087f0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80087f4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80087f8:	687b      	ldr	r3, [r7, #4]
 80087fa:	681b      	ldr	r3, [r3, #0]
 80087fc:	3308      	adds	r3, #8
 80087fe:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8008802:	66fa      	str	r2, [r7, #108]	; 0x6c
 8008804:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008806:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8008808:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800880a:	e841 2300 	strex	r3, r2, [r1]
 800880e:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8008810:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008812:	2b00      	cmp	r3, #0
 8008814:	d1e3      	bne.n	80087de <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8008816:	687b      	ldr	r3, [r7, #4]
 8008818:	2220      	movs	r2, #32
 800881a:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800881c:	687b      	ldr	r3, [r7, #4]
 800881e:	2200      	movs	r2, #0
 8008820:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008822:	687b      	ldr	r3, [r7, #4]
 8008824:	681b      	ldr	r3, [r3, #0]
 8008826:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008828:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800882a:	e853 3f00 	ldrex	r3, [r3]
 800882e:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8008830:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008832:	f023 0310 	bic.w	r3, r3, #16
 8008836:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800883a:	687b      	ldr	r3, [r7, #4]
 800883c:	681b      	ldr	r3, [r3, #0]
 800883e:	461a      	mov	r2, r3
 8008840:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8008844:	65bb      	str	r3, [r7, #88]	; 0x58
 8008846:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008848:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800884a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800884c:	e841 2300 	strex	r3, r2, [r1]
 8008850:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8008852:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008854:	2b00      	cmp	r3, #0
 8008856:	d1e4      	bne.n	8008822 <HAL_UART_IRQHandler+0x3ea>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8008858:	687b      	ldr	r3, [r7, #4]
 800885a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800885c:	4618      	mov	r0, r3
 800885e:	f7fc fdaa 	bl	80053b6 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8008862:	687b      	ldr	r3, [r7, #4]
 8008864:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8008868:	687b      	ldr	r3, [r7, #4]
 800886a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800886e:	b29b      	uxth	r3, r3
 8008870:	1ad3      	subs	r3, r2, r3
 8008872:	b29b      	uxth	r3, r3
 8008874:	4619      	mov	r1, r3
 8008876:	6878      	ldr	r0, [r7, #4]
 8008878:	f000 f8d4 	bl	8008a24 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800887c:	e0b5      	b.n	80089ea <HAL_UART_IRQHandler+0x5b2>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800887e:	687b      	ldr	r3, [r7, #4]
 8008880:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8008884:	687b      	ldr	r3, [r7, #4]
 8008886:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800888a:	b29b      	uxth	r3, r3
 800888c:	1ad3      	subs	r3, r2, r3
 800888e:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8008892:	687b      	ldr	r3, [r7, #4]
 8008894:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8008898:	b29b      	uxth	r3, r3
 800889a:	2b00      	cmp	r3, #0
 800889c:	f000 80a7 	beq.w	80089ee <HAL_UART_IRQHandler+0x5b6>
          && (nb_rx_data > 0U))
 80088a0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80088a4:	2b00      	cmp	r3, #0
 80088a6:	f000 80a2 	beq.w	80089ee <HAL_UART_IRQHandler+0x5b6>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80088aa:	687b      	ldr	r3, [r7, #4]
 80088ac:	681b      	ldr	r3, [r3, #0]
 80088ae:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80088b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80088b2:	e853 3f00 	ldrex	r3, [r3]
 80088b6:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80088b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80088ba:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80088be:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80088c2:	687b      	ldr	r3, [r7, #4]
 80088c4:	681b      	ldr	r3, [r3, #0]
 80088c6:	461a      	mov	r2, r3
 80088c8:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80088cc:	647b      	str	r3, [r7, #68]	; 0x44
 80088ce:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80088d0:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80088d2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80088d4:	e841 2300 	strex	r3, r2, [r1]
 80088d8:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80088da:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80088dc:	2b00      	cmp	r3, #0
 80088de:	d1e4      	bne.n	80088aa <HAL_UART_IRQHandler+0x472>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80088e0:	687b      	ldr	r3, [r7, #4]
 80088e2:	681b      	ldr	r3, [r3, #0]
 80088e4:	3308      	adds	r3, #8
 80088e6:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80088e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80088ea:	e853 3f00 	ldrex	r3, [r3]
 80088ee:	623b      	str	r3, [r7, #32]
   return(result);
 80088f0:	6a3b      	ldr	r3, [r7, #32]
 80088f2:	f023 0301 	bic.w	r3, r3, #1
 80088f6:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80088fa:	687b      	ldr	r3, [r7, #4]
 80088fc:	681b      	ldr	r3, [r3, #0]
 80088fe:	3308      	adds	r3, #8
 8008900:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8008904:	633a      	str	r2, [r7, #48]	; 0x30
 8008906:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008908:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800890a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800890c:	e841 2300 	strex	r3, r2, [r1]
 8008910:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8008912:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008914:	2b00      	cmp	r3, #0
 8008916:	d1e3      	bne.n	80088e0 <HAL_UART_IRQHandler+0x4a8>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8008918:	687b      	ldr	r3, [r7, #4]
 800891a:	2220      	movs	r2, #32
 800891c:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800891e:	687b      	ldr	r3, [r7, #4]
 8008920:	2200      	movs	r2, #0
 8008922:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8008924:	687b      	ldr	r3, [r7, #4]
 8008926:	2200      	movs	r2, #0
 8008928:	665a      	str	r2, [r3, #100]	; 0x64

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800892a:	687b      	ldr	r3, [r7, #4]
 800892c:	681b      	ldr	r3, [r3, #0]
 800892e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008930:	693b      	ldr	r3, [r7, #16]
 8008932:	e853 3f00 	ldrex	r3, [r3]
 8008936:	60fb      	str	r3, [r7, #12]
   return(result);
 8008938:	68fb      	ldr	r3, [r7, #12]
 800893a:	f023 0310 	bic.w	r3, r3, #16
 800893e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8008942:	687b      	ldr	r3, [r7, #4]
 8008944:	681b      	ldr	r3, [r3, #0]
 8008946:	461a      	mov	r2, r3
 8008948:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800894c:	61fb      	str	r3, [r7, #28]
 800894e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008950:	69b9      	ldr	r1, [r7, #24]
 8008952:	69fa      	ldr	r2, [r7, #28]
 8008954:	e841 2300 	strex	r3, r2, [r1]
 8008958:	617b      	str	r3, [r7, #20]
   return(result);
 800895a:	697b      	ldr	r3, [r7, #20]
 800895c:	2b00      	cmp	r3, #0
 800895e:	d1e4      	bne.n	800892a <HAL_UART_IRQHandler+0x4f2>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8008960:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8008964:	4619      	mov	r1, r3
 8008966:	6878      	ldr	r0, [r7, #4]
 8008968:	f000 f85c 	bl	8008a24 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800896c:	e03f      	b.n	80089ee <HAL_UART_IRQHandler+0x5b6>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800896e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008972:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008976:	2b00      	cmp	r3, #0
 8008978:	d00e      	beq.n	8008998 <HAL_UART_IRQHandler+0x560>
 800897a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800897e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008982:	2b00      	cmp	r3, #0
 8008984:	d008      	beq.n	8008998 <HAL_UART_IRQHandler+0x560>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8008986:	687b      	ldr	r3, [r7, #4]
 8008988:	681b      	ldr	r3, [r3, #0]
 800898a:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800898e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8008990:	6878      	ldr	r0, [r7, #4]
 8008992:	f000 fefc 	bl	800978e <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8008996:	e02d      	b.n	80089f4 <HAL_UART_IRQHandler+0x5bc>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 8008998:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800899c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80089a0:	2b00      	cmp	r3, #0
 80089a2:	d00e      	beq.n	80089c2 <HAL_UART_IRQHandler+0x58a>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 80089a4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80089a8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80089ac:	2b00      	cmp	r3, #0
 80089ae:	d008      	beq.n	80089c2 <HAL_UART_IRQHandler+0x58a>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 80089b0:	687b      	ldr	r3, [r7, #4]
 80089b2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80089b4:	2b00      	cmp	r3, #0
 80089b6:	d01c      	beq.n	80089f2 <HAL_UART_IRQHandler+0x5ba>
    {
      huart->TxISR(huart);
 80089b8:	687b      	ldr	r3, [r7, #4]
 80089ba:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80089bc:	6878      	ldr	r0, [r7, #4]
 80089be:	4798      	blx	r3
    }
    return;
 80089c0:	e017      	b.n	80089f2 <HAL_UART_IRQHandler+0x5ba>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80089c2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80089c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80089ca:	2b00      	cmp	r3, #0
 80089cc:	d012      	beq.n	80089f4 <HAL_UART_IRQHandler+0x5bc>
 80089ce:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80089d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80089d6:	2b00      	cmp	r3, #0
 80089d8:	d00c      	beq.n	80089f4 <HAL_UART_IRQHandler+0x5bc>
  {
    UART_EndTransmit_IT(huart);
 80089da:	6878      	ldr	r0, [r7, #4]
 80089dc:	f000 fd4d 	bl	800947a <UART_EndTransmit_IT>
    return;
 80089e0:	e008      	b.n	80089f4 <HAL_UART_IRQHandler+0x5bc>
      return;
 80089e2:	bf00      	nop
 80089e4:	e006      	b.n	80089f4 <HAL_UART_IRQHandler+0x5bc>
    return;
 80089e6:	bf00      	nop
 80089e8:	e004      	b.n	80089f4 <HAL_UART_IRQHandler+0x5bc>
      return;
 80089ea:	bf00      	nop
 80089ec:	e002      	b.n	80089f4 <HAL_UART_IRQHandler+0x5bc>
      return;
 80089ee:	bf00      	nop
 80089f0:	e000      	b.n	80089f4 <HAL_UART_IRQHandler+0x5bc>
    return;
 80089f2:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 80089f4:	37e8      	adds	r7, #232	; 0xe8
 80089f6:	46bd      	mov	sp, r7
 80089f8:	bd80      	pop	{r7, pc}
 80089fa:	bf00      	nop

080089fc <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80089fc:	b480      	push	{r7}
 80089fe:	b083      	sub	sp, #12
 8008a00:	af00      	add	r7, sp, #0
 8008a02:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8008a04:	bf00      	nop
 8008a06:	370c      	adds	r7, #12
 8008a08:	46bd      	mov	sp, r7
 8008a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a0e:	4770      	bx	lr

08008a10 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8008a10:	b480      	push	{r7}
 8008a12:	b083      	sub	sp, #12
 8008a14:	af00      	add	r7, sp, #0
 8008a16:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8008a18:	bf00      	nop
 8008a1a:	370c      	adds	r7, #12
 8008a1c:	46bd      	mov	sp, r7
 8008a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a22:	4770      	bx	lr

08008a24 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8008a24:	b480      	push	{r7}
 8008a26:	b083      	sub	sp, #12
 8008a28:	af00      	add	r7, sp, #0
 8008a2a:	6078      	str	r0, [r7, #4]
 8008a2c:	460b      	mov	r3, r1
 8008a2e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8008a30:	bf00      	nop
 8008a32:	370c      	adds	r7, #12
 8008a34:	46bd      	mov	sp, r7
 8008a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a3a:	4770      	bx	lr

08008a3c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008a3c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008a40:	b08a      	sub	sp, #40	; 0x28
 8008a42:	af00      	add	r7, sp, #0
 8008a44:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8008a46:	2300      	movs	r3, #0
 8008a48:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8008a4c:	68fb      	ldr	r3, [r7, #12]
 8008a4e:	689a      	ldr	r2, [r3, #8]
 8008a50:	68fb      	ldr	r3, [r7, #12]
 8008a52:	691b      	ldr	r3, [r3, #16]
 8008a54:	431a      	orrs	r2, r3
 8008a56:	68fb      	ldr	r3, [r7, #12]
 8008a58:	695b      	ldr	r3, [r3, #20]
 8008a5a:	431a      	orrs	r2, r3
 8008a5c:	68fb      	ldr	r3, [r7, #12]
 8008a5e:	69db      	ldr	r3, [r3, #28]
 8008a60:	4313      	orrs	r3, r2
 8008a62:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8008a64:	68fb      	ldr	r3, [r7, #12]
 8008a66:	681b      	ldr	r3, [r3, #0]
 8008a68:	681a      	ldr	r2, [r3, #0]
 8008a6a:	4bb4      	ldr	r3, [pc, #720]	; (8008d3c <UART_SetConfig+0x300>)
 8008a6c:	4013      	ands	r3, r2
 8008a6e:	68fa      	ldr	r2, [r7, #12]
 8008a70:	6812      	ldr	r2, [r2, #0]
 8008a72:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8008a74:	430b      	orrs	r3, r1
 8008a76:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008a78:	68fb      	ldr	r3, [r7, #12]
 8008a7a:	681b      	ldr	r3, [r3, #0]
 8008a7c:	685b      	ldr	r3, [r3, #4]
 8008a7e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8008a82:	68fb      	ldr	r3, [r7, #12]
 8008a84:	68da      	ldr	r2, [r3, #12]
 8008a86:	68fb      	ldr	r3, [r7, #12]
 8008a88:	681b      	ldr	r3, [r3, #0]
 8008a8a:	430a      	orrs	r2, r1
 8008a8c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8008a8e:	68fb      	ldr	r3, [r7, #12]
 8008a90:	699b      	ldr	r3, [r3, #24]
 8008a92:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8008a94:	68fb      	ldr	r3, [r7, #12]
 8008a96:	681b      	ldr	r3, [r3, #0]
 8008a98:	4aa9      	ldr	r2, [pc, #676]	; (8008d40 <UART_SetConfig+0x304>)
 8008a9a:	4293      	cmp	r3, r2
 8008a9c:	d004      	beq.n	8008aa8 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8008a9e:	68fb      	ldr	r3, [r7, #12]
 8008aa0:	6a1b      	ldr	r3, [r3, #32]
 8008aa2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008aa4:	4313      	orrs	r3, r2
 8008aa6:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8008aa8:	68fb      	ldr	r3, [r7, #12]
 8008aaa:	681b      	ldr	r3, [r3, #0]
 8008aac:	689b      	ldr	r3, [r3, #8]
 8008aae:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8008ab2:	68fb      	ldr	r3, [r7, #12]
 8008ab4:	681b      	ldr	r3, [r3, #0]
 8008ab6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008ab8:	430a      	orrs	r2, r1
 8008aba:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8008abc:	68fb      	ldr	r3, [r7, #12]
 8008abe:	681b      	ldr	r3, [r3, #0]
 8008ac0:	4aa0      	ldr	r2, [pc, #640]	; (8008d44 <UART_SetConfig+0x308>)
 8008ac2:	4293      	cmp	r3, r2
 8008ac4:	d126      	bne.n	8008b14 <UART_SetConfig+0xd8>
 8008ac6:	4ba0      	ldr	r3, [pc, #640]	; (8008d48 <UART_SetConfig+0x30c>)
 8008ac8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008acc:	f003 0303 	and.w	r3, r3, #3
 8008ad0:	2b03      	cmp	r3, #3
 8008ad2:	d81b      	bhi.n	8008b0c <UART_SetConfig+0xd0>
 8008ad4:	a201      	add	r2, pc, #4	; (adr r2, 8008adc <UART_SetConfig+0xa0>)
 8008ad6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008ada:	bf00      	nop
 8008adc:	08008aed 	.word	0x08008aed
 8008ae0:	08008afd 	.word	0x08008afd
 8008ae4:	08008af5 	.word	0x08008af5
 8008ae8:	08008b05 	.word	0x08008b05
 8008aec:	2301      	movs	r3, #1
 8008aee:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008af2:	e080      	b.n	8008bf6 <UART_SetConfig+0x1ba>
 8008af4:	2302      	movs	r3, #2
 8008af6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008afa:	e07c      	b.n	8008bf6 <UART_SetConfig+0x1ba>
 8008afc:	2304      	movs	r3, #4
 8008afe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008b02:	e078      	b.n	8008bf6 <UART_SetConfig+0x1ba>
 8008b04:	2308      	movs	r3, #8
 8008b06:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008b0a:	e074      	b.n	8008bf6 <UART_SetConfig+0x1ba>
 8008b0c:	2310      	movs	r3, #16
 8008b0e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008b12:	e070      	b.n	8008bf6 <UART_SetConfig+0x1ba>
 8008b14:	68fb      	ldr	r3, [r7, #12]
 8008b16:	681b      	ldr	r3, [r3, #0]
 8008b18:	4a8c      	ldr	r2, [pc, #560]	; (8008d4c <UART_SetConfig+0x310>)
 8008b1a:	4293      	cmp	r3, r2
 8008b1c:	d138      	bne.n	8008b90 <UART_SetConfig+0x154>
 8008b1e:	4b8a      	ldr	r3, [pc, #552]	; (8008d48 <UART_SetConfig+0x30c>)
 8008b20:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008b24:	f003 030c 	and.w	r3, r3, #12
 8008b28:	2b0c      	cmp	r3, #12
 8008b2a:	d82d      	bhi.n	8008b88 <UART_SetConfig+0x14c>
 8008b2c:	a201      	add	r2, pc, #4	; (adr r2, 8008b34 <UART_SetConfig+0xf8>)
 8008b2e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008b32:	bf00      	nop
 8008b34:	08008b69 	.word	0x08008b69
 8008b38:	08008b89 	.word	0x08008b89
 8008b3c:	08008b89 	.word	0x08008b89
 8008b40:	08008b89 	.word	0x08008b89
 8008b44:	08008b79 	.word	0x08008b79
 8008b48:	08008b89 	.word	0x08008b89
 8008b4c:	08008b89 	.word	0x08008b89
 8008b50:	08008b89 	.word	0x08008b89
 8008b54:	08008b71 	.word	0x08008b71
 8008b58:	08008b89 	.word	0x08008b89
 8008b5c:	08008b89 	.word	0x08008b89
 8008b60:	08008b89 	.word	0x08008b89
 8008b64:	08008b81 	.word	0x08008b81
 8008b68:	2300      	movs	r3, #0
 8008b6a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008b6e:	e042      	b.n	8008bf6 <UART_SetConfig+0x1ba>
 8008b70:	2302      	movs	r3, #2
 8008b72:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008b76:	e03e      	b.n	8008bf6 <UART_SetConfig+0x1ba>
 8008b78:	2304      	movs	r3, #4
 8008b7a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008b7e:	e03a      	b.n	8008bf6 <UART_SetConfig+0x1ba>
 8008b80:	2308      	movs	r3, #8
 8008b82:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008b86:	e036      	b.n	8008bf6 <UART_SetConfig+0x1ba>
 8008b88:	2310      	movs	r3, #16
 8008b8a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008b8e:	e032      	b.n	8008bf6 <UART_SetConfig+0x1ba>
 8008b90:	68fb      	ldr	r3, [r7, #12]
 8008b92:	681b      	ldr	r3, [r3, #0]
 8008b94:	4a6a      	ldr	r2, [pc, #424]	; (8008d40 <UART_SetConfig+0x304>)
 8008b96:	4293      	cmp	r3, r2
 8008b98:	d12a      	bne.n	8008bf0 <UART_SetConfig+0x1b4>
 8008b9a:	4b6b      	ldr	r3, [pc, #428]	; (8008d48 <UART_SetConfig+0x30c>)
 8008b9c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008ba0:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8008ba4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8008ba8:	d01a      	beq.n	8008be0 <UART_SetConfig+0x1a4>
 8008baa:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8008bae:	d81b      	bhi.n	8008be8 <UART_SetConfig+0x1ac>
 8008bb0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008bb4:	d00c      	beq.n	8008bd0 <UART_SetConfig+0x194>
 8008bb6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008bba:	d815      	bhi.n	8008be8 <UART_SetConfig+0x1ac>
 8008bbc:	2b00      	cmp	r3, #0
 8008bbe:	d003      	beq.n	8008bc8 <UART_SetConfig+0x18c>
 8008bc0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008bc4:	d008      	beq.n	8008bd8 <UART_SetConfig+0x19c>
 8008bc6:	e00f      	b.n	8008be8 <UART_SetConfig+0x1ac>
 8008bc8:	2300      	movs	r3, #0
 8008bca:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008bce:	e012      	b.n	8008bf6 <UART_SetConfig+0x1ba>
 8008bd0:	2302      	movs	r3, #2
 8008bd2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008bd6:	e00e      	b.n	8008bf6 <UART_SetConfig+0x1ba>
 8008bd8:	2304      	movs	r3, #4
 8008bda:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008bde:	e00a      	b.n	8008bf6 <UART_SetConfig+0x1ba>
 8008be0:	2308      	movs	r3, #8
 8008be2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008be6:	e006      	b.n	8008bf6 <UART_SetConfig+0x1ba>
 8008be8:	2310      	movs	r3, #16
 8008bea:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008bee:	e002      	b.n	8008bf6 <UART_SetConfig+0x1ba>
 8008bf0:	2310      	movs	r3, #16
 8008bf2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8008bf6:	68fb      	ldr	r3, [r7, #12]
 8008bf8:	681b      	ldr	r3, [r3, #0]
 8008bfa:	4a51      	ldr	r2, [pc, #324]	; (8008d40 <UART_SetConfig+0x304>)
 8008bfc:	4293      	cmp	r3, r2
 8008bfe:	d17a      	bne.n	8008cf6 <UART_SetConfig+0x2ba>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8008c00:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8008c04:	2b08      	cmp	r3, #8
 8008c06:	d824      	bhi.n	8008c52 <UART_SetConfig+0x216>
 8008c08:	a201      	add	r2, pc, #4	; (adr r2, 8008c10 <UART_SetConfig+0x1d4>)
 8008c0a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008c0e:	bf00      	nop
 8008c10:	08008c35 	.word	0x08008c35
 8008c14:	08008c53 	.word	0x08008c53
 8008c18:	08008c3d 	.word	0x08008c3d
 8008c1c:	08008c53 	.word	0x08008c53
 8008c20:	08008c43 	.word	0x08008c43
 8008c24:	08008c53 	.word	0x08008c53
 8008c28:	08008c53 	.word	0x08008c53
 8008c2c:	08008c53 	.word	0x08008c53
 8008c30:	08008c4b 	.word	0x08008c4b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008c34:	f7fd fbe8 	bl	8006408 <HAL_RCC_GetPCLK1Freq>
 8008c38:	61f8      	str	r0, [r7, #28]
        break;
 8008c3a:	e010      	b.n	8008c5e <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008c3c:	4b44      	ldr	r3, [pc, #272]	; (8008d50 <UART_SetConfig+0x314>)
 8008c3e:	61fb      	str	r3, [r7, #28]
        break;
 8008c40:	e00d      	b.n	8008c5e <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008c42:	f7fd fb49 	bl	80062d8 <HAL_RCC_GetSysClockFreq>
 8008c46:	61f8      	str	r0, [r7, #28]
        break;
 8008c48:	e009      	b.n	8008c5e <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008c4a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008c4e:	61fb      	str	r3, [r7, #28]
        break;
 8008c50:	e005      	b.n	8008c5e <UART_SetConfig+0x222>
      default:
        pclk = 0U;
 8008c52:	2300      	movs	r3, #0
 8008c54:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8008c56:	2301      	movs	r3, #1
 8008c58:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8008c5c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8008c5e:	69fb      	ldr	r3, [r7, #28]
 8008c60:	2b00      	cmp	r3, #0
 8008c62:	f000 8107 	beq.w	8008e74 <UART_SetConfig+0x438>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8008c66:	68fb      	ldr	r3, [r7, #12]
 8008c68:	685a      	ldr	r2, [r3, #4]
 8008c6a:	4613      	mov	r3, r2
 8008c6c:	005b      	lsls	r3, r3, #1
 8008c6e:	4413      	add	r3, r2
 8008c70:	69fa      	ldr	r2, [r7, #28]
 8008c72:	429a      	cmp	r2, r3
 8008c74:	d305      	bcc.n	8008c82 <UART_SetConfig+0x246>
          (pclk > (4096U * huart->Init.BaudRate)))
 8008c76:	68fb      	ldr	r3, [r7, #12]
 8008c78:	685b      	ldr	r3, [r3, #4]
 8008c7a:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8008c7c:	69fa      	ldr	r2, [r7, #28]
 8008c7e:	429a      	cmp	r2, r3
 8008c80:	d903      	bls.n	8008c8a <UART_SetConfig+0x24e>
      {
        ret = HAL_ERROR;
 8008c82:	2301      	movs	r3, #1
 8008c84:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8008c88:	e0f4      	b.n	8008e74 <UART_SetConfig+0x438>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8008c8a:	69fb      	ldr	r3, [r7, #28]
 8008c8c:	2200      	movs	r2, #0
 8008c8e:	461c      	mov	r4, r3
 8008c90:	4615      	mov	r5, r2
 8008c92:	f04f 0200 	mov.w	r2, #0
 8008c96:	f04f 0300 	mov.w	r3, #0
 8008c9a:	022b      	lsls	r3, r5, #8
 8008c9c:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8008ca0:	0222      	lsls	r2, r4, #8
 8008ca2:	68f9      	ldr	r1, [r7, #12]
 8008ca4:	6849      	ldr	r1, [r1, #4]
 8008ca6:	0849      	lsrs	r1, r1, #1
 8008ca8:	2000      	movs	r0, #0
 8008caa:	4688      	mov	r8, r1
 8008cac:	4681      	mov	r9, r0
 8008cae:	eb12 0a08 	adds.w	sl, r2, r8
 8008cb2:	eb43 0b09 	adc.w	fp, r3, r9
 8008cb6:	68fb      	ldr	r3, [r7, #12]
 8008cb8:	685b      	ldr	r3, [r3, #4]
 8008cba:	2200      	movs	r2, #0
 8008cbc:	603b      	str	r3, [r7, #0]
 8008cbe:	607a      	str	r2, [r7, #4]
 8008cc0:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008cc4:	4650      	mov	r0, sl
 8008cc6:	4659      	mov	r1, fp
 8008cc8:	f7f7 ff88 	bl	8000bdc <__aeabi_uldivmod>
 8008ccc:	4602      	mov	r2, r0
 8008cce:	460b      	mov	r3, r1
 8008cd0:	4613      	mov	r3, r2
 8008cd2:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8008cd4:	69bb      	ldr	r3, [r7, #24]
 8008cd6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008cda:	d308      	bcc.n	8008cee <UART_SetConfig+0x2b2>
 8008cdc:	69bb      	ldr	r3, [r7, #24]
 8008cde:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008ce2:	d204      	bcs.n	8008cee <UART_SetConfig+0x2b2>
        {
          huart->Instance->BRR = usartdiv;
 8008ce4:	68fb      	ldr	r3, [r7, #12]
 8008ce6:	681b      	ldr	r3, [r3, #0]
 8008ce8:	69ba      	ldr	r2, [r7, #24]
 8008cea:	60da      	str	r2, [r3, #12]
 8008cec:	e0c2      	b.n	8008e74 <UART_SetConfig+0x438>
        }
        else
        {
          ret = HAL_ERROR;
 8008cee:	2301      	movs	r3, #1
 8008cf0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8008cf4:	e0be      	b.n	8008e74 <UART_SetConfig+0x438>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008cf6:	68fb      	ldr	r3, [r7, #12]
 8008cf8:	69db      	ldr	r3, [r3, #28]
 8008cfa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008cfe:	d16a      	bne.n	8008dd6 <UART_SetConfig+0x39a>
  {
    switch (clocksource)
 8008d00:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8008d04:	2b08      	cmp	r3, #8
 8008d06:	d834      	bhi.n	8008d72 <UART_SetConfig+0x336>
 8008d08:	a201      	add	r2, pc, #4	; (adr r2, 8008d10 <UART_SetConfig+0x2d4>)
 8008d0a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008d0e:	bf00      	nop
 8008d10:	08008d35 	.word	0x08008d35
 8008d14:	08008d55 	.word	0x08008d55
 8008d18:	08008d5d 	.word	0x08008d5d
 8008d1c:	08008d73 	.word	0x08008d73
 8008d20:	08008d63 	.word	0x08008d63
 8008d24:	08008d73 	.word	0x08008d73
 8008d28:	08008d73 	.word	0x08008d73
 8008d2c:	08008d73 	.word	0x08008d73
 8008d30:	08008d6b 	.word	0x08008d6b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008d34:	f7fd fb68 	bl	8006408 <HAL_RCC_GetPCLK1Freq>
 8008d38:	61f8      	str	r0, [r7, #28]
        break;
 8008d3a:	e020      	b.n	8008d7e <UART_SetConfig+0x342>
 8008d3c:	efff69f3 	.word	0xefff69f3
 8008d40:	40008000 	.word	0x40008000
 8008d44:	40013800 	.word	0x40013800
 8008d48:	40021000 	.word	0x40021000
 8008d4c:	40004400 	.word	0x40004400
 8008d50:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008d54:	f7fd fb6e 	bl	8006434 <HAL_RCC_GetPCLK2Freq>
 8008d58:	61f8      	str	r0, [r7, #28]
        break;
 8008d5a:	e010      	b.n	8008d7e <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008d5c:	4b4c      	ldr	r3, [pc, #304]	; (8008e90 <UART_SetConfig+0x454>)
 8008d5e:	61fb      	str	r3, [r7, #28]
        break;
 8008d60:	e00d      	b.n	8008d7e <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008d62:	f7fd fab9 	bl	80062d8 <HAL_RCC_GetSysClockFreq>
 8008d66:	61f8      	str	r0, [r7, #28]
        break;
 8008d68:	e009      	b.n	8008d7e <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008d6a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008d6e:	61fb      	str	r3, [r7, #28]
        break;
 8008d70:	e005      	b.n	8008d7e <UART_SetConfig+0x342>
      default:
        pclk = 0U;
 8008d72:	2300      	movs	r3, #0
 8008d74:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8008d76:	2301      	movs	r3, #1
 8008d78:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8008d7c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8008d7e:	69fb      	ldr	r3, [r7, #28]
 8008d80:	2b00      	cmp	r3, #0
 8008d82:	d077      	beq.n	8008e74 <UART_SetConfig+0x438>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8008d84:	69fb      	ldr	r3, [r7, #28]
 8008d86:	005a      	lsls	r2, r3, #1
 8008d88:	68fb      	ldr	r3, [r7, #12]
 8008d8a:	685b      	ldr	r3, [r3, #4]
 8008d8c:	085b      	lsrs	r3, r3, #1
 8008d8e:	441a      	add	r2, r3
 8008d90:	68fb      	ldr	r3, [r7, #12]
 8008d92:	685b      	ldr	r3, [r3, #4]
 8008d94:	fbb2 f3f3 	udiv	r3, r2, r3
 8008d98:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008d9a:	69bb      	ldr	r3, [r7, #24]
 8008d9c:	2b0f      	cmp	r3, #15
 8008d9e:	d916      	bls.n	8008dce <UART_SetConfig+0x392>
 8008da0:	69bb      	ldr	r3, [r7, #24]
 8008da2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008da6:	d212      	bcs.n	8008dce <UART_SetConfig+0x392>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8008da8:	69bb      	ldr	r3, [r7, #24]
 8008daa:	b29b      	uxth	r3, r3
 8008dac:	f023 030f 	bic.w	r3, r3, #15
 8008db0:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8008db2:	69bb      	ldr	r3, [r7, #24]
 8008db4:	085b      	lsrs	r3, r3, #1
 8008db6:	b29b      	uxth	r3, r3
 8008db8:	f003 0307 	and.w	r3, r3, #7
 8008dbc:	b29a      	uxth	r2, r3
 8008dbe:	8afb      	ldrh	r3, [r7, #22]
 8008dc0:	4313      	orrs	r3, r2
 8008dc2:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8008dc4:	68fb      	ldr	r3, [r7, #12]
 8008dc6:	681b      	ldr	r3, [r3, #0]
 8008dc8:	8afa      	ldrh	r2, [r7, #22]
 8008dca:	60da      	str	r2, [r3, #12]
 8008dcc:	e052      	b.n	8008e74 <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 8008dce:	2301      	movs	r3, #1
 8008dd0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8008dd4:	e04e      	b.n	8008e74 <UART_SetConfig+0x438>
      }
    }
  }
  else
  {
    switch (clocksource)
 8008dd6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8008dda:	2b08      	cmp	r3, #8
 8008ddc:	d827      	bhi.n	8008e2e <UART_SetConfig+0x3f2>
 8008dde:	a201      	add	r2, pc, #4	; (adr r2, 8008de4 <UART_SetConfig+0x3a8>)
 8008de0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008de4:	08008e09 	.word	0x08008e09
 8008de8:	08008e11 	.word	0x08008e11
 8008dec:	08008e19 	.word	0x08008e19
 8008df0:	08008e2f 	.word	0x08008e2f
 8008df4:	08008e1f 	.word	0x08008e1f
 8008df8:	08008e2f 	.word	0x08008e2f
 8008dfc:	08008e2f 	.word	0x08008e2f
 8008e00:	08008e2f 	.word	0x08008e2f
 8008e04:	08008e27 	.word	0x08008e27
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008e08:	f7fd fafe 	bl	8006408 <HAL_RCC_GetPCLK1Freq>
 8008e0c:	61f8      	str	r0, [r7, #28]
        break;
 8008e0e:	e014      	b.n	8008e3a <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008e10:	f7fd fb10 	bl	8006434 <HAL_RCC_GetPCLK2Freq>
 8008e14:	61f8      	str	r0, [r7, #28]
        break;
 8008e16:	e010      	b.n	8008e3a <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008e18:	4b1d      	ldr	r3, [pc, #116]	; (8008e90 <UART_SetConfig+0x454>)
 8008e1a:	61fb      	str	r3, [r7, #28]
        break;
 8008e1c:	e00d      	b.n	8008e3a <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008e1e:	f7fd fa5b 	bl	80062d8 <HAL_RCC_GetSysClockFreq>
 8008e22:	61f8      	str	r0, [r7, #28]
        break;
 8008e24:	e009      	b.n	8008e3a <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008e26:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008e2a:	61fb      	str	r3, [r7, #28]
        break;
 8008e2c:	e005      	b.n	8008e3a <UART_SetConfig+0x3fe>
      default:
        pclk = 0U;
 8008e2e:	2300      	movs	r3, #0
 8008e30:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8008e32:	2301      	movs	r3, #1
 8008e34:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8008e38:	bf00      	nop
    }

    if (pclk != 0U)
 8008e3a:	69fb      	ldr	r3, [r7, #28]
 8008e3c:	2b00      	cmp	r3, #0
 8008e3e:	d019      	beq.n	8008e74 <UART_SetConfig+0x438>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8008e40:	68fb      	ldr	r3, [r7, #12]
 8008e42:	685b      	ldr	r3, [r3, #4]
 8008e44:	085a      	lsrs	r2, r3, #1
 8008e46:	69fb      	ldr	r3, [r7, #28]
 8008e48:	441a      	add	r2, r3
 8008e4a:	68fb      	ldr	r3, [r7, #12]
 8008e4c:	685b      	ldr	r3, [r3, #4]
 8008e4e:	fbb2 f3f3 	udiv	r3, r2, r3
 8008e52:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008e54:	69bb      	ldr	r3, [r7, #24]
 8008e56:	2b0f      	cmp	r3, #15
 8008e58:	d909      	bls.n	8008e6e <UART_SetConfig+0x432>
 8008e5a:	69bb      	ldr	r3, [r7, #24]
 8008e5c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008e60:	d205      	bcs.n	8008e6e <UART_SetConfig+0x432>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8008e62:	69bb      	ldr	r3, [r7, #24]
 8008e64:	b29a      	uxth	r2, r3
 8008e66:	68fb      	ldr	r3, [r7, #12]
 8008e68:	681b      	ldr	r3, [r3, #0]
 8008e6a:	60da      	str	r2, [r3, #12]
 8008e6c:	e002      	b.n	8008e74 <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 8008e6e:	2301      	movs	r3, #1
 8008e70:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8008e74:	68fb      	ldr	r3, [r7, #12]
 8008e76:	2200      	movs	r2, #0
 8008e78:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8008e7a:	68fb      	ldr	r3, [r7, #12]
 8008e7c:	2200      	movs	r2, #0
 8008e7e:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8008e80:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8008e84:	4618      	mov	r0, r3
 8008e86:	3728      	adds	r7, #40	; 0x28
 8008e88:	46bd      	mov	sp, r7
 8008e8a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008e8e:	bf00      	nop
 8008e90:	00f42400 	.word	0x00f42400

08008e94 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8008e94:	b480      	push	{r7}
 8008e96:	b083      	sub	sp, #12
 8008e98:	af00      	add	r7, sp, #0
 8008e9a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8008e9c:	687b      	ldr	r3, [r7, #4]
 8008e9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ea0:	f003 0301 	and.w	r3, r3, #1
 8008ea4:	2b00      	cmp	r3, #0
 8008ea6:	d00a      	beq.n	8008ebe <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8008ea8:	687b      	ldr	r3, [r7, #4]
 8008eaa:	681b      	ldr	r3, [r3, #0]
 8008eac:	685b      	ldr	r3, [r3, #4]
 8008eae:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8008eb2:	687b      	ldr	r3, [r7, #4]
 8008eb4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8008eb6:	687b      	ldr	r3, [r7, #4]
 8008eb8:	681b      	ldr	r3, [r3, #0]
 8008eba:	430a      	orrs	r2, r1
 8008ebc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8008ebe:	687b      	ldr	r3, [r7, #4]
 8008ec0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ec2:	f003 0302 	and.w	r3, r3, #2
 8008ec6:	2b00      	cmp	r3, #0
 8008ec8:	d00a      	beq.n	8008ee0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8008eca:	687b      	ldr	r3, [r7, #4]
 8008ecc:	681b      	ldr	r3, [r3, #0]
 8008ece:	685b      	ldr	r3, [r3, #4]
 8008ed0:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8008ed4:	687b      	ldr	r3, [r7, #4]
 8008ed6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008ed8:	687b      	ldr	r3, [r7, #4]
 8008eda:	681b      	ldr	r3, [r3, #0]
 8008edc:	430a      	orrs	r2, r1
 8008ede:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8008ee0:	687b      	ldr	r3, [r7, #4]
 8008ee2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ee4:	f003 0304 	and.w	r3, r3, #4
 8008ee8:	2b00      	cmp	r3, #0
 8008eea:	d00a      	beq.n	8008f02 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8008eec:	687b      	ldr	r3, [r7, #4]
 8008eee:	681b      	ldr	r3, [r3, #0]
 8008ef0:	685b      	ldr	r3, [r3, #4]
 8008ef2:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8008ef6:	687b      	ldr	r3, [r7, #4]
 8008ef8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008efa:	687b      	ldr	r3, [r7, #4]
 8008efc:	681b      	ldr	r3, [r3, #0]
 8008efe:	430a      	orrs	r2, r1
 8008f00:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8008f02:	687b      	ldr	r3, [r7, #4]
 8008f04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f06:	f003 0308 	and.w	r3, r3, #8
 8008f0a:	2b00      	cmp	r3, #0
 8008f0c:	d00a      	beq.n	8008f24 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8008f0e:	687b      	ldr	r3, [r7, #4]
 8008f10:	681b      	ldr	r3, [r3, #0]
 8008f12:	685b      	ldr	r3, [r3, #4]
 8008f14:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8008f18:	687b      	ldr	r3, [r7, #4]
 8008f1a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008f1c:	687b      	ldr	r3, [r7, #4]
 8008f1e:	681b      	ldr	r3, [r3, #0]
 8008f20:	430a      	orrs	r2, r1
 8008f22:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8008f24:	687b      	ldr	r3, [r7, #4]
 8008f26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f28:	f003 0310 	and.w	r3, r3, #16
 8008f2c:	2b00      	cmp	r3, #0
 8008f2e:	d00a      	beq.n	8008f46 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8008f30:	687b      	ldr	r3, [r7, #4]
 8008f32:	681b      	ldr	r3, [r3, #0]
 8008f34:	689b      	ldr	r3, [r3, #8]
 8008f36:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8008f3a:	687b      	ldr	r3, [r7, #4]
 8008f3c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008f3e:	687b      	ldr	r3, [r7, #4]
 8008f40:	681b      	ldr	r3, [r3, #0]
 8008f42:	430a      	orrs	r2, r1
 8008f44:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8008f46:	687b      	ldr	r3, [r7, #4]
 8008f48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f4a:	f003 0320 	and.w	r3, r3, #32
 8008f4e:	2b00      	cmp	r3, #0
 8008f50:	d00a      	beq.n	8008f68 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8008f52:	687b      	ldr	r3, [r7, #4]
 8008f54:	681b      	ldr	r3, [r3, #0]
 8008f56:	689b      	ldr	r3, [r3, #8]
 8008f58:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8008f5c:	687b      	ldr	r3, [r7, #4]
 8008f5e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008f60:	687b      	ldr	r3, [r7, #4]
 8008f62:	681b      	ldr	r3, [r3, #0]
 8008f64:	430a      	orrs	r2, r1
 8008f66:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8008f68:	687b      	ldr	r3, [r7, #4]
 8008f6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f6c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008f70:	2b00      	cmp	r3, #0
 8008f72:	d01a      	beq.n	8008faa <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8008f74:	687b      	ldr	r3, [r7, #4]
 8008f76:	681b      	ldr	r3, [r3, #0]
 8008f78:	685b      	ldr	r3, [r3, #4]
 8008f7a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8008f7e:	687b      	ldr	r3, [r7, #4]
 8008f80:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008f82:	687b      	ldr	r3, [r7, #4]
 8008f84:	681b      	ldr	r3, [r3, #0]
 8008f86:	430a      	orrs	r2, r1
 8008f88:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8008f8a:	687b      	ldr	r3, [r7, #4]
 8008f8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008f8e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008f92:	d10a      	bne.n	8008faa <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8008f94:	687b      	ldr	r3, [r7, #4]
 8008f96:	681b      	ldr	r3, [r3, #0]
 8008f98:	685b      	ldr	r3, [r3, #4]
 8008f9a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8008f9e:	687b      	ldr	r3, [r7, #4]
 8008fa0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008fa2:	687b      	ldr	r3, [r7, #4]
 8008fa4:	681b      	ldr	r3, [r3, #0]
 8008fa6:	430a      	orrs	r2, r1
 8008fa8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8008faa:	687b      	ldr	r3, [r7, #4]
 8008fac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008fae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008fb2:	2b00      	cmp	r3, #0
 8008fb4:	d00a      	beq.n	8008fcc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8008fb6:	687b      	ldr	r3, [r7, #4]
 8008fb8:	681b      	ldr	r3, [r3, #0]
 8008fba:	685b      	ldr	r3, [r3, #4]
 8008fbc:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8008fc0:	687b      	ldr	r3, [r7, #4]
 8008fc2:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8008fc4:	687b      	ldr	r3, [r7, #4]
 8008fc6:	681b      	ldr	r3, [r3, #0]
 8008fc8:	430a      	orrs	r2, r1
 8008fca:	605a      	str	r2, [r3, #4]
  }
}
 8008fcc:	bf00      	nop
 8008fce:	370c      	adds	r7, #12
 8008fd0:	46bd      	mov	sp, r7
 8008fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fd6:	4770      	bx	lr

08008fd8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8008fd8:	b580      	push	{r7, lr}
 8008fda:	b086      	sub	sp, #24
 8008fdc:	af02      	add	r7, sp, #8
 8008fde:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008fe0:	687b      	ldr	r3, [r7, #4]
 8008fe2:	2200      	movs	r2, #0
 8008fe4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8008fe8:	f7fb fefa 	bl	8004de0 <HAL_GetTick>
 8008fec:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8008fee:	687b      	ldr	r3, [r7, #4]
 8008ff0:	681b      	ldr	r3, [r3, #0]
 8008ff2:	681b      	ldr	r3, [r3, #0]
 8008ff4:	f003 0308 	and.w	r3, r3, #8
 8008ff8:	2b08      	cmp	r3, #8
 8008ffa:	d10e      	bne.n	800901a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008ffc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8009000:	9300      	str	r3, [sp, #0]
 8009002:	68fb      	ldr	r3, [r7, #12]
 8009004:	2200      	movs	r2, #0
 8009006:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800900a:	6878      	ldr	r0, [r7, #4]
 800900c:	f000 f82d 	bl	800906a <UART_WaitOnFlagUntilTimeout>
 8009010:	4603      	mov	r3, r0
 8009012:	2b00      	cmp	r3, #0
 8009014:	d001      	beq.n	800901a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009016:	2303      	movs	r3, #3
 8009018:	e023      	b.n	8009062 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800901a:	687b      	ldr	r3, [r7, #4]
 800901c:	681b      	ldr	r3, [r3, #0]
 800901e:	681b      	ldr	r3, [r3, #0]
 8009020:	f003 0304 	and.w	r3, r3, #4
 8009024:	2b04      	cmp	r3, #4
 8009026:	d10e      	bne.n	8009046 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009028:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800902c:	9300      	str	r3, [sp, #0]
 800902e:	68fb      	ldr	r3, [r7, #12]
 8009030:	2200      	movs	r2, #0
 8009032:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8009036:	6878      	ldr	r0, [r7, #4]
 8009038:	f000 f817 	bl	800906a <UART_WaitOnFlagUntilTimeout>
 800903c:	4603      	mov	r3, r0
 800903e:	2b00      	cmp	r3, #0
 8009040:	d001      	beq.n	8009046 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009042:	2303      	movs	r3, #3
 8009044:	e00d      	b.n	8009062 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8009046:	687b      	ldr	r3, [r7, #4]
 8009048:	2220      	movs	r2, #32
 800904a:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 800904c:	687b      	ldr	r3, [r7, #4]
 800904e:	2220      	movs	r2, #32
 8009050:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009052:	687b      	ldr	r3, [r7, #4]
 8009054:	2200      	movs	r2, #0
 8009056:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8009058:	687b      	ldr	r3, [r7, #4]
 800905a:	2200      	movs	r2, #0
 800905c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8009060:	2300      	movs	r3, #0
}
 8009062:	4618      	mov	r0, r3
 8009064:	3710      	adds	r7, #16
 8009066:	46bd      	mov	sp, r7
 8009068:	bd80      	pop	{r7, pc}

0800906a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800906a:	b580      	push	{r7, lr}
 800906c:	b09c      	sub	sp, #112	; 0x70
 800906e:	af00      	add	r7, sp, #0
 8009070:	60f8      	str	r0, [r7, #12]
 8009072:	60b9      	str	r1, [r7, #8]
 8009074:	603b      	str	r3, [r7, #0]
 8009076:	4613      	mov	r3, r2
 8009078:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800907a:	e0a5      	b.n	80091c8 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800907c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800907e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009082:	f000 80a1 	beq.w	80091c8 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009086:	f7fb feab 	bl	8004de0 <HAL_GetTick>
 800908a:	4602      	mov	r2, r0
 800908c:	683b      	ldr	r3, [r7, #0]
 800908e:	1ad3      	subs	r3, r2, r3
 8009090:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8009092:	429a      	cmp	r2, r3
 8009094:	d302      	bcc.n	800909c <UART_WaitOnFlagUntilTimeout+0x32>
 8009096:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009098:	2b00      	cmp	r3, #0
 800909a:	d13e      	bne.n	800911a <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800909c:	68fb      	ldr	r3, [r7, #12]
 800909e:	681b      	ldr	r3, [r3, #0]
 80090a0:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80090a2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80090a4:	e853 3f00 	ldrex	r3, [r3]
 80090a8:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80090aa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80090ac:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80090b0:	667b      	str	r3, [r7, #100]	; 0x64
 80090b2:	68fb      	ldr	r3, [r7, #12]
 80090b4:	681b      	ldr	r3, [r3, #0]
 80090b6:	461a      	mov	r2, r3
 80090b8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80090ba:	65fb      	str	r3, [r7, #92]	; 0x5c
 80090bc:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80090be:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80090c0:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80090c2:	e841 2300 	strex	r3, r2, [r1]
 80090c6:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80090c8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80090ca:	2b00      	cmp	r3, #0
 80090cc:	d1e6      	bne.n	800909c <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80090ce:	68fb      	ldr	r3, [r7, #12]
 80090d0:	681b      	ldr	r3, [r3, #0]
 80090d2:	3308      	adds	r3, #8
 80090d4:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80090d6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80090d8:	e853 3f00 	ldrex	r3, [r3]
 80090dc:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80090de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80090e0:	f023 0301 	bic.w	r3, r3, #1
 80090e4:	663b      	str	r3, [r7, #96]	; 0x60
 80090e6:	68fb      	ldr	r3, [r7, #12]
 80090e8:	681b      	ldr	r3, [r3, #0]
 80090ea:	3308      	adds	r3, #8
 80090ec:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80090ee:	64ba      	str	r2, [r7, #72]	; 0x48
 80090f0:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80090f2:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80090f4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80090f6:	e841 2300 	strex	r3, r2, [r1]
 80090fa:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80090fc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80090fe:	2b00      	cmp	r3, #0
 8009100:	d1e5      	bne.n	80090ce <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8009102:	68fb      	ldr	r3, [r7, #12]
 8009104:	2220      	movs	r2, #32
 8009106:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8009108:	68fb      	ldr	r3, [r7, #12]
 800910a:	2220      	movs	r2, #32
 800910c:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 800910e:	68fb      	ldr	r3, [r7, #12]
 8009110:	2200      	movs	r2, #0
 8009112:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8009116:	2303      	movs	r3, #3
 8009118:	e067      	b.n	80091ea <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800911a:	68fb      	ldr	r3, [r7, #12]
 800911c:	681b      	ldr	r3, [r3, #0]
 800911e:	681b      	ldr	r3, [r3, #0]
 8009120:	f003 0304 	and.w	r3, r3, #4
 8009124:	2b00      	cmp	r3, #0
 8009126:	d04f      	beq.n	80091c8 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8009128:	68fb      	ldr	r3, [r7, #12]
 800912a:	681b      	ldr	r3, [r3, #0]
 800912c:	69db      	ldr	r3, [r3, #28]
 800912e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009132:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009136:	d147      	bne.n	80091c8 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8009138:	68fb      	ldr	r3, [r7, #12]
 800913a:	681b      	ldr	r3, [r3, #0]
 800913c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8009140:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8009142:	68fb      	ldr	r3, [r7, #12]
 8009144:	681b      	ldr	r3, [r3, #0]
 8009146:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009148:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800914a:	e853 3f00 	ldrex	r3, [r3]
 800914e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8009150:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009152:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8009156:	66fb      	str	r3, [r7, #108]	; 0x6c
 8009158:	68fb      	ldr	r3, [r7, #12]
 800915a:	681b      	ldr	r3, [r3, #0]
 800915c:	461a      	mov	r2, r3
 800915e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009160:	637b      	str	r3, [r7, #52]	; 0x34
 8009162:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009164:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8009166:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009168:	e841 2300 	strex	r3, r2, [r1]
 800916c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800916e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009170:	2b00      	cmp	r3, #0
 8009172:	d1e6      	bne.n	8009142 <UART_WaitOnFlagUntilTimeout+0xd8>
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009174:	68fb      	ldr	r3, [r7, #12]
 8009176:	681b      	ldr	r3, [r3, #0]
 8009178:	3308      	adds	r3, #8
 800917a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800917c:	697b      	ldr	r3, [r7, #20]
 800917e:	e853 3f00 	ldrex	r3, [r3]
 8009182:	613b      	str	r3, [r7, #16]
   return(result);
 8009184:	693b      	ldr	r3, [r7, #16]
 8009186:	f023 0301 	bic.w	r3, r3, #1
 800918a:	66bb      	str	r3, [r7, #104]	; 0x68
 800918c:	68fb      	ldr	r3, [r7, #12]
 800918e:	681b      	ldr	r3, [r3, #0]
 8009190:	3308      	adds	r3, #8
 8009192:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8009194:	623a      	str	r2, [r7, #32]
 8009196:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009198:	69f9      	ldr	r1, [r7, #28]
 800919a:	6a3a      	ldr	r2, [r7, #32]
 800919c:	e841 2300 	strex	r3, r2, [r1]
 80091a0:	61bb      	str	r3, [r7, #24]
   return(result);
 80091a2:	69bb      	ldr	r3, [r7, #24]
 80091a4:	2b00      	cmp	r3, #0
 80091a6:	d1e5      	bne.n	8009174 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 80091a8:	68fb      	ldr	r3, [r7, #12]
 80091aa:	2220      	movs	r2, #32
 80091ac:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 80091ae:	68fb      	ldr	r3, [r7, #12]
 80091b0:	2220      	movs	r2, #32
 80091b2:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80091b4:	68fb      	ldr	r3, [r7, #12]
 80091b6:	2220      	movs	r2, #32
 80091b8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80091bc:	68fb      	ldr	r3, [r7, #12]
 80091be:	2200      	movs	r2, #0
 80091c0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 80091c4:	2303      	movs	r3, #3
 80091c6:	e010      	b.n	80091ea <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80091c8:	68fb      	ldr	r3, [r7, #12]
 80091ca:	681b      	ldr	r3, [r3, #0]
 80091cc:	69da      	ldr	r2, [r3, #28]
 80091ce:	68bb      	ldr	r3, [r7, #8]
 80091d0:	4013      	ands	r3, r2
 80091d2:	68ba      	ldr	r2, [r7, #8]
 80091d4:	429a      	cmp	r2, r3
 80091d6:	bf0c      	ite	eq
 80091d8:	2301      	moveq	r3, #1
 80091da:	2300      	movne	r3, #0
 80091dc:	b2db      	uxtb	r3, r3
 80091de:	461a      	mov	r2, r3
 80091e0:	79fb      	ldrb	r3, [r7, #7]
 80091e2:	429a      	cmp	r2, r3
 80091e4:	f43f af4a 	beq.w	800907c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80091e8:	2300      	movs	r3, #0
}
 80091ea:	4618      	mov	r0, r3
 80091ec:	3770      	adds	r7, #112	; 0x70
 80091ee:	46bd      	mov	sp, r7
 80091f0:	bd80      	pop	{r7, pc}
	...

080091f4 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80091f4:	b480      	push	{r7}
 80091f6:	b097      	sub	sp, #92	; 0x5c
 80091f8:	af00      	add	r7, sp, #0
 80091fa:	60f8      	str	r0, [r7, #12]
 80091fc:	60b9      	str	r1, [r7, #8]
 80091fe:	4613      	mov	r3, r2
 8009200:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8009202:	68fb      	ldr	r3, [r7, #12]
 8009204:	68ba      	ldr	r2, [r7, #8]
 8009206:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 8009208:	68fb      	ldr	r3, [r7, #12]
 800920a:	88fa      	ldrh	r2, [r7, #6]
 800920c:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 8009210:	68fb      	ldr	r3, [r7, #12]
 8009212:	88fa      	ldrh	r2, [r7, #6]
 8009214:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 8009218:	68fb      	ldr	r3, [r7, #12]
 800921a:	2200      	movs	r2, #0
 800921c:	665a      	str	r2, [r3, #100]	; 0x64

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800921e:	68fb      	ldr	r3, [r7, #12]
 8009220:	689b      	ldr	r3, [r3, #8]
 8009222:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009226:	d10e      	bne.n	8009246 <UART_Start_Receive_IT+0x52>
 8009228:	68fb      	ldr	r3, [r7, #12]
 800922a:	691b      	ldr	r3, [r3, #16]
 800922c:	2b00      	cmp	r3, #0
 800922e:	d105      	bne.n	800923c <UART_Start_Receive_IT+0x48>
 8009230:	68fb      	ldr	r3, [r7, #12]
 8009232:	f240 12ff 	movw	r2, #511	; 0x1ff
 8009236:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800923a:	e02d      	b.n	8009298 <UART_Start_Receive_IT+0xa4>
 800923c:	68fb      	ldr	r3, [r7, #12]
 800923e:	22ff      	movs	r2, #255	; 0xff
 8009240:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8009244:	e028      	b.n	8009298 <UART_Start_Receive_IT+0xa4>
 8009246:	68fb      	ldr	r3, [r7, #12]
 8009248:	689b      	ldr	r3, [r3, #8]
 800924a:	2b00      	cmp	r3, #0
 800924c:	d10d      	bne.n	800926a <UART_Start_Receive_IT+0x76>
 800924e:	68fb      	ldr	r3, [r7, #12]
 8009250:	691b      	ldr	r3, [r3, #16]
 8009252:	2b00      	cmp	r3, #0
 8009254:	d104      	bne.n	8009260 <UART_Start_Receive_IT+0x6c>
 8009256:	68fb      	ldr	r3, [r7, #12]
 8009258:	22ff      	movs	r2, #255	; 0xff
 800925a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800925e:	e01b      	b.n	8009298 <UART_Start_Receive_IT+0xa4>
 8009260:	68fb      	ldr	r3, [r7, #12]
 8009262:	227f      	movs	r2, #127	; 0x7f
 8009264:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8009268:	e016      	b.n	8009298 <UART_Start_Receive_IT+0xa4>
 800926a:	68fb      	ldr	r3, [r7, #12]
 800926c:	689b      	ldr	r3, [r3, #8]
 800926e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009272:	d10d      	bne.n	8009290 <UART_Start_Receive_IT+0x9c>
 8009274:	68fb      	ldr	r3, [r7, #12]
 8009276:	691b      	ldr	r3, [r3, #16]
 8009278:	2b00      	cmp	r3, #0
 800927a:	d104      	bne.n	8009286 <UART_Start_Receive_IT+0x92>
 800927c:	68fb      	ldr	r3, [r7, #12]
 800927e:	227f      	movs	r2, #127	; 0x7f
 8009280:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8009284:	e008      	b.n	8009298 <UART_Start_Receive_IT+0xa4>
 8009286:	68fb      	ldr	r3, [r7, #12]
 8009288:	223f      	movs	r2, #63	; 0x3f
 800928a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800928e:	e003      	b.n	8009298 <UART_Start_Receive_IT+0xa4>
 8009290:	68fb      	ldr	r3, [r7, #12]
 8009292:	2200      	movs	r2, #0
 8009294:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009298:	68fb      	ldr	r3, [r7, #12]
 800929a:	2200      	movs	r2, #0
 800929c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80092a0:	68fb      	ldr	r3, [r7, #12]
 80092a2:	2222      	movs	r2, #34	; 0x22
 80092a4:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80092a6:	68fb      	ldr	r3, [r7, #12]
 80092a8:	681b      	ldr	r3, [r3, #0]
 80092aa:	3308      	adds	r3, #8
 80092ac:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80092ae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80092b0:	e853 3f00 	ldrex	r3, [r3]
 80092b4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80092b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80092b8:	f043 0301 	orr.w	r3, r3, #1
 80092bc:	657b      	str	r3, [r7, #84]	; 0x54
 80092be:	68fb      	ldr	r3, [r7, #12]
 80092c0:	681b      	ldr	r3, [r3, #0]
 80092c2:	3308      	adds	r3, #8
 80092c4:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80092c6:	64ba      	str	r2, [r7, #72]	; 0x48
 80092c8:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80092ca:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80092cc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80092ce:	e841 2300 	strex	r3, r2, [r1]
 80092d2:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80092d4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80092d6:	2b00      	cmp	r3, #0
 80092d8:	d1e5      	bne.n	80092a6 <UART_Start_Receive_IT+0xb2>
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
    }
  }
#else
  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80092da:	68fb      	ldr	r3, [r7, #12]
 80092dc:	689b      	ldr	r3, [r3, #8]
 80092de:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80092e2:	d107      	bne.n	80092f4 <UART_Start_Receive_IT+0x100>
 80092e4:	68fb      	ldr	r3, [r7, #12]
 80092e6:	691b      	ldr	r3, [r3, #16]
 80092e8:	2b00      	cmp	r3, #0
 80092ea:	d103      	bne.n	80092f4 <UART_Start_Receive_IT+0x100>
  {
    huart->RxISR = UART_RxISR_16BIT;
 80092ec:	68fb      	ldr	r3, [r7, #12]
 80092ee:	4a24      	ldr	r2, [pc, #144]	; (8009380 <UART_Start_Receive_IT+0x18c>)
 80092f0:	665a      	str	r2, [r3, #100]	; 0x64
 80092f2:	e002      	b.n	80092fa <UART_Start_Receive_IT+0x106>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 80092f4:	68fb      	ldr	r3, [r7, #12]
 80092f6:	4a23      	ldr	r2, [pc, #140]	; (8009384 <UART_Start_Receive_IT+0x190>)
 80092f8:	665a      	str	r2, [r3, #100]	; 0x64
  }

  __HAL_UNLOCK(huart);
 80092fa:	68fb      	ldr	r3, [r7, #12]
 80092fc:	2200      	movs	r2, #0
 80092fe:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8009302:	68fb      	ldr	r3, [r7, #12]
 8009304:	691b      	ldr	r3, [r3, #16]
 8009306:	2b00      	cmp	r3, #0
 8009308:	d019      	beq.n	800933e <UART_Start_Receive_IT+0x14a>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 800930a:	68fb      	ldr	r3, [r7, #12]
 800930c:	681b      	ldr	r3, [r3, #0]
 800930e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009310:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009312:	e853 3f00 	ldrex	r3, [r3]
 8009316:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8009318:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800931a:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 800931e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009320:	68fb      	ldr	r3, [r7, #12]
 8009322:	681b      	ldr	r3, [r3, #0]
 8009324:	461a      	mov	r2, r3
 8009326:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009328:	637b      	str	r3, [r7, #52]	; 0x34
 800932a:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800932c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800932e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009330:	e841 2300 	strex	r3, r2, [r1]
 8009334:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8009336:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009338:	2b00      	cmp	r3, #0
 800933a:	d1e6      	bne.n	800930a <UART_Start_Receive_IT+0x116>
 800933c:	e018      	b.n	8009370 <UART_Start_Receive_IT+0x17c>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 800933e:	68fb      	ldr	r3, [r7, #12]
 8009340:	681b      	ldr	r3, [r3, #0]
 8009342:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009344:	697b      	ldr	r3, [r7, #20]
 8009346:	e853 3f00 	ldrex	r3, [r3]
 800934a:	613b      	str	r3, [r7, #16]
   return(result);
 800934c:	693b      	ldr	r3, [r7, #16]
 800934e:	f043 0320 	orr.w	r3, r3, #32
 8009352:	653b      	str	r3, [r7, #80]	; 0x50
 8009354:	68fb      	ldr	r3, [r7, #12]
 8009356:	681b      	ldr	r3, [r3, #0]
 8009358:	461a      	mov	r2, r3
 800935a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800935c:	623b      	str	r3, [r7, #32]
 800935e:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009360:	69f9      	ldr	r1, [r7, #28]
 8009362:	6a3a      	ldr	r2, [r7, #32]
 8009364:	e841 2300 	strex	r3, r2, [r1]
 8009368:	61bb      	str	r3, [r7, #24]
   return(result);
 800936a:	69bb      	ldr	r3, [r7, #24]
 800936c:	2b00      	cmp	r3, #0
 800936e:	d1e6      	bne.n	800933e <UART_Start_Receive_IT+0x14a>
  }
#endif /* USART_CR1_FIFOEN */
  return HAL_OK;
 8009370:	2300      	movs	r3, #0
}
 8009372:	4618      	mov	r0, r3
 8009374:	375c      	adds	r7, #92	; 0x5c
 8009376:	46bd      	mov	sp, r7
 8009378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800937c:	4770      	bx	lr
 800937e:	bf00      	nop
 8009380:	0800962f 	.word	0x0800962f
 8009384:	080094cf 	.word	0x080094cf

08009388 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8009388:	b480      	push	{r7}
 800938a:	b095      	sub	sp, #84	; 0x54
 800938c:	af00      	add	r7, sp, #0
 800938e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8009390:	687b      	ldr	r3, [r7, #4]
 8009392:	681b      	ldr	r3, [r3, #0]
 8009394:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009396:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009398:	e853 3f00 	ldrex	r3, [r3]
 800939c:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800939e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80093a0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80093a4:	64fb      	str	r3, [r7, #76]	; 0x4c
 80093a6:	687b      	ldr	r3, [r7, #4]
 80093a8:	681b      	ldr	r3, [r3, #0]
 80093aa:	461a      	mov	r2, r3
 80093ac:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80093ae:	643b      	str	r3, [r7, #64]	; 0x40
 80093b0:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80093b2:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80093b4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80093b6:	e841 2300 	strex	r3, r2, [r1]
 80093ba:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80093bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80093be:	2b00      	cmp	r3, #0
 80093c0:	d1e6      	bne.n	8009390 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80093c2:	687b      	ldr	r3, [r7, #4]
 80093c4:	681b      	ldr	r3, [r3, #0]
 80093c6:	3308      	adds	r3, #8
 80093c8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80093ca:	6a3b      	ldr	r3, [r7, #32]
 80093cc:	e853 3f00 	ldrex	r3, [r3]
 80093d0:	61fb      	str	r3, [r7, #28]
   return(result);
 80093d2:	69fb      	ldr	r3, [r7, #28]
 80093d4:	f023 0301 	bic.w	r3, r3, #1
 80093d8:	64bb      	str	r3, [r7, #72]	; 0x48
 80093da:	687b      	ldr	r3, [r7, #4]
 80093dc:	681b      	ldr	r3, [r3, #0]
 80093de:	3308      	adds	r3, #8
 80093e0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80093e2:	62fa      	str	r2, [r7, #44]	; 0x2c
 80093e4:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80093e6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80093e8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80093ea:	e841 2300 	strex	r3, r2, [r1]
 80093ee:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80093f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80093f2:	2b00      	cmp	r3, #0
 80093f4:	d1e5      	bne.n	80093c2 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80093f6:	687b      	ldr	r3, [r7, #4]
 80093f8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80093fa:	2b01      	cmp	r3, #1
 80093fc:	d118      	bne.n	8009430 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80093fe:	687b      	ldr	r3, [r7, #4]
 8009400:	681b      	ldr	r3, [r3, #0]
 8009402:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009404:	68fb      	ldr	r3, [r7, #12]
 8009406:	e853 3f00 	ldrex	r3, [r3]
 800940a:	60bb      	str	r3, [r7, #8]
   return(result);
 800940c:	68bb      	ldr	r3, [r7, #8]
 800940e:	f023 0310 	bic.w	r3, r3, #16
 8009412:	647b      	str	r3, [r7, #68]	; 0x44
 8009414:	687b      	ldr	r3, [r7, #4]
 8009416:	681b      	ldr	r3, [r3, #0]
 8009418:	461a      	mov	r2, r3
 800941a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800941c:	61bb      	str	r3, [r7, #24]
 800941e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009420:	6979      	ldr	r1, [r7, #20]
 8009422:	69ba      	ldr	r2, [r7, #24]
 8009424:	e841 2300 	strex	r3, r2, [r1]
 8009428:	613b      	str	r3, [r7, #16]
   return(result);
 800942a:	693b      	ldr	r3, [r7, #16]
 800942c:	2b00      	cmp	r3, #0
 800942e:	d1e6      	bne.n	80093fe <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8009430:	687b      	ldr	r3, [r7, #4]
 8009432:	2220      	movs	r2, #32
 8009434:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009436:	687b      	ldr	r3, [r7, #4]
 8009438:	2200      	movs	r2, #0
 800943a:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800943c:	687b      	ldr	r3, [r7, #4]
 800943e:	2200      	movs	r2, #0
 8009440:	665a      	str	r2, [r3, #100]	; 0x64
}
 8009442:	bf00      	nop
 8009444:	3754      	adds	r7, #84	; 0x54
 8009446:	46bd      	mov	sp, r7
 8009448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800944c:	4770      	bx	lr

0800944e <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800944e:	b580      	push	{r7, lr}
 8009450:	b084      	sub	sp, #16
 8009452:	af00      	add	r7, sp, #0
 8009454:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8009456:	687b      	ldr	r3, [r7, #4]
 8009458:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800945a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800945c:	68fb      	ldr	r3, [r7, #12]
 800945e:	2200      	movs	r2, #0
 8009460:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8009464:	68fb      	ldr	r3, [r7, #12]
 8009466:	2200      	movs	r2, #0
 8009468:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800946c:	68f8      	ldr	r0, [r7, #12]
 800946e:	f7ff facf 	bl	8008a10 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009472:	bf00      	nop
 8009474:	3710      	adds	r7, #16
 8009476:	46bd      	mov	sp, r7
 8009478:	bd80      	pop	{r7, pc}

0800947a <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800947a:	b580      	push	{r7, lr}
 800947c:	b088      	sub	sp, #32
 800947e:	af00      	add	r7, sp, #0
 8009480:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8009482:	687b      	ldr	r3, [r7, #4]
 8009484:	681b      	ldr	r3, [r3, #0]
 8009486:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009488:	68fb      	ldr	r3, [r7, #12]
 800948a:	e853 3f00 	ldrex	r3, [r3]
 800948e:	60bb      	str	r3, [r7, #8]
   return(result);
 8009490:	68bb      	ldr	r3, [r7, #8]
 8009492:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009496:	61fb      	str	r3, [r7, #28]
 8009498:	687b      	ldr	r3, [r7, #4]
 800949a:	681b      	ldr	r3, [r3, #0]
 800949c:	461a      	mov	r2, r3
 800949e:	69fb      	ldr	r3, [r7, #28]
 80094a0:	61bb      	str	r3, [r7, #24]
 80094a2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80094a4:	6979      	ldr	r1, [r7, #20]
 80094a6:	69ba      	ldr	r2, [r7, #24]
 80094a8:	e841 2300 	strex	r3, r2, [r1]
 80094ac:	613b      	str	r3, [r7, #16]
   return(result);
 80094ae:	693b      	ldr	r3, [r7, #16]
 80094b0:	2b00      	cmp	r3, #0
 80094b2:	d1e6      	bne.n	8009482 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80094b4:	687b      	ldr	r3, [r7, #4]
 80094b6:	2220      	movs	r2, #32
 80094b8:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80094ba:	687b      	ldr	r3, [r7, #4]
 80094bc:	2200      	movs	r2, #0
 80094be:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80094c0:	6878      	ldr	r0, [r7, #4]
 80094c2:	f7ff fa9b 	bl	80089fc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80094c6:	bf00      	nop
 80094c8:	3720      	adds	r7, #32
 80094ca:	46bd      	mov	sp, r7
 80094cc:	bd80      	pop	{r7, pc}

080094ce <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 80094ce:	b580      	push	{r7, lr}
 80094d0:	b096      	sub	sp, #88	; 0x58
 80094d2:	af00      	add	r7, sp, #0
 80094d4:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 80094d6:	687b      	ldr	r3, [r7, #4]
 80094d8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80094dc:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80094e0:	687b      	ldr	r3, [r7, #4]
 80094e2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80094e4:	2b22      	cmp	r3, #34	; 0x22
 80094e6:	f040 8094 	bne.w	8009612 <UART_RxISR_8BIT+0x144>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80094ea:	687b      	ldr	r3, [r7, #4]
 80094ec:	681b      	ldr	r3, [r3, #0]
 80094ee:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80094f0:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80094f4:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 80094f8:	b2d9      	uxtb	r1, r3
 80094fa:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 80094fe:	b2da      	uxtb	r2, r3
 8009500:	687b      	ldr	r3, [r7, #4]
 8009502:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009504:	400a      	ands	r2, r1
 8009506:	b2d2      	uxtb	r2, r2
 8009508:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800950a:	687b      	ldr	r3, [r7, #4]
 800950c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800950e:	1c5a      	adds	r2, r3, #1
 8009510:	687b      	ldr	r3, [r7, #4]
 8009512:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8009514:	687b      	ldr	r3, [r7, #4]
 8009516:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800951a:	b29b      	uxth	r3, r3
 800951c:	3b01      	subs	r3, #1
 800951e:	b29a      	uxth	r2, r3
 8009520:	687b      	ldr	r3, [r7, #4]
 8009522:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8009526:	687b      	ldr	r3, [r7, #4]
 8009528:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800952c:	b29b      	uxth	r3, r3
 800952e:	2b00      	cmp	r3, #0
 8009530:	d179      	bne.n	8009626 <UART_RxISR_8BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8009532:	687b      	ldr	r3, [r7, #4]
 8009534:	681b      	ldr	r3, [r3, #0]
 8009536:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009538:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800953a:	e853 3f00 	ldrex	r3, [r3]
 800953e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8009540:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009542:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8009546:	653b      	str	r3, [r7, #80]	; 0x50
 8009548:	687b      	ldr	r3, [r7, #4]
 800954a:	681b      	ldr	r3, [r3, #0]
 800954c:	461a      	mov	r2, r3
 800954e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009550:	647b      	str	r3, [r7, #68]	; 0x44
 8009552:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009554:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8009556:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009558:	e841 2300 	strex	r3, r2, [r1]
 800955c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800955e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009560:	2b00      	cmp	r3, #0
 8009562:	d1e6      	bne.n	8009532 <UART_RxISR_8BIT+0x64>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009564:	687b      	ldr	r3, [r7, #4]
 8009566:	681b      	ldr	r3, [r3, #0]
 8009568:	3308      	adds	r3, #8
 800956a:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800956c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800956e:	e853 3f00 	ldrex	r3, [r3]
 8009572:	623b      	str	r3, [r7, #32]
   return(result);
 8009574:	6a3b      	ldr	r3, [r7, #32]
 8009576:	f023 0301 	bic.w	r3, r3, #1
 800957a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800957c:	687b      	ldr	r3, [r7, #4]
 800957e:	681b      	ldr	r3, [r3, #0]
 8009580:	3308      	adds	r3, #8
 8009582:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8009584:	633a      	str	r2, [r7, #48]	; 0x30
 8009586:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009588:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800958a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800958c:	e841 2300 	strex	r3, r2, [r1]
 8009590:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8009592:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009594:	2b00      	cmp	r3, #0
 8009596:	d1e5      	bne.n	8009564 <UART_RxISR_8BIT+0x96>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8009598:	687b      	ldr	r3, [r7, #4]
 800959a:	2220      	movs	r2, #32
 800959c:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800959e:	687b      	ldr	r3, [r7, #4]
 80095a0:	2200      	movs	r2, #0
 80095a2:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80095a4:	687b      	ldr	r3, [r7, #4]
 80095a6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80095a8:	2b01      	cmp	r3, #1
 80095aa:	d12e      	bne.n	800960a <UART_RxISR_8BIT+0x13c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80095ac:	687b      	ldr	r3, [r7, #4]
 80095ae:	2200      	movs	r2, #0
 80095b0:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80095b2:	687b      	ldr	r3, [r7, #4]
 80095b4:	681b      	ldr	r3, [r3, #0]
 80095b6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80095b8:	693b      	ldr	r3, [r7, #16]
 80095ba:	e853 3f00 	ldrex	r3, [r3]
 80095be:	60fb      	str	r3, [r7, #12]
   return(result);
 80095c0:	68fb      	ldr	r3, [r7, #12]
 80095c2:	f023 0310 	bic.w	r3, r3, #16
 80095c6:	64bb      	str	r3, [r7, #72]	; 0x48
 80095c8:	687b      	ldr	r3, [r7, #4]
 80095ca:	681b      	ldr	r3, [r3, #0]
 80095cc:	461a      	mov	r2, r3
 80095ce:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80095d0:	61fb      	str	r3, [r7, #28]
 80095d2:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80095d4:	69b9      	ldr	r1, [r7, #24]
 80095d6:	69fa      	ldr	r2, [r7, #28]
 80095d8:	e841 2300 	strex	r3, r2, [r1]
 80095dc:	617b      	str	r3, [r7, #20]
   return(result);
 80095de:	697b      	ldr	r3, [r7, #20]
 80095e0:	2b00      	cmp	r3, #0
 80095e2:	d1e6      	bne.n	80095b2 <UART_RxISR_8BIT+0xe4>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80095e4:	687b      	ldr	r3, [r7, #4]
 80095e6:	681b      	ldr	r3, [r3, #0]
 80095e8:	69db      	ldr	r3, [r3, #28]
 80095ea:	f003 0310 	and.w	r3, r3, #16
 80095ee:	2b10      	cmp	r3, #16
 80095f0:	d103      	bne.n	80095fa <UART_RxISR_8BIT+0x12c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80095f2:	687b      	ldr	r3, [r7, #4]
 80095f4:	681b      	ldr	r3, [r3, #0]
 80095f6:	2210      	movs	r2, #16
 80095f8:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80095fa:	687b      	ldr	r3, [r7, #4]
 80095fc:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8009600:	4619      	mov	r1, r3
 8009602:	6878      	ldr	r0, [r7, #4]
 8009604:	f7ff fa0e 	bl	8008a24 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8009608:	e00d      	b.n	8009626 <UART_RxISR_8BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 800960a:	6878      	ldr	r0, [r7, #4]
 800960c:	f7f9 f98c 	bl	8002928 <HAL_UART_RxCpltCallback>
}
 8009610:	e009      	b.n	8009626 <UART_RxISR_8BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8009612:	687b      	ldr	r3, [r7, #4]
 8009614:	681b      	ldr	r3, [r3, #0]
 8009616:	8b1b      	ldrh	r3, [r3, #24]
 8009618:	b29a      	uxth	r2, r3
 800961a:	687b      	ldr	r3, [r7, #4]
 800961c:	681b      	ldr	r3, [r3, #0]
 800961e:	f042 0208 	orr.w	r2, r2, #8
 8009622:	b292      	uxth	r2, r2
 8009624:	831a      	strh	r2, [r3, #24]
}
 8009626:	bf00      	nop
 8009628:	3758      	adds	r7, #88	; 0x58
 800962a:	46bd      	mov	sp, r7
 800962c:	bd80      	pop	{r7, pc}

0800962e <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800962e:	b580      	push	{r7, lr}
 8009630:	b096      	sub	sp, #88	; 0x58
 8009632:	af00      	add	r7, sp, #0
 8009634:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8009636:	687b      	ldr	r3, [r7, #4]
 8009638:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800963c:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8009640:	687b      	ldr	r3, [r7, #4]
 8009642:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009644:	2b22      	cmp	r3, #34	; 0x22
 8009646:	f040 8094 	bne.w	8009772 <UART_RxISR_16BIT+0x144>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800964a:	687b      	ldr	r3, [r7, #4]
 800964c:	681b      	ldr	r3, [r3, #0]
 800964e:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8009650:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8009654:	687b      	ldr	r3, [r7, #4]
 8009656:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009658:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 800965a:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 800965e:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8009662:	4013      	ands	r3, r2
 8009664:	b29a      	uxth	r2, r3
 8009666:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009668:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800966a:	687b      	ldr	r3, [r7, #4]
 800966c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800966e:	1c9a      	adds	r2, r3, #2
 8009670:	687b      	ldr	r3, [r7, #4]
 8009672:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8009674:	687b      	ldr	r3, [r7, #4]
 8009676:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800967a:	b29b      	uxth	r3, r3
 800967c:	3b01      	subs	r3, #1
 800967e:	b29a      	uxth	r2, r3
 8009680:	687b      	ldr	r3, [r7, #4]
 8009682:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8009686:	687b      	ldr	r3, [r7, #4]
 8009688:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800968c:	b29b      	uxth	r3, r3
 800968e:	2b00      	cmp	r3, #0
 8009690:	d179      	bne.n	8009786 <UART_RxISR_16BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8009692:	687b      	ldr	r3, [r7, #4]
 8009694:	681b      	ldr	r3, [r3, #0]
 8009696:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009698:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800969a:	e853 3f00 	ldrex	r3, [r3]
 800969e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80096a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80096a2:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80096a6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80096a8:	687b      	ldr	r3, [r7, #4]
 80096aa:	681b      	ldr	r3, [r3, #0]
 80096ac:	461a      	mov	r2, r3
 80096ae:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80096b0:	643b      	str	r3, [r7, #64]	; 0x40
 80096b2:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80096b4:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80096b6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80096b8:	e841 2300 	strex	r3, r2, [r1]
 80096bc:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80096be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80096c0:	2b00      	cmp	r3, #0
 80096c2:	d1e6      	bne.n	8009692 <UART_RxISR_16BIT+0x64>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80096c4:	687b      	ldr	r3, [r7, #4]
 80096c6:	681b      	ldr	r3, [r3, #0]
 80096c8:	3308      	adds	r3, #8
 80096ca:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80096cc:	6a3b      	ldr	r3, [r7, #32]
 80096ce:	e853 3f00 	ldrex	r3, [r3]
 80096d2:	61fb      	str	r3, [r7, #28]
   return(result);
 80096d4:	69fb      	ldr	r3, [r7, #28]
 80096d6:	f023 0301 	bic.w	r3, r3, #1
 80096da:	64bb      	str	r3, [r7, #72]	; 0x48
 80096dc:	687b      	ldr	r3, [r7, #4]
 80096de:	681b      	ldr	r3, [r3, #0]
 80096e0:	3308      	adds	r3, #8
 80096e2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80096e4:	62fa      	str	r2, [r7, #44]	; 0x2c
 80096e6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80096e8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80096ea:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80096ec:	e841 2300 	strex	r3, r2, [r1]
 80096f0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80096f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80096f4:	2b00      	cmp	r3, #0
 80096f6:	d1e5      	bne.n	80096c4 <UART_RxISR_16BIT+0x96>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80096f8:	687b      	ldr	r3, [r7, #4]
 80096fa:	2220      	movs	r2, #32
 80096fc:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80096fe:	687b      	ldr	r3, [r7, #4]
 8009700:	2200      	movs	r2, #0
 8009702:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009704:	687b      	ldr	r3, [r7, #4]
 8009706:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009708:	2b01      	cmp	r3, #1
 800970a:	d12e      	bne.n	800976a <UART_RxISR_16BIT+0x13c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800970c:	687b      	ldr	r3, [r7, #4]
 800970e:	2200      	movs	r2, #0
 8009710:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009712:	687b      	ldr	r3, [r7, #4]
 8009714:	681b      	ldr	r3, [r3, #0]
 8009716:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009718:	68fb      	ldr	r3, [r7, #12]
 800971a:	e853 3f00 	ldrex	r3, [r3]
 800971e:	60bb      	str	r3, [r7, #8]
   return(result);
 8009720:	68bb      	ldr	r3, [r7, #8]
 8009722:	f023 0310 	bic.w	r3, r3, #16
 8009726:	647b      	str	r3, [r7, #68]	; 0x44
 8009728:	687b      	ldr	r3, [r7, #4]
 800972a:	681b      	ldr	r3, [r3, #0]
 800972c:	461a      	mov	r2, r3
 800972e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009730:	61bb      	str	r3, [r7, #24]
 8009732:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009734:	6979      	ldr	r1, [r7, #20]
 8009736:	69ba      	ldr	r2, [r7, #24]
 8009738:	e841 2300 	strex	r3, r2, [r1]
 800973c:	613b      	str	r3, [r7, #16]
   return(result);
 800973e:	693b      	ldr	r3, [r7, #16]
 8009740:	2b00      	cmp	r3, #0
 8009742:	d1e6      	bne.n	8009712 <UART_RxISR_16BIT+0xe4>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8009744:	687b      	ldr	r3, [r7, #4]
 8009746:	681b      	ldr	r3, [r3, #0]
 8009748:	69db      	ldr	r3, [r3, #28]
 800974a:	f003 0310 	and.w	r3, r3, #16
 800974e:	2b10      	cmp	r3, #16
 8009750:	d103      	bne.n	800975a <UART_RxISR_16BIT+0x12c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8009752:	687b      	ldr	r3, [r7, #4]
 8009754:	681b      	ldr	r3, [r3, #0]
 8009756:	2210      	movs	r2, #16
 8009758:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800975a:	687b      	ldr	r3, [r7, #4]
 800975c:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8009760:	4619      	mov	r1, r3
 8009762:	6878      	ldr	r0, [r7, #4]
 8009764:	f7ff f95e 	bl	8008a24 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8009768:	e00d      	b.n	8009786 <UART_RxISR_16BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 800976a:	6878      	ldr	r0, [r7, #4]
 800976c:	f7f9 f8dc 	bl	8002928 <HAL_UART_RxCpltCallback>
}
 8009770:	e009      	b.n	8009786 <UART_RxISR_16BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8009772:	687b      	ldr	r3, [r7, #4]
 8009774:	681b      	ldr	r3, [r3, #0]
 8009776:	8b1b      	ldrh	r3, [r3, #24]
 8009778:	b29a      	uxth	r2, r3
 800977a:	687b      	ldr	r3, [r7, #4]
 800977c:	681b      	ldr	r3, [r3, #0]
 800977e:	f042 0208 	orr.w	r2, r2, #8
 8009782:	b292      	uxth	r2, r2
 8009784:	831a      	strh	r2, [r3, #24]
}
 8009786:	bf00      	nop
 8009788:	3758      	adds	r7, #88	; 0x58
 800978a:	46bd      	mov	sp, r7
 800978c:	bd80      	pop	{r7, pc}

0800978e <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800978e:	b480      	push	{r7}
 8009790:	b083      	sub	sp, #12
 8009792:	af00      	add	r7, sp, #0
 8009794:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8009796:	bf00      	nop
 8009798:	370c      	adds	r7, #12
 800979a:	46bd      	mov	sp, r7
 800979c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097a0:	4770      	bx	lr
	...

080097a4 <__errno>:
 80097a4:	4b01      	ldr	r3, [pc, #4]	; (80097ac <__errno+0x8>)
 80097a6:	6818      	ldr	r0, [r3, #0]
 80097a8:	4770      	bx	lr
 80097aa:	bf00      	nop
 80097ac:	200010ac 	.word	0x200010ac

080097b0 <__libc_init_array>:
 80097b0:	b570      	push	{r4, r5, r6, lr}
 80097b2:	4d0d      	ldr	r5, [pc, #52]	; (80097e8 <__libc_init_array+0x38>)
 80097b4:	4c0d      	ldr	r4, [pc, #52]	; (80097ec <__libc_init_array+0x3c>)
 80097b6:	1b64      	subs	r4, r4, r5
 80097b8:	10a4      	asrs	r4, r4, #2
 80097ba:	2600      	movs	r6, #0
 80097bc:	42a6      	cmp	r6, r4
 80097be:	d109      	bne.n	80097d4 <__libc_init_array+0x24>
 80097c0:	4d0b      	ldr	r5, [pc, #44]	; (80097f0 <__libc_init_array+0x40>)
 80097c2:	4c0c      	ldr	r4, [pc, #48]	; (80097f4 <__libc_init_array+0x44>)
 80097c4:	f003 fe24 	bl	800d410 <_init>
 80097c8:	1b64      	subs	r4, r4, r5
 80097ca:	10a4      	asrs	r4, r4, #2
 80097cc:	2600      	movs	r6, #0
 80097ce:	42a6      	cmp	r6, r4
 80097d0:	d105      	bne.n	80097de <__libc_init_array+0x2e>
 80097d2:	bd70      	pop	{r4, r5, r6, pc}
 80097d4:	f855 3b04 	ldr.w	r3, [r5], #4
 80097d8:	4798      	blx	r3
 80097da:	3601      	adds	r6, #1
 80097dc:	e7ee      	b.n	80097bc <__libc_init_array+0xc>
 80097de:	f855 3b04 	ldr.w	r3, [r5], #4
 80097e2:	4798      	blx	r3
 80097e4:	3601      	adds	r6, #1
 80097e6:	e7f2      	b.n	80097ce <__libc_init_array+0x1e>
 80097e8:	0800e570 	.word	0x0800e570
 80097ec:	0800e570 	.word	0x0800e570
 80097f0:	0800e570 	.word	0x0800e570
 80097f4:	0800e574 	.word	0x0800e574

080097f8 <malloc>:
 80097f8:	4b02      	ldr	r3, [pc, #8]	; (8009804 <malloc+0xc>)
 80097fa:	4601      	mov	r1, r0
 80097fc:	6818      	ldr	r0, [r3, #0]
 80097fe:	f000 b88d 	b.w	800991c <_malloc_r>
 8009802:	bf00      	nop
 8009804:	200010ac 	.word	0x200010ac

08009808 <free>:
 8009808:	4b02      	ldr	r3, [pc, #8]	; (8009814 <free+0xc>)
 800980a:	4601      	mov	r1, r0
 800980c:	6818      	ldr	r0, [r3, #0]
 800980e:	f000 b819 	b.w	8009844 <_free_r>
 8009812:	bf00      	nop
 8009814:	200010ac 	.word	0x200010ac

08009818 <memcpy>:
 8009818:	440a      	add	r2, r1
 800981a:	4291      	cmp	r1, r2
 800981c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8009820:	d100      	bne.n	8009824 <memcpy+0xc>
 8009822:	4770      	bx	lr
 8009824:	b510      	push	{r4, lr}
 8009826:	f811 4b01 	ldrb.w	r4, [r1], #1
 800982a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800982e:	4291      	cmp	r1, r2
 8009830:	d1f9      	bne.n	8009826 <memcpy+0xe>
 8009832:	bd10      	pop	{r4, pc}

08009834 <memset>:
 8009834:	4402      	add	r2, r0
 8009836:	4603      	mov	r3, r0
 8009838:	4293      	cmp	r3, r2
 800983a:	d100      	bne.n	800983e <memset+0xa>
 800983c:	4770      	bx	lr
 800983e:	f803 1b01 	strb.w	r1, [r3], #1
 8009842:	e7f9      	b.n	8009838 <memset+0x4>

08009844 <_free_r>:
 8009844:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009846:	2900      	cmp	r1, #0
 8009848:	d044      	beq.n	80098d4 <_free_r+0x90>
 800984a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800984e:	9001      	str	r0, [sp, #4]
 8009850:	2b00      	cmp	r3, #0
 8009852:	f1a1 0404 	sub.w	r4, r1, #4
 8009856:	bfb8      	it	lt
 8009858:	18e4      	addlt	r4, r4, r3
 800985a:	f001 ff07 	bl	800b66c <__malloc_lock>
 800985e:	4a1e      	ldr	r2, [pc, #120]	; (80098d8 <_free_r+0x94>)
 8009860:	9801      	ldr	r0, [sp, #4]
 8009862:	6813      	ldr	r3, [r2, #0]
 8009864:	b933      	cbnz	r3, 8009874 <_free_r+0x30>
 8009866:	6063      	str	r3, [r4, #4]
 8009868:	6014      	str	r4, [r2, #0]
 800986a:	b003      	add	sp, #12
 800986c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009870:	f001 bf02 	b.w	800b678 <__malloc_unlock>
 8009874:	42a3      	cmp	r3, r4
 8009876:	d908      	bls.n	800988a <_free_r+0x46>
 8009878:	6825      	ldr	r5, [r4, #0]
 800987a:	1961      	adds	r1, r4, r5
 800987c:	428b      	cmp	r3, r1
 800987e:	bf01      	itttt	eq
 8009880:	6819      	ldreq	r1, [r3, #0]
 8009882:	685b      	ldreq	r3, [r3, #4]
 8009884:	1949      	addeq	r1, r1, r5
 8009886:	6021      	streq	r1, [r4, #0]
 8009888:	e7ed      	b.n	8009866 <_free_r+0x22>
 800988a:	461a      	mov	r2, r3
 800988c:	685b      	ldr	r3, [r3, #4]
 800988e:	b10b      	cbz	r3, 8009894 <_free_r+0x50>
 8009890:	42a3      	cmp	r3, r4
 8009892:	d9fa      	bls.n	800988a <_free_r+0x46>
 8009894:	6811      	ldr	r1, [r2, #0]
 8009896:	1855      	adds	r5, r2, r1
 8009898:	42a5      	cmp	r5, r4
 800989a:	d10b      	bne.n	80098b4 <_free_r+0x70>
 800989c:	6824      	ldr	r4, [r4, #0]
 800989e:	4421      	add	r1, r4
 80098a0:	1854      	adds	r4, r2, r1
 80098a2:	42a3      	cmp	r3, r4
 80098a4:	6011      	str	r1, [r2, #0]
 80098a6:	d1e0      	bne.n	800986a <_free_r+0x26>
 80098a8:	681c      	ldr	r4, [r3, #0]
 80098aa:	685b      	ldr	r3, [r3, #4]
 80098ac:	6053      	str	r3, [r2, #4]
 80098ae:	4421      	add	r1, r4
 80098b0:	6011      	str	r1, [r2, #0]
 80098b2:	e7da      	b.n	800986a <_free_r+0x26>
 80098b4:	d902      	bls.n	80098bc <_free_r+0x78>
 80098b6:	230c      	movs	r3, #12
 80098b8:	6003      	str	r3, [r0, #0]
 80098ba:	e7d6      	b.n	800986a <_free_r+0x26>
 80098bc:	6825      	ldr	r5, [r4, #0]
 80098be:	1961      	adds	r1, r4, r5
 80098c0:	428b      	cmp	r3, r1
 80098c2:	bf04      	itt	eq
 80098c4:	6819      	ldreq	r1, [r3, #0]
 80098c6:	685b      	ldreq	r3, [r3, #4]
 80098c8:	6063      	str	r3, [r4, #4]
 80098ca:	bf04      	itt	eq
 80098cc:	1949      	addeq	r1, r1, r5
 80098ce:	6021      	streq	r1, [r4, #0]
 80098d0:	6054      	str	r4, [r2, #4]
 80098d2:	e7ca      	b.n	800986a <_free_r+0x26>
 80098d4:	b003      	add	sp, #12
 80098d6:	bd30      	pop	{r4, r5, pc}
 80098d8:	20001d88 	.word	0x20001d88

080098dc <sbrk_aligned>:
 80098dc:	b570      	push	{r4, r5, r6, lr}
 80098de:	4e0e      	ldr	r6, [pc, #56]	; (8009918 <sbrk_aligned+0x3c>)
 80098e0:	460c      	mov	r4, r1
 80098e2:	6831      	ldr	r1, [r6, #0]
 80098e4:	4605      	mov	r5, r0
 80098e6:	b911      	cbnz	r1, 80098ee <sbrk_aligned+0x12>
 80098e8:	f000 f922 	bl	8009b30 <_sbrk_r>
 80098ec:	6030      	str	r0, [r6, #0]
 80098ee:	4621      	mov	r1, r4
 80098f0:	4628      	mov	r0, r5
 80098f2:	f000 f91d 	bl	8009b30 <_sbrk_r>
 80098f6:	1c43      	adds	r3, r0, #1
 80098f8:	d00a      	beq.n	8009910 <sbrk_aligned+0x34>
 80098fa:	1cc4      	adds	r4, r0, #3
 80098fc:	f024 0403 	bic.w	r4, r4, #3
 8009900:	42a0      	cmp	r0, r4
 8009902:	d007      	beq.n	8009914 <sbrk_aligned+0x38>
 8009904:	1a21      	subs	r1, r4, r0
 8009906:	4628      	mov	r0, r5
 8009908:	f000 f912 	bl	8009b30 <_sbrk_r>
 800990c:	3001      	adds	r0, #1
 800990e:	d101      	bne.n	8009914 <sbrk_aligned+0x38>
 8009910:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8009914:	4620      	mov	r0, r4
 8009916:	bd70      	pop	{r4, r5, r6, pc}
 8009918:	20001d8c 	.word	0x20001d8c

0800991c <_malloc_r>:
 800991c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009920:	1ccd      	adds	r5, r1, #3
 8009922:	f025 0503 	bic.w	r5, r5, #3
 8009926:	3508      	adds	r5, #8
 8009928:	2d0c      	cmp	r5, #12
 800992a:	bf38      	it	cc
 800992c:	250c      	movcc	r5, #12
 800992e:	2d00      	cmp	r5, #0
 8009930:	4607      	mov	r7, r0
 8009932:	db01      	blt.n	8009938 <_malloc_r+0x1c>
 8009934:	42a9      	cmp	r1, r5
 8009936:	d905      	bls.n	8009944 <_malloc_r+0x28>
 8009938:	230c      	movs	r3, #12
 800993a:	603b      	str	r3, [r7, #0]
 800993c:	2600      	movs	r6, #0
 800993e:	4630      	mov	r0, r6
 8009940:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009944:	4e2e      	ldr	r6, [pc, #184]	; (8009a00 <_malloc_r+0xe4>)
 8009946:	f001 fe91 	bl	800b66c <__malloc_lock>
 800994a:	6833      	ldr	r3, [r6, #0]
 800994c:	461c      	mov	r4, r3
 800994e:	bb34      	cbnz	r4, 800999e <_malloc_r+0x82>
 8009950:	4629      	mov	r1, r5
 8009952:	4638      	mov	r0, r7
 8009954:	f7ff ffc2 	bl	80098dc <sbrk_aligned>
 8009958:	1c43      	adds	r3, r0, #1
 800995a:	4604      	mov	r4, r0
 800995c:	d14d      	bne.n	80099fa <_malloc_r+0xde>
 800995e:	6834      	ldr	r4, [r6, #0]
 8009960:	4626      	mov	r6, r4
 8009962:	2e00      	cmp	r6, #0
 8009964:	d140      	bne.n	80099e8 <_malloc_r+0xcc>
 8009966:	6823      	ldr	r3, [r4, #0]
 8009968:	4631      	mov	r1, r6
 800996a:	4638      	mov	r0, r7
 800996c:	eb04 0803 	add.w	r8, r4, r3
 8009970:	f000 f8de 	bl	8009b30 <_sbrk_r>
 8009974:	4580      	cmp	r8, r0
 8009976:	d13a      	bne.n	80099ee <_malloc_r+0xd2>
 8009978:	6821      	ldr	r1, [r4, #0]
 800997a:	3503      	adds	r5, #3
 800997c:	1a6d      	subs	r5, r5, r1
 800997e:	f025 0503 	bic.w	r5, r5, #3
 8009982:	3508      	adds	r5, #8
 8009984:	2d0c      	cmp	r5, #12
 8009986:	bf38      	it	cc
 8009988:	250c      	movcc	r5, #12
 800998a:	4629      	mov	r1, r5
 800998c:	4638      	mov	r0, r7
 800998e:	f7ff ffa5 	bl	80098dc <sbrk_aligned>
 8009992:	3001      	adds	r0, #1
 8009994:	d02b      	beq.n	80099ee <_malloc_r+0xd2>
 8009996:	6823      	ldr	r3, [r4, #0]
 8009998:	442b      	add	r3, r5
 800999a:	6023      	str	r3, [r4, #0]
 800999c:	e00e      	b.n	80099bc <_malloc_r+0xa0>
 800999e:	6822      	ldr	r2, [r4, #0]
 80099a0:	1b52      	subs	r2, r2, r5
 80099a2:	d41e      	bmi.n	80099e2 <_malloc_r+0xc6>
 80099a4:	2a0b      	cmp	r2, #11
 80099a6:	d916      	bls.n	80099d6 <_malloc_r+0xba>
 80099a8:	1961      	adds	r1, r4, r5
 80099aa:	42a3      	cmp	r3, r4
 80099ac:	6025      	str	r5, [r4, #0]
 80099ae:	bf18      	it	ne
 80099b0:	6059      	strne	r1, [r3, #4]
 80099b2:	6863      	ldr	r3, [r4, #4]
 80099b4:	bf08      	it	eq
 80099b6:	6031      	streq	r1, [r6, #0]
 80099b8:	5162      	str	r2, [r4, r5]
 80099ba:	604b      	str	r3, [r1, #4]
 80099bc:	4638      	mov	r0, r7
 80099be:	f104 060b 	add.w	r6, r4, #11
 80099c2:	f001 fe59 	bl	800b678 <__malloc_unlock>
 80099c6:	f026 0607 	bic.w	r6, r6, #7
 80099ca:	1d23      	adds	r3, r4, #4
 80099cc:	1af2      	subs	r2, r6, r3
 80099ce:	d0b6      	beq.n	800993e <_malloc_r+0x22>
 80099d0:	1b9b      	subs	r3, r3, r6
 80099d2:	50a3      	str	r3, [r4, r2]
 80099d4:	e7b3      	b.n	800993e <_malloc_r+0x22>
 80099d6:	6862      	ldr	r2, [r4, #4]
 80099d8:	42a3      	cmp	r3, r4
 80099da:	bf0c      	ite	eq
 80099dc:	6032      	streq	r2, [r6, #0]
 80099de:	605a      	strne	r2, [r3, #4]
 80099e0:	e7ec      	b.n	80099bc <_malloc_r+0xa0>
 80099e2:	4623      	mov	r3, r4
 80099e4:	6864      	ldr	r4, [r4, #4]
 80099e6:	e7b2      	b.n	800994e <_malloc_r+0x32>
 80099e8:	4634      	mov	r4, r6
 80099ea:	6876      	ldr	r6, [r6, #4]
 80099ec:	e7b9      	b.n	8009962 <_malloc_r+0x46>
 80099ee:	230c      	movs	r3, #12
 80099f0:	603b      	str	r3, [r7, #0]
 80099f2:	4638      	mov	r0, r7
 80099f4:	f001 fe40 	bl	800b678 <__malloc_unlock>
 80099f8:	e7a1      	b.n	800993e <_malloc_r+0x22>
 80099fa:	6025      	str	r5, [r4, #0]
 80099fc:	e7de      	b.n	80099bc <_malloc_r+0xa0>
 80099fe:	bf00      	nop
 8009a00:	20001d88 	.word	0x20001d88

08009a04 <iprintf>:
 8009a04:	b40f      	push	{r0, r1, r2, r3}
 8009a06:	4b0a      	ldr	r3, [pc, #40]	; (8009a30 <iprintf+0x2c>)
 8009a08:	b513      	push	{r0, r1, r4, lr}
 8009a0a:	681c      	ldr	r4, [r3, #0]
 8009a0c:	b124      	cbz	r4, 8009a18 <iprintf+0x14>
 8009a0e:	69a3      	ldr	r3, [r4, #24]
 8009a10:	b913      	cbnz	r3, 8009a18 <iprintf+0x14>
 8009a12:	4620      	mov	r0, r4
 8009a14:	f001 f990 	bl	800ad38 <__sinit>
 8009a18:	ab05      	add	r3, sp, #20
 8009a1a:	9a04      	ldr	r2, [sp, #16]
 8009a1c:	68a1      	ldr	r1, [r4, #8]
 8009a1e:	9301      	str	r3, [sp, #4]
 8009a20:	4620      	mov	r0, r4
 8009a22:	f002 fe8d 	bl	800c740 <_vfiprintf_r>
 8009a26:	b002      	add	sp, #8
 8009a28:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009a2c:	b004      	add	sp, #16
 8009a2e:	4770      	bx	lr
 8009a30:	200010ac 	.word	0x200010ac

08009a34 <_puts_r>:
 8009a34:	b570      	push	{r4, r5, r6, lr}
 8009a36:	460e      	mov	r6, r1
 8009a38:	4605      	mov	r5, r0
 8009a3a:	b118      	cbz	r0, 8009a44 <_puts_r+0x10>
 8009a3c:	6983      	ldr	r3, [r0, #24]
 8009a3e:	b90b      	cbnz	r3, 8009a44 <_puts_r+0x10>
 8009a40:	f001 f97a 	bl	800ad38 <__sinit>
 8009a44:	69ab      	ldr	r3, [r5, #24]
 8009a46:	68ac      	ldr	r4, [r5, #8]
 8009a48:	b913      	cbnz	r3, 8009a50 <_puts_r+0x1c>
 8009a4a:	4628      	mov	r0, r5
 8009a4c:	f001 f974 	bl	800ad38 <__sinit>
 8009a50:	4b2c      	ldr	r3, [pc, #176]	; (8009b04 <_puts_r+0xd0>)
 8009a52:	429c      	cmp	r4, r3
 8009a54:	d120      	bne.n	8009a98 <_puts_r+0x64>
 8009a56:	686c      	ldr	r4, [r5, #4]
 8009a58:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009a5a:	07db      	lsls	r3, r3, #31
 8009a5c:	d405      	bmi.n	8009a6a <_puts_r+0x36>
 8009a5e:	89a3      	ldrh	r3, [r4, #12]
 8009a60:	0598      	lsls	r0, r3, #22
 8009a62:	d402      	bmi.n	8009a6a <_puts_r+0x36>
 8009a64:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009a66:	f001 fd74 	bl	800b552 <__retarget_lock_acquire_recursive>
 8009a6a:	89a3      	ldrh	r3, [r4, #12]
 8009a6c:	0719      	lsls	r1, r3, #28
 8009a6e:	d51d      	bpl.n	8009aac <_puts_r+0x78>
 8009a70:	6923      	ldr	r3, [r4, #16]
 8009a72:	b1db      	cbz	r3, 8009aac <_puts_r+0x78>
 8009a74:	3e01      	subs	r6, #1
 8009a76:	68a3      	ldr	r3, [r4, #8]
 8009a78:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8009a7c:	3b01      	subs	r3, #1
 8009a7e:	60a3      	str	r3, [r4, #8]
 8009a80:	bb39      	cbnz	r1, 8009ad2 <_puts_r+0x9e>
 8009a82:	2b00      	cmp	r3, #0
 8009a84:	da38      	bge.n	8009af8 <_puts_r+0xc4>
 8009a86:	4622      	mov	r2, r4
 8009a88:	210a      	movs	r1, #10
 8009a8a:	4628      	mov	r0, r5
 8009a8c:	f000 ff58 	bl	800a940 <__swbuf_r>
 8009a90:	3001      	adds	r0, #1
 8009a92:	d011      	beq.n	8009ab8 <_puts_r+0x84>
 8009a94:	250a      	movs	r5, #10
 8009a96:	e011      	b.n	8009abc <_puts_r+0x88>
 8009a98:	4b1b      	ldr	r3, [pc, #108]	; (8009b08 <_puts_r+0xd4>)
 8009a9a:	429c      	cmp	r4, r3
 8009a9c:	d101      	bne.n	8009aa2 <_puts_r+0x6e>
 8009a9e:	68ac      	ldr	r4, [r5, #8]
 8009aa0:	e7da      	b.n	8009a58 <_puts_r+0x24>
 8009aa2:	4b1a      	ldr	r3, [pc, #104]	; (8009b0c <_puts_r+0xd8>)
 8009aa4:	429c      	cmp	r4, r3
 8009aa6:	bf08      	it	eq
 8009aa8:	68ec      	ldreq	r4, [r5, #12]
 8009aaa:	e7d5      	b.n	8009a58 <_puts_r+0x24>
 8009aac:	4621      	mov	r1, r4
 8009aae:	4628      	mov	r0, r5
 8009ab0:	f000 ffaa 	bl	800aa08 <__swsetup_r>
 8009ab4:	2800      	cmp	r0, #0
 8009ab6:	d0dd      	beq.n	8009a74 <_puts_r+0x40>
 8009ab8:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8009abc:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009abe:	07da      	lsls	r2, r3, #31
 8009ac0:	d405      	bmi.n	8009ace <_puts_r+0x9a>
 8009ac2:	89a3      	ldrh	r3, [r4, #12]
 8009ac4:	059b      	lsls	r3, r3, #22
 8009ac6:	d402      	bmi.n	8009ace <_puts_r+0x9a>
 8009ac8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009aca:	f001 fd43 	bl	800b554 <__retarget_lock_release_recursive>
 8009ace:	4628      	mov	r0, r5
 8009ad0:	bd70      	pop	{r4, r5, r6, pc}
 8009ad2:	2b00      	cmp	r3, #0
 8009ad4:	da04      	bge.n	8009ae0 <_puts_r+0xac>
 8009ad6:	69a2      	ldr	r2, [r4, #24]
 8009ad8:	429a      	cmp	r2, r3
 8009ada:	dc06      	bgt.n	8009aea <_puts_r+0xb6>
 8009adc:	290a      	cmp	r1, #10
 8009ade:	d004      	beq.n	8009aea <_puts_r+0xb6>
 8009ae0:	6823      	ldr	r3, [r4, #0]
 8009ae2:	1c5a      	adds	r2, r3, #1
 8009ae4:	6022      	str	r2, [r4, #0]
 8009ae6:	7019      	strb	r1, [r3, #0]
 8009ae8:	e7c5      	b.n	8009a76 <_puts_r+0x42>
 8009aea:	4622      	mov	r2, r4
 8009aec:	4628      	mov	r0, r5
 8009aee:	f000 ff27 	bl	800a940 <__swbuf_r>
 8009af2:	3001      	adds	r0, #1
 8009af4:	d1bf      	bne.n	8009a76 <_puts_r+0x42>
 8009af6:	e7df      	b.n	8009ab8 <_puts_r+0x84>
 8009af8:	6823      	ldr	r3, [r4, #0]
 8009afa:	250a      	movs	r5, #10
 8009afc:	1c5a      	adds	r2, r3, #1
 8009afe:	6022      	str	r2, [r4, #0]
 8009b00:	701d      	strb	r5, [r3, #0]
 8009b02:	e7db      	b.n	8009abc <_puts_r+0x88>
 8009b04:	0800e2a0 	.word	0x0800e2a0
 8009b08:	0800e2c0 	.word	0x0800e2c0
 8009b0c:	0800e280 	.word	0x0800e280

08009b10 <puts>:
 8009b10:	4b02      	ldr	r3, [pc, #8]	; (8009b1c <puts+0xc>)
 8009b12:	4601      	mov	r1, r0
 8009b14:	6818      	ldr	r0, [r3, #0]
 8009b16:	f7ff bf8d 	b.w	8009a34 <_puts_r>
 8009b1a:	bf00      	nop
 8009b1c:	200010ac 	.word	0x200010ac

08009b20 <realloc>:
 8009b20:	4b02      	ldr	r3, [pc, #8]	; (8009b2c <realloc+0xc>)
 8009b22:	460a      	mov	r2, r1
 8009b24:	4601      	mov	r1, r0
 8009b26:	6818      	ldr	r0, [r3, #0]
 8009b28:	f002 ba83 	b.w	800c032 <_realloc_r>
 8009b2c:	200010ac 	.word	0x200010ac

08009b30 <_sbrk_r>:
 8009b30:	b538      	push	{r3, r4, r5, lr}
 8009b32:	4d06      	ldr	r5, [pc, #24]	; (8009b4c <_sbrk_r+0x1c>)
 8009b34:	2300      	movs	r3, #0
 8009b36:	4604      	mov	r4, r0
 8009b38:	4608      	mov	r0, r1
 8009b3a:	602b      	str	r3, [r5, #0]
 8009b3c:	f7fb f876 	bl	8004c2c <_sbrk>
 8009b40:	1c43      	adds	r3, r0, #1
 8009b42:	d102      	bne.n	8009b4a <_sbrk_r+0x1a>
 8009b44:	682b      	ldr	r3, [r5, #0]
 8009b46:	b103      	cbz	r3, 8009b4a <_sbrk_r+0x1a>
 8009b48:	6023      	str	r3, [r4, #0]
 8009b4a:	bd38      	pop	{r3, r4, r5, pc}
 8009b4c:	20001d94 	.word	0x20001d94

08009b50 <siscanf>:
 8009b50:	b40e      	push	{r1, r2, r3}
 8009b52:	b510      	push	{r4, lr}
 8009b54:	b09f      	sub	sp, #124	; 0x7c
 8009b56:	ac21      	add	r4, sp, #132	; 0x84
 8009b58:	f44f 7101 	mov.w	r1, #516	; 0x204
 8009b5c:	f854 2b04 	ldr.w	r2, [r4], #4
 8009b60:	9201      	str	r2, [sp, #4]
 8009b62:	f8ad 101c 	strh.w	r1, [sp, #28]
 8009b66:	9004      	str	r0, [sp, #16]
 8009b68:	9008      	str	r0, [sp, #32]
 8009b6a:	f7f6 fb3b 	bl	80001e4 <strlen>
 8009b6e:	4b0c      	ldr	r3, [pc, #48]	; (8009ba0 <siscanf+0x50>)
 8009b70:	9005      	str	r0, [sp, #20]
 8009b72:	9009      	str	r0, [sp, #36]	; 0x24
 8009b74:	930d      	str	r3, [sp, #52]	; 0x34
 8009b76:	480b      	ldr	r0, [pc, #44]	; (8009ba4 <siscanf+0x54>)
 8009b78:	9a01      	ldr	r2, [sp, #4]
 8009b7a:	6800      	ldr	r0, [r0, #0]
 8009b7c:	9403      	str	r4, [sp, #12]
 8009b7e:	2300      	movs	r3, #0
 8009b80:	9311      	str	r3, [sp, #68]	; 0x44
 8009b82:	9316      	str	r3, [sp, #88]	; 0x58
 8009b84:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8009b88:	f8ad 301e 	strh.w	r3, [sp, #30]
 8009b8c:	a904      	add	r1, sp, #16
 8009b8e:	4623      	mov	r3, r4
 8009b90:	f002 fc34 	bl	800c3fc <__ssvfiscanf_r>
 8009b94:	b01f      	add	sp, #124	; 0x7c
 8009b96:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009b9a:	b003      	add	sp, #12
 8009b9c:	4770      	bx	lr
 8009b9e:	bf00      	nop
 8009ba0:	08009bcb 	.word	0x08009bcb
 8009ba4:	200010ac 	.word	0x200010ac

08009ba8 <__sread>:
 8009ba8:	b510      	push	{r4, lr}
 8009baa:	460c      	mov	r4, r1
 8009bac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009bb0:	f003 f9dc 	bl	800cf6c <_read_r>
 8009bb4:	2800      	cmp	r0, #0
 8009bb6:	bfab      	itete	ge
 8009bb8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8009bba:	89a3      	ldrhlt	r3, [r4, #12]
 8009bbc:	181b      	addge	r3, r3, r0
 8009bbe:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8009bc2:	bfac      	ite	ge
 8009bc4:	6563      	strge	r3, [r4, #84]	; 0x54
 8009bc6:	81a3      	strhlt	r3, [r4, #12]
 8009bc8:	bd10      	pop	{r4, pc}

08009bca <__seofread>:
 8009bca:	2000      	movs	r0, #0
 8009bcc:	4770      	bx	lr

08009bce <__swrite>:
 8009bce:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009bd2:	461f      	mov	r7, r3
 8009bd4:	898b      	ldrh	r3, [r1, #12]
 8009bd6:	05db      	lsls	r3, r3, #23
 8009bd8:	4605      	mov	r5, r0
 8009bda:	460c      	mov	r4, r1
 8009bdc:	4616      	mov	r6, r2
 8009bde:	d505      	bpl.n	8009bec <__swrite+0x1e>
 8009be0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009be4:	2302      	movs	r3, #2
 8009be6:	2200      	movs	r2, #0
 8009be8:	f001 fcb6 	bl	800b558 <_lseek_r>
 8009bec:	89a3      	ldrh	r3, [r4, #12]
 8009bee:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009bf2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009bf6:	81a3      	strh	r3, [r4, #12]
 8009bf8:	4632      	mov	r2, r6
 8009bfa:	463b      	mov	r3, r7
 8009bfc:	4628      	mov	r0, r5
 8009bfe:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009c02:	f000 beef 	b.w	800a9e4 <_write_r>

08009c06 <__sseek>:
 8009c06:	b510      	push	{r4, lr}
 8009c08:	460c      	mov	r4, r1
 8009c0a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009c0e:	f001 fca3 	bl	800b558 <_lseek_r>
 8009c12:	1c43      	adds	r3, r0, #1
 8009c14:	89a3      	ldrh	r3, [r4, #12]
 8009c16:	bf15      	itete	ne
 8009c18:	6560      	strne	r0, [r4, #84]	; 0x54
 8009c1a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8009c1e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8009c22:	81a3      	strheq	r3, [r4, #12]
 8009c24:	bf18      	it	ne
 8009c26:	81a3      	strhne	r3, [r4, #12]
 8009c28:	bd10      	pop	{r4, pc}

08009c2a <__sclose>:
 8009c2a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009c2e:	f000 bf59 	b.w	800aae4 <_close_r>

08009c32 <strcpy>:
 8009c32:	4603      	mov	r3, r0
 8009c34:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009c38:	f803 2b01 	strb.w	r2, [r3], #1
 8009c3c:	2a00      	cmp	r2, #0
 8009c3e:	d1f9      	bne.n	8009c34 <strcpy+0x2>
 8009c40:	4770      	bx	lr

08009c42 <strncmp>:
 8009c42:	b510      	push	{r4, lr}
 8009c44:	b17a      	cbz	r2, 8009c66 <strncmp+0x24>
 8009c46:	4603      	mov	r3, r0
 8009c48:	3901      	subs	r1, #1
 8009c4a:	1884      	adds	r4, r0, r2
 8009c4c:	f813 0b01 	ldrb.w	r0, [r3], #1
 8009c50:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8009c54:	4290      	cmp	r0, r2
 8009c56:	d101      	bne.n	8009c5c <strncmp+0x1a>
 8009c58:	42a3      	cmp	r3, r4
 8009c5a:	d101      	bne.n	8009c60 <strncmp+0x1e>
 8009c5c:	1a80      	subs	r0, r0, r2
 8009c5e:	bd10      	pop	{r4, pc}
 8009c60:	2800      	cmp	r0, #0
 8009c62:	d1f3      	bne.n	8009c4c <strncmp+0xa>
 8009c64:	e7fa      	b.n	8009c5c <strncmp+0x1a>
 8009c66:	4610      	mov	r0, r2
 8009c68:	e7f9      	b.n	8009c5e <strncmp+0x1c>

08009c6a <sulp>:
 8009c6a:	b570      	push	{r4, r5, r6, lr}
 8009c6c:	4604      	mov	r4, r0
 8009c6e:	460d      	mov	r5, r1
 8009c70:	ec45 4b10 	vmov	d0, r4, r5
 8009c74:	4616      	mov	r6, r2
 8009c76:	f002 f877 	bl	800bd68 <__ulp>
 8009c7a:	ec51 0b10 	vmov	r0, r1, d0
 8009c7e:	b17e      	cbz	r6, 8009ca0 <sulp+0x36>
 8009c80:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8009c84:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8009c88:	2b00      	cmp	r3, #0
 8009c8a:	dd09      	ble.n	8009ca0 <sulp+0x36>
 8009c8c:	051b      	lsls	r3, r3, #20
 8009c8e:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8009c92:	2400      	movs	r4, #0
 8009c94:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8009c98:	4622      	mov	r2, r4
 8009c9a:	462b      	mov	r3, r5
 8009c9c:	f7f6 fcbc 	bl	8000618 <__aeabi_dmul>
 8009ca0:	bd70      	pop	{r4, r5, r6, pc}
 8009ca2:	0000      	movs	r0, r0
 8009ca4:	0000      	movs	r0, r0
	...

08009ca8 <_strtod_l>:
 8009ca8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009cac:	ed2d 8b02 	vpush	{d8}
 8009cb0:	b09d      	sub	sp, #116	; 0x74
 8009cb2:	461f      	mov	r7, r3
 8009cb4:	2300      	movs	r3, #0
 8009cb6:	9318      	str	r3, [sp, #96]	; 0x60
 8009cb8:	4ba2      	ldr	r3, [pc, #648]	; (8009f44 <_strtod_l+0x29c>)
 8009cba:	9213      	str	r2, [sp, #76]	; 0x4c
 8009cbc:	681b      	ldr	r3, [r3, #0]
 8009cbe:	9305      	str	r3, [sp, #20]
 8009cc0:	4604      	mov	r4, r0
 8009cc2:	4618      	mov	r0, r3
 8009cc4:	4688      	mov	r8, r1
 8009cc6:	f7f6 fa8d 	bl	80001e4 <strlen>
 8009cca:	f04f 0a00 	mov.w	sl, #0
 8009cce:	4605      	mov	r5, r0
 8009cd0:	f04f 0b00 	mov.w	fp, #0
 8009cd4:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8009cd8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8009cda:	781a      	ldrb	r2, [r3, #0]
 8009cdc:	2a2b      	cmp	r2, #43	; 0x2b
 8009cde:	d04e      	beq.n	8009d7e <_strtod_l+0xd6>
 8009ce0:	d83b      	bhi.n	8009d5a <_strtod_l+0xb2>
 8009ce2:	2a0d      	cmp	r2, #13
 8009ce4:	d834      	bhi.n	8009d50 <_strtod_l+0xa8>
 8009ce6:	2a08      	cmp	r2, #8
 8009ce8:	d834      	bhi.n	8009d54 <_strtod_l+0xac>
 8009cea:	2a00      	cmp	r2, #0
 8009cec:	d03e      	beq.n	8009d6c <_strtod_l+0xc4>
 8009cee:	2300      	movs	r3, #0
 8009cf0:	930a      	str	r3, [sp, #40]	; 0x28
 8009cf2:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 8009cf4:	7833      	ldrb	r3, [r6, #0]
 8009cf6:	2b30      	cmp	r3, #48	; 0x30
 8009cf8:	f040 80b0 	bne.w	8009e5c <_strtod_l+0x1b4>
 8009cfc:	7873      	ldrb	r3, [r6, #1]
 8009cfe:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8009d02:	2b58      	cmp	r3, #88	; 0x58
 8009d04:	d168      	bne.n	8009dd8 <_strtod_l+0x130>
 8009d06:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009d08:	9301      	str	r3, [sp, #4]
 8009d0a:	ab18      	add	r3, sp, #96	; 0x60
 8009d0c:	9702      	str	r7, [sp, #8]
 8009d0e:	9300      	str	r3, [sp, #0]
 8009d10:	4a8d      	ldr	r2, [pc, #564]	; (8009f48 <_strtod_l+0x2a0>)
 8009d12:	ab19      	add	r3, sp, #100	; 0x64
 8009d14:	a917      	add	r1, sp, #92	; 0x5c
 8009d16:	4620      	mov	r0, r4
 8009d18:	f001 f912 	bl	800af40 <__gethex>
 8009d1c:	f010 0707 	ands.w	r7, r0, #7
 8009d20:	4605      	mov	r5, r0
 8009d22:	d005      	beq.n	8009d30 <_strtod_l+0x88>
 8009d24:	2f06      	cmp	r7, #6
 8009d26:	d12c      	bne.n	8009d82 <_strtod_l+0xda>
 8009d28:	3601      	adds	r6, #1
 8009d2a:	2300      	movs	r3, #0
 8009d2c:	9617      	str	r6, [sp, #92]	; 0x5c
 8009d2e:	930a      	str	r3, [sp, #40]	; 0x28
 8009d30:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8009d32:	2b00      	cmp	r3, #0
 8009d34:	f040 8590 	bne.w	800a858 <_strtod_l+0xbb0>
 8009d38:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009d3a:	b1eb      	cbz	r3, 8009d78 <_strtod_l+0xd0>
 8009d3c:	4652      	mov	r2, sl
 8009d3e:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8009d42:	ec43 2b10 	vmov	d0, r2, r3
 8009d46:	b01d      	add	sp, #116	; 0x74
 8009d48:	ecbd 8b02 	vpop	{d8}
 8009d4c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009d50:	2a20      	cmp	r2, #32
 8009d52:	d1cc      	bne.n	8009cee <_strtod_l+0x46>
 8009d54:	3301      	adds	r3, #1
 8009d56:	9317      	str	r3, [sp, #92]	; 0x5c
 8009d58:	e7be      	b.n	8009cd8 <_strtod_l+0x30>
 8009d5a:	2a2d      	cmp	r2, #45	; 0x2d
 8009d5c:	d1c7      	bne.n	8009cee <_strtod_l+0x46>
 8009d5e:	2201      	movs	r2, #1
 8009d60:	920a      	str	r2, [sp, #40]	; 0x28
 8009d62:	1c5a      	adds	r2, r3, #1
 8009d64:	9217      	str	r2, [sp, #92]	; 0x5c
 8009d66:	785b      	ldrb	r3, [r3, #1]
 8009d68:	2b00      	cmp	r3, #0
 8009d6a:	d1c2      	bne.n	8009cf2 <_strtod_l+0x4a>
 8009d6c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8009d6e:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8009d72:	2b00      	cmp	r3, #0
 8009d74:	f040 856e 	bne.w	800a854 <_strtod_l+0xbac>
 8009d78:	4652      	mov	r2, sl
 8009d7a:	465b      	mov	r3, fp
 8009d7c:	e7e1      	b.n	8009d42 <_strtod_l+0x9a>
 8009d7e:	2200      	movs	r2, #0
 8009d80:	e7ee      	b.n	8009d60 <_strtod_l+0xb8>
 8009d82:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8009d84:	b13a      	cbz	r2, 8009d96 <_strtod_l+0xee>
 8009d86:	2135      	movs	r1, #53	; 0x35
 8009d88:	a81a      	add	r0, sp, #104	; 0x68
 8009d8a:	f002 f8f8 	bl	800bf7e <__copybits>
 8009d8e:	9918      	ldr	r1, [sp, #96]	; 0x60
 8009d90:	4620      	mov	r0, r4
 8009d92:	f001 fcb7 	bl	800b704 <_Bfree>
 8009d96:	3f01      	subs	r7, #1
 8009d98:	2f04      	cmp	r7, #4
 8009d9a:	d806      	bhi.n	8009daa <_strtod_l+0x102>
 8009d9c:	e8df f007 	tbb	[pc, r7]
 8009da0:	1714030a 	.word	0x1714030a
 8009da4:	0a          	.byte	0x0a
 8009da5:	00          	.byte	0x00
 8009da6:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
 8009daa:	0728      	lsls	r0, r5, #28
 8009dac:	d5c0      	bpl.n	8009d30 <_strtod_l+0x88>
 8009dae:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 8009db2:	e7bd      	b.n	8009d30 <_strtod_l+0x88>
 8009db4:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
 8009db8:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8009dba:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8009dbe:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8009dc2:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8009dc6:	e7f0      	b.n	8009daa <_strtod_l+0x102>
 8009dc8:	f8df b180 	ldr.w	fp, [pc, #384]	; 8009f4c <_strtod_l+0x2a4>
 8009dcc:	e7ed      	b.n	8009daa <_strtod_l+0x102>
 8009dce:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 8009dd2:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 8009dd6:	e7e8      	b.n	8009daa <_strtod_l+0x102>
 8009dd8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8009dda:	1c5a      	adds	r2, r3, #1
 8009ddc:	9217      	str	r2, [sp, #92]	; 0x5c
 8009dde:	785b      	ldrb	r3, [r3, #1]
 8009de0:	2b30      	cmp	r3, #48	; 0x30
 8009de2:	d0f9      	beq.n	8009dd8 <_strtod_l+0x130>
 8009de4:	2b00      	cmp	r3, #0
 8009de6:	d0a3      	beq.n	8009d30 <_strtod_l+0x88>
 8009de8:	2301      	movs	r3, #1
 8009dea:	f04f 0900 	mov.w	r9, #0
 8009dee:	9304      	str	r3, [sp, #16]
 8009df0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8009df2:	9308      	str	r3, [sp, #32]
 8009df4:	f8cd 901c 	str.w	r9, [sp, #28]
 8009df8:	464f      	mov	r7, r9
 8009dfa:	220a      	movs	r2, #10
 8009dfc:	9817      	ldr	r0, [sp, #92]	; 0x5c
 8009dfe:	7806      	ldrb	r6, [r0, #0]
 8009e00:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 8009e04:	b2d9      	uxtb	r1, r3
 8009e06:	2909      	cmp	r1, #9
 8009e08:	d92a      	bls.n	8009e60 <_strtod_l+0x1b8>
 8009e0a:	9905      	ldr	r1, [sp, #20]
 8009e0c:	462a      	mov	r2, r5
 8009e0e:	f7ff ff18 	bl	8009c42 <strncmp>
 8009e12:	b398      	cbz	r0, 8009e7c <_strtod_l+0x1d4>
 8009e14:	2000      	movs	r0, #0
 8009e16:	4632      	mov	r2, r6
 8009e18:	463d      	mov	r5, r7
 8009e1a:	9005      	str	r0, [sp, #20]
 8009e1c:	4603      	mov	r3, r0
 8009e1e:	2a65      	cmp	r2, #101	; 0x65
 8009e20:	d001      	beq.n	8009e26 <_strtod_l+0x17e>
 8009e22:	2a45      	cmp	r2, #69	; 0x45
 8009e24:	d118      	bne.n	8009e58 <_strtod_l+0x1b0>
 8009e26:	b91d      	cbnz	r5, 8009e30 <_strtod_l+0x188>
 8009e28:	9a04      	ldr	r2, [sp, #16]
 8009e2a:	4302      	orrs	r2, r0
 8009e2c:	d09e      	beq.n	8009d6c <_strtod_l+0xc4>
 8009e2e:	2500      	movs	r5, #0
 8009e30:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
 8009e34:	f108 0201 	add.w	r2, r8, #1
 8009e38:	9217      	str	r2, [sp, #92]	; 0x5c
 8009e3a:	f898 2001 	ldrb.w	r2, [r8, #1]
 8009e3e:	2a2b      	cmp	r2, #43	; 0x2b
 8009e40:	d075      	beq.n	8009f2e <_strtod_l+0x286>
 8009e42:	2a2d      	cmp	r2, #45	; 0x2d
 8009e44:	d07b      	beq.n	8009f3e <_strtod_l+0x296>
 8009e46:	f04f 0c00 	mov.w	ip, #0
 8009e4a:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8009e4e:	2909      	cmp	r1, #9
 8009e50:	f240 8082 	bls.w	8009f58 <_strtod_l+0x2b0>
 8009e54:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8009e58:	2600      	movs	r6, #0
 8009e5a:	e09d      	b.n	8009f98 <_strtod_l+0x2f0>
 8009e5c:	2300      	movs	r3, #0
 8009e5e:	e7c4      	b.n	8009dea <_strtod_l+0x142>
 8009e60:	2f08      	cmp	r7, #8
 8009e62:	bfd8      	it	le
 8009e64:	9907      	ldrle	r1, [sp, #28]
 8009e66:	f100 0001 	add.w	r0, r0, #1
 8009e6a:	bfda      	itte	le
 8009e6c:	fb02 3301 	mlale	r3, r2, r1, r3
 8009e70:	9307      	strle	r3, [sp, #28]
 8009e72:	fb02 3909 	mlagt	r9, r2, r9, r3
 8009e76:	3701      	adds	r7, #1
 8009e78:	9017      	str	r0, [sp, #92]	; 0x5c
 8009e7a:	e7bf      	b.n	8009dfc <_strtod_l+0x154>
 8009e7c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8009e7e:	195a      	adds	r2, r3, r5
 8009e80:	9217      	str	r2, [sp, #92]	; 0x5c
 8009e82:	5d5a      	ldrb	r2, [r3, r5]
 8009e84:	2f00      	cmp	r7, #0
 8009e86:	d037      	beq.n	8009ef8 <_strtod_l+0x250>
 8009e88:	9005      	str	r0, [sp, #20]
 8009e8a:	463d      	mov	r5, r7
 8009e8c:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 8009e90:	2b09      	cmp	r3, #9
 8009e92:	d912      	bls.n	8009eba <_strtod_l+0x212>
 8009e94:	2301      	movs	r3, #1
 8009e96:	e7c2      	b.n	8009e1e <_strtod_l+0x176>
 8009e98:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8009e9a:	1c5a      	adds	r2, r3, #1
 8009e9c:	9217      	str	r2, [sp, #92]	; 0x5c
 8009e9e:	785a      	ldrb	r2, [r3, #1]
 8009ea0:	3001      	adds	r0, #1
 8009ea2:	2a30      	cmp	r2, #48	; 0x30
 8009ea4:	d0f8      	beq.n	8009e98 <_strtod_l+0x1f0>
 8009ea6:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 8009eaa:	2b08      	cmp	r3, #8
 8009eac:	f200 84d9 	bhi.w	800a862 <_strtod_l+0xbba>
 8009eb0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8009eb2:	9005      	str	r0, [sp, #20]
 8009eb4:	2000      	movs	r0, #0
 8009eb6:	9308      	str	r3, [sp, #32]
 8009eb8:	4605      	mov	r5, r0
 8009eba:	3a30      	subs	r2, #48	; 0x30
 8009ebc:	f100 0301 	add.w	r3, r0, #1
 8009ec0:	d014      	beq.n	8009eec <_strtod_l+0x244>
 8009ec2:	9905      	ldr	r1, [sp, #20]
 8009ec4:	4419      	add	r1, r3
 8009ec6:	9105      	str	r1, [sp, #20]
 8009ec8:	462b      	mov	r3, r5
 8009eca:	eb00 0e05 	add.w	lr, r0, r5
 8009ece:	210a      	movs	r1, #10
 8009ed0:	4573      	cmp	r3, lr
 8009ed2:	d113      	bne.n	8009efc <_strtod_l+0x254>
 8009ed4:	182b      	adds	r3, r5, r0
 8009ed6:	2b08      	cmp	r3, #8
 8009ed8:	f105 0501 	add.w	r5, r5, #1
 8009edc:	4405      	add	r5, r0
 8009ede:	dc1c      	bgt.n	8009f1a <_strtod_l+0x272>
 8009ee0:	9907      	ldr	r1, [sp, #28]
 8009ee2:	230a      	movs	r3, #10
 8009ee4:	fb03 2301 	mla	r3, r3, r1, r2
 8009ee8:	9307      	str	r3, [sp, #28]
 8009eea:	2300      	movs	r3, #0
 8009eec:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8009eee:	1c51      	adds	r1, r2, #1
 8009ef0:	9117      	str	r1, [sp, #92]	; 0x5c
 8009ef2:	7852      	ldrb	r2, [r2, #1]
 8009ef4:	4618      	mov	r0, r3
 8009ef6:	e7c9      	b.n	8009e8c <_strtod_l+0x1e4>
 8009ef8:	4638      	mov	r0, r7
 8009efa:	e7d2      	b.n	8009ea2 <_strtod_l+0x1fa>
 8009efc:	2b08      	cmp	r3, #8
 8009efe:	dc04      	bgt.n	8009f0a <_strtod_l+0x262>
 8009f00:	9e07      	ldr	r6, [sp, #28]
 8009f02:	434e      	muls	r6, r1
 8009f04:	9607      	str	r6, [sp, #28]
 8009f06:	3301      	adds	r3, #1
 8009f08:	e7e2      	b.n	8009ed0 <_strtod_l+0x228>
 8009f0a:	f103 0c01 	add.w	ip, r3, #1
 8009f0e:	f1bc 0f10 	cmp.w	ip, #16
 8009f12:	bfd8      	it	le
 8009f14:	fb01 f909 	mulle.w	r9, r1, r9
 8009f18:	e7f5      	b.n	8009f06 <_strtod_l+0x25e>
 8009f1a:	2d10      	cmp	r5, #16
 8009f1c:	bfdc      	itt	le
 8009f1e:	230a      	movle	r3, #10
 8009f20:	fb03 2909 	mlale	r9, r3, r9, r2
 8009f24:	e7e1      	b.n	8009eea <_strtod_l+0x242>
 8009f26:	2300      	movs	r3, #0
 8009f28:	9305      	str	r3, [sp, #20]
 8009f2a:	2301      	movs	r3, #1
 8009f2c:	e77c      	b.n	8009e28 <_strtod_l+0x180>
 8009f2e:	f04f 0c00 	mov.w	ip, #0
 8009f32:	f108 0202 	add.w	r2, r8, #2
 8009f36:	9217      	str	r2, [sp, #92]	; 0x5c
 8009f38:	f898 2002 	ldrb.w	r2, [r8, #2]
 8009f3c:	e785      	b.n	8009e4a <_strtod_l+0x1a2>
 8009f3e:	f04f 0c01 	mov.w	ip, #1
 8009f42:	e7f6      	b.n	8009f32 <_strtod_l+0x28a>
 8009f44:	0800e358 	.word	0x0800e358
 8009f48:	0800e22c 	.word	0x0800e22c
 8009f4c:	7ff00000 	.word	0x7ff00000
 8009f50:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8009f52:	1c51      	adds	r1, r2, #1
 8009f54:	9117      	str	r1, [sp, #92]	; 0x5c
 8009f56:	7852      	ldrb	r2, [r2, #1]
 8009f58:	2a30      	cmp	r2, #48	; 0x30
 8009f5a:	d0f9      	beq.n	8009f50 <_strtod_l+0x2a8>
 8009f5c:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 8009f60:	2908      	cmp	r1, #8
 8009f62:	f63f af79 	bhi.w	8009e58 <_strtod_l+0x1b0>
 8009f66:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 8009f6a:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8009f6c:	9206      	str	r2, [sp, #24]
 8009f6e:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8009f70:	1c51      	adds	r1, r2, #1
 8009f72:	9117      	str	r1, [sp, #92]	; 0x5c
 8009f74:	7852      	ldrb	r2, [r2, #1]
 8009f76:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
 8009f7a:	2e09      	cmp	r6, #9
 8009f7c:	d937      	bls.n	8009fee <_strtod_l+0x346>
 8009f7e:	9e06      	ldr	r6, [sp, #24]
 8009f80:	1b89      	subs	r1, r1, r6
 8009f82:	2908      	cmp	r1, #8
 8009f84:	f644 661f 	movw	r6, #19999	; 0x4e1f
 8009f88:	dc02      	bgt.n	8009f90 <_strtod_l+0x2e8>
 8009f8a:	4576      	cmp	r6, lr
 8009f8c:	bfa8      	it	ge
 8009f8e:	4676      	movge	r6, lr
 8009f90:	f1bc 0f00 	cmp.w	ip, #0
 8009f94:	d000      	beq.n	8009f98 <_strtod_l+0x2f0>
 8009f96:	4276      	negs	r6, r6
 8009f98:	2d00      	cmp	r5, #0
 8009f9a:	d14d      	bne.n	800a038 <_strtod_l+0x390>
 8009f9c:	9904      	ldr	r1, [sp, #16]
 8009f9e:	4301      	orrs	r1, r0
 8009fa0:	f47f aec6 	bne.w	8009d30 <_strtod_l+0x88>
 8009fa4:	2b00      	cmp	r3, #0
 8009fa6:	f47f aee1 	bne.w	8009d6c <_strtod_l+0xc4>
 8009faa:	2a69      	cmp	r2, #105	; 0x69
 8009fac:	d027      	beq.n	8009ffe <_strtod_l+0x356>
 8009fae:	dc24      	bgt.n	8009ffa <_strtod_l+0x352>
 8009fb0:	2a49      	cmp	r2, #73	; 0x49
 8009fb2:	d024      	beq.n	8009ffe <_strtod_l+0x356>
 8009fb4:	2a4e      	cmp	r2, #78	; 0x4e
 8009fb6:	f47f aed9 	bne.w	8009d6c <_strtod_l+0xc4>
 8009fba:	499f      	ldr	r1, [pc, #636]	; (800a238 <_strtod_l+0x590>)
 8009fbc:	a817      	add	r0, sp, #92	; 0x5c
 8009fbe:	f001 fa17 	bl	800b3f0 <__match>
 8009fc2:	2800      	cmp	r0, #0
 8009fc4:	f43f aed2 	beq.w	8009d6c <_strtod_l+0xc4>
 8009fc8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8009fca:	781b      	ldrb	r3, [r3, #0]
 8009fcc:	2b28      	cmp	r3, #40	; 0x28
 8009fce:	d12d      	bne.n	800a02c <_strtod_l+0x384>
 8009fd0:	499a      	ldr	r1, [pc, #616]	; (800a23c <_strtod_l+0x594>)
 8009fd2:	aa1a      	add	r2, sp, #104	; 0x68
 8009fd4:	a817      	add	r0, sp, #92	; 0x5c
 8009fd6:	f001 fa1f 	bl	800b418 <__hexnan>
 8009fda:	2805      	cmp	r0, #5
 8009fdc:	d126      	bne.n	800a02c <_strtod_l+0x384>
 8009fde:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8009fe0:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
 8009fe4:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 8009fe8:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 8009fec:	e6a0      	b.n	8009d30 <_strtod_l+0x88>
 8009fee:	210a      	movs	r1, #10
 8009ff0:	fb01 2e0e 	mla	lr, r1, lr, r2
 8009ff4:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 8009ff8:	e7b9      	b.n	8009f6e <_strtod_l+0x2c6>
 8009ffa:	2a6e      	cmp	r2, #110	; 0x6e
 8009ffc:	e7db      	b.n	8009fb6 <_strtod_l+0x30e>
 8009ffe:	4990      	ldr	r1, [pc, #576]	; (800a240 <_strtod_l+0x598>)
 800a000:	a817      	add	r0, sp, #92	; 0x5c
 800a002:	f001 f9f5 	bl	800b3f0 <__match>
 800a006:	2800      	cmp	r0, #0
 800a008:	f43f aeb0 	beq.w	8009d6c <_strtod_l+0xc4>
 800a00c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800a00e:	498d      	ldr	r1, [pc, #564]	; (800a244 <_strtod_l+0x59c>)
 800a010:	3b01      	subs	r3, #1
 800a012:	a817      	add	r0, sp, #92	; 0x5c
 800a014:	9317      	str	r3, [sp, #92]	; 0x5c
 800a016:	f001 f9eb 	bl	800b3f0 <__match>
 800a01a:	b910      	cbnz	r0, 800a022 <_strtod_l+0x37a>
 800a01c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800a01e:	3301      	adds	r3, #1
 800a020:	9317      	str	r3, [sp, #92]	; 0x5c
 800a022:	f8df b230 	ldr.w	fp, [pc, #560]	; 800a254 <_strtod_l+0x5ac>
 800a026:	f04f 0a00 	mov.w	sl, #0
 800a02a:	e681      	b.n	8009d30 <_strtod_l+0x88>
 800a02c:	4886      	ldr	r0, [pc, #536]	; (800a248 <_strtod_l+0x5a0>)
 800a02e:	f002 ffaf 	bl	800cf90 <nan>
 800a032:	ec5b ab10 	vmov	sl, fp, d0
 800a036:	e67b      	b.n	8009d30 <_strtod_l+0x88>
 800a038:	9b05      	ldr	r3, [sp, #20]
 800a03a:	9807      	ldr	r0, [sp, #28]
 800a03c:	1af3      	subs	r3, r6, r3
 800a03e:	2f00      	cmp	r7, #0
 800a040:	bf08      	it	eq
 800a042:	462f      	moveq	r7, r5
 800a044:	2d10      	cmp	r5, #16
 800a046:	9306      	str	r3, [sp, #24]
 800a048:	46a8      	mov	r8, r5
 800a04a:	bfa8      	it	ge
 800a04c:	f04f 0810 	movge.w	r8, #16
 800a050:	f7f6 fa68 	bl	8000524 <__aeabi_ui2d>
 800a054:	2d09      	cmp	r5, #9
 800a056:	4682      	mov	sl, r0
 800a058:	468b      	mov	fp, r1
 800a05a:	dd13      	ble.n	800a084 <_strtod_l+0x3dc>
 800a05c:	4b7b      	ldr	r3, [pc, #492]	; (800a24c <_strtod_l+0x5a4>)
 800a05e:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800a062:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800a066:	f7f6 fad7 	bl	8000618 <__aeabi_dmul>
 800a06a:	4682      	mov	sl, r0
 800a06c:	4648      	mov	r0, r9
 800a06e:	468b      	mov	fp, r1
 800a070:	f7f6 fa58 	bl	8000524 <__aeabi_ui2d>
 800a074:	4602      	mov	r2, r0
 800a076:	460b      	mov	r3, r1
 800a078:	4650      	mov	r0, sl
 800a07a:	4659      	mov	r1, fp
 800a07c:	f7f6 f916 	bl	80002ac <__adddf3>
 800a080:	4682      	mov	sl, r0
 800a082:	468b      	mov	fp, r1
 800a084:	2d0f      	cmp	r5, #15
 800a086:	dc38      	bgt.n	800a0fa <_strtod_l+0x452>
 800a088:	9b06      	ldr	r3, [sp, #24]
 800a08a:	2b00      	cmp	r3, #0
 800a08c:	f43f ae50 	beq.w	8009d30 <_strtod_l+0x88>
 800a090:	dd24      	ble.n	800a0dc <_strtod_l+0x434>
 800a092:	2b16      	cmp	r3, #22
 800a094:	dc0b      	bgt.n	800a0ae <_strtod_l+0x406>
 800a096:	496d      	ldr	r1, [pc, #436]	; (800a24c <_strtod_l+0x5a4>)
 800a098:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800a09c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a0a0:	4652      	mov	r2, sl
 800a0a2:	465b      	mov	r3, fp
 800a0a4:	f7f6 fab8 	bl	8000618 <__aeabi_dmul>
 800a0a8:	4682      	mov	sl, r0
 800a0aa:	468b      	mov	fp, r1
 800a0ac:	e640      	b.n	8009d30 <_strtod_l+0x88>
 800a0ae:	9a06      	ldr	r2, [sp, #24]
 800a0b0:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 800a0b4:	4293      	cmp	r3, r2
 800a0b6:	db20      	blt.n	800a0fa <_strtod_l+0x452>
 800a0b8:	4c64      	ldr	r4, [pc, #400]	; (800a24c <_strtod_l+0x5a4>)
 800a0ba:	f1c5 050f 	rsb	r5, r5, #15
 800a0be:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800a0c2:	4652      	mov	r2, sl
 800a0c4:	465b      	mov	r3, fp
 800a0c6:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a0ca:	f7f6 faa5 	bl	8000618 <__aeabi_dmul>
 800a0ce:	9b06      	ldr	r3, [sp, #24]
 800a0d0:	1b5d      	subs	r5, r3, r5
 800a0d2:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800a0d6:	e9d4 2300 	ldrd	r2, r3, [r4]
 800a0da:	e7e3      	b.n	800a0a4 <_strtod_l+0x3fc>
 800a0dc:	9b06      	ldr	r3, [sp, #24]
 800a0de:	3316      	adds	r3, #22
 800a0e0:	db0b      	blt.n	800a0fa <_strtod_l+0x452>
 800a0e2:	9b05      	ldr	r3, [sp, #20]
 800a0e4:	1b9e      	subs	r6, r3, r6
 800a0e6:	4b59      	ldr	r3, [pc, #356]	; (800a24c <_strtod_l+0x5a4>)
 800a0e8:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 800a0ec:	e9d6 2300 	ldrd	r2, r3, [r6]
 800a0f0:	4650      	mov	r0, sl
 800a0f2:	4659      	mov	r1, fp
 800a0f4:	f7f6 fbba 	bl	800086c <__aeabi_ddiv>
 800a0f8:	e7d6      	b.n	800a0a8 <_strtod_l+0x400>
 800a0fa:	9b06      	ldr	r3, [sp, #24]
 800a0fc:	eba5 0808 	sub.w	r8, r5, r8
 800a100:	4498      	add	r8, r3
 800a102:	f1b8 0f00 	cmp.w	r8, #0
 800a106:	dd74      	ble.n	800a1f2 <_strtod_l+0x54a>
 800a108:	f018 030f 	ands.w	r3, r8, #15
 800a10c:	d00a      	beq.n	800a124 <_strtod_l+0x47c>
 800a10e:	494f      	ldr	r1, [pc, #316]	; (800a24c <_strtod_l+0x5a4>)
 800a110:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800a114:	4652      	mov	r2, sl
 800a116:	465b      	mov	r3, fp
 800a118:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a11c:	f7f6 fa7c 	bl	8000618 <__aeabi_dmul>
 800a120:	4682      	mov	sl, r0
 800a122:	468b      	mov	fp, r1
 800a124:	f038 080f 	bics.w	r8, r8, #15
 800a128:	d04f      	beq.n	800a1ca <_strtod_l+0x522>
 800a12a:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 800a12e:	dd22      	ble.n	800a176 <_strtod_l+0x4ce>
 800a130:	2500      	movs	r5, #0
 800a132:	462e      	mov	r6, r5
 800a134:	9507      	str	r5, [sp, #28]
 800a136:	9505      	str	r5, [sp, #20]
 800a138:	2322      	movs	r3, #34	; 0x22
 800a13a:	f8df b118 	ldr.w	fp, [pc, #280]	; 800a254 <_strtod_l+0x5ac>
 800a13e:	6023      	str	r3, [r4, #0]
 800a140:	f04f 0a00 	mov.w	sl, #0
 800a144:	9b07      	ldr	r3, [sp, #28]
 800a146:	2b00      	cmp	r3, #0
 800a148:	f43f adf2 	beq.w	8009d30 <_strtod_l+0x88>
 800a14c:	9918      	ldr	r1, [sp, #96]	; 0x60
 800a14e:	4620      	mov	r0, r4
 800a150:	f001 fad8 	bl	800b704 <_Bfree>
 800a154:	9905      	ldr	r1, [sp, #20]
 800a156:	4620      	mov	r0, r4
 800a158:	f001 fad4 	bl	800b704 <_Bfree>
 800a15c:	4631      	mov	r1, r6
 800a15e:	4620      	mov	r0, r4
 800a160:	f001 fad0 	bl	800b704 <_Bfree>
 800a164:	9907      	ldr	r1, [sp, #28]
 800a166:	4620      	mov	r0, r4
 800a168:	f001 facc 	bl	800b704 <_Bfree>
 800a16c:	4629      	mov	r1, r5
 800a16e:	4620      	mov	r0, r4
 800a170:	f001 fac8 	bl	800b704 <_Bfree>
 800a174:	e5dc      	b.n	8009d30 <_strtod_l+0x88>
 800a176:	4b36      	ldr	r3, [pc, #216]	; (800a250 <_strtod_l+0x5a8>)
 800a178:	9304      	str	r3, [sp, #16]
 800a17a:	2300      	movs	r3, #0
 800a17c:	ea4f 1828 	mov.w	r8, r8, asr #4
 800a180:	4650      	mov	r0, sl
 800a182:	4659      	mov	r1, fp
 800a184:	4699      	mov	r9, r3
 800a186:	f1b8 0f01 	cmp.w	r8, #1
 800a18a:	dc21      	bgt.n	800a1d0 <_strtod_l+0x528>
 800a18c:	b10b      	cbz	r3, 800a192 <_strtod_l+0x4ea>
 800a18e:	4682      	mov	sl, r0
 800a190:	468b      	mov	fp, r1
 800a192:	4b2f      	ldr	r3, [pc, #188]	; (800a250 <_strtod_l+0x5a8>)
 800a194:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 800a198:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 800a19c:	4652      	mov	r2, sl
 800a19e:	465b      	mov	r3, fp
 800a1a0:	e9d9 0100 	ldrd	r0, r1, [r9]
 800a1a4:	f7f6 fa38 	bl	8000618 <__aeabi_dmul>
 800a1a8:	4b2a      	ldr	r3, [pc, #168]	; (800a254 <_strtod_l+0x5ac>)
 800a1aa:	460a      	mov	r2, r1
 800a1ac:	400b      	ands	r3, r1
 800a1ae:	492a      	ldr	r1, [pc, #168]	; (800a258 <_strtod_l+0x5b0>)
 800a1b0:	428b      	cmp	r3, r1
 800a1b2:	4682      	mov	sl, r0
 800a1b4:	d8bc      	bhi.n	800a130 <_strtod_l+0x488>
 800a1b6:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800a1ba:	428b      	cmp	r3, r1
 800a1bc:	bf86      	itte	hi
 800a1be:	f8df b09c 	ldrhi.w	fp, [pc, #156]	; 800a25c <_strtod_l+0x5b4>
 800a1c2:	f04f 3aff 	movhi.w	sl, #4294967295	; 0xffffffff
 800a1c6:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 800a1ca:	2300      	movs	r3, #0
 800a1cc:	9304      	str	r3, [sp, #16]
 800a1ce:	e084      	b.n	800a2da <_strtod_l+0x632>
 800a1d0:	f018 0f01 	tst.w	r8, #1
 800a1d4:	d005      	beq.n	800a1e2 <_strtod_l+0x53a>
 800a1d6:	9b04      	ldr	r3, [sp, #16]
 800a1d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a1dc:	f7f6 fa1c 	bl	8000618 <__aeabi_dmul>
 800a1e0:	2301      	movs	r3, #1
 800a1e2:	9a04      	ldr	r2, [sp, #16]
 800a1e4:	3208      	adds	r2, #8
 800a1e6:	f109 0901 	add.w	r9, r9, #1
 800a1ea:	ea4f 0868 	mov.w	r8, r8, asr #1
 800a1ee:	9204      	str	r2, [sp, #16]
 800a1f0:	e7c9      	b.n	800a186 <_strtod_l+0x4de>
 800a1f2:	d0ea      	beq.n	800a1ca <_strtod_l+0x522>
 800a1f4:	f1c8 0800 	rsb	r8, r8, #0
 800a1f8:	f018 020f 	ands.w	r2, r8, #15
 800a1fc:	d00a      	beq.n	800a214 <_strtod_l+0x56c>
 800a1fe:	4b13      	ldr	r3, [pc, #76]	; (800a24c <_strtod_l+0x5a4>)
 800a200:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a204:	4650      	mov	r0, sl
 800a206:	4659      	mov	r1, fp
 800a208:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a20c:	f7f6 fb2e 	bl	800086c <__aeabi_ddiv>
 800a210:	4682      	mov	sl, r0
 800a212:	468b      	mov	fp, r1
 800a214:	ea5f 1828 	movs.w	r8, r8, asr #4
 800a218:	d0d7      	beq.n	800a1ca <_strtod_l+0x522>
 800a21a:	f1b8 0f1f 	cmp.w	r8, #31
 800a21e:	dd1f      	ble.n	800a260 <_strtod_l+0x5b8>
 800a220:	2500      	movs	r5, #0
 800a222:	462e      	mov	r6, r5
 800a224:	9507      	str	r5, [sp, #28]
 800a226:	9505      	str	r5, [sp, #20]
 800a228:	2322      	movs	r3, #34	; 0x22
 800a22a:	f04f 0a00 	mov.w	sl, #0
 800a22e:	f04f 0b00 	mov.w	fp, #0
 800a232:	6023      	str	r3, [r4, #0]
 800a234:	e786      	b.n	800a144 <_strtod_l+0x49c>
 800a236:	bf00      	nop
 800a238:	0800e229 	.word	0x0800e229
 800a23c:	0800e240 	.word	0x0800e240
 800a240:	0800e220 	.word	0x0800e220
 800a244:	0800e223 	.word	0x0800e223
 800a248:	0800e565 	.word	0x0800e565
 800a24c:	0800e408 	.word	0x0800e408
 800a250:	0800e3e0 	.word	0x0800e3e0
 800a254:	7ff00000 	.word	0x7ff00000
 800a258:	7ca00000 	.word	0x7ca00000
 800a25c:	7fefffff 	.word	0x7fefffff
 800a260:	f018 0310 	ands.w	r3, r8, #16
 800a264:	bf18      	it	ne
 800a266:	236a      	movne	r3, #106	; 0x6a
 800a268:	f8df 93ac 	ldr.w	r9, [pc, #940]	; 800a618 <_strtod_l+0x970>
 800a26c:	9304      	str	r3, [sp, #16]
 800a26e:	4650      	mov	r0, sl
 800a270:	4659      	mov	r1, fp
 800a272:	2300      	movs	r3, #0
 800a274:	f018 0f01 	tst.w	r8, #1
 800a278:	d004      	beq.n	800a284 <_strtod_l+0x5dc>
 800a27a:	e9d9 2300 	ldrd	r2, r3, [r9]
 800a27e:	f7f6 f9cb 	bl	8000618 <__aeabi_dmul>
 800a282:	2301      	movs	r3, #1
 800a284:	ea5f 0868 	movs.w	r8, r8, asr #1
 800a288:	f109 0908 	add.w	r9, r9, #8
 800a28c:	d1f2      	bne.n	800a274 <_strtod_l+0x5cc>
 800a28e:	b10b      	cbz	r3, 800a294 <_strtod_l+0x5ec>
 800a290:	4682      	mov	sl, r0
 800a292:	468b      	mov	fp, r1
 800a294:	9b04      	ldr	r3, [sp, #16]
 800a296:	b1c3      	cbz	r3, 800a2ca <_strtod_l+0x622>
 800a298:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800a29c:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 800a2a0:	2b00      	cmp	r3, #0
 800a2a2:	4659      	mov	r1, fp
 800a2a4:	dd11      	ble.n	800a2ca <_strtod_l+0x622>
 800a2a6:	2b1f      	cmp	r3, #31
 800a2a8:	f340 8124 	ble.w	800a4f4 <_strtod_l+0x84c>
 800a2ac:	2b34      	cmp	r3, #52	; 0x34
 800a2ae:	bfde      	ittt	le
 800a2b0:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 800a2b4:	f04f 33ff 	movle.w	r3, #4294967295	; 0xffffffff
 800a2b8:	fa03 f202 	lslle.w	r2, r3, r2
 800a2bc:	f04f 0a00 	mov.w	sl, #0
 800a2c0:	bfcc      	ite	gt
 800a2c2:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 800a2c6:	ea02 0b01 	andle.w	fp, r2, r1
 800a2ca:	2200      	movs	r2, #0
 800a2cc:	2300      	movs	r3, #0
 800a2ce:	4650      	mov	r0, sl
 800a2d0:	4659      	mov	r1, fp
 800a2d2:	f7f6 fc09 	bl	8000ae8 <__aeabi_dcmpeq>
 800a2d6:	2800      	cmp	r0, #0
 800a2d8:	d1a2      	bne.n	800a220 <_strtod_l+0x578>
 800a2da:	9b07      	ldr	r3, [sp, #28]
 800a2dc:	9300      	str	r3, [sp, #0]
 800a2de:	9908      	ldr	r1, [sp, #32]
 800a2e0:	462b      	mov	r3, r5
 800a2e2:	463a      	mov	r2, r7
 800a2e4:	4620      	mov	r0, r4
 800a2e6:	f001 fa75 	bl	800b7d4 <__s2b>
 800a2ea:	9007      	str	r0, [sp, #28]
 800a2ec:	2800      	cmp	r0, #0
 800a2ee:	f43f af1f 	beq.w	800a130 <_strtod_l+0x488>
 800a2f2:	9b05      	ldr	r3, [sp, #20]
 800a2f4:	1b9e      	subs	r6, r3, r6
 800a2f6:	9b06      	ldr	r3, [sp, #24]
 800a2f8:	2b00      	cmp	r3, #0
 800a2fa:	bfb4      	ite	lt
 800a2fc:	4633      	movlt	r3, r6
 800a2fe:	2300      	movge	r3, #0
 800a300:	930c      	str	r3, [sp, #48]	; 0x30
 800a302:	9b06      	ldr	r3, [sp, #24]
 800a304:	2500      	movs	r5, #0
 800a306:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800a30a:	9312      	str	r3, [sp, #72]	; 0x48
 800a30c:	462e      	mov	r6, r5
 800a30e:	9b07      	ldr	r3, [sp, #28]
 800a310:	4620      	mov	r0, r4
 800a312:	6859      	ldr	r1, [r3, #4]
 800a314:	f001 f9b6 	bl	800b684 <_Balloc>
 800a318:	9005      	str	r0, [sp, #20]
 800a31a:	2800      	cmp	r0, #0
 800a31c:	f43f af0c 	beq.w	800a138 <_strtod_l+0x490>
 800a320:	9b07      	ldr	r3, [sp, #28]
 800a322:	691a      	ldr	r2, [r3, #16]
 800a324:	3202      	adds	r2, #2
 800a326:	f103 010c 	add.w	r1, r3, #12
 800a32a:	0092      	lsls	r2, r2, #2
 800a32c:	300c      	adds	r0, #12
 800a32e:	f7ff fa73 	bl	8009818 <memcpy>
 800a332:	ec4b ab10 	vmov	d0, sl, fp
 800a336:	aa1a      	add	r2, sp, #104	; 0x68
 800a338:	a919      	add	r1, sp, #100	; 0x64
 800a33a:	4620      	mov	r0, r4
 800a33c:	f001 fd90 	bl	800be60 <__d2b>
 800a340:	ec4b ab18 	vmov	d8, sl, fp
 800a344:	9018      	str	r0, [sp, #96]	; 0x60
 800a346:	2800      	cmp	r0, #0
 800a348:	f43f aef6 	beq.w	800a138 <_strtod_l+0x490>
 800a34c:	2101      	movs	r1, #1
 800a34e:	4620      	mov	r0, r4
 800a350:	f001 fada 	bl	800b908 <__i2b>
 800a354:	4606      	mov	r6, r0
 800a356:	2800      	cmp	r0, #0
 800a358:	f43f aeee 	beq.w	800a138 <_strtod_l+0x490>
 800a35c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800a35e:	9904      	ldr	r1, [sp, #16]
 800a360:	2b00      	cmp	r3, #0
 800a362:	bfab      	itete	ge
 800a364:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
 800a366:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
 800a368:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 800a36a:	f8dd 9030 	ldrlt.w	r9, [sp, #48]	; 0x30
 800a36e:	bfac      	ite	ge
 800a370:	eb03 0902 	addge.w	r9, r3, r2
 800a374:	1ad7      	sublt	r7, r2, r3
 800a376:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800a378:	eba3 0801 	sub.w	r8, r3, r1
 800a37c:	4490      	add	r8, r2
 800a37e:	4ba1      	ldr	r3, [pc, #644]	; (800a604 <_strtod_l+0x95c>)
 800a380:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 800a384:	4598      	cmp	r8, r3
 800a386:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800a38a:	f280 80c7 	bge.w	800a51c <_strtod_l+0x874>
 800a38e:	eba3 0308 	sub.w	r3, r3, r8
 800a392:	2b1f      	cmp	r3, #31
 800a394:	eba2 0203 	sub.w	r2, r2, r3
 800a398:	f04f 0101 	mov.w	r1, #1
 800a39c:	f300 80b1 	bgt.w	800a502 <_strtod_l+0x85a>
 800a3a0:	fa01 f303 	lsl.w	r3, r1, r3
 800a3a4:	930d      	str	r3, [sp, #52]	; 0x34
 800a3a6:	2300      	movs	r3, #0
 800a3a8:	9308      	str	r3, [sp, #32]
 800a3aa:	eb09 0802 	add.w	r8, r9, r2
 800a3ae:	9b04      	ldr	r3, [sp, #16]
 800a3b0:	45c1      	cmp	r9, r8
 800a3b2:	4417      	add	r7, r2
 800a3b4:	441f      	add	r7, r3
 800a3b6:	464b      	mov	r3, r9
 800a3b8:	bfa8      	it	ge
 800a3ba:	4643      	movge	r3, r8
 800a3bc:	42bb      	cmp	r3, r7
 800a3be:	bfa8      	it	ge
 800a3c0:	463b      	movge	r3, r7
 800a3c2:	2b00      	cmp	r3, #0
 800a3c4:	bfc2      	ittt	gt
 800a3c6:	eba8 0803 	subgt.w	r8, r8, r3
 800a3ca:	1aff      	subgt	r7, r7, r3
 800a3cc:	eba9 0903 	subgt.w	r9, r9, r3
 800a3d0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a3d2:	2b00      	cmp	r3, #0
 800a3d4:	dd17      	ble.n	800a406 <_strtod_l+0x75e>
 800a3d6:	4631      	mov	r1, r6
 800a3d8:	461a      	mov	r2, r3
 800a3da:	4620      	mov	r0, r4
 800a3dc:	f001 fb54 	bl	800ba88 <__pow5mult>
 800a3e0:	4606      	mov	r6, r0
 800a3e2:	2800      	cmp	r0, #0
 800a3e4:	f43f aea8 	beq.w	800a138 <_strtod_l+0x490>
 800a3e8:	4601      	mov	r1, r0
 800a3ea:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800a3ec:	4620      	mov	r0, r4
 800a3ee:	f001 faa1 	bl	800b934 <__multiply>
 800a3f2:	900b      	str	r0, [sp, #44]	; 0x2c
 800a3f4:	2800      	cmp	r0, #0
 800a3f6:	f43f ae9f 	beq.w	800a138 <_strtod_l+0x490>
 800a3fa:	9918      	ldr	r1, [sp, #96]	; 0x60
 800a3fc:	4620      	mov	r0, r4
 800a3fe:	f001 f981 	bl	800b704 <_Bfree>
 800a402:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a404:	9318      	str	r3, [sp, #96]	; 0x60
 800a406:	f1b8 0f00 	cmp.w	r8, #0
 800a40a:	f300 808c 	bgt.w	800a526 <_strtod_l+0x87e>
 800a40e:	9b06      	ldr	r3, [sp, #24]
 800a410:	2b00      	cmp	r3, #0
 800a412:	dd08      	ble.n	800a426 <_strtod_l+0x77e>
 800a414:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800a416:	9905      	ldr	r1, [sp, #20]
 800a418:	4620      	mov	r0, r4
 800a41a:	f001 fb35 	bl	800ba88 <__pow5mult>
 800a41e:	9005      	str	r0, [sp, #20]
 800a420:	2800      	cmp	r0, #0
 800a422:	f43f ae89 	beq.w	800a138 <_strtod_l+0x490>
 800a426:	2f00      	cmp	r7, #0
 800a428:	dd08      	ble.n	800a43c <_strtod_l+0x794>
 800a42a:	9905      	ldr	r1, [sp, #20]
 800a42c:	463a      	mov	r2, r7
 800a42e:	4620      	mov	r0, r4
 800a430:	f001 fb84 	bl	800bb3c <__lshift>
 800a434:	9005      	str	r0, [sp, #20]
 800a436:	2800      	cmp	r0, #0
 800a438:	f43f ae7e 	beq.w	800a138 <_strtod_l+0x490>
 800a43c:	f1b9 0f00 	cmp.w	r9, #0
 800a440:	dd08      	ble.n	800a454 <_strtod_l+0x7ac>
 800a442:	4631      	mov	r1, r6
 800a444:	464a      	mov	r2, r9
 800a446:	4620      	mov	r0, r4
 800a448:	f001 fb78 	bl	800bb3c <__lshift>
 800a44c:	4606      	mov	r6, r0
 800a44e:	2800      	cmp	r0, #0
 800a450:	f43f ae72 	beq.w	800a138 <_strtod_l+0x490>
 800a454:	9a05      	ldr	r2, [sp, #20]
 800a456:	9918      	ldr	r1, [sp, #96]	; 0x60
 800a458:	4620      	mov	r0, r4
 800a45a:	f001 fbfb 	bl	800bc54 <__mdiff>
 800a45e:	4605      	mov	r5, r0
 800a460:	2800      	cmp	r0, #0
 800a462:	f43f ae69 	beq.w	800a138 <_strtod_l+0x490>
 800a466:	68c3      	ldr	r3, [r0, #12]
 800a468:	930b      	str	r3, [sp, #44]	; 0x2c
 800a46a:	2300      	movs	r3, #0
 800a46c:	60c3      	str	r3, [r0, #12]
 800a46e:	4631      	mov	r1, r6
 800a470:	f001 fbd4 	bl	800bc1c <__mcmp>
 800a474:	2800      	cmp	r0, #0
 800a476:	da60      	bge.n	800a53a <_strtod_l+0x892>
 800a478:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a47a:	ea53 030a 	orrs.w	r3, r3, sl
 800a47e:	f040 8082 	bne.w	800a586 <_strtod_l+0x8de>
 800a482:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800a486:	2b00      	cmp	r3, #0
 800a488:	d17d      	bne.n	800a586 <_strtod_l+0x8de>
 800a48a:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800a48e:	0d1b      	lsrs	r3, r3, #20
 800a490:	051b      	lsls	r3, r3, #20
 800a492:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800a496:	d976      	bls.n	800a586 <_strtod_l+0x8de>
 800a498:	696b      	ldr	r3, [r5, #20]
 800a49a:	b913      	cbnz	r3, 800a4a2 <_strtod_l+0x7fa>
 800a49c:	692b      	ldr	r3, [r5, #16]
 800a49e:	2b01      	cmp	r3, #1
 800a4a0:	dd71      	ble.n	800a586 <_strtod_l+0x8de>
 800a4a2:	4629      	mov	r1, r5
 800a4a4:	2201      	movs	r2, #1
 800a4a6:	4620      	mov	r0, r4
 800a4a8:	f001 fb48 	bl	800bb3c <__lshift>
 800a4ac:	4631      	mov	r1, r6
 800a4ae:	4605      	mov	r5, r0
 800a4b0:	f001 fbb4 	bl	800bc1c <__mcmp>
 800a4b4:	2800      	cmp	r0, #0
 800a4b6:	dd66      	ble.n	800a586 <_strtod_l+0x8de>
 800a4b8:	9904      	ldr	r1, [sp, #16]
 800a4ba:	4a53      	ldr	r2, [pc, #332]	; (800a608 <_strtod_l+0x960>)
 800a4bc:	465b      	mov	r3, fp
 800a4be:	2900      	cmp	r1, #0
 800a4c0:	f000 8081 	beq.w	800a5c6 <_strtod_l+0x91e>
 800a4c4:	ea02 010b 	and.w	r1, r2, fp
 800a4c8:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800a4cc:	dc7b      	bgt.n	800a5c6 <_strtod_l+0x91e>
 800a4ce:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800a4d2:	f77f aea9 	ble.w	800a228 <_strtod_l+0x580>
 800a4d6:	4b4d      	ldr	r3, [pc, #308]	; (800a60c <_strtod_l+0x964>)
 800a4d8:	4650      	mov	r0, sl
 800a4da:	4659      	mov	r1, fp
 800a4dc:	2200      	movs	r2, #0
 800a4de:	f7f6 f89b 	bl	8000618 <__aeabi_dmul>
 800a4e2:	460b      	mov	r3, r1
 800a4e4:	4303      	orrs	r3, r0
 800a4e6:	bf08      	it	eq
 800a4e8:	2322      	moveq	r3, #34	; 0x22
 800a4ea:	4682      	mov	sl, r0
 800a4ec:	468b      	mov	fp, r1
 800a4ee:	bf08      	it	eq
 800a4f0:	6023      	streq	r3, [r4, #0]
 800a4f2:	e62b      	b.n	800a14c <_strtod_l+0x4a4>
 800a4f4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800a4f8:	fa02 f303 	lsl.w	r3, r2, r3
 800a4fc:	ea03 0a0a 	and.w	sl, r3, sl
 800a500:	e6e3      	b.n	800a2ca <_strtod_l+0x622>
 800a502:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 800a506:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 800a50a:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 800a50e:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 800a512:	fa01 f308 	lsl.w	r3, r1, r8
 800a516:	9308      	str	r3, [sp, #32]
 800a518:	910d      	str	r1, [sp, #52]	; 0x34
 800a51a:	e746      	b.n	800a3aa <_strtod_l+0x702>
 800a51c:	2300      	movs	r3, #0
 800a51e:	9308      	str	r3, [sp, #32]
 800a520:	2301      	movs	r3, #1
 800a522:	930d      	str	r3, [sp, #52]	; 0x34
 800a524:	e741      	b.n	800a3aa <_strtod_l+0x702>
 800a526:	9918      	ldr	r1, [sp, #96]	; 0x60
 800a528:	4642      	mov	r2, r8
 800a52a:	4620      	mov	r0, r4
 800a52c:	f001 fb06 	bl	800bb3c <__lshift>
 800a530:	9018      	str	r0, [sp, #96]	; 0x60
 800a532:	2800      	cmp	r0, #0
 800a534:	f47f af6b 	bne.w	800a40e <_strtod_l+0x766>
 800a538:	e5fe      	b.n	800a138 <_strtod_l+0x490>
 800a53a:	465f      	mov	r7, fp
 800a53c:	d16e      	bne.n	800a61c <_strtod_l+0x974>
 800a53e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800a540:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800a544:	b342      	cbz	r2, 800a598 <_strtod_l+0x8f0>
 800a546:	4a32      	ldr	r2, [pc, #200]	; (800a610 <_strtod_l+0x968>)
 800a548:	4293      	cmp	r3, r2
 800a54a:	d128      	bne.n	800a59e <_strtod_l+0x8f6>
 800a54c:	9b04      	ldr	r3, [sp, #16]
 800a54e:	4651      	mov	r1, sl
 800a550:	b1eb      	cbz	r3, 800a58e <_strtod_l+0x8e6>
 800a552:	4b2d      	ldr	r3, [pc, #180]	; (800a608 <_strtod_l+0x960>)
 800a554:	403b      	ands	r3, r7
 800a556:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800a55a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800a55e:	d819      	bhi.n	800a594 <_strtod_l+0x8ec>
 800a560:	0d1b      	lsrs	r3, r3, #20
 800a562:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800a566:	fa02 f303 	lsl.w	r3, r2, r3
 800a56a:	4299      	cmp	r1, r3
 800a56c:	d117      	bne.n	800a59e <_strtod_l+0x8f6>
 800a56e:	4b29      	ldr	r3, [pc, #164]	; (800a614 <_strtod_l+0x96c>)
 800a570:	429f      	cmp	r7, r3
 800a572:	d102      	bne.n	800a57a <_strtod_l+0x8d2>
 800a574:	3101      	adds	r1, #1
 800a576:	f43f addf 	beq.w	800a138 <_strtod_l+0x490>
 800a57a:	4b23      	ldr	r3, [pc, #140]	; (800a608 <_strtod_l+0x960>)
 800a57c:	403b      	ands	r3, r7
 800a57e:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 800a582:	f04f 0a00 	mov.w	sl, #0
 800a586:	9b04      	ldr	r3, [sp, #16]
 800a588:	2b00      	cmp	r3, #0
 800a58a:	d1a4      	bne.n	800a4d6 <_strtod_l+0x82e>
 800a58c:	e5de      	b.n	800a14c <_strtod_l+0x4a4>
 800a58e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800a592:	e7ea      	b.n	800a56a <_strtod_l+0x8c2>
 800a594:	4613      	mov	r3, r2
 800a596:	e7e8      	b.n	800a56a <_strtod_l+0x8c2>
 800a598:	ea53 030a 	orrs.w	r3, r3, sl
 800a59c:	d08c      	beq.n	800a4b8 <_strtod_l+0x810>
 800a59e:	9b08      	ldr	r3, [sp, #32]
 800a5a0:	b1db      	cbz	r3, 800a5da <_strtod_l+0x932>
 800a5a2:	423b      	tst	r3, r7
 800a5a4:	d0ef      	beq.n	800a586 <_strtod_l+0x8de>
 800a5a6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a5a8:	9a04      	ldr	r2, [sp, #16]
 800a5aa:	4650      	mov	r0, sl
 800a5ac:	4659      	mov	r1, fp
 800a5ae:	b1c3      	cbz	r3, 800a5e2 <_strtod_l+0x93a>
 800a5b0:	f7ff fb5b 	bl	8009c6a <sulp>
 800a5b4:	4602      	mov	r2, r0
 800a5b6:	460b      	mov	r3, r1
 800a5b8:	ec51 0b18 	vmov	r0, r1, d8
 800a5bc:	f7f5 fe76 	bl	80002ac <__adddf3>
 800a5c0:	4682      	mov	sl, r0
 800a5c2:	468b      	mov	fp, r1
 800a5c4:	e7df      	b.n	800a586 <_strtod_l+0x8de>
 800a5c6:	4013      	ands	r3, r2
 800a5c8:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800a5cc:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800a5d0:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800a5d4:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 800a5d8:	e7d5      	b.n	800a586 <_strtod_l+0x8de>
 800a5da:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a5dc:	ea13 0f0a 	tst.w	r3, sl
 800a5e0:	e7e0      	b.n	800a5a4 <_strtod_l+0x8fc>
 800a5e2:	f7ff fb42 	bl	8009c6a <sulp>
 800a5e6:	4602      	mov	r2, r0
 800a5e8:	460b      	mov	r3, r1
 800a5ea:	ec51 0b18 	vmov	r0, r1, d8
 800a5ee:	f7f5 fe5b 	bl	80002a8 <__aeabi_dsub>
 800a5f2:	2200      	movs	r2, #0
 800a5f4:	2300      	movs	r3, #0
 800a5f6:	4682      	mov	sl, r0
 800a5f8:	468b      	mov	fp, r1
 800a5fa:	f7f6 fa75 	bl	8000ae8 <__aeabi_dcmpeq>
 800a5fe:	2800      	cmp	r0, #0
 800a600:	d0c1      	beq.n	800a586 <_strtod_l+0x8de>
 800a602:	e611      	b.n	800a228 <_strtod_l+0x580>
 800a604:	fffffc02 	.word	0xfffffc02
 800a608:	7ff00000 	.word	0x7ff00000
 800a60c:	39500000 	.word	0x39500000
 800a610:	000fffff 	.word	0x000fffff
 800a614:	7fefffff 	.word	0x7fefffff
 800a618:	0800e258 	.word	0x0800e258
 800a61c:	4631      	mov	r1, r6
 800a61e:	4628      	mov	r0, r5
 800a620:	f001 fc7a 	bl	800bf18 <__ratio>
 800a624:	ec59 8b10 	vmov	r8, r9, d0
 800a628:	ee10 0a10 	vmov	r0, s0
 800a62c:	2200      	movs	r2, #0
 800a62e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800a632:	4649      	mov	r1, r9
 800a634:	f7f6 fa6c 	bl	8000b10 <__aeabi_dcmple>
 800a638:	2800      	cmp	r0, #0
 800a63a:	d07a      	beq.n	800a732 <_strtod_l+0xa8a>
 800a63c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a63e:	2b00      	cmp	r3, #0
 800a640:	d04a      	beq.n	800a6d8 <_strtod_l+0xa30>
 800a642:	4b95      	ldr	r3, [pc, #596]	; (800a898 <_strtod_l+0xbf0>)
 800a644:	2200      	movs	r2, #0
 800a646:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800a64a:	f8df 924c 	ldr.w	r9, [pc, #588]	; 800a898 <_strtod_l+0xbf0>
 800a64e:	f04f 0800 	mov.w	r8, #0
 800a652:	4b92      	ldr	r3, [pc, #584]	; (800a89c <_strtod_l+0xbf4>)
 800a654:	403b      	ands	r3, r7
 800a656:	930d      	str	r3, [sp, #52]	; 0x34
 800a658:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800a65a:	4b91      	ldr	r3, [pc, #580]	; (800a8a0 <_strtod_l+0xbf8>)
 800a65c:	429a      	cmp	r2, r3
 800a65e:	f040 80b0 	bne.w	800a7c2 <_strtod_l+0xb1a>
 800a662:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800a666:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 800a66a:	ec4b ab10 	vmov	d0, sl, fp
 800a66e:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800a672:	f001 fb79 	bl	800bd68 <__ulp>
 800a676:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800a67a:	ec53 2b10 	vmov	r2, r3, d0
 800a67e:	f7f5 ffcb 	bl	8000618 <__aeabi_dmul>
 800a682:	4652      	mov	r2, sl
 800a684:	465b      	mov	r3, fp
 800a686:	f7f5 fe11 	bl	80002ac <__adddf3>
 800a68a:	460b      	mov	r3, r1
 800a68c:	4983      	ldr	r1, [pc, #524]	; (800a89c <_strtod_l+0xbf4>)
 800a68e:	4a85      	ldr	r2, [pc, #532]	; (800a8a4 <_strtod_l+0xbfc>)
 800a690:	4019      	ands	r1, r3
 800a692:	4291      	cmp	r1, r2
 800a694:	4682      	mov	sl, r0
 800a696:	d960      	bls.n	800a75a <_strtod_l+0xab2>
 800a698:	ee18 3a90 	vmov	r3, s17
 800a69c:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 800a6a0:	4293      	cmp	r3, r2
 800a6a2:	d104      	bne.n	800a6ae <_strtod_l+0xa06>
 800a6a4:	ee18 3a10 	vmov	r3, s16
 800a6a8:	3301      	adds	r3, #1
 800a6aa:	f43f ad45 	beq.w	800a138 <_strtod_l+0x490>
 800a6ae:	f8df b200 	ldr.w	fp, [pc, #512]	; 800a8b0 <_strtod_l+0xc08>
 800a6b2:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 800a6b6:	9918      	ldr	r1, [sp, #96]	; 0x60
 800a6b8:	4620      	mov	r0, r4
 800a6ba:	f001 f823 	bl	800b704 <_Bfree>
 800a6be:	9905      	ldr	r1, [sp, #20]
 800a6c0:	4620      	mov	r0, r4
 800a6c2:	f001 f81f 	bl	800b704 <_Bfree>
 800a6c6:	4631      	mov	r1, r6
 800a6c8:	4620      	mov	r0, r4
 800a6ca:	f001 f81b 	bl	800b704 <_Bfree>
 800a6ce:	4629      	mov	r1, r5
 800a6d0:	4620      	mov	r0, r4
 800a6d2:	f001 f817 	bl	800b704 <_Bfree>
 800a6d6:	e61a      	b.n	800a30e <_strtod_l+0x666>
 800a6d8:	f1ba 0f00 	cmp.w	sl, #0
 800a6dc:	d11b      	bne.n	800a716 <_strtod_l+0xa6e>
 800a6de:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800a6e2:	b9f3      	cbnz	r3, 800a722 <_strtod_l+0xa7a>
 800a6e4:	4b6c      	ldr	r3, [pc, #432]	; (800a898 <_strtod_l+0xbf0>)
 800a6e6:	2200      	movs	r2, #0
 800a6e8:	4640      	mov	r0, r8
 800a6ea:	4649      	mov	r1, r9
 800a6ec:	f7f6 fa06 	bl	8000afc <__aeabi_dcmplt>
 800a6f0:	b9d0      	cbnz	r0, 800a728 <_strtod_l+0xa80>
 800a6f2:	4640      	mov	r0, r8
 800a6f4:	4649      	mov	r1, r9
 800a6f6:	4b6c      	ldr	r3, [pc, #432]	; (800a8a8 <_strtod_l+0xc00>)
 800a6f8:	2200      	movs	r2, #0
 800a6fa:	f7f5 ff8d 	bl	8000618 <__aeabi_dmul>
 800a6fe:	4680      	mov	r8, r0
 800a700:	4689      	mov	r9, r1
 800a702:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800a706:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
 800a70a:	9315      	str	r3, [sp, #84]	; 0x54
 800a70c:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 800a710:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800a714:	e79d      	b.n	800a652 <_strtod_l+0x9aa>
 800a716:	f1ba 0f01 	cmp.w	sl, #1
 800a71a:	d102      	bne.n	800a722 <_strtod_l+0xa7a>
 800a71c:	2f00      	cmp	r7, #0
 800a71e:	f43f ad83 	beq.w	800a228 <_strtod_l+0x580>
 800a722:	4b62      	ldr	r3, [pc, #392]	; (800a8ac <_strtod_l+0xc04>)
 800a724:	2200      	movs	r2, #0
 800a726:	e78e      	b.n	800a646 <_strtod_l+0x99e>
 800a728:	f8df 917c 	ldr.w	r9, [pc, #380]	; 800a8a8 <_strtod_l+0xc00>
 800a72c:	f04f 0800 	mov.w	r8, #0
 800a730:	e7e7      	b.n	800a702 <_strtod_l+0xa5a>
 800a732:	4b5d      	ldr	r3, [pc, #372]	; (800a8a8 <_strtod_l+0xc00>)
 800a734:	4640      	mov	r0, r8
 800a736:	4649      	mov	r1, r9
 800a738:	2200      	movs	r2, #0
 800a73a:	f7f5 ff6d 	bl	8000618 <__aeabi_dmul>
 800a73e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a740:	4680      	mov	r8, r0
 800a742:	4689      	mov	r9, r1
 800a744:	b933      	cbnz	r3, 800a754 <_strtod_l+0xaac>
 800a746:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800a74a:	900e      	str	r0, [sp, #56]	; 0x38
 800a74c:	930f      	str	r3, [sp, #60]	; 0x3c
 800a74e:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 800a752:	e7dd      	b.n	800a710 <_strtod_l+0xa68>
 800a754:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
 800a758:	e7f9      	b.n	800a74e <_strtod_l+0xaa6>
 800a75a:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 800a75e:	9b04      	ldr	r3, [sp, #16]
 800a760:	2b00      	cmp	r3, #0
 800a762:	d1a8      	bne.n	800a6b6 <_strtod_l+0xa0e>
 800a764:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800a768:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800a76a:	0d1b      	lsrs	r3, r3, #20
 800a76c:	051b      	lsls	r3, r3, #20
 800a76e:	429a      	cmp	r2, r3
 800a770:	d1a1      	bne.n	800a6b6 <_strtod_l+0xa0e>
 800a772:	4640      	mov	r0, r8
 800a774:	4649      	mov	r1, r9
 800a776:	f7f6 fa49 	bl	8000c0c <__aeabi_d2lz>
 800a77a:	f7f5 ff1f 	bl	80005bc <__aeabi_l2d>
 800a77e:	4602      	mov	r2, r0
 800a780:	460b      	mov	r3, r1
 800a782:	4640      	mov	r0, r8
 800a784:	4649      	mov	r1, r9
 800a786:	f7f5 fd8f 	bl	80002a8 <__aeabi_dsub>
 800a78a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800a78c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800a790:	ea43 030a 	orr.w	r3, r3, sl
 800a794:	4313      	orrs	r3, r2
 800a796:	4680      	mov	r8, r0
 800a798:	4689      	mov	r9, r1
 800a79a:	d055      	beq.n	800a848 <_strtod_l+0xba0>
 800a79c:	a336      	add	r3, pc, #216	; (adr r3, 800a878 <_strtod_l+0xbd0>)
 800a79e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a7a2:	f7f6 f9ab 	bl	8000afc <__aeabi_dcmplt>
 800a7a6:	2800      	cmp	r0, #0
 800a7a8:	f47f acd0 	bne.w	800a14c <_strtod_l+0x4a4>
 800a7ac:	a334      	add	r3, pc, #208	; (adr r3, 800a880 <_strtod_l+0xbd8>)
 800a7ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a7b2:	4640      	mov	r0, r8
 800a7b4:	4649      	mov	r1, r9
 800a7b6:	f7f6 f9bf 	bl	8000b38 <__aeabi_dcmpgt>
 800a7ba:	2800      	cmp	r0, #0
 800a7bc:	f43f af7b 	beq.w	800a6b6 <_strtod_l+0xa0e>
 800a7c0:	e4c4      	b.n	800a14c <_strtod_l+0x4a4>
 800a7c2:	9b04      	ldr	r3, [sp, #16]
 800a7c4:	b333      	cbz	r3, 800a814 <_strtod_l+0xb6c>
 800a7c6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a7c8:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800a7cc:	d822      	bhi.n	800a814 <_strtod_l+0xb6c>
 800a7ce:	a32e      	add	r3, pc, #184	; (adr r3, 800a888 <_strtod_l+0xbe0>)
 800a7d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a7d4:	4640      	mov	r0, r8
 800a7d6:	4649      	mov	r1, r9
 800a7d8:	f7f6 f99a 	bl	8000b10 <__aeabi_dcmple>
 800a7dc:	b1a0      	cbz	r0, 800a808 <_strtod_l+0xb60>
 800a7de:	4649      	mov	r1, r9
 800a7e0:	4640      	mov	r0, r8
 800a7e2:	f7f6 f9db 	bl	8000b9c <__aeabi_d2uiz>
 800a7e6:	2801      	cmp	r0, #1
 800a7e8:	bf38      	it	cc
 800a7ea:	2001      	movcc	r0, #1
 800a7ec:	f7f5 fe9a 	bl	8000524 <__aeabi_ui2d>
 800a7f0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a7f2:	4680      	mov	r8, r0
 800a7f4:	4689      	mov	r9, r1
 800a7f6:	bb23      	cbnz	r3, 800a842 <_strtod_l+0xb9a>
 800a7f8:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800a7fc:	9010      	str	r0, [sp, #64]	; 0x40
 800a7fe:	9311      	str	r3, [sp, #68]	; 0x44
 800a800:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800a804:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800a808:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a80a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800a80c:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 800a810:	1a9b      	subs	r3, r3, r2
 800a812:	9309      	str	r3, [sp, #36]	; 0x24
 800a814:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800a818:	eeb0 0a48 	vmov.f32	s0, s16
 800a81c:	eef0 0a68 	vmov.f32	s1, s17
 800a820:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800a824:	f001 faa0 	bl	800bd68 <__ulp>
 800a828:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800a82c:	ec53 2b10 	vmov	r2, r3, d0
 800a830:	f7f5 fef2 	bl	8000618 <__aeabi_dmul>
 800a834:	ec53 2b18 	vmov	r2, r3, d8
 800a838:	f7f5 fd38 	bl	80002ac <__adddf3>
 800a83c:	4682      	mov	sl, r0
 800a83e:	468b      	mov	fp, r1
 800a840:	e78d      	b.n	800a75e <_strtod_l+0xab6>
 800a842:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
 800a846:	e7db      	b.n	800a800 <_strtod_l+0xb58>
 800a848:	a311      	add	r3, pc, #68	; (adr r3, 800a890 <_strtod_l+0xbe8>)
 800a84a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a84e:	f7f6 f955 	bl	8000afc <__aeabi_dcmplt>
 800a852:	e7b2      	b.n	800a7ba <_strtod_l+0xb12>
 800a854:	2300      	movs	r3, #0
 800a856:	930a      	str	r3, [sp, #40]	; 0x28
 800a858:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800a85a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800a85c:	6013      	str	r3, [r2, #0]
 800a85e:	f7ff ba6b 	b.w	8009d38 <_strtod_l+0x90>
 800a862:	2a65      	cmp	r2, #101	; 0x65
 800a864:	f43f ab5f 	beq.w	8009f26 <_strtod_l+0x27e>
 800a868:	2a45      	cmp	r2, #69	; 0x45
 800a86a:	f43f ab5c 	beq.w	8009f26 <_strtod_l+0x27e>
 800a86e:	2301      	movs	r3, #1
 800a870:	f7ff bb94 	b.w	8009f9c <_strtod_l+0x2f4>
 800a874:	f3af 8000 	nop.w
 800a878:	94a03595 	.word	0x94a03595
 800a87c:	3fdfffff 	.word	0x3fdfffff
 800a880:	35afe535 	.word	0x35afe535
 800a884:	3fe00000 	.word	0x3fe00000
 800a888:	ffc00000 	.word	0xffc00000
 800a88c:	41dfffff 	.word	0x41dfffff
 800a890:	94a03595 	.word	0x94a03595
 800a894:	3fcfffff 	.word	0x3fcfffff
 800a898:	3ff00000 	.word	0x3ff00000
 800a89c:	7ff00000 	.word	0x7ff00000
 800a8a0:	7fe00000 	.word	0x7fe00000
 800a8a4:	7c9fffff 	.word	0x7c9fffff
 800a8a8:	3fe00000 	.word	0x3fe00000
 800a8ac:	bff00000 	.word	0xbff00000
 800a8b0:	7fefffff 	.word	0x7fefffff

0800a8b4 <strtod>:
 800a8b4:	460a      	mov	r2, r1
 800a8b6:	4601      	mov	r1, r0
 800a8b8:	4802      	ldr	r0, [pc, #8]	; (800a8c4 <strtod+0x10>)
 800a8ba:	4b03      	ldr	r3, [pc, #12]	; (800a8c8 <strtod+0x14>)
 800a8bc:	6800      	ldr	r0, [r0, #0]
 800a8be:	f7ff b9f3 	b.w	8009ca8 <_strtod_l>
 800a8c2:	bf00      	nop
 800a8c4:	200010ac 	.word	0x200010ac
 800a8c8:	20001114 	.word	0x20001114

0800a8cc <_vsniprintf_r>:
 800a8cc:	b530      	push	{r4, r5, lr}
 800a8ce:	4614      	mov	r4, r2
 800a8d0:	2c00      	cmp	r4, #0
 800a8d2:	b09b      	sub	sp, #108	; 0x6c
 800a8d4:	4605      	mov	r5, r0
 800a8d6:	461a      	mov	r2, r3
 800a8d8:	da05      	bge.n	800a8e6 <_vsniprintf_r+0x1a>
 800a8da:	238b      	movs	r3, #139	; 0x8b
 800a8dc:	6003      	str	r3, [r0, #0]
 800a8de:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a8e2:	b01b      	add	sp, #108	; 0x6c
 800a8e4:	bd30      	pop	{r4, r5, pc}
 800a8e6:	f44f 7302 	mov.w	r3, #520	; 0x208
 800a8ea:	f8ad 300c 	strh.w	r3, [sp, #12]
 800a8ee:	bf14      	ite	ne
 800a8f0:	f104 33ff 	addne.w	r3, r4, #4294967295	; 0xffffffff
 800a8f4:	4623      	moveq	r3, r4
 800a8f6:	9302      	str	r3, [sp, #8]
 800a8f8:	9305      	str	r3, [sp, #20]
 800a8fa:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800a8fe:	9100      	str	r1, [sp, #0]
 800a900:	9104      	str	r1, [sp, #16]
 800a902:	f8ad 300e 	strh.w	r3, [sp, #14]
 800a906:	4669      	mov	r1, sp
 800a908:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800a90a:	f001 fc1d 	bl	800c148 <_svfiprintf_r>
 800a90e:	1c43      	adds	r3, r0, #1
 800a910:	bfbc      	itt	lt
 800a912:	238b      	movlt	r3, #139	; 0x8b
 800a914:	602b      	strlt	r3, [r5, #0]
 800a916:	2c00      	cmp	r4, #0
 800a918:	d0e3      	beq.n	800a8e2 <_vsniprintf_r+0x16>
 800a91a:	9b00      	ldr	r3, [sp, #0]
 800a91c:	2200      	movs	r2, #0
 800a91e:	701a      	strb	r2, [r3, #0]
 800a920:	e7df      	b.n	800a8e2 <_vsniprintf_r+0x16>
	...

0800a924 <vsniprintf>:
 800a924:	b507      	push	{r0, r1, r2, lr}
 800a926:	9300      	str	r3, [sp, #0]
 800a928:	4613      	mov	r3, r2
 800a92a:	460a      	mov	r2, r1
 800a92c:	4601      	mov	r1, r0
 800a92e:	4803      	ldr	r0, [pc, #12]	; (800a93c <vsniprintf+0x18>)
 800a930:	6800      	ldr	r0, [r0, #0]
 800a932:	f7ff ffcb 	bl	800a8cc <_vsniprintf_r>
 800a936:	b003      	add	sp, #12
 800a938:	f85d fb04 	ldr.w	pc, [sp], #4
 800a93c:	200010ac 	.word	0x200010ac

0800a940 <__swbuf_r>:
 800a940:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a942:	460e      	mov	r6, r1
 800a944:	4614      	mov	r4, r2
 800a946:	4605      	mov	r5, r0
 800a948:	b118      	cbz	r0, 800a952 <__swbuf_r+0x12>
 800a94a:	6983      	ldr	r3, [r0, #24]
 800a94c:	b90b      	cbnz	r3, 800a952 <__swbuf_r+0x12>
 800a94e:	f000 f9f3 	bl	800ad38 <__sinit>
 800a952:	4b21      	ldr	r3, [pc, #132]	; (800a9d8 <__swbuf_r+0x98>)
 800a954:	429c      	cmp	r4, r3
 800a956:	d12b      	bne.n	800a9b0 <__swbuf_r+0x70>
 800a958:	686c      	ldr	r4, [r5, #4]
 800a95a:	69a3      	ldr	r3, [r4, #24]
 800a95c:	60a3      	str	r3, [r4, #8]
 800a95e:	89a3      	ldrh	r3, [r4, #12]
 800a960:	071a      	lsls	r2, r3, #28
 800a962:	d52f      	bpl.n	800a9c4 <__swbuf_r+0x84>
 800a964:	6923      	ldr	r3, [r4, #16]
 800a966:	b36b      	cbz	r3, 800a9c4 <__swbuf_r+0x84>
 800a968:	6923      	ldr	r3, [r4, #16]
 800a96a:	6820      	ldr	r0, [r4, #0]
 800a96c:	1ac0      	subs	r0, r0, r3
 800a96e:	6963      	ldr	r3, [r4, #20]
 800a970:	b2f6      	uxtb	r6, r6
 800a972:	4283      	cmp	r3, r0
 800a974:	4637      	mov	r7, r6
 800a976:	dc04      	bgt.n	800a982 <__swbuf_r+0x42>
 800a978:	4621      	mov	r1, r4
 800a97a:	4628      	mov	r0, r5
 800a97c:	f000 f948 	bl	800ac10 <_fflush_r>
 800a980:	bb30      	cbnz	r0, 800a9d0 <__swbuf_r+0x90>
 800a982:	68a3      	ldr	r3, [r4, #8]
 800a984:	3b01      	subs	r3, #1
 800a986:	60a3      	str	r3, [r4, #8]
 800a988:	6823      	ldr	r3, [r4, #0]
 800a98a:	1c5a      	adds	r2, r3, #1
 800a98c:	6022      	str	r2, [r4, #0]
 800a98e:	701e      	strb	r6, [r3, #0]
 800a990:	6963      	ldr	r3, [r4, #20]
 800a992:	3001      	adds	r0, #1
 800a994:	4283      	cmp	r3, r0
 800a996:	d004      	beq.n	800a9a2 <__swbuf_r+0x62>
 800a998:	89a3      	ldrh	r3, [r4, #12]
 800a99a:	07db      	lsls	r3, r3, #31
 800a99c:	d506      	bpl.n	800a9ac <__swbuf_r+0x6c>
 800a99e:	2e0a      	cmp	r6, #10
 800a9a0:	d104      	bne.n	800a9ac <__swbuf_r+0x6c>
 800a9a2:	4621      	mov	r1, r4
 800a9a4:	4628      	mov	r0, r5
 800a9a6:	f000 f933 	bl	800ac10 <_fflush_r>
 800a9aa:	b988      	cbnz	r0, 800a9d0 <__swbuf_r+0x90>
 800a9ac:	4638      	mov	r0, r7
 800a9ae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a9b0:	4b0a      	ldr	r3, [pc, #40]	; (800a9dc <__swbuf_r+0x9c>)
 800a9b2:	429c      	cmp	r4, r3
 800a9b4:	d101      	bne.n	800a9ba <__swbuf_r+0x7a>
 800a9b6:	68ac      	ldr	r4, [r5, #8]
 800a9b8:	e7cf      	b.n	800a95a <__swbuf_r+0x1a>
 800a9ba:	4b09      	ldr	r3, [pc, #36]	; (800a9e0 <__swbuf_r+0xa0>)
 800a9bc:	429c      	cmp	r4, r3
 800a9be:	bf08      	it	eq
 800a9c0:	68ec      	ldreq	r4, [r5, #12]
 800a9c2:	e7ca      	b.n	800a95a <__swbuf_r+0x1a>
 800a9c4:	4621      	mov	r1, r4
 800a9c6:	4628      	mov	r0, r5
 800a9c8:	f000 f81e 	bl	800aa08 <__swsetup_r>
 800a9cc:	2800      	cmp	r0, #0
 800a9ce:	d0cb      	beq.n	800a968 <__swbuf_r+0x28>
 800a9d0:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800a9d4:	e7ea      	b.n	800a9ac <__swbuf_r+0x6c>
 800a9d6:	bf00      	nop
 800a9d8:	0800e2a0 	.word	0x0800e2a0
 800a9dc:	0800e2c0 	.word	0x0800e2c0
 800a9e0:	0800e280 	.word	0x0800e280

0800a9e4 <_write_r>:
 800a9e4:	b538      	push	{r3, r4, r5, lr}
 800a9e6:	4d07      	ldr	r5, [pc, #28]	; (800aa04 <_write_r+0x20>)
 800a9e8:	4604      	mov	r4, r0
 800a9ea:	4608      	mov	r0, r1
 800a9ec:	4611      	mov	r1, r2
 800a9ee:	2200      	movs	r2, #0
 800a9f0:	602a      	str	r2, [r5, #0]
 800a9f2:	461a      	mov	r2, r3
 800a9f4:	f7fa f8c9 	bl	8004b8a <_write>
 800a9f8:	1c43      	adds	r3, r0, #1
 800a9fa:	d102      	bne.n	800aa02 <_write_r+0x1e>
 800a9fc:	682b      	ldr	r3, [r5, #0]
 800a9fe:	b103      	cbz	r3, 800aa02 <_write_r+0x1e>
 800aa00:	6023      	str	r3, [r4, #0]
 800aa02:	bd38      	pop	{r3, r4, r5, pc}
 800aa04:	20001d94 	.word	0x20001d94

0800aa08 <__swsetup_r>:
 800aa08:	4b32      	ldr	r3, [pc, #200]	; (800aad4 <__swsetup_r+0xcc>)
 800aa0a:	b570      	push	{r4, r5, r6, lr}
 800aa0c:	681d      	ldr	r5, [r3, #0]
 800aa0e:	4606      	mov	r6, r0
 800aa10:	460c      	mov	r4, r1
 800aa12:	b125      	cbz	r5, 800aa1e <__swsetup_r+0x16>
 800aa14:	69ab      	ldr	r3, [r5, #24]
 800aa16:	b913      	cbnz	r3, 800aa1e <__swsetup_r+0x16>
 800aa18:	4628      	mov	r0, r5
 800aa1a:	f000 f98d 	bl	800ad38 <__sinit>
 800aa1e:	4b2e      	ldr	r3, [pc, #184]	; (800aad8 <__swsetup_r+0xd0>)
 800aa20:	429c      	cmp	r4, r3
 800aa22:	d10f      	bne.n	800aa44 <__swsetup_r+0x3c>
 800aa24:	686c      	ldr	r4, [r5, #4]
 800aa26:	89a3      	ldrh	r3, [r4, #12]
 800aa28:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800aa2c:	0719      	lsls	r1, r3, #28
 800aa2e:	d42c      	bmi.n	800aa8a <__swsetup_r+0x82>
 800aa30:	06dd      	lsls	r5, r3, #27
 800aa32:	d411      	bmi.n	800aa58 <__swsetup_r+0x50>
 800aa34:	2309      	movs	r3, #9
 800aa36:	6033      	str	r3, [r6, #0]
 800aa38:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800aa3c:	81a3      	strh	r3, [r4, #12]
 800aa3e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800aa42:	e03e      	b.n	800aac2 <__swsetup_r+0xba>
 800aa44:	4b25      	ldr	r3, [pc, #148]	; (800aadc <__swsetup_r+0xd4>)
 800aa46:	429c      	cmp	r4, r3
 800aa48:	d101      	bne.n	800aa4e <__swsetup_r+0x46>
 800aa4a:	68ac      	ldr	r4, [r5, #8]
 800aa4c:	e7eb      	b.n	800aa26 <__swsetup_r+0x1e>
 800aa4e:	4b24      	ldr	r3, [pc, #144]	; (800aae0 <__swsetup_r+0xd8>)
 800aa50:	429c      	cmp	r4, r3
 800aa52:	bf08      	it	eq
 800aa54:	68ec      	ldreq	r4, [r5, #12]
 800aa56:	e7e6      	b.n	800aa26 <__swsetup_r+0x1e>
 800aa58:	0758      	lsls	r0, r3, #29
 800aa5a:	d512      	bpl.n	800aa82 <__swsetup_r+0x7a>
 800aa5c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800aa5e:	b141      	cbz	r1, 800aa72 <__swsetup_r+0x6a>
 800aa60:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800aa64:	4299      	cmp	r1, r3
 800aa66:	d002      	beq.n	800aa6e <__swsetup_r+0x66>
 800aa68:	4630      	mov	r0, r6
 800aa6a:	f7fe feeb 	bl	8009844 <_free_r>
 800aa6e:	2300      	movs	r3, #0
 800aa70:	6363      	str	r3, [r4, #52]	; 0x34
 800aa72:	89a3      	ldrh	r3, [r4, #12]
 800aa74:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800aa78:	81a3      	strh	r3, [r4, #12]
 800aa7a:	2300      	movs	r3, #0
 800aa7c:	6063      	str	r3, [r4, #4]
 800aa7e:	6923      	ldr	r3, [r4, #16]
 800aa80:	6023      	str	r3, [r4, #0]
 800aa82:	89a3      	ldrh	r3, [r4, #12]
 800aa84:	f043 0308 	orr.w	r3, r3, #8
 800aa88:	81a3      	strh	r3, [r4, #12]
 800aa8a:	6923      	ldr	r3, [r4, #16]
 800aa8c:	b94b      	cbnz	r3, 800aaa2 <__swsetup_r+0x9a>
 800aa8e:	89a3      	ldrh	r3, [r4, #12]
 800aa90:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800aa94:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800aa98:	d003      	beq.n	800aaa2 <__swsetup_r+0x9a>
 800aa9a:	4621      	mov	r1, r4
 800aa9c:	4630      	mov	r0, r6
 800aa9e:	f000 fd93 	bl	800b5c8 <__smakebuf_r>
 800aaa2:	89a0      	ldrh	r0, [r4, #12]
 800aaa4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800aaa8:	f010 0301 	ands.w	r3, r0, #1
 800aaac:	d00a      	beq.n	800aac4 <__swsetup_r+0xbc>
 800aaae:	2300      	movs	r3, #0
 800aab0:	60a3      	str	r3, [r4, #8]
 800aab2:	6963      	ldr	r3, [r4, #20]
 800aab4:	425b      	negs	r3, r3
 800aab6:	61a3      	str	r3, [r4, #24]
 800aab8:	6923      	ldr	r3, [r4, #16]
 800aaba:	b943      	cbnz	r3, 800aace <__swsetup_r+0xc6>
 800aabc:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800aac0:	d1ba      	bne.n	800aa38 <__swsetup_r+0x30>
 800aac2:	bd70      	pop	{r4, r5, r6, pc}
 800aac4:	0781      	lsls	r1, r0, #30
 800aac6:	bf58      	it	pl
 800aac8:	6963      	ldrpl	r3, [r4, #20]
 800aaca:	60a3      	str	r3, [r4, #8]
 800aacc:	e7f4      	b.n	800aab8 <__swsetup_r+0xb0>
 800aace:	2000      	movs	r0, #0
 800aad0:	e7f7      	b.n	800aac2 <__swsetup_r+0xba>
 800aad2:	bf00      	nop
 800aad4:	200010ac 	.word	0x200010ac
 800aad8:	0800e2a0 	.word	0x0800e2a0
 800aadc:	0800e2c0 	.word	0x0800e2c0
 800aae0:	0800e280 	.word	0x0800e280

0800aae4 <_close_r>:
 800aae4:	b538      	push	{r3, r4, r5, lr}
 800aae6:	4d06      	ldr	r5, [pc, #24]	; (800ab00 <_close_r+0x1c>)
 800aae8:	2300      	movs	r3, #0
 800aaea:	4604      	mov	r4, r0
 800aaec:	4608      	mov	r0, r1
 800aaee:	602b      	str	r3, [r5, #0]
 800aaf0:	f7fa f867 	bl	8004bc2 <_close>
 800aaf4:	1c43      	adds	r3, r0, #1
 800aaf6:	d102      	bne.n	800aafe <_close_r+0x1a>
 800aaf8:	682b      	ldr	r3, [r5, #0]
 800aafa:	b103      	cbz	r3, 800aafe <_close_r+0x1a>
 800aafc:	6023      	str	r3, [r4, #0]
 800aafe:	bd38      	pop	{r3, r4, r5, pc}
 800ab00:	20001d94 	.word	0x20001d94

0800ab04 <__sflush_r>:
 800ab04:	898a      	ldrh	r2, [r1, #12]
 800ab06:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ab0a:	4605      	mov	r5, r0
 800ab0c:	0710      	lsls	r0, r2, #28
 800ab0e:	460c      	mov	r4, r1
 800ab10:	d458      	bmi.n	800abc4 <__sflush_r+0xc0>
 800ab12:	684b      	ldr	r3, [r1, #4]
 800ab14:	2b00      	cmp	r3, #0
 800ab16:	dc05      	bgt.n	800ab24 <__sflush_r+0x20>
 800ab18:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800ab1a:	2b00      	cmp	r3, #0
 800ab1c:	dc02      	bgt.n	800ab24 <__sflush_r+0x20>
 800ab1e:	2000      	movs	r0, #0
 800ab20:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ab24:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800ab26:	2e00      	cmp	r6, #0
 800ab28:	d0f9      	beq.n	800ab1e <__sflush_r+0x1a>
 800ab2a:	2300      	movs	r3, #0
 800ab2c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800ab30:	682f      	ldr	r7, [r5, #0]
 800ab32:	602b      	str	r3, [r5, #0]
 800ab34:	d032      	beq.n	800ab9c <__sflush_r+0x98>
 800ab36:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800ab38:	89a3      	ldrh	r3, [r4, #12]
 800ab3a:	075a      	lsls	r2, r3, #29
 800ab3c:	d505      	bpl.n	800ab4a <__sflush_r+0x46>
 800ab3e:	6863      	ldr	r3, [r4, #4]
 800ab40:	1ac0      	subs	r0, r0, r3
 800ab42:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800ab44:	b10b      	cbz	r3, 800ab4a <__sflush_r+0x46>
 800ab46:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800ab48:	1ac0      	subs	r0, r0, r3
 800ab4a:	2300      	movs	r3, #0
 800ab4c:	4602      	mov	r2, r0
 800ab4e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800ab50:	6a21      	ldr	r1, [r4, #32]
 800ab52:	4628      	mov	r0, r5
 800ab54:	47b0      	blx	r6
 800ab56:	1c43      	adds	r3, r0, #1
 800ab58:	89a3      	ldrh	r3, [r4, #12]
 800ab5a:	d106      	bne.n	800ab6a <__sflush_r+0x66>
 800ab5c:	6829      	ldr	r1, [r5, #0]
 800ab5e:	291d      	cmp	r1, #29
 800ab60:	d82c      	bhi.n	800abbc <__sflush_r+0xb8>
 800ab62:	4a2a      	ldr	r2, [pc, #168]	; (800ac0c <__sflush_r+0x108>)
 800ab64:	40ca      	lsrs	r2, r1
 800ab66:	07d6      	lsls	r6, r2, #31
 800ab68:	d528      	bpl.n	800abbc <__sflush_r+0xb8>
 800ab6a:	2200      	movs	r2, #0
 800ab6c:	6062      	str	r2, [r4, #4]
 800ab6e:	04d9      	lsls	r1, r3, #19
 800ab70:	6922      	ldr	r2, [r4, #16]
 800ab72:	6022      	str	r2, [r4, #0]
 800ab74:	d504      	bpl.n	800ab80 <__sflush_r+0x7c>
 800ab76:	1c42      	adds	r2, r0, #1
 800ab78:	d101      	bne.n	800ab7e <__sflush_r+0x7a>
 800ab7a:	682b      	ldr	r3, [r5, #0]
 800ab7c:	b903      	cbnz	r3, 800ab80 <__sflush_r+0x7c>
 800ab7e:	6560      	str	r0, [r4, #84]	; 0x54
 800ab80:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800ab82:	602f      	str	r7, [r5, #0]
 800ab84:	2900      	cmp	r1, #0
 800ab86:	d0ca      	beq.n	800ab1e <__sflush_r+0x1a>
 800ab88:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800ab8c:	4299      	cmp	r1, r3
 800ab8e:	d002      	beq.n	800ab96 <__sflush_r+0x92>
 800ab90:	4628      	mov	r0, r5
 800ab92:	f7fe fe57 	bl	8009844 <_free_r>
 800ab96:	2000      	movs	r0, #0
 800ab98:	6360      	str	r0, [r4, #52]	; 0x34
 800ab9a:	e7c1      	b.n	800ab20 <__sflush_r+0x1c>
 800ab9c:	6a21      	ldr	r1, [r4, #32]
 800ab9e:	2301      	movs	r3, #1
 800aba0:	4628      	mov	r0, r5
 800aba2:	47b0      	blx	r6
 800aba4:	1c41      	adds	r1, r0, #1
 800aba6:	d1c7      	bne.n	800ab38 <__sflush_r+0x34>
 800aba8:	682b      	ldr	r3, [r5, #0]
 800abaa:	2b00      	cmp	r3, #0
 800abac:	d0c4      	beq.n	800ab38 <__sflush_r+0x34>
 800abae:	2b1d      	cmp	r3, #29
 800abb0:	d001      	beq.n	800abb6 <__sflush_r+0xb2>
 800abb2:	2b16      	cmp	r3, #22
 800abb4:	d101      	bne.n	800abba <__sflush_r+0xb6>
 800abb6:	602f      	str	r7, [r5, #0]
 800abb8:	e7b1      	b.n	800ab1e <__sflush_r+0x1a>
 800abba:	89a3      	ldrh	r3, [r4, #12]
 800abbc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800abc0:	81a3      	strh	r3, [r4, #12]
 800abc2:	e7ad      	b.n	800ab20 <__sflush_r+0x1c>
 800abc4:	690f      	ldr	r7, [r1, #16]
 800abc6:	2f00      	cmp	r7, #0
 800abc8:	d0a9      	beq.n	800ab1e <__sflush_r+0x1a>
 800abca:	0793      	lsls	r3, r2, #30
 800abcc:	680e      	ldr	r6, [r1, #0]
 800abce:	bf08      	it	eq
 800abd0:	694b      	ldreq	r3, [r1, #20]
 800abd2:	600f      	str	r7, [r1, #0]
 800abd4:	bf18      	it	ne
 800abd6:	2300      	movne	r3, #0
 800abd8:	eba6 0807 	sub.w	r8, r6, r7
 800abdc:	608b      	str	r3, [r1, #8]
 800abde:	f1b8 0f00 	cmp.w	r8, #0
 800abe2:	dd9c      	ble.n	800ab1e <__sflush_r+0x1a>
 800abe4:	6a21      	ldr	r1, [r4, #32]
 800abe6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800abe8:	4643      	mov	r3, r8
 800abea:	463a      	mov	r2, r7
 800abec:	4628      	mov	r0, r5
 800abee:	47b0      	blx	r6
 800abf0:	2800      	cmp	r0, #0
 800abf2:	dc06      	bgt.n	800ac02 <__sflush_r+0xfe>
 800abf4:	89a3      	ldrh	r3, [r4, #12]
 800abf6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800abfa:	81a3      	strh	r3, [r4, #12]
 800abfc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800ac00:	e78e      	b.n	800ab20 <__sflush_r+0x1c>
 800ac02:	4407      	add	r7, r0
 800ac04:	eba8 0800 	sub.w	r8, r8, r0
 800ac08:	e7e9      	b.n	800abde <__sflush_r+0xda>
 800ac0a:	bf00      	nop
 800ac0c:	20400001 	.word	0x20400001

0800ac10 <_fflush_r>:
 800ac10:	b538      	push	{r3, r4, r5, lr}
 800ac12:	690b      	ldr	r3, [r1, #16]
 800ac14:	4605      	mov	r5, r0
 800ac16:	460c      	mov	r4, r1
 800ac18:	b913      	cbnz	r3, 800ac20 <_fflush_r+0x10>
 800ac1a:	2500      	movs	r5, #0
 800ac1c:	4628      	mov	r0, r5
 800ac1e:	bd38      	pop	{r3, r4, r5, pc}
 800ac20:	b118      	cbz	r0, 800ac2a <_fflush_r+0x1a>
 800ac22:	6983      	ldr	r3, [r0, #24]
 800ac24:	b90b      	cbnz	r3, 800ac2a <_fflush_r+0x1a>
 800ac26:	f000 f887 	bl	800ad38 <__sinit>
 800ac2a:	4b14      	ldr	r3, [pc, #80]	; (800ac7c <_fflush_r+0x6c>)
 800ac2c:	429c      	cmp	r4, r3
 800ac2e:	d11b      	bne.n	800ac68 <_fflush_r+0x58>
 800ac30:	686c      	ldr	r4, [r5, #4]
 800ac32:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ac36:	2b00      	cmp	r3, #0
 800ac38:	d0ef      	beq.n	800ac1a <_fflush_r+0xa>
 800ac3a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800ac3c:	07d0      	lsls	r0, r2, #31
 800ac3e:	d404      	bmi.n	800ac4a <_fflush_r+0x3a>
 800ac40:	0599      	lsls	r1, r3, #22
 800ac42:	d402      	bmi.n	800ac4a <_fflush_r+0x3a>
 800ac44:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ac46:	f000 fc84 	bl	800b552 <__retarget_lock_acquire_recursive>
 800ac4a:	4628      	mov	r0, r5
 800ac4c:	4621      	mov	r1, r4
 800ac4e:	f7ff ff59 	bl	800ab04 <__sflush_r>
 800ac52:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800ac54:	07da      	lsls	r2, r3, #31
 800ac56:	4605      	mov	r5, r0
 800ac58:	d4e0      	bmi.n	800ac1c <_fflush_r+0xc>
 800ac5a:	89a3      	ldrh	r3, [r4, #12]
 800ac5c:	059b      	lsls	r3, r3, #22
 800ac5e:	d4dd      	bmi.n	800ac1c <_fflush_r+0xc>
 800ac60:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ac62:	f000 fc77 	bl	800b554 <__retarget_lock_release_recursive>
 800ac66:	e7d9      	b.n	800ac1c <_fflush_r+0xc>
 800ac68:	4b05      	ldr	r3, [pc, #20]	; (800ac80 <_fflush_r+0x70>)
 800ac6a:	429c      	cmp	r4, r3
 800ac6c:	d101      	bne.n	800ac72 <_fflush_r+0x62>
 800ac6e:	68ac      	ldr	r4, [r5, #8]
 800ac70:	e7df      	b.n	800ac32 <_fflush_r+0x22>
 800ac72:	4b04      	ldr	r3, [pc, #16]	; (800ac84 <_fflush_r+0x74>)
 800ac74:	429c      	cmp	r4, r3
 800ac76:	bf08      	it	eq
 800ac78:	68ec      	ldreq	r4, [r5, #12]
 800ac7a:	e7da      	b.n	800ac32 <_fflush_r+0x22>
 800ac7c:	0800e2a0 	.word	0x0800e2a0
 800ac80:	0800e2c0 	.word	0x0800e2c0
 800ac84:	0800e280 	.word	0x0800e280

0800ac88 <std>:
 800ac88:	2300      	movs	r3, #0
 800ac8a:	b510      	push	{r4, lr}
 800ac8c:	4604      	mov	r4, r0
 800ac8e:	e9c0 3300 	strd	r3, r3, [r0]
 800ac92:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800ac96:	6083      	str	r3, [r0, #8]
 800ac98:	8181      	strh	r1, [r0, #12]
 800ac9a:	6643      	str	r3, [r0, #100]	; 0x64
 800ac9c:	81c2      	strh	r2, [r0, #14]
 800ac9e:	6183      	str	r3, [r0, #24]
 800aca0:	4619      	mov	r1, r3
 800aca2:	2208      	movs	r2, #8
 800aca4:	305c      	adds	r0, #92	; 0x5c
 800aca6:	f7fe fdc5 	bl	8009834 <memset>
 800acaa:	4b05      	ldr	r3, [pc, #20]	; (800acc0 <std+0x38>)
 800acac:	6263      	str	r3, [r4, #36]	; 0x24
 800acae:	4b05      	ldr	r3, [pc, #20]	; (800acc4 <std+0x3c>)
 800acb0:	62a3      	str	r3, [r4, #40]	; 0x28
 800acb2:	4b05      	ldr	r3, [pc, #20]	; (800acc8 <std+0x40>)
 800acb4:	62e3      	str	r3, [r4, #44]	; 0x2c
 800acb6:	4b05      	ldr	r3, [pc, #20]	; (800accc <std+0x44>)
 800acb8:	6224      	str	r4, [r4, #32]
 800acba:	6323      	str	r3, [r4, #48]	; 0x30
 800acbc:	bd10      	pop	{r4, pc}
 800acbe:	bf00      	nop
 800acc0:	08009ba9 	.word	0x08009ba9
 800acc4:	08009bcf 	.word	0x08009bcf
 800acc8:	08009c07 	.word	0x08009c07
 800accc:	08009c2b 	.word	0x08009c2b

0800acd0 <_cleanup_r>:
 800acd0:	4901      	ldr	r1, [pc, #4]	; (800acd8 <_cleanup_r+0x8>)
 800acd2:	f000 b8af 	b.w	800ae34 <_fwalk_reent>
 800acd6:	bf00      	nop
 800acd8:	0800ac11 	.word	0x0800ac11

0800acdc <__sfmoreglue>:
 800acdc:	b570      	push	{r4, r5, r6, lr}
 800acde:	2268      	movs	r2, #104	; 0x68
 800ace0:	1e4d      	subs	r5, r1, #1
 800ace2:	4355      	muls	r5, r2
 800ace4:	460e      	mov	r6, r1
 800ace6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800acea:	f7fe fe17 	bl	800991c <_malloc_r>
 800acee:	4604      	mov	r4, r0
 800acf0:	b140      	cbz	r0, 800ad04 <__sfmoreglue+0x28>
 800acf2:	2100      	movs	r1, #0
 800acf4:	e9c0 1600 	strd	r1, r6, [r0]
 800acf8:	300c      	adds	r0, #12
 800acfa:	60a0      	str	r0, [r4, #8]
 800acfc:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800ad00:	f7fe fd98 	bl	8009834 <memset>
 800ad04:	4620      	mov	r0, r4
 800ad06:	bd70      	pop	{r4, r5, r6, pc}

0800ad08 <__sfp_lock_acquire>:
 800ad08:	4801      	ldr	r0, [pc, #4]	; (800ad10 <__sfp_lock_acquire+0x8>)
 800ad0a:	f000 bc22 	b.w	800b552 <__retarget_lock_acquire_recursive>
 800ad0e:	bf00      	nop
 800ad10:	20001d91 	.word	0x20001d91

0800ad14 <__sfp_lock_release>:
 800ad14:	4801      	ldr	r0, [pc, #4]	; (800ad1c <__sfp_lock_release+0x8>)
 800ad16:	f000 bc1d 	b.w	800b554 <__retarget_lock_release_recursive>
 800ad1a:	bf00      	nop
 800ad1c:	20001d91 	.word	0x20001d91

0800ad20 <__sinit_lock_acquire>:
 800ad20:	4801      	ldr	r0, [pc, #4]	; (800ad28 <__sinit_lock_acquire+0x8>)
 800ad22:	f000 bc16 	b.w	800b552 <__retarget_lock_acquire_recursive>
 800ad26:	bf00      	nop
 800ad28:	20001d92 	.word	0x20001d92

0800ad2c <__sinit_lock_release>:
 800ad2c:	4801      	ldr	r0, [pc, #4]	; (800ad34 <__sinit_lock_release+0x8>)
 800ad2e:	f000 bc11 	b.w	800b554 <__retarget_lock_release_recursive>
 800ad32:	bf00      	nop
 800ad34:	20001d92 	.word	0x20001d92

0800ad38 <__sinit>:
 800ad38:	b510      	push	{r4, lr}
 800ad3a:	4604      	mov	r4, r0
 800ad3c:	f7ff fff0 	bl	800ad20 <__sinit_lock_acquire>
 800ad40:	69a3      	ldr	r3, [r4, #24]
 800ad42:	b11b      	cbz	r3, 800ad4c <__sinit+0x14>
 800ad44:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ad48:	f7ff bff0 	b.w	800ad2c <__sinit_lock_release>
 800ad4c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800ad50:	6523      	str	r3, [r4, #80]	; 0x50
 800ad52:	4b13      	ldr	r3, [pc, #76]	; (800ada0 <__sinit+0x68>)
 800ad54:	4a13      	ldr	r2, [pc, #76]	; (800ada4 <__sinit+0x6c>)
 800ad56:	681b      	ldr	r3, [r3, #0]
 800ad58:	62a2      	str	r2, [r4, #40]	; 0x28
 800ad5a:	42a3      	cmp	r3, r4
 800ad5c:	bf04      	itt	eq
 800ad5e:	2301      	moveq	r3, #1
 800ad60:	61a3      	streq	r3, [r4, #24]
 800ad62:	4620      	mov	r0, r4
 800ad64:	f000 f820 	bl	800ada8 <__sfp>
 800ad68:	6060      	str	r0, [r4, #4]
 800ad6a:	4620      	mov	r0, r4
 800ad6c:	f000 f81c 	bl	800ada8 <__sfp>
 800ad70:	60a0      	str	r0, [r4, #8]
 800ad72:	4620      	mov	r0, r4
 800ad74:	f000 f818 	bl	800ada8 <__sfp>
 800ad78:	2200      	movs	r2, #0
 800ad7a:	60e0      	str	r0, [r4, #12]
 800ad7c:	2104      	movs	r1, #4
 800ad7e:	6860      	ldr	r0, [r4, #4]
 800ad80:	f7ff ff82 	bl	800ac88 <std>
 800ad84:	68a0      	ldr	r0, [r4, #8]
 800ad86:	2201      	movs	r2, #1
 800ad88:	2109      	movs	r1, #9
 800ad8a:	f7ff ff7d 	bl	800ac88 <std>
 800ad8e:	68e0      	ldr	r0, [r4, #12]
 800ad90:	2202      	movs	r2, #2
 800ad92:	2112      	movs	r1, #18
 800ad94:	f7ff ff78 	bl	800ac88 <std>
 800ad98:	2301      	movs	r3, #1
 800ad9a:	61a3      	str	r3, [r4, #24]
 800ad9c:	e7d2      	b.n	800ad44 <__sinit+0xc>
 800ad9e:	bf00      	nop
 800ada0:	0800e21c 	.word	0x0800e21c
 800ada4:	0800acd1 	.word	0x0800acd1

0800ada8 <__sfp>:
 800ada8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800adaa:	4607      	mov	r7, r0
 800adac:	f7ff ffac 	bl	800ad08 <__sfp_lock_acquire>
 800adb0:	4b1e      	ldr	r3, [pc, #120]	; (800ae2c <__sfp+0x84>)
 800adb2:	681e      	ldr	r6, [r3, #0]
 800adb4:	69b3      	ldr	r3, [r6, #24]
 800adb6:	b913      	cbnz	r3, 800adbe <__sfp+0x16>
 800adb8:	4630      	mov	r0, r6
 800adba:	f7ff ffbd 	bl	800ad38 <__sinit>
 800adbe:	3648      	adds	r6, #72	; 0x48
 800adc0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800adc4:	3b01      	subs	r3, #1
 800adc6:	d503      	bpl.n	800add0 <__sfp+0x28>
 800adc8:	6833      	ldr	r3, [r6, #0]
 800adca:	b30b      	cbz	r3, 800ae10 <__sfp+0x68>
 800adcc:	6836      	ldr	r6, [r6, #0]
 800adce:	e7f7      	b.n	800adc0 <__sfp+0x18>
 800add0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800add4:	b9d5      	cbnz	r5, 800ae0c <__sfp+0x64>
 800add6:	4b16      	ldr	r3, [pc, #88]	; (800ae30 <__sfp+0x88>)
 800add8:	60e3      	str	r3, [r4, #12]
 800adda:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800adde:	6665      	str	r5, [r4, #100]	; 0x64
 800ade0:	f000 fbb6 	bl	800b550 <__retarget_lock_init_recursive>
 800ade4:	f7ff ff96 	bl	800ad14 <__sfp_lock_release>
 800ade8:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800adec:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800adf0:	6025      	str	r5, [r4, #0]
 800adf2:	61a5      	str	r5, [r4, #24]
 800adf4:	2208      	movs	r2, #8
 800adf6:	4629      	mov	r1, r5
 800adf8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800adfc:	f7fe fd1a 	bl	8009834 <memset>
 800ae00:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800ae04:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800ae08:	4620      	mov	r0, r4
 800ae0a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ae0c:	3468      	adds	r4, #104	; 0x68
 800ae0e:	e7d9      	b.n	800adc4 <__sfp+0x1c>
 800ae10:	2104      	movs	r1, #4
 800ae12:	4638      	mov	r0, r7
 800ae14:	f7ff ff62 	bl	800acdc <__sfmoreglue>
 800ae18:	4604      	mov	r4, r0
 800ae1a:	6030      	str	r0, [r6, #0]
 800ae1c:	2800      	cmp	r0, #0
 800ae1e:	d1d5      	bne.n	800adcc <__sfp+0x24>
 800ae20:	f7ff ff78 	bl	800ad14 <__sfp_lock_release>
 800ae24:	230c      	movs	r3, #12
 800ae26:	603b      	str	r3, [r7, #0]
 800ae28:	e7ee      	b.n	800ae08 <__sfp+0x60>
 800ae2a:	bf00      	nop
 800ae2c:	0800e21c 	.word	0x0800e21c
 800ae30:	ffff0001 	.word	0xffff0001

0800ae34 <_fwalk_reent>:
 800ae34:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ae38:	4606      	mov	r6, r0
 800ae3a:	4688      	mov	r8, r1
 800ae3c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800ae40:	2700      	movs	r7, #0
 800ae42:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800ae46:	f1b9 0901 	subs.w	r9, r9, #1
 800ae4a:	d505      	bpl.n	800ae58 <_fwalk_reent+0x24>
 800ae4c:	6824      	ldr	r4, [r4, #0]
 800ae4e:	2c00      	cmp	r4, #0
 800ae50:	d1f7      	bne.n	800ae42 <_fwalk_reent+0xe>
 800ae52:	4638      	mov	r0, r7
 800ae54:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ae58:	89ab      	ldrh	r3, [r5, #12]
 800ae5a:	2b01      	cmp	r3, #1
 800ae5c:	d907      	bls.n	800ae6e <_fwalk_reent+0x3a>
 800ae5e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800ae62:	3301      	adds	r3, #1
 800ae64:	d003      	beq.n	800ae6e <_fwalk_reent+0x3a>
 800ae66:	4629      	mov	r1, r5
 800ae68:	4630      	mov	r0, r6
 800ae6a:	47c0      	blx	r8
 800ae6c:	4307      	orrs	r7, r0
 800ae6e:	3568      	adds	r5, #104	; 0x68
 800ae70:	e7e9      	b.n	800ae46 <_fwalk_reent+0x12>

0800ae72 <rshift>:
 800ae72:	6903      	ldr	r3, [r0, #16]
 800ae74:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800ae78:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800ae7c:	ea4f 1261 	mov.w	r2, r1, asr #5
 800ae80:	f100 0414 	add.w	r4, r0, #20
 800ae84:	dd45      	ble.n	800af12 <rshift+0xa0>
 800ae86:	f011 011f 	ands.w	r1, r1, #31
 800ae8a:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800ae8e:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800ae92:	d10c      	bne.n	800aeae <rshift+0x3c>
 800ae94:	f100 0710 	add.w	r7, r0, #16
 800ae98:	4629      	mov	r1, r5
 800ae9a:	42b1      	cmp	r1, r6
 800ae9c:	d334      	bcc.n	800af08 <rshift+0x96>
 800ae9e:	1a9b      	subs	r3, r3, r2
 800aea0:	009b      	lsls	r3, r3, #2
 800aea2:	1eea      	subs	r2, r5, #3
 800aea4:	4296      	cmp	r6, r2
 800aea6:	bf38      	it	cc
 800aea8:	2300      	movcc	r3, #0
 800aeaa:	4423      	add	r3, r4
 800aeac:	e015      	b.n	800aeda <rshift+0x68>
 800aeae:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800aeb2:	f1c1 0820 	rsb	r8, r1, #32
 800aeb6:	40cf      	lsrs	r7, r1
 800aeb8:	f105 0e04 	add.w	lr, r5, #4
 800aebc:	46a1      	mov	r9, r4
 800aebe:	4576      	cmp	r6, lr
 800aec0:	46f4      	mov	ip, lr
 800aec2:	d815      	bhi.n	800aef0 <rshift+0x7e>
 800aec4:	1a9a      	subs	r2, r3, r2
 800aec6:	0092      	lsls	r2, r2, #2
 800aec8:	3a04      	subs	r2, #4
 800aeca:	3501      	adds	r5, #1
 800aecc:	42ae      	cmp	r6, r5
 800aece:	bf38      	it	cc
 800aed0:	2200      	movcc	r2, #0
 800aed2:	18a3      	adds	r3, r4, r2
 800aed4:	50a7      	str	r7, [r4, r2]
 800aed6:	b107      	cbz	r7, 800aeda <rshift+0x68>
 800aed8:	3304      	adds	r3, #4
 800aeda:	1b1a      	subs	r2, r3, r4
 800aedc:	42a3      	cmp	r3, r4
 800aede:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800aee2:	bf08      	it	eq
 800aee4:	2300      	moveq	r3, #0
 800aee6:	6102      	str	r2, [r0, #16]
 800aee8:	bf08      	it	eq
 800aeea:	6143      	streq	r3, [r0, #20]
 800aeec:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800aef0:	f8dc c000 	ldr.w	ip, [ip]
 800aef4:	fa0c fc08 	lsl.w	ip, ip, r8
 800aef8:	ea4c 0707 	orr.w	r7, ip, r7
 800aefc:	f849 7b04 	str.w	r7, [r9], #4
 800af00:	f85e 7b04 	ldr.w	r7, [lr], #4
 800af04:	40cf      	lsrs	r7, r1
 800af06:	e7da      	b.n	800aebe <rshift+0x4c>
 800af08:	f851 cb04 	ldr.w	ip, [r1], #4
 800af0c:	f847 cf04 	str.w	ip, [r7, #4]!
 800af10:	e7c3      	b.n	800ae9a <rshift+0x28>
 800af12:	4623      	mov	r3, r4
 800af14:	e7e1      	b.n	800aeda <rshift+0x68>

0800af16 <__hexdig_fun>:
 800af16:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800af1a:	2b09      	cmp	r3, #9
 800af1c:	d802      	bhi.n	800af24 <__hexdig_fun+0xe>
 800af1e:	3820      	subs	r0, #32
 800af20:	b2c0      	uxtb	r0, r0
 800af22:	4770      	bx	lr
 800af24:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800af28:	2b05      	cmp	r3, #5
 800af2a:	d801      	bhi.n	800af30 <__hexdig_fun+0x1a>
 800af2c:	3847      	subs	r0, #71	; 0x47
 800af2e:	e7f7      	b.n	800af20 <__hexdig_fun+0xa>
 800af30:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800af34:	2b05      	cmp	r3, #5
 800af36:	d801      	bhi.n	800af3c <__hexdig_fun+0x26>
 800af38:	3827      	subs	r0, #39	; 0x27
 800af3a:	e7f1      	b.n	800af20 <__hexdig_fun+0xa>
 800af3c:	2000      	movs	r0, #0
 800af3e:	4770      	bx	lr

0800af40 <__gethex>:
 800af40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800af44:	ed2d 8b02 	vpush	{d8}
 800af48:	b089      	sub	sp, #36	; 0x24
 800af4a:	ee08 0a10 	vmov	s16, r0
 800af4e:	9304      	str	r3, [sp, #16]
 800af50:	4bb4      	ldr	r3, [pc, #720]	; (800b224 <__gethex+0x2e4>)
 800af52:	681b      	ldr	r3, [r3, #0]
 800af54:	9301      	str	r3, [sp, #4]
 800af56:	4618      	mov	r0, r3
 800af58:	468b      	mov	fp, r1
 800af5a:	4690      	mov	r8, r2
 800af5c:	f7f5 f942 	bl	80001e4 <strlen>
 800af60:	9b01      	ldr	r3, [sp, #4]
 800af62:	f8db 2000 	ldr.w	r2, [fp]
 800af66:	4403      	add	r3, r0
 800af68:	4682      	mov	sl, r0
 800af6a:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800af6e:	9305      	str	r3, [sp, #20]
 800af70:	1c93      	adds	r3, r2, #2
 800af72:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800af76:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800af7a:	32fe      	adds	r2, #254	; 0xfe
 800af7c:	18d1      	adds	r1, r2, r3
 800af7e:	461f      	mov	r7, r3
 800af80:	f813 0b01 	ldrb.w	r0, [r3], #1
 800af84:	9100      	str	r1, [sp, #0]
 800af86:	2830      	cmp	r0, #48	; 0x30
 800af88:	d0f8      	beq.n	800af7c <__gethex+0x3c>
 800af8a:	f7ff ffc4 	bl	800af16 <__hexdig_fun>
 800af8e:	4604      	mov	r4, r0
 800af90:	2800      	cmp	r0, #0
 800af92:	d13a      	bne.n	800b00a <__gethex+0xca>
 800af94:	9901      	ldr	r1, [sp, #4]
 800af96:	4652      	mov	r2, sl
 800af98:	4638      	mov	r0, r7
 800af9a:	f7fe fe52 	bl	8009c42 <strncmp>
 800af9e:	4605      	mov	r5, r0
 800afa0:	2800      	cmp	r0, #0
 800afa2:	d168      	bne.n	800b076 <__gethex+0x136>
 800afa4:	f817 000a 	ldrb.w	r0, [r7, sl]
 800afa8:	eb07 060a 	add.w	r6, r7, sl
 800afac:	f7ff ffb3 	bl	800af16 <__hexdig_fun>
 800afb0:	2800      	cmp	r0, #0
 800afb2:	d062      	beq.n	800b07a <__gethex+0x13a>
 800afb4:	4633      	mov	r3, r6
 800afb6:	7818      	ldrb	r0, [r3, #0]
 800afb8:	2830      	cmp	r0, #48	; 0x30
 800afba:	461f      	mov	r7, r3
 800afbc:	f103 0301 	add.w	r3, r3, #1
 800afc0:	d0f9      	beq.n	800afb6 <__gethex+0x76>
 800afc2:	f7ff ffa8 	bl	800af16 <__hexdig_fun>
 800afc6:	2301      	movs	r3, #1
 800afc8:	fab0 f480 	clz	r4, r0
 800afcc:	0964      	lsrs	r4, r4, #5
 800afce:	4635      	mov	r5, r6
 800afd0:	9300      	str	r3, [sp, #0]
 800afd2:	463a      	mov	r2, r7
 800afd4:	4616      	mov	r6, r2
 800afd6:	3201      	adds	r2, #1
 800afd8:	7830      	ldrb	r0, [r6, #0]
 800afda:	f7ff ff9c 	bl	800af16 <__hexdig_fun>
 800afde:	2800      	cmp	r0, #0
 800afe0:	d1f8      	bne.n	800afd4 <__gethex+0x94>
 800afe2:	9901      	ldr	r1, [sp, #4]
 800afe4:	4652      	mov	r2, sl
 800afe6:	4630      	mov	r0, r6
 800afe8:	f7fe fe2b 	bl	8009c42 <strncmp>
 800afec:	b980      	cbnz	r0, 800b010 <__gethex+0xd0>
 800afee:	b94d      	cbnz	r5, 800b004 <__gethex+0xc4>
 800aff0:	eb06 050a 	add.w	r5, r6, sl
 800aff4:	462a      	mov	r2, r5
 800aff6:	4616      	mov	r6, r2
 800aff8:	3201      	adds	r2, #1
 800affa:	7830      	ldrb	r0, [r6, #0]
 800affc:	f7ff ff8b 	bl	800af16 <__hexdig_fun>
 800b000:	2800      	cmp	r0, #0
 800b002:	d1f8      	bne.n	800aff6 <__gethex+0xb6>
 800b004:	1bad      	subs	r5, r5, r6
 800b006:	00ad      	lsls	r5, r5, #2
 800b008:	e004      	b.n	800b014 <__gethex+0xd4>
 800b00a:	2400      	movs	r4, #0
 800b00c:	4625      	mov	r5, r4
 800b00e:	e7e0      	b.n	800afd2 <__gethex+0x92>
 800b010:	2d00      	cmp	r5, #0
 800b012:	d1f7      	bne.n	800b004 <__gethex+0xc4>
 800b014:	7833      	ldrb	r3, [r6, #0]
 800b016:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800b01a:	2b50      	cmp	r3, #80	; 0x50
 800b01c:	d13b      	bne.n	800b096 <__gethex+0x156>
 800b01e:	7873      	ldrb	r3, [r6, #1]
 800b020:	2b2b      	cmp	r3, #43	; 0x2b
 800b022:	d02c      	beq.n	800b07e <__gethex+0x13e>
 800b024:	2b2d      	cmp	r3, #45	; 0x2d
 800b026:	d02e      	beq.n	800b086 <__gethex+0x146>
 800b028:	1c71      	adds	r1, r6, #1
 800b02a:	f04f 0900 	mov.w	r9, #0
 800b02e:	7808      	ldrb	r0, [r1, #0]
 800b030:	f7ff ff71 	bl	800af16 <__hexdig_fun>
 800b034:	1e43      	subs	r3, r0, #1
 800b036:	b2db      	uxtb	r3, r3
 800b038:	2b18      	cmp	r3, #24
 800b03a:	d82c      	bhi.n	800b096 <__gethex+0x156>
 800b03c:	f1a0 0210 	sub.w	r2, r0, #16
 800b040:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800b044:	f7ff ff67 	bl	800af16 <__hexdig_fun>
 800b048:	1e43      	subs	r3, r0, #1
 800b04a:	b2db      	uxtb	r3, r3
 800b04c:	2b18      	cmp	r3, #24
 800b04e:	d91d      	bls.n	800b08c <__gethex+0x14c>
 800b050:	f1b9 0f00 	cmp.w	r9, #0
 800b054:	d000      	beq.n	800b058 <__gethex+0x118>
 800b056:	4252      	negs	r2, r2
 800b058:	4415      	add	r5, r2
 800b05a:	f8cb 1000 	str.w	r1, [fp]
 800b05e:	b1e4      	cbz	r4, 800b09a <__gethex+0x15a>
 800b060:	9b00      	ldr	r3, [sp, #0]
 800b062:	2b00      	cmp	r3, #0
 800b064:	bf14      	ite	ne
 800b066:	2700      	movne	r7, #0
 800b068:	2706      	moveq	r7, #6
 800b06a:	4638      	mov	r0, r7
 800b06c:	b009      	add	sp, #36	; 0x24
 800b06e:	ecbd 8b02 	vpop	{d8}
 800b072:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b076:	463e      	mov	r6, r7
 800b078:	4625      	mov	r5, r4
 800b07a:	2401      	movs	r4, #1
 800b07c:	e7ca      	b.n	800b014 <__gethex+0xd4>
 800b07e:	f04f 0900 	mov.w	r9, #0
 800b082:	1cb1      	adds	r1, r6, #2
 800b084:	e7d3      	b.n	800b02e <__gethex+0xee>
 800b086:	f04f 0901 	mov.w	r9, #1
 800b08a:	e7fa      	b.n	800b082 <__gethex+0x142>
 800b08c:	230a      	movs	r3, #10
 800b08e:	fb03 0202 	mla	r2, r3, r2, r0
 800b092:	3a10      	subs	r2, #16
 800b094:	e7d4      	b.n	800b040 <__gethex+0x100>
 800b096:	4631      	mov	r1, r6
 800b098:	e7df      	b.n	800b05a <__gethex+0x11a>
 800b09a:	1bf3      	subs	r3, r6, r7
 800b09c:	3b01      	subs	r3, #1
 800b09e:	4621      	mov	r1, r4
 800b0a0:	2b07      	cmp	r3, #7
 800b0a2:	dc0b      	bgt.n	800b0bc <__gethex+0x17c>
 800b0a4:	ee18 0a10 	vmov	r0, s16
 800b0a8:	f000 faec 	bl	800b684 <_Balloc>
 800b0ac:	4604      	mov	r4, r0
 800b0ae:	b940      	cbnz	r0, 800b0c2 <__gethex+0x182>
 800b0b0:	4b5d      	ldr	r3, [pc, #372]	; (800b228 <__gethex+0x2e8>)
 800b0b2:	4602      	mov	r2, r0
 800b0b4:	21de      	movs	r1, #222	; 0xde
 800b0b6:	485d      	ldr	r0, [pc, #372]	; (800b22c <__gethex+0x2ec>)
 800b0b8:	f002 f8ea 	bl	800d290 <__assert_func>
 800b0bc:	3101      	adds	r1, #1
 800b0be:	105b      	asrs	r3, r3, #1
 800b0c0:	e7ee      	b.n	800b0a0 <__gethex+0x160>
 800b0c2:	f100 0914 	add.w	r9, r0, #20
 800b0c6:	f04f 0b00 	mov.w	fp, #0
 800b0ca:	f1ca 0301 	rsb	r3, sl, #1
 800b0ce:	f8cd 9008 	str.w	r9, [sp, #8]
 800b0d2:	f8cd b000 	str.w	fp, [sp]
 800b0d6:	9306      	str	r3, [sp, #24]
 800b0d8:	42b7      	cmp	r7, r6
 800b0da:	d340      	bcc.n	800b15e <__gethex+0x21e>
 800b0dc:	9802      	ldr	r0, [sp, #8]
 800b0de:	9b00      	ldr	r3, [sp, #0]
 800b0e0:	f840 3b04 	str.w	r3, [r0], #4
 800b0e4:	eba0 0009 	sub.w	r0, r0, r9
 800b0e8:	1080      	asrs	r0, r0, #2
 800b0ea:	0146      	lsls	r6, r0, #5
 800b0ec:	6120      	str	r0, [r4, #16]
 800b0ee:	4618      	mov	r0, r3
 800b0f0:	f000 fbba 	bl	800b868 <__hi0bits>
 800b0f4:	1a30      	subs	r0, r6, r0
 800b0f6:	f8d8 6000 	ldr.w	r6, [r8]
 800b0fa:	42b0      	cmp	r0, r6
 800b0fc:	dd63      	ble.n	800b1c6 <__gethex+0x286>
 800b0fe:	1b87      	subs	r7, r0, r6
 800b100:	4639      	mov	r1, r7
 800b102:	4620      	mov	r0, r4
 800b104:	f000 ff5e 	bl	800bfc4 <__any_on>
 800b108:	4682      	mov	sl, r0
 800b10a:	b1a8      	cbz	r0, 800b138 <__gethex+0x1f8>
 800b10c:	1e7b      	subs	r3, r7, #1
 800b10e:	1159      	asrs	r1, r3, #5
 800b110:	f003 021f 	and.w	r2, r3, #31
 800b114:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 800b118:	f04f 0a01 	mov.w	sl, #1
 800b11c:	fa0a f202 	lsl.w	r2, sl, r2
 800b120:	420a      	tst	r2, r1
 800b122:	d009      	beq.n	800b138 <__gethex+0x1f8>
 800b124:	4553      	cmp	r3, sl
 800b126:	dd05      	ble.n	800b134 <__gethex+0x1f4>
 800b128:	1eb9      	subs	r1, r7, #2
 800b12a:	4620      	mov	r0, r4
 800b12c:	f000 ff4a 	bl	800bfc4 <__any_on>
 800b130:	2800      	cmp	r0, #0
 800b132:	d145      	bne.n	800b1c0 <__gethex+0x280>
 800b134:	f04f 0a02 	mov.w	sl, #2
 800b138:	4639      	mov	r1, r7
 800b13a:	4620      	mov	r0, r4
 800b13c:	f7ff fe99 	bl	800ae72 <rshift>
 800b140:	443d      	add	r5, r7
 800b142:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800b146:	42ab      	cmp	r3, r5
 800b148:	da4c      	bge.n	800b1e4 <__gethex+0x2a4>
 800b14a:	ee18 0a10 	vmov	r0, s16
 800b14e:	4621      	mov	r1, r4
 800b150:	f000 fad8 	bl	800b704 <_Bfree>
 800b154:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800b156:	2300      	movs	r3, #0
 800b158:	6013      	str	r3, [r2, #0]
 800b15a:	27a3      	movs	r7, #163	; 0xa3
 800b15c:	e785      	b.n	800b06a <__gethex+0x12a>
 800b15e:	1e73      	subs	r3, r6, #1
 800b160:	9a05      	ldr	r2, [sp, #20]
 800b162:	9303      	str	r3, [sp, #12]
 800b164:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800b168:	4293      	cmp	r3, r2
 800b16a:	d019      	beq.n	800b1a0 <__gethex+0x260>
 800b16c:	f1bb 0f20 	cmp.w	fp, #32
 800b170:	d107      	bne.n	800b182 <__gethex+0x242>
 800b172:	9b02      	ldr	r3, [sp, #8]
 800b174:	9a00      	ldr	r2, [sp, #0]
 800b176:	f843 2b04 	str.w	r2, [r3], #4
 800b17a:	9302      	str	r3, [sp, #8]
 800b17c:	2300      	movs	r3, #0
 800b17e:	9300      	str	r3, [sp, #0]
 800b180:	469b      	mov	fp, r3
 800b182:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800b186:	f7ff fec6 	bl	800af16 <__hexdig_fun>
 800b18a:	9b00      	ldr	r3, [sp, #0]
 800b18c:	f000 000f 	and.w	r0, r0, #15
 800b190:	fa00 f00b 	lsl.w	r0, r0, fp
 800b194:	4303      	orrs	r3, r0
 800b196:	9300      	str	r3, [sp, #0]
 800b198:	f10b 0b04 	add.w	fp, fp, #4
 800b19c:	9b03      	ldr	r3, [sp, #12]
 800b19e:	e00d      	b.n	800b1bc <__gethex+0x27c>
 800b1a0:	9b03      	ldr	r3, [sp, #12]
 800b1a2:	9a06      	ldr	r2, [sp, #24]
 800b1a4:	4413      	add	r3, r2
 800b1a6:	42bb      	cmp	r3, r7
 800b1a8:	d3e0      	bcc.n	800b16c <__gethex+0x22c>
 800b1aa:	4618      	mov	r0, r3
 800b1ac:	9901      	ldr	r1, [sp, #4]
 800b1ae:	9307      	str	r3, [sp, #28]
 800b1b0:	4652      	mov	r2, sl
 800b1b2:	f7fe fd46 	bl	8009c42 <strncmp>
 800b1b6:	9b07      	ldr	r3, [sp, #28]
 800b1b8:	2800      	cmp	r0, #0
 800b1ba:	d1d7      	bne.n	800b16c <__gethex+0x22c>
 800b1bc:	461e      	mov	r6, r3
 800b1be:	e78b      	b.n	800b0d8 <__gethex+0x198>
 800b1c0:	f04f 0a03 	mov.w	sl, #3
 800b1c4:	e7b8      	b.n	800b138 <__gethex+0x1f8>
 800b1c6:	da0a      	bge.n	800b1de <__gethex+0x29e>
 800b1c8:	1a37      	subs	r7, r6, r0
 800b1ca:	4621      	mov	r1, r4
 800b1cc:	ee18 0a10 	vmov	r0, s16
 800b1d0:	463a      	mov	r2, r7
 800b1d2:	f000 fcb3 	bl	800bb3c <__lshift>
 800b1d6:	1bed      	subs	r5, r5, r7
 800b1d8:	4604      	mov	r4, r0
 800b1da:	f100 0914 	add.w	r9, r0, #20
 800b1de:	f04f 0a00 	mov.w	sl, #0
 800b1e2:	e7ae      	b.n	800b142 <__gethex+0x202>
 800b1e4:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800b1e8:	42a8      	cmp	r0, r5
 800b1ea:	dd72      	ble.n	800b2d2 <__gethex+0x392>
 800b1ec:	1b45      	subs	r5, r0, r5
 800b1ee:	42ae      	cmp	r6, r5
 800b1f0:	dc36      	bgt.n	800b260 <__gethex+0x320>
 800b1f2:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800b1f6:	2b02      	cmp	r3, #2
 800b1f8:	d02a      	beq.n	800b250 <__gethex+0x310>
 800b1fa:	2b03      	cmp	r3, #3
 800b1fc:	d02c      	beq.n	800b258 <__gethex+0x318>
 800b1fe:	2b01      	cmp	r3, #1
 800b200:	d11c      	bne.n	800b23c <__gethex+0x2fc>
 800b202:	42ae      	cmp	r6, r5
 800b204:	d11a      	bne.n	800b23c <__gethex+0x2fc>
 800b206:	2e01      	cmp	r6, #1
 800b208:	d112      	bne.n	800b230 <__gethex+0x2f0>
 800b20a:	9a04      	ldr	r2, [sp, #16]
 800b20c:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800b210:	6013      	str	r3, [r2, #0]
 800b212:	2301      	movs	r3, #1
 800b214:	6123      	str	r3, [r4, #16]
 800b216:	f8c9 3000 	str.w	r3, [r9]
 800b21a:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800b21c:	2762      	movs	r7, #98	; 0x62
 800b21e:	601c      	str	r4, [r3, #0]
 800b220:	e723      	b.n	800b06a <__gethex+0x12a>
 800b222:	bf00      	nop
 800b224:	0800e358 	.word	0x0800e358
 800b228:	0800e2e0 	.word	0x0800e2e0
 800b22c:	0800e2f1 	.word	0x0800e2f1
 800b230:	1e71      	subs	r1, r6, #1
 800b232:	4620      	mov	r0, r4
 800b234:	f000 fec6 	bl	800bfc4 <__any_on>
 800b238:	2800      	cmp	r0, #0
 800b23a:	d1e6      	bne.n	800b20a <__gethex+0x2ca>
 800b23c:	ee18 0a10 	vmov	r0, s16
 800b240:	4621      	mov	r1, r4
 800b242:	f000 fa5f 	bl	800b704 <_Bfree>
 800b246:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800b248:	2300      	movs	r3, #0
 800b24a:	6013      	str	r3, [r2, #0]
 800b24c:	2750      	movs	r7, #80	; 0x50
 800b24e:	e70c      	b.n	800b06a <__gethex+0x12a>
 800b250:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800b252:	2b00      	cmp	r3, #0
 800b254:	d1f2      	bne.n	800b23c <__gethex+0x2fc>
 800b256:	e7d8      	b.n	800b20a <__gethex+0x2ca>
 800b258:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800b25a:	2b00      	cmp	r3, #0
 800b25c:	d1d5      	bne.n	800b20a <__gethex+0x2ca>
 800b25e:	e7ed      	b.n	800b23c <__gethex+0x2fc>
 800b260:	1e6f      	subs	r7, r5, #1
 800b262:	f1ba 0f00 	cmp.w	sl, #0
 800b266:	d131      	bne.n	800b2cc <__gethex+0x38c>
 800b268:	b127      	cbz	r7, 800b274 <__gethex+0x334>
 800b26a:	4639      	mov	r1, r7
 800b26c:	4620      	mov	r0, r4
 800b26e:	f000 fea9 	bl	800bfc4 <__any_on>
 800b272:	4682      	mov	sl, r0
 800b274:	117b      	asrs	r3, r7, #5
 800b276:	2101      	movs	r1, #1
 800b278:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 800b27c:	f007 071f 	and.w	r7, r7, #31
 800b280:	fa01 f707 	lsl.w	r7, r1, r7
 800b284:	421f      	tst	r7, r3
 800b286:	4629      	mov	r1, r5
 800b288:	4620      	mov	r0, r4
 800b28a:	bf18      	it	ne
 800b28c:	f04a 0a02 	orrne.w	sl, sl, #2
 800b290:	1b76      	subs	r6, r6, r5
 800b292:	f7ff fdee 	bl	800ae72 <rshift>
 800b296:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800b29a:	2702      	movs	r7, #2
 800b29c:	f1ba 0f00 	cmp.w	sl, #0
 800b2a0:	d048      	beq.n	800b334 <__gethex+0x3f4>
 800b2a2:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800b2a6:	2b02      	cmp	r3, #2
 800b2a8:	d015      	beq.n	800b2d6 <__gethex+0x396>
 800b2aa:	2b03      	cmp	r3, #3
 800b2ac:	d017      	beq.n	800b2de <__gethex+0x39e>
 800b2ae:	2b01      	cmp	r3, #1
 800b2b0:	d109      	bne.n	800b2c6 <__gethex+0x386>
 800b2b2:	f01a 0f02 	tst.w	sl, #2
 800b2b6:	d006      	beq.n	800b2c6 <__gethex+0x386>
 800b2b8:	f8d9 0000 	ldr.w	r0, [r9]
 800b2bc:	ea4a 0a00 	orr.w	sl, sl, r0
 800b2c0:	f01a 0f01 	tst.w	sl, #1
 800b2c4:	d10e      	bne.n	800b2e4 <__gethex+0x3a4>
 800b2c6:	f047 0710 	orr.w	r7, r7, #16
 800b2ca:	e033      	b.n	800b334 <__gethex+0x3f4>
 800b2cc:	f04f 0a01 	mov.w	sl, #1
 800b2d0:	e7d0      	b.n	800b274 <__gethex+0x334>
 800b2d2:	2701      	movs	r7, #1
 800b2d4:	e7e2      	b.n	800b29c <__gethex+0x35c>
 800b2d6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800b2d8:	f1c3 0301 	rsb	r3, r3, #1
 800b2dc:	9315      	str	r3, [sp, #84]	; 0x54
 800b2de:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800b2e0:	2b00      	cmp	r3, #0
 800b2e2:	d0f0      	beq.n	800b2c6 <__gethex+0x386>
 800b2e4:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800b2e8:	f104 0314 	add.w	r3, r4, #20
 800b2ec:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800b2f0:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800b2f4:	f04f 0c00 	mov.w	ip, #0
 800b2f8:	4618      	mov	r0, r3
 800b2fa:	f853 2b04 	ldr.w	r2, [r3], #4
 800b2fe:	f1b2 3fff 	cmp.w	r2, #4294967295	; 0xffffffff
 800b302:	d01c      	beq.n	800b33e <__gethex+0x3fe>
 800b304:	3201      	adds	r2, #1
 800b306:	6002      	str	r2, [r0, #0]
 800b308:	2f02      	cmp	r7, #2
 800b30a:	f104 0314 	add.w	r3, r4, #20
 800b30e:	d13f      	bne.n	800b390 <__gethex+0x450>
 800b310:	f8d8 2000 	ldr.w	r2, [r8]
 800b314:	3a01      	subs	r2, #1
 800b316:	42b2      	cmp	r2, r6
 800b318:	d10a      	bne.n	800b330 <__gethex+0x3f0>
 800b31a:	1171      	asrs	r1, r6, #5
 800b31c:	2201      	movs	r2, #1
 800b31e:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800b322:	f006 061f 	and.w	r6, r6, #31
 800b326:	fa02 f606 	lsl.w	r6, r2, r6
 800b32a:	421e      	tst	r6, r3
 800b32c:	bf18      	it	ne
 800b32e:	4617      	movne	r7, r2
 800b330:	f047 0720 	orr.w	r7, r7, #32
 800b334:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800b336:	601c      	str	r4, [r3, #0]
 800b338:	9b04      	ldr	r3, [sp, #16]
 800b33a:	601d      	str	r5, [r3, #0]
 800b33c:	e695      	b.n	800b06a <__gethex+0x12a>
 800b33e:	4299      	cmp	r1, r3
 800b340:	f843 cc04 	str.w	ip, [r3, #-4]
 800b344:	d8d8      	bhi.n	800b2f8 <__gethex+0x3b8>
 800b346:	68a3      	ldr	r3, [r4, #8]
 800b348:	459b      	cmp	fp, r3
 800b34a:	db19      	blt.n	800b380 <__gethex+0x440>
 800b34c:	6861      	ldr	r1, [r4, #4]
 800b34e:	ee18 0a10 	vmov	r0, s16
 800b352:	3101      	adds	r1, #1
 800b354:	f000 f996 	bl	800b684 <_Balloc>
 800b358:	4681      	mov	r9, r0
 800b35a:	b918      	cbnz	r0, 800b364 <__gethex+0x424>
 800b35c:	4b1a      	ldr	r3, [pc, #104]	; (800b3c8 <__gethex+0x488>)
 800b35e:	4602      	mov	r2, r0
 800b360:	2184      	movs	r1, #132	; 0x84
 800b362:	e6a8      	b.n	800b0b6 <__gethex+0x176>
 800b364:	6922      	ldr	r2, [r4, #16]
 800b366:	3202      	adds	r2, #2
 800b368:	f104 010c 	add.w	r1, r4, #12
 800b36c:	0092      	lsls	r2, r2, #2
 800b36e:	300c      	adds	r0, #12
 800b370:	f7fe fa52 	bl	8009818 <memcpy>
 800b374:	4621      	mov	r1, r4
 800b376:	ee18 0a10 	vmov	r0, s16
 800b37a:	f000 f9c3 	bl	800b704 <_Bfree>
 800b37e:	464c      	mov	r4, r9
 800b380:	6923      	ldr	r3, [r4, #16]
 800b382:	1c5a      	adds	r2, r3, #1
 800b384:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800b388:	6122      	str	r2, [r4, #16]
 800b38a:	2201      	movs	r2, #1
 800b38c:	615a      	str	r2, [r3, #20]
 800b38e:	e7bb      	b.n	800b308 <__gethex+0x3c8>
 800b390:	6922      	ldr	r2, [r4, #16]
 800b392:	455a      	cmp	r2, fp
 800b394:	dd0b      	ble.n	800b3ae <__gethex+0x46e>
 800b396:	2101      	movs	r1, #1
 800b398:	4620      	mov	r0, r4
 800b39a:	f7ff fd6a 	bl	800ae72 <rshift>
 800b39e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800b3a2:	3501      	adds	r5, #1
 800b3a4:	42ab      	cmp	r3, r5
 800b3a6:	f6ff aed0 	blt.w	800b14a <__gethex+0x20a>
 800b3aa:	2701      	movs	r7, #1
 800b3ac:	e7c0      	b.n	800b330 <__gethex+0x3f0>
 800b3ae:	f016 061f 	ands.w	r6, r6, #31
 800b3b2:	d0fa      	beq.n	800b3aa <__gethex+0x46a>
 800b3b4:	4453      	add	r3, sl
 800b3b6:	f1c6 0620 	rsb	r6, r6, #32
 800b3ba:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800b3be:	f000 fa53 	bl	800b868 <__hi0bits>
 800b3c2:	42b0      	cmp	r0, r6
 800b3c4:	dbe7      	blt.n	800b396 <__gethex+0x456>
 800b3c6:	e7f0      	b.n	800b3aa <__gethex+0x46a>
 800b3c8:	0800e2e0 	.word	0x0800e2e0

0800b3cc <L_shift>:
 800b3cc:	f1c2 0208 	rsb	r2, r2, #8
 800b3d0:	0092      	lsls	r2, r2, #2
 800b3d2:	b570      	push	{r4, r5, r6, lr}
 800b3d4:	f1c2 0620 	rsb	r6, r2, #32
 800b3d8:	6843      	ldr	r3, [r0, #4]
 800b3da:	6804      	ldr	r4, [r0, #0]
 800b3dc:	fa03 f506 	lsl.w	r5, r3, r6
 800b3e0:	432c      	orrs	r4, r5
 800b3e2:	40d3      	lsrs	r3, r2
 800b3e4:	6004      	str	r4, [r0, #0]
 800b3e6:	f840 3f04 	str.w	r3, [r0, #4]!
 800b3ea:	4288      	cmp	r0, r1
 800b3ec:	d3f4      	bcc.n	800b3d8 <L_shift+0xc>
 800b3ee:	bd70      	pop	{r4, r5, r6, pc}

0800b3f0 <__match>:
 800b3f0:	b530      	push	{r4, r5, lr}
 800b3f2:	6803      	ldr	r3, [r0, #0]
 800b3f4:	3301      	adds	r3, #1
 800b3f6:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b3fa:	b914      	cbnz	r4, 800b402 <__match+0x12>
 800b3fc:	6003      	str	r3, [r0, #0]
 800b3fe:	2001      	movs	r0, #1
 800b400:	bd30      	pop	{r4, r5, pc}
 800b402:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b406:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800b40a:	2d19      	cmp	r5, #25
 800b40c:	bf98      	it	ls
 800b40e:	3220      	addls	r2, #32
 800b410:	42a2      	cmp	r2, r4
 800b412:	d0f0      	beq.n	800b3f6 <__match+0x6>
 800b414:	2000      	movs	r0, #0
 800b416:	e7f3      	b.n	800b400 <__match+0x10>

0800b418 <__hexnan>:
 800b418:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b41c:	680b      	ldr	r3, [r1, #0]
 800b41e:	115e      	asrs	r6, r3, #5
 800b420:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800b424:	f013 031f 	ands.w	r3, r3, #31
 800b428:	b087      	sub	sp, #28
 800b42a:	bf18      	it	ne
 800b42c:	3604      	addne	r6, #4
 800b42e:	2500      	movs	r5, #0
 800b430:	1f37      	subs	r7, r6, #4
 800b432:	4690      	mov	r8, r2
 800b434:	6802      	ldr	r2, [r0, #0]
 800b436:	9301      	str	r3, [sp, #4]
 800b438:	4682      	mov	sl, r0
 800b43a:	f846 5c04 	str.w	r5, [r6, #-4]
 800b43e:	46b9      	mov	r9, r7
 800b440:	463c      	mov	r4, r7
 800b442:	9502      	str	r5, [sp, #8]
 800b444:	46ab      	mov	fp, r5
 800b446:	7851      	ldrb	r1, [r2, #1]
 800b448:	1c53      	adds	r3, r2, #1
 800b44a:	9303      	str	r3, [sp, #12]
 800b44c:	b341      	cbz	r1, 800b4a0 <__hexnan+0x88>
 800b44e:	4608      	mov	r0, r1
 800b450:	9205      	str	r2, [sp, #20]
 800b452:	9104      	str	r1, [sp, #16]
 800b454:	f7ff fd5f 	bl	800af16 <__hexdig_fun>
 800b458:	2800      	cmp	r0, #0
 800b45a:	d14f      	bne.n	800b4fc <__hexnan+0xe4>
 800b45c:	9904      	ldr	r1, [sp, #16]
 800b45e:	9a05      	ldr	r2, [sp, #20]
 800b460:	2920      	cmp	r1, #32
 800b462:	d818      	bhi.n	800b496 <__hexnan+0x7e>
 800b464:	9b02      	ldr	r3, [sp, #8]
 800b466:	459b      	cmp	fp, r3
 800b468:	dd13      	ble.n	800b492 <__hexnan+0x7a>
 800b46a:	454c      	cmp	r4, r9
 800b46c:	d206      	bcs.n	800b47c <__hexnan+0x64>
 800b46e:	2d07      	cmp	r5, #7
 800b470:	dc04      	bgt.n	800b47c <__hexnan+0x64>
 800b472:	462a      	mov	r2, r5
 800b474:	4649      	mov	r1, r9
 800b476:	4620      	mov	r0, r4
 800b478:	f7ff ffa8 	bl	800b3cc <L_shift>
 800b47c:	4544      	cmp	r4, r8
 800b47e:	d950      	bls.n	800b522 <__hexnan+0x10a>
 800b480:	2300      	movs	r3, #0
 800b482:	f1a4 0904 	sub.w	r9, r4, #4
 800b486:	f844 3c04 	str.w	r3, [r4, #-4]
 800b48a:	f8cd b008 	str.w	fp, [sp, #8]
 800b48e:	464c      	mov	r4, r9
 800b490:	461d      	mov	r5, r3
 800b492:	9a03      	ldr	r2, [sp, #12]
 800b494:	e7d7      	b.n	800b446 <__hexnan+0x2e>
 800b496:	2929      	cmp	r1, #41	; 0x29
 800b498:	d156      	bne.n	800b548 <__hexnan+0x130>
 800b49a:	3202      	adds	r2, #2
 800b49c:	f8ca 2000 	str.w	r2, [sl]
 800b4a0:	f1bb 0f00 	cmp.w	fp, #0
 800b4a4:	d050      	beq.n	800b548 <__hexnan+0x130>
 800b4a6:	454c      	cmp	r4, r9
 800b4a8:	d206      	bcs.n	800b4b8 <__hexnan+0xa0>
 800b4aa:	2d07      	cmp	r5, #7
 800b4ac:	dc04      	bgt.n	800b4b8 <__hexnan+0xa0>
 800b4ae:	462a      	mov	r2, r5
 800b4b0:	4649      	mov	r1, r9
 800b4b2:	4620      	mov	r0, r4
 800b4b4:	f7ff ff8a 	bl	800b3cc <L_shift>
 800b4b8:	4544      	cmp	r4, r8
 800b4ba:	d934      	bls.n	800b526 <__hexnan+0x10e>
 800b4bc:	f1a8 0204 	sub.w	r2, r8, #4
 800b4c0:	4623      	mov	r3, r4
 800b4c2:	f853 1b04 	ldr.w	r1, [r3], #4
 800b4c6:	f842 1f04 	str.w	r1, [r2, #4]!
 800b4ca:	429f      	cmp	r7, r3
 800b4cc:	d2f9      	bcs.n	800b4c2 <__hexnan+0xaa>
 800b4ce:	1b3b      	subs	r3, r7, r4
 800b4d0:	f023 0303 	bic.w	r3, r3, #3
 800b4d4:	3304      	adds	r3, #4
 800b4d6:	3401      	adds	r4, #1
 800b4d8:	3e03      	subs	r6, #3
 800b4da:	42b4      	cmp	r4, r6
 800b4dc:	bf88      	it	hi
 800b4de:	2304      	movhi	r3, #4
 800b4e0:	4443      	add	r3, r8
 800b4e2:	2200      	movs	r2, #0
 800b4e4:	f843 2b04 	str.w	r2, [r3], #4
 800b4e8:	429f      	cmp	r7, r3
 800b4ea:	d2fb      	bcs.n	800b4e4 <__hexnan+0xcc>
 800b4ec:	683b      	ldr	r3, [r7, #0]
 800b4ee:	b91b      	cbnz	r3, 800b4f8 <__hexnan+0xe0>
 800b4f0:	4547      	cmp	r7, r8
 800b4f2:	d127      	bne.n	800b544 <__hexnan+0x12c>
 800b4f4:	2301      	movs	r3, #1
 800b4f6:	603b      	str	r3, [r7, #0]
 800b4f8:	2005      	movs	r0, #5
 800b4fa:	e026      	b.n	800b54a <__hexnan+0x132>
 800b4fc:	3501      	adds	r5, #1
 800b4fe:	2d08      	cmp	r5, #8
 800b500:	f10b 0b01 	add.w	fp, fp, #1
 800b504:	dd06      	ble.n	800b514 <__hexnan+0xfc>
 800b506:	4544      	cmp	r4, r8
 800b508:	d9c3      	bls.n	800b492 <__hexnan+0x7a>
 800b50a:	2300      	movs	r3, #0
 800b50c:	f844 3c04 	str.w	r3, [r4, #-4]
 800b510:	2501      	movs	r5, #1
 800b512:	3c04      	subs	r4, #4
 800b514:	6822      	ldr	r2, [r4, #0]
 800b516:	f000 000f 	and.w	r0, r0, #15
 800b51a:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 800b51e:	6022      	str	r2, [r4, #0]
 800b520:	e7b7      	b.n	800b492 <__hexnan+0x7a>
 800b522:	2508      	movs	r5, #8
 800b524:	e7b5      	b.n	800b492 <__hexnan+0x7a>
 800b526:	9b01      	ldr	r3, [sp, #4]
 800b528:	2b00      	cmp	r3, #0
 800b52a:	d0df      	beq.n	800b4ec <__hexnan+0xd4>
 800b52c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800b530:	f1c3 0320 	rsb	r3, r3, #32
 800b534:	fa22 f303 	lsr.w	r3, r2, r3
 800b538:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800b53c:	401a      	ands	r2, r3
 800b53e:	f846 2c04 	str.w	r2, [r6, #-4]
 800b542:	e7d3      	b.n	800b4ec <__hexnan+0xd4>
 800b544:	3f04      	subs	r7, #4
 800b546:	e7d1      	b.n	800b4ec <__hexnan+0xd4>
 800b548:	2004      	movs	r0, #4
 800b54a:	b007      	add	sp, #28
 800b54c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800b550 <__retarget_lock_init_recursive>:
 800b550:	4770      	bx	lr

0800b552 <__retarget_lock_acquire_recursive>:
 800b552:	4770      	bx	lr

0800b554 <__retarget_lock_release_recursive>:
 800b554:	4770      	bx	lr
	...

0800b558 <_lseek_r>:
 800b558:	b538      	push	{r3, r4, r5, lr}
 800b55a:	4d07      	ldr	r5, [pc, #28]	; (800b578 <_lseek_r+0x20>)
 800b55c:	4604      	mov	r4, r0
 800b55e:	4608      	mov	r0, r1
 800b560:	4611      	mov	r1, r2
 800b562:	2200      	movs	r2, #0
 800b564:	602a      	str	r2, [r5, #0]
 800b566:	461a      	mov	r2, r3
 800b568:	f7f9 fb52 	bl	8004c10 <_lseek>
 800b56c:	1c43      	adds	r3, r0, #1
 800b56e:	d102      	bne.n	800b576 <_lseek_r+0x1e>
 800b570:	682b      	ldr	r3, [r5, #0]
 800b572:	b103      	cbz	r3, 800b576 <_lseek_r+0x1e>
 800b574:	6023      	str	r3, [r4, #0]
 800b576:	bd38      	pop	{r3, r4, r5, pc}
 800b578:	20001d94 	.word	0x20001d94

0800b57c <__swhatbuf_r>:
 800b57c:	b570      	push	{r4, r5, r6, lr}
 800b57e:	460e      	mov	r6, r1
 800b580:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b584:	2900      	cmp	r1, #0
 800b586:	b096      	sub	sp, #88	; 0x58
 800b588:	4614      	mov	r4, r2
 800b58a:	461d      	mov	r5, r3
 800b58c:	da08      	bge.n	800b5a0 <__swhatbuf_r+0x24>
 800b58e:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800b592:	2200      	movs	r2, #0
 800b594:	602a      	str	r2, [r5, #0]
 800b596:	061a      	lsls	r2, r3, #24
 800b598:	d410      	bmi.n	800b5bc <__swhatbuf_r+0x40>
 800b59a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b59e:	e00e      	b.n	800b5be <__swhatbuf_r+0x42>
 800b5a0:	466a      	mov	r2, sp
 800b5a2:	f001 fea5 	bl	800d2f0 <_fstat_r>
 800b5a6:	2800      	cmp	r0, #0
 800b5a8:	dbf1      	blt.n	800b58e <__swhatbuf_r+0x12>
 800b5aa:	9a01      	ldr	r2, [sp, #4]
 800b5ac:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800b5b0:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800b5b4:	425a      	negs	r2, r3
 800b5b6:	415a      	adcs	r2, r3
 800b5b8:	602a      	str	r2, [r5, #0]
 800b5ba:	e7ee      	b.n	800b59a <__swhatbuf_r+0x1e>
 800b5bc:	2340      	movs	r3, #64	; 0x40
 800b5be:	2000      	movs	r0, #0
 800b5c0:	6023      	str	r3, [r4, #0]
 800b5c2:	b016      	add	sp, #88	; 0x58
 800b5c4:	bd70      	pop	{r4, r5, r6, pc}
	...

0800b5c8 <__smakebuf_r>:
 800b5c8:	898b      	ldrh	r3, [r1, #12]
 800b5ca:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800b5cc:	079d      	lsls	r5, r3, #30
 800b5ce:	4606      	mov	r6, r0
 800b5d0:	460c      	mov	r4, r1
 800b5d2:	d507      	bpl.n	800b5e4 <__smakebuf_r+0x1c>
 800b5d4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800b5d8:	6023      	str	r3, [r4, #0]
 800b5da:	6123      	str	r3, [r4, #16]
 800b5dc:	2301      	movs	r3, #1
 800b5de:	6163      	str	r3, [r4, #20]
 800b5e0:	b002      	add	sp, #8
 800b5e2:	bd70      	pop	{r4, r5, r6, pc}
 800b5e4:	ab01      	add	r3, sp, #4
 800b5e6:	466a      	mov	r2, sp
 800b5e8:	f7ff ffc8 	bl	800b57c <__swhatbuf_r>
 800b5ec:	9900      	ldr	r1, [sp, #0]
 800b5ee:	4605      	mov	r5, r0
 800b5f0:	4630      	mov	r0, r6
 800b5f2:	f7fe f993 	bl	800991c <_malloc_r>
 800b5f6:	b948      	cbnz	r0, 800b60c <__smakebuf_r+0x44>
 800b5f8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b5fc:	059a      	lsls	r2, r3, #22
 800b5fe:	d4ef      	bmi.n	800b5e0 <__smakebuf_r+0x18>
 800b600:	f023 0303 	bic.w	r3, r3, #3
 800b604:	f043 0302 	orr.w	r3, r3, #2
 800b608:	81a3      	strh	r3, [r4, #12]
 800b60a:	e7e3      	b.n	800b5d4 <__smakebuf_r+0xc>
 800b60c:	4b0d      	ldr	r3, [pc, #52]	; (800b644 <__smakebuf_r+0x7c>)
 800b60e:	62b3      	str	r3, [r6, #40]	; 0x28
 800b610:	89a3      	ldrh	r3, [r4, #12]
 800b612:	6020      	str	r0, [r4, #0]
 800b614:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b618:	81a3      	strh	r3, [r4, #12]
 800b61a:	9b00      	ldr	r3, [sp, #0]
 800b61c:	6163      	str	r3, [r4, #20]
 800b61e:	9b01      	ldr	r3, [sp, #4]
 800b620:	6120      	str	r0, [r4, #16]
 800b622:	b15b      	cbz	r3, 800b63c <__smakebuf_r+0x74>
 800b624:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b628:	4630      	mov	r0, r6
 800b62a:	f001 fe73 	bl	800d314 <_isatty_r>
 800b62e:	b128      	cbz	r0, 800b63c <__smakebuf_r+0x74>
 800b630:	89a3      	ldrh	r3, [r4, #12]
 800b632:	f023 0303 	bic.w	r3, r3, #3
 800b636:	f043 0301 	orr.w	r3, r3, #1
 800b63a:	81a3      	strh	r3, [r4, #12]
 800b63c:	89a0      	ldrh	r0, [r4, #12]
 800b63e:	4305      	orrs	r5, r0
 800b640:	81a5      	strh	r5, [r4, #12]
 800b642:	e7cd      	b.n	800b5e0 <__smakebuf_r+0x18>
 800b644:	0800acd1 	.word	0x0800acd1

0800b648 <__ascii_mbtowc>:
 800b648:	b082      	sub	sp, #8
 800b64a:	b901      	cbnz	r1, 800b64e <__ascii_mbtowc+0x6>
 800b64c:	a901      	add	r1, sp, #4
 800b64e:	b142      	cbz	r2, 800b662 <__ascii_mbtowc+0x1a>
 800b650:	b14b      	cbz	r3, 800b666 <__ascii_mbtowc+0x1e>
 800b652:	7813      	ldrb	r3, [r2, #0]
 800b654:	600b      	str	r3, [r1, #0]
 800b656:	7812      	ldrb	r2, [r2, #0]
 800b658:	1e10      	subs	r0, r2, #0
 800b65a:	bf18      	it	ne
 800b65c:	2001      	movne	r0, #1
 800b65e:	b002      	add	sp, #8
 800b660:	4770      	bx	lr
 800b662:	4610      	mov	r0, r2
 800b664:	e7fb      	b.n	800b65e <__ascii_mbtowc+0x16>
 800b666:	f06f 0001 	mvn.w	r0, #1
 800b66a:	e7f8      	b.n	800b65e <__ascii_mbtowc+0x16>

0800b66c <__malloc_lock>:
 800b66c:	4801      	ldr	r0, [pc, #4]	; (800b674 <__malloc_lock+0x8>)
 800b66e:	f7ff bf70 	b.w	800b552 <__retarget_lock_acquire_recursive>
 800b672:	bf00      	nop
 800b674:	20001d90 	.word	0x20001d90

0800b678 <__malloc_unlock>:
 800b678:	4801      	ldr	r0, [pc, #4]	; (800b680 <__malloc_unlock+0x8>)
 800b67a:	f7ff bf6b 	b.w	800b554 <__retarget_lock_release_recursive>
 800b67e:	bf00      	nop
 800b680:	20001d90 	.word	0x20001d90

0800b684 <_Balloc>:
 800b684:	b570      	push	{r4, r5, r6, lr}
 800b686:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800b688:	4604      	mov	r4, r0
 800b68a:	460d      	mov	r5, r1
 800b68c:	b976      	cbnz	r6, 800b6ac <_Balloc+0x28>
 800b68e:	2010      	movs	r0, #16
 800b690:	f7fe f8b2 	bl	80097f8 <malloc>
 800b694:	4602      	mov	r2, r0
 800b696:	6260      	str	r0, [r4, #36]	; 0x24
 800b698:	b920      	cbnz	r0, 800b6a4 <_Balloc+0x20>
 800b69a:	4b18      	ldr	r3, [pc, #96]	; (800b6fc <_Balloc+0x78>)
 800b69c:	4818      	ldr	r0, [pc, #96]	; (800b700 <_Balloc+0x7c>)
 800b69e:	2166      	movs	r1, #102	; 0x66
 800b6a0:	f001 fdf6 	bl	800d290 <__assert_func>
 800b6a4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800b6a8:	6006      	str	r6, [r0, #0]
 800b6aa:	60c6      	str	r6, [r0, #12]
 800b6ac:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800b6ae:	68f3      	ldr	r3, [r6, #12]
 800b6b0:	b183      	cbz	r3, 800b6d4 <_Balloc+0x50>
 800b6b2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b6b4:	68db      	ldr	r3, [r3, #12]
 800b6b6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800b6ba:	b9b8      	cbnz	r0, 800b6ec <_Balloc+0x68>
 800b6bc:	2101      	movs	r1, #1
 800b6be:	fa01 f605 	lsl.w	r6, r1, r5
 800b6c2:	1d72      	adds	r2, r6, #5
 800b6c4:	0092      	lsls	r2, r2, #2
 800b6c6:	4620      	mov	r0, r4
 800b6c8:	f000 fc9d 	bl	800c006 <_calloc_r>
 800b6cc:	b160      	cbz	r0, 800b6e8 <_Balloc+0x64>
 800b6ce:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800b6d2:	e00e      	b.n	800b6f2 <_Balloc+0x6e>
 800b6d4:	2221      	movs	r2, #33	; 0x21
 800b6d6:	2104      	movs	r1, #4
 800b6d8:	4620      	mov	r0, r4
 800b6da:	f000 fc94 	bl	800c006 <_calloc_r>
 800b6de:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b6e0:	60f0      	str	r0, [r6, #12]
 800b6e2:	68db      	ldr	r3, [r3, #12]
 800b6e4:	2b00      	cmp	r3, #0
 800b6e6:	d1e4      	bne.n	800b6b2 <_Balloc+0x2e>
 800b6e8:	2000      	movs	r0, #0
 800b6ea:	bd70      	pop	{r4, r5, r6, pc}
 800b6ec:	6802      	ldr	r2, [r0, #0]
 800b6ee:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800b6f2:	2300      	movs	r3, #0
 800b6f4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800b6f8:	e7f7      	b.n	800b6ea <_Balloc+0x66>
 800b6fa:	bf00      	nop
 800b6fc:	0800e36c 	.word	0x0800e36c
 800b700:	0800e383 	.word	0x0800e383

0800b704 <_Bfree>:
 800b704:	b570      	push	{r4, r5, r6, lr}
 800b706:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800b708:	4605      	mov	r5, r0
 800b70a:	460c      	mov	r4, r1
 800b70c:	b976      	cbnz	r6, 800b72c <_Bfree+0x28>
 800b70e:	2010      	movs	r0, #16
 800b710:	f7fe f872 	bl	80097f8 <malloc>
 800b714:	4602      	mov	r2, r0
 800b716:	6268      	str	r0, [r5, #36]	; 0x24
 800b718:	b920      	cbnz	r0, 800b724 <_Bfree+0x20>
 800b71a:	4b09      	ldr	r3, [pc, #36]	; (800b740 <_Bfree+0x3c>)
 800b71c:	4809      	ldr	r0, [pc, #36]	; (800b744 <_Bfree+0x40>)
 800b71e:	218a      	movs	r1, #138	; 0x8a
 800b720:	f001 fdb6 	bl	800d290 <__assert_func>
 800b724:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800b728:	6006      	str	r6, [r0, #0]
 800b72a:	60c6      	str	r6, [r0, #12]
 800b72c:	b13c      	cbz	r4, 800b73e <_Bfree+0x3a>
 800b72e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800b730:	6862      	ldr	r2, [r4, #4]
 800b732:	68db      	ldr	r3, [r3, #12]
 800b734:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800b738:	6021      	str	r1, [r4, #0]
 800b73a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800b73e:	bd70      	pop	{r4, r5, r6, pc}
 800b740:	0800e36c 	.word	0x0800e36c
 800b744:	0800e383 	.word	0x0800e383

0800b748 <__multadd>:
 800b748:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b74c:	690d      	ldr	r5, [r1, #16]
 800b74e:	4607      	mov	r7, r0
 800b750:	460c      	mov	r4, r1
 800b752:	461e      	mov	r6, r3
 800b754:	f101 0c14 	add.w	ip, r1, #20
 800b758:	2000      	movs	r0, #0
 800b75a:	f8dc 3000 	ldr.w	r3, [ip]
 800b75e:	b299      	uxth	r1, r3
 800b760:	fb02 6101 	mla	r1, r2, r1, r6
 800b764:	0c1e      	lsrs	r6, r3, #16
 800b766:	0c0b      	lsrs	r3, r1, #16
 800b768:	fb02 3306 	mla	r3, r2, r6, r3
 800b76c:	b289      	uxth	r1, r1
 800b76e:	3001      	adds	r0, #1
 800b770:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800b774:	4285      	cmp	r5, r0
 800b776:	f84c 1b04 	str.w	r1, [ip], #4
 800b77a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800b77e:	dcec      	bgt.n	800b75a <__multadd+0x12>
 800b780:	b30e      	cbz	r6, 800b7c6 <__multadd+0x7e>
 800b782:	68a3      	ldr	r3, [r4, #8]
 800b784:	42ab      	cmp	r3, r5
 800b786:	dc19      	bgt.n	800b7bc <__multadd+0x74>
 800b788:	6861      	ldr	r1, [r4, #4]
 800b78a:	4638      	mov	r0, r7
 800b78c:	3101      	adds	r1, #1
 800b78e:	f7ff ff79 	bl	800b684 <_Balloc>
 800b792:	4680      	mov	r8, r0
 800b794:	b928      	cbnz	r0, 800b7a2 <__multadd+0x5a>
 800b796:	4602      	mov	r2, r0
 800b798:	4b0c      	ldr	r3, [pc, #48]	; (800b7cc <__multadd+0x84>)
 800b79a:	480d      	ldr	r0, [pc, #52]	; (800b7d0 <__multadd+0x88>)
 800b79c:	21b5      	movs	r1, #181	; 0xb5
 800b79e:	f001 fd77 	bl	800d290 <__assert_func>
 800b7a2:	6922      	ldr	r2, [r4, #16]
 800b7a4:	3202      	adds	r2, #2
 800b7a6:	f104 010c 	add.w	r1, r4, #12
 800b7aa:	0092      	lsls	r2, r2, #2
 800b7ac:	300c      	adds	r0, #12
 800b7ae:	f7fe f833 	bl	8009818 <memcpy>
 800b7b2:	4621      	mov	r1, r4
 800b7b4:	4638      	mov	r0, r7
 800b7b6:	f7ff ffa5 	bl	800b704 <_Bfree>
 800b7ba:	4644      	mov	r4, r8
 800b7bc:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800b7c0:	3501      	adds	r5, #1
 800b7c2:	615e      	str	r6, [r3, #20]
 800b7c4:	6125      	str	r5, [r4, #16]
 800b7c6:	4620      	mov	r0, r4
 800b7c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b7cc:	0800e2e0 	.word	0x0800e2e0
 800b7d0:	0800e383 	.word	0x0800e383

0800b7d4 <__s2b>:
 800b7d4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b7d8:	460c      	mov	r4, r1
 800b7da:	4615      	mov	r5, r2
 800b7dc:	461f      	mov	r7, r3
 800b7de:	2209      	movs	r2, #9
 800b7e0:	3308      	adds	r3, #8
 800b7e2:	4606      	mov	r6, r0
 800b7e4:	fb93 f3f2 	sdiv	r3, r3, r2
 800b7e8:	2100      	movs	r1, #0
 800b7ea:	2201      	movs	r2, #1
 800b7ec:	429a      	cmp	r2, r3
 800b7ee:	db09      	blt.n	800b804 <__s2b+0x30>
 800b7f0:	4630      	mov	r0, r6
 800b7f2:	f7ff ff47 	bl	800b684 <_Balloc>
 800b7f6:	b940      	cbnz	r0, 800b80a <__s2b+0x36>
 800b7f8:	4602      	mov	r2, r0
 800b7fa:	4b19      	ldr	r3, [pc, #100]	; (800b860 <__s2b+0x8c>)
 800b7fc:	4819      	ldr	r0, [pc, #100]	; (800b864 <__s2b+0x90>)
 800b7fe:	21ce      	movs	r1, #206	; 0xce
 800b800:	f001 fd46 	bl	800d290 <__assert_func>
 800b804:	0052      	lsls	r2, r2, #1
 800b806:	3101      	adds	r1, #1
 800b808:	e7f0      	b.n	800b7ec <__s2b+0x18>
 800b80a:	9b08      	ldr	r3, [sp, #32]
 800b80c:	6143      	str	r3, [r0, #20]
 800b80e:	2d09      	cmp	r5, #9
 800b810:	f04f 0301 	mov.w	r3, #1
 800b814:	6103      	str	r3, [r0, #16]
 800b816:	dd16      	ble.n	800b846 <__s2b+0x72>
 800b818:	f104 0909 	add.w	r9, r4, #9
 800b81c:	46c8      	mov	r8, r9
 800b81e:	442c      	add	r4, r5
 800b820:	f818 3b01 	ldrb.w	r3, [r8], #1
 800b824:	4601      	mov	r1, r0
 800b826:	3b30      	subs	r3, #48	; 0x30
 800b828:	220a      	movs	r2, #10
 800b82a:	4630      	mov	r0, r6
 800b82c:	f7ff ff8c 	bl	800b748 <__multadd>
 800b830:	45a0      	cmp	r8, r4
 800b832:	d1f5      	bne.n	800b820 <__s2b+0x4c>
 800b834:	f1a5 0408 	sub.w	r4, r5, #8
 800b838:	444c      	add	r4, r9
 800b83a:	1b2d      	subs	r5, r5, r4
 800b83c:	1963      	adds	r3, r4, r5
 800b83e:	42bb      	cmp	r3, r7
 800b840:	db04      	blt.n	800b84c <__s2b+0x78>
 800b842:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b846:	340a      	adds	r4, #10
 800b848:	2509      	movs	r5, #9
 800b84a:	e7f6      	b.n	800b83a <__s2b+0x66>
 800b84c:	f814 3b01 	ldrb.w	r3, [r4], #1
 800b850:	4601      	mov	r1, r0
 800b852:	3b30      	subs	r3, #48	; 0x30
 800b854:	220a      	movs	r2, #10
 800b856:	4630      	mov	r0, r6
 800b858:	f7ff ff76 	bl	800b748 <__multadd>
 800b85c:	e7ee      	b.n	800b83c <__s2b+0x68>
 800b85e:	bf00      	nop
 800b860:	0800e2e0 	.word	0x0800e2e0
 800b864:	0800e383 	.word	0x0800e383

0800b868 <__hi0bits>:
 800b868:	0c03      	lsrs	r3, r0, #16
 800b86a:	041b      	lsls	r3, r3, #16
 800b86c:	b9d3      	cbnz	r3, 800b8a4 <__hi0bits+0x3c>
 800b86e:	0400      	lsls	r0, r0, #16
 800b870:	2310      	movs	r3, #16
 800b872:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800b876:	bf04      	itt	eq
 800b878:	0200      	lsleq	r0, r0, #8
 800b87a:	3308      	addeq	r3, #8
 800b87c:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800b880:	bf04      	itt	eq
 800b882:	0100      	lsleq	r0, r0, #4
 800b884:	3304      	addeq	r3, #4
 800b886:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800b88a:	bf04      	itt	eq
 800b88c:	0080      	lsleq	r0, r0, #2
 800b88e:	3302      	addeq	r3, #2
 800b890:	2800      	cmp	r0, #0
 800b892:	db05      	blt.n	800b8a0 <__hi0bits+0x38>
 800b894:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800b898:	f103 0301 	add.w	r3, r3, #1
 800b89c:	bf08      	it	eq
 800b89e:	2320      	moveq	r3, #32
 800b8a0:	4618      	mov	r0, r3
 800b8a2:	4770      	bx	lr
 800b8a4:	2300      	movs	r3, #0
 800b8a6:	e7e4      	b.n	800b872 <__hi0bits+0xa>

0800b8a8 <__lo0bits>:
 800b8a8:	6803      	ldr	r3, [r0, #0]
 800b8aa:	f013 0207 	ands.w	r2, r3, #7
 800b8ae:	4601      	mov	r1, r0
 800b8b0:	d00b      	beq.n	800b8ca <__lo0bits+0x22>
 800b8b2:	07da      	lsls	r2, r3, #31
 800b8b4:	d423      	bmi.n	800b8fe <__lo0bits+0x56>
 800b8b6:	0798      	lsls	r0, r3, #30
 800b8b8:	bf49      	itett	mi
 800b8ba:	085b      	lsrmi	r3, r3, #1
 800b8bc:	089b      	lsrpl	r3, r3, #2
 800b8be:	2001      	movmi	r0, #1
 800b8c0:	600b      	strmi	r3, [r1, #0]
 800b8c2:	bf5c      	itt	pl
 800b8c4:	600b      	strpl	r3, [r1, #0]
 800b8c6:	2002      	movpl	r0, #2
 800b8c8:	4770      	bx	lr
 800b8ca:	b298      	uxth	r0, r3
 800b8cc:	b9a8      	cbnz	r0, 800b8fa <__lo0bits+0x52>
 800b8ce:	0c1b      	lsrs	r3, r3, #16
 800b8d0:	2010      	movs	r0, #16
 800b8d2:	b2da      	uxtb	r2, r3
 800b8d4:	b90a      	cbnz	r2, 800b8da <__lo0bits+0x32>
 800b8d6:	3008      	adds	r0, #8
 800b8d8:	0a1b      	lsrs	r3, r3, #8
 800b8da:	071a      	lsls	r2, r3, #28
 800b8dc:	bf04      	itt	eq
 800b8de:	091b      	lsreq	r3, r3, #4
 800b8e0:	3004      	addeq	r0, #4
 800b8e2:	079a      	lsls	r2, r3, #30
 800b8e4:	bf04      	itt	eq
 800b8e6:	089b      	lsreq	r3, r3, #2
 800b8e8:	3002      	addeq	r0, #2
 800b8ea:	07da      	lsls	r2, r3, #31
 800b8ec:	d403      	bmi.n	800b8f6 <__lo0bits+0x4e>
 800b8ee:	085b      	lsrs	r3, r3, #1
 800b8f0:	f100 0001 	add.w	r0, r0, #1
 800b8f4:	d005      	beq.n	800b902 <__lo0bits+0x5a>
 800b8f6:	600b      	str	r3, [r1, #0]
 800b8f8:	4770      	bx	lr
 800b8fa:	4610      	mov	r0, r2
 800b8fc:	e7e9      	b.n	800b8d2 <__lo0bits+0x2a>
 800b8fe:	2000      	movs	r0, #0
 800b900:	4770      	bx	lr
 800b902:	2020      	movs	r0, #32
 800b904:	4770      	bx	lr
	...

0800b908 <__i2b>:
 800b908:	b510      	push	{r4, lr}
 800b90a:	460c      	mov	r4, r1
 800b90c:	2101      	movs	r1, #1
 800b90e:	f7ff feb9 	bl	800b684 <_Balloc>
 800b912:	4602      	mov	r2, r0
 800b914:	b928      	cbnz	r0, 800b922 <__i2b+0x1a>
 800b916:	4b05      	ldr	r3, [pc, #20]	; (800b92c <__i2b+0x24>)
 800b918:	4805      	ldr	r0, [pc, #20]	; (800b930 <__i2b+0x28>)
 800b91a:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800b91e:	f001 fcb7 	bl	800d290 <__assert_func>
 800b922:	2301      	movs	r3, #1
 800b924:	6144      	str	r4, [r0, #20]
 800b926:	6103      	str	r3, [r0, #16]
 800b928:	bd10      	pop	{r4, pc}
 800b92a:	bf00      	nop
 800b92c:	0800e2e0 	.word	0x0800e2e0
 800b930:	0800e383 	.word	0x0800e383

0800b934 <__multiply>:
 800b934:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b938:	4691      	mov	r9, r2
 800b93a:	690a      	ldr	r2, [r1, #16]
 800b93c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800b940:	429a      	cmp	r2, r3
 800b942:	bfb8      	it	lt
 800b944:	460b      	movlt	r3, r1
 800b946:	460c      	mov	r4, r1
 800b948:	bfbc      	itt	lt
 800b94a:	464c      	movlt	r4, r9
 800b94c:	4699      	movlt	r9, r3
 800b94e:	6927      	ldr	r7, [r4, #16]
 800b950:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800b954:	68a3      	ldr	r3, [r4, #8]
 800b956:	6861      	ldr	r1, [r4, #4]
 800b958:	eb07 060a 	add.w	r6, r7, sl
 800b95c:	42b3      	cmp	r3, r6
 800b95e:	b085      	sub	sp, #20
 800b960:	bfb8      	it	lt
 800b962:	3101      	addlt	r1, #1
 800b964:	f7ff fe8e 	bl	800b684 <_Balloc>
 800b968:	b930      	cbnz	r0, 800b978 <__multiply+0x44>
 800b96a:	4602      	mov	r2, r0
 800b96c:	4b44      	ldr	r3, [pc, #272]	; (800ba80 <__multiply+0x14c>)
 800b96e:	4845      	ldr	r0, [pc, #276]	; (800ba84 <__multiply+0x150>)
 800b970:	f240 115d 	movw	r1, #349	; 0x15d
 800b974:	f001 fc8c 	bl	800d290 <__assert_func>
 800b978:	f100 0514 	add.w	r5, r0, #20
 800b97c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800b980:	462b      	mov	r3, r5
 800b982:	2200      	movs	r2, #0
 800b984:	4543      	cmp	r3, r8
 800b986:	d321      	bcc.n	800b9cc <__multiply+0x98>
 800b988:	f104 0314 	add.w	r3, r4, #20
 800b98c:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800b990:	f109 0314 	add.w	r3, r9, #20
 800b994:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800b998:	9202      	str	r2, [sp, #8]
 800b99a:	1b3a      	subs	r2, r7, r4
 800b99c:	3a15      	subs	r2, #21
 800b99e:	f022 0203 	bic.w	r2, r2, #3
 800b9a2:	3204      	adds	r2, #4
 800b9a4:	f104 0115 	add.w	r1, r4, #21
 800b9a8:	428f      	cmp	r7, r1
 800b9aa:	bf38      	it	cc
 800b9ac:	2204      	movcc	r2, #4
 800b9ae:	9201      	str	r2, [sp, #4]
 800b9b0:	9a02      	ldr	r2, [sp, #8]
 800b9b2:	9303      	str	r3, [sp, #12]
 800b9b4:	429a      	cmp	r2, r3
 800b9b6:	d80c      	bhi.n	800b9d2 <__multiply+0x9e>
 800b9b8:	2e00      	cmp	r6, #0
 800b9ba:	dd03      	ble.n	800b9c4 <__multiply+0x90>
 800b9bc:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800b9c0:	2b00      	cmp	r3, #0
 800b9c2:	d05a      	beq.n	800ba7a <__multiply+0x146>
 800b9c4:	6106      	str	r6, [r0, #16]
 800b9c6:	b005      	add	sp, #20
 800b9c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b9cc:	f843 2b04 	str.w	r2, [r3], #4
 800b9d0:	e7d8      	b.n	800b984 <__multiply+0x50>
 800b9d2:	f8b3 a000 	ldrh.w	sl, [r3]
 800b9d6:	f1ba 0f00 	cmp.w	sl, #0
 800b9da:	d024      	beq.n	800ba26 <__multiply+0xf2>
 800b9dc:	f104 0e14 	add.w	lr, r4, #20
 800b9e0:	46a9      	mov	r9, r5
 800b9e2:	f04f 0c00 	mov.w	ip, #0
 800b9e6:	f85e 2b04 	ldr.w	r2, [lr], #4
 800b9ea:	f8d9 1000 	ldr.w	r1, [r9]
 800b9ee:	fa1f fb82 	uxth.w	fp, r2
 800b9f2:	b289      	uxth	r1, r1
 800b9f4:	fb0a 110b 	mla	r1, sl, fp, r1
 800b9f8:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800b9fc:	f8d9 2000 	ldr.w	r2, [r9]
 800ba00:	4461      	add	r1, ip
 800ba02:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800ba06:	fb0a c20b 	mla	r2, sl, fp, ip
 800ba0a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800ba0e:	b289      	uxth	r1, r1
 800ba10:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800ba14:	4577      	cmp	r7, lr
 800ba16:	f849 1b04 	str.w	r1, [r9], #4
 800ba1a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800ba1e:	d8e2      	bhi.n	800b9e6 <__multiply+0xb2>
 800ba20:	9a01      	ldr	r2, [sp, #4]
 800ba22:	f845 c002 	str.w	ip, [r5, r2]
 800ba26:	9a03      	ldr	r2, [sp, #12]
 800ba28:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800ba2c:	3304      	adds	r3, #4
 800ba2e:	f1b9 0f00 	cmp.w	r9, #0
 800ba32:	d020      	beq.n	800ba76 <__multiply+0x142>
 800ba34:	6829      	ldr	r1, [r5, #0]
 800ba36:	f104 0c14 	add.w	ip, r4, #20
 800ba3a:	46ae      	mov	lr, r5
 800ba3c:	f04f 0a00 	mov.w	sl, #0
 800ba40:	f8bc b000 	ldrh.w	fp, [ip]
 800ba44:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800ba48:	fb09 220b 	mla	r2, r9, fp, r2
 800ba4c:	4492      	add	sl, r2
 800ba4e:	b289      	uxth	r1, r1
 800ba50:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800ba54:	f84e 1b04 	str.w	r1, [lr], #4
 800ba58:	f85c 2b04 	ldr.w	r2, [ip], #4
 800ba5c:	f8be 1000 	ldrh.w	r1, [lr]
 800ba60:	0c12      	lsrs	r2, r2, #16
 800ba62:	fb09 1102 	mla	r1, r9, r2, r1
 800ba66:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800ba6a:	4567      	cmp	r7, ip
 800ba6c:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800ba70:	d8e6      	bhi.n	800ba40 <__multiply+0x10c>
 800ba72:	9a01      	ldr	r2, [sp, #4]
 800ba74:	50a9      	str	r1, [r5, r2]
 800ba76:	3504      	adds	r5, #4
 800ba78:	e79a      	b.n	800b9b0 <__multiply+0x7c>
 800ba7a:	3e01      	subs	r6, #1
 800ba7c:	e79c      	b.n	800b9b8 <__multiply+0x84>
 800ba7e:	bf00      	nop
 800ba80:	0800e2e0 	.word	0x0800e2e0
 800ba84:	0800e383 	.word	0x0800e383

0800ba88 <__pow5mult>:
 800ba88:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ba8c:	4615      	mov	r5, r2
 800ba8e:	f012 0203 	ands.w	r2, r2, #3
 800ba92:	4606      	mov	r6, r0
 800ba94:	460f      	mov	r7, r1
 800ba96:	d007      	beq.n	800baa8 <__pow5mult+0x20>
 800ba98:	4c25      	ldr	r4, [pc, #148]	; (800bb30 <__pow5mult+0xa8>)
 800ba9a:	3a01      	subs	r2, #1
 800ba9c:	2300      	movs	r3, #0
 800ba9e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800baa2:	f7ff fe51 	bl	800b748 <__multadd>
 800baa6:	4607      	mov	r7, r0
 800baa8:	10ad      	asrs	r5, r5, #2
 800baaa:	d03d      	beq.n	800bb28 <__pow5mult+0xa0>
 800baac:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800baae:	b97c      	cbnz	r4, 800bad0 <__pow5mult+0x48>
 800bab0:	2010      	movs	r0, #16
 800bab2:	f7fd fea1 	bl	80097f8 <malloc>
 800bab6:	4602      	mov	r2, r0
 800bab8:	6270      	str	r0, [r6, #36]	; 0x24
 800baba:	b928      	cbnz	r0, 800bac8 <__pow5mult+0x40>
 800babc:	4b1d      	ldr	r3, [pc, #116]	; (800bb34 <__pow5mult+0xac>)
 800babe:	481e      	ldr	r0, [pc, #120]	; (800bb38 <__pow5mult+0xb0>)
 800bac0:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800bac4:	f001 fbe4 	bl	800d290 <__assert_func>
 800bac8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800bacc:	6004      	str	r4, [r0, #0]
 800bace:	60c4      	str	r4, [r0, #12]
 800bad0:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800bad4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800bad8:	b94c      	cbnz	r4, 800baee <__pow5mult+0x66>
 800bada:	f240 2171 	movw	r1, #625	; 0x271
 800bade:	4630      	mov	r0, r6
 800bae0:	f7ff ff12 	bl	800b908 <__i2b>
 800bae4:	2300      	movs	r3, #0
 800bae6:	f8c8 0008 	str.w	r0, [r8, #8]
 800baea:	4604      	mov	r4, r0
 800baec:	6003      	str	r3, [r0, #0]
 800baee:	f04f 0900 	mov.w	r9, #0
 800baf2:	07eb      	lsls	r3, r5, #31
 800baf4:	d50a      	bpl.n	800bb0c <__pow5mult+0x84>
 800baf6:	4639      	mov	r1, r7
 800baf8:	4622      	mov	r2, r4
 800bafa:	4630      	mov	r0, r6
 800bafc:	f7ff ff1a 	bl	800b934 <__multiply>
 800bb00:	4639      	mov	r1, r7
 800bb02:	4680      	mov	r8, r0
 800bb04:	4630      	mov	r0, r6
 800bb06:	f7ff fdfd 	bl	800b704 <_Bfree>
 800bb0a:	4647      	mov	r7, r8
 800bb0c:	106d      	asrs	r5, r5, #1
 800bb0e:	d00b      	beq.n	800bb28 <__pow5mult+0xa0>
 800bb10:	6820      	ldr	r0, [r4, #0]
 800bb12:	b938      	cbnz	r0, 800bb24 <__pow5mult+0x9c>
 800bb14:	4622      	mov	r2, r4
 800bb16:	4621      	mov	r1, r4
 800bb18:	4630      	mov	r0, r6
 800bb1a:	f7ff ff0b 	bl	800b934 <__multiply>
 800bb1e:	6020      	str	r0, [r4, #0]
 800bb20:	f8c0 9000 	str.w	r9, [r0]
 800bb24:	4604      	mov	r4, r0
 800bb26:	e7e4      	b.n	800baf2 <__pow5mult+0x6a>
 800bb28:	4638      	mov	r0, r7
 800bb2a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bb2e:	bf00      	nop
 800bb30:	0800e4d0 	.word	0x0800e4d0
 800bb34:	0800e36c 	.word	0x0800e36c
 800bb38:	0800e383 	.word	0x0800e383

0800bb3c <__lshift>:
 800bb3c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bb40:	460c      	mov	r4, r1
 800bb42:	6849      	ldr	r1, [r1, #4]
 800bb44:	6923      	ldr	r3, [r4, #16]
 800bb46:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800bb4a:	68a3      	ldr	r3, [r4, #8]
 800bb4c:	4607      	mov	r7, r0
 800bb4e:	4691      	mov	r9, r2
 800bb50:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800bb54:	f108 0601 	add.w	r6, r8, #1
 800bb58:	42b3      	cmp	r3, r6
 800bb5a:	db0b      	blt.n	800bb74 <__lshift+0x38>
 800bb5c:	4638      	mov	r0, r7
 800bb5e:	f7ff fd91 	bl	800b684 <_Balloc>
 800bb62:	4605      	mov	r5, r0
 800bb64:	b948      	cbnz	r0, 800bb7a <__lshift+0x3e>
 800bb66:	4602      	mov	r2, r0
 800bb68:	4b2a      	ldr	r3, [pc, #168]	; (800bc14 <__lshift+0xd8>)
 800bb6a:	482b      	ldr	r0, [pc, #172]	; (800bc18 <__lshift+0xdc>)
 800bb6c:	f240 11d9 	movw	r1, #473	; 0x1d9
 800bb70:	f001 fb8e 	bl	800d290 <__assert_func>
 800bb74:	3101      	adds	r1, #1
 800bb76:	005b      	lsls	r3, r3, #1
 800bb78:	e7ee      	b.n	800bb58 <__lshift+0x1c>
 800bb7a:	2300      	movs	r3, #0
 800bb7c:	f100 0114 	add.w	r1, r0, #20
 800bb80:	f100 0210 	add.w	r2, r0, #16
 800bb84:	4618      	mov	r0, r3
 800bb86:	4553      	cmp	r3, sl
 800bb88:	db37      	blt.n	800bbfa <__lshift+0xbe>
 800bb8a:	6920      	ldr	r0, [r4, #16]
 800bb8c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800bb90:	f104 0314 	add.w	r3, r4, #20
 800bb94:	f019 091f 	ands.w	r9, r9, #31
 800bb98:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800bb9c:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800bba0:	d02f      	beq.n	800bc02 <__lshift+0xc6>
 800bba2:	f1c9 0e20 	rsb	lr, r9, #32
 800bba6:	468a      	mov	sl, r1
 800bba8:	f04f 0c00 	mov.w	ip, #0
 800bbac:	681a      	ldr	r2, [r3, #0]
 800bbae:	fa02 f209 	lsl.w	r2, r2, r9
 800bbb2:	ea42 020c 	orr.w	r2, r2, ip
 800bbb6:	f84a 2b04 	str.w	r2, [sl], #4
 800bbba:	f853 2b04 	ldr.w	r2, [r3], #4
 800bbbe:	4298      	cmp	r0, r3
 800bbc0:	fa22 fc0e 	lsr.w	ip, r2, lr
 800bbc4:	d8f2      	bhi.n	800bbac <__lshift+0x70>
 800bbc6:	1b03      	subs	r3, r0, r4
 800bbc8:	3b15      	subs	r3, #21
 800bbca:	f023 0303 	bic.w	r3, r3, #3
 800bbce:	3304      	adds	r3, #4
 800bbd0:	f104 0215 	add.w	r2, r4, #21
 800bbd4:	4290      	cmp	r0, r2
 800bbd6:	bf38      	it	cc
 800bbd8:	2304      	movcc	r3, #4
 800bbda:	f841 c003 	str.w	ip, [r1, r3]
 800bbde:	f1bc 0f00 	cmp.w	ip, #0
 800bbe2:	d001      	beq.n	800bbe8 <__lshift+0xac>
 800bbe4:	f108 0602 	add.w	r6, r8, #2
 800bbe8:	3e01      	subs	r6, #1
 800bbea:	4638      	mov	r0, r7
 800bbec:	612e      	str	r6, [r5, #16]
 800bbee:	4621      	mov	r1, r4
 800bbf0:	f7ff fd88 	bl	800b704 <_Bfree>
 800bbf4:	4628      	mov	r0, r5
 800bbf6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bbfa:	f842 0f04 	str.w	r0, [r2, #4]!
 800bbfe:	3301      	adds	r3, #1
 800bc00:	e7c1      	b.n	800bb86 <__lshift+0x4a>
 800bc02:	3904      	subs	r1, #4
 800bc04:	f853 2b04 	ldr.w	r2, [r3], #4
 800bc08:	f841 2f04 	str.w	r2, [r1, #4]!
 800bc0c:	4298      	cmp	r0, r3
 800bc0e:	d8f9      	bhi.n	800bc04 <__lshift+0xc8>
 800bc10:	e7ea      	b.n	800bbe8 <__lshift+0xac>
 800bc12:	bf00      	nop
 800bc14:	0800e2e0 	.word	0x0800e2e0
 800bc18:	0800e383 	.word	0x0800e383

0800bc1c <__mcmp>:
 800bc1c:	b530      	push	{r4, r5, lr}
 800bc1e:	6902      	ldr	r2, [r0, #16]
 800bc20:	690c      	ldr	r4, [r1, #16]
 800bc22:	1b12      	subs	r2, r2, r4
 800bc24:	d10e      	bne.n	800bc44 <__mcmp+0x28>
 800bc26:	f100 0314 	add.w	r3, r0, #20
 800bc2a:	3114      	adds	r1, #20
 800bc2c:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800bc30:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800bc34:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800bc38:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800bc3c:	42a5      	cmp	r5, r4
 800bc3e:	d003      	beq.n	800bc48 <__mcmp+0x2c>
 800bc40:	d305      	bcc.n	800bc4e <__mcmp+0x32>
 800bc42:	2201      	movs	r2, #1
 800bc44:	4610      	mov	r0, r2
 800bc46:	bd30      	pop	{r4, r5, pc}
 800bc48:	4283      	cmp	r3, r0
 800bc4a:	d3f3      	bcc.n	800bc34 <__mcmp+0x18>
 800bc4c:	e7fa      	b.n	800bc44 <__mcmp+0x28>
 800bc4e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800bc52:	e7f7      	b.n	800bc44 <__mcmp+0x28>

0800bc54 <__mdiff>:
 800bc54:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bc58:	460c      	mov	r4, r1
 800bc5a:	4606      	mov	r6, r0
 800bc5c:	4611      	mov	r1, r2
 800bc5e:	4620      	mov	r0, r4
 800bc60:	4690      	mov	r8, r2
 800bc62:	f7ff ffdb 	bl	800bc1c <__mcmp>
 800bc66:	1e05      	subs	r5, r0, #0
 800bc68:	d110      	bne.n	800bc8c <__mdiff+0x38>
 800bc6a:	4629      	mov	r1, r5
 800bc6c:	4630      	mov	r0, r6
 800bc6e:	f7ff fd09 	bl	800b684 <_Balloc>
 800bc72:	b930      	cbnz	r0, 800bc82 <__mdiff+0x2e>
 800bc74:	4b3a      	ldr	r3, [pc, #232]	; (800bd60 <__mdiff+0x10c>)
 800bc76:	4602      	mov	r2, r0
 800bc78:	f240 2132 	movw	r1, #562	; 0x232
 800bc7c:	4839      	ldr	r0, [pc, #228]	; (800bd64 <__mdiff+0x110>)
 800bc7e:	f001 fb07 	bl	800d290 <__assert_func>
 800bc82:	2301      	movs	r3, #1
 800bc84:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800bc88:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bc8c:	bfa4      	itt	ge
 800bc8e:	4643      	movge	r3, r8
 800bc90:	46a0      	movge	r8, r4
 800bc92:	4630      	mov	r0, r6
 800bc94:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800bc98:	bfa6      	itte	ge
 800bc9a:	461c      	movge	r4, r3
 800bc9c:	2500      	movge	r5, #0
 800bc9e:	2501      	movlt	r5, #1
 800bca0:	f7ff fcf0 	bl	800b684 <_Balloc>
 800bca4:	b920      	cbnz	r0, 800bcb0 <__mdiff+0x5c>
 800bca6:	4b2e      	ldr	r3, [pc, #184]	; (800bd60 <__mdiff+0x10c>)
 800bca8:	4602      	mov	r2, r0
 800bcaa:	f44f 7110 	mov.w	r1, #576	; 0x240
 800bcae:	e7e5      	b.n	800bc7c <__mdiff+0x28>
 800bcb0:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800bcb4:	6926      	ldr	r6, [r4, #16]
 800bcb6:	60c5      	str	r5, [r0, #12]
 800bcb8:	f104 0914 	add.w	r9, r4, #20
 800bcbc:	f108 0514 	add.w	r5, r8, #20
 800bcc0:	f100 0e14 	add.w	lr, r0, #20
 800bcc4:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800bcc8:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800bccc:	f108 0210 	add.w	r2, r8, #16
 800bcd0:	46f2      	mov	sl, lr
 800bcd2:	2100      	movs	r1, #0
 800bcd4:	f859 3b04 	ldr.w	r3, [r9], #4
 800bcd8:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800bcdc:	fa1f f883 	uxth.w	r8, r3
 800bce0:	fa11 f18b 	uxtah	r1, r1, fp
 800bce4:	0c1b      	lsrs	r3, r3, #16
 800bce6:	eba1 0808 	sub.w	r8, r1, r8
 800bcea:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800bcee:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800bcf2:	fa1f f888 	uxth.w	r8, r8
 800bcf6:	1419      	asrs	r1, r3, #16
 800bcf8:	454e      	cmp	r6, r9
 800bcfa:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800bcfe:	f84a 3b04 	str.w	r3, [sl], #4
 800bd02:	d8e7      	bhi.n	800bcd4 <__mdiff+0x80>
 800bd04:	1b33      	subs	r3, r6, r4
 800bd06:	3b15      	subs	r3, #21
 800bd08:	f023 0303 	bic.w	r3, r3, #3
 800bd0c:	3304      	adds	r3, #4
 800bd0e:	3415      	adds	r4, #21
 800bd10:	42a6      	cmp	r6, r4
 800bd12:	bf38      	it	cc
 800bd14:	2304      	movcc	r3, #4
 800bd16:	441d      	add	r5, r3
 800bd18:	4473      	add	r3, lr
 800bd1a:	469e      	mov	lr, r3
 800bd1c:	462e      	mov	r6, r5
 800bd1e:	4566      	cmp	r6, ip
 800bd20:	d30e      	bcc.n	800bd40 <__mdiff+0xec>
 800bd22:	f10c 0203 	add.w	r2, ip, #3
 800bd26:	1b52      	subs	r2, r2, r5
 800bd28:	f022 0203 	bic.w	r2, r2, #3
 800bd2c:	3d03      	subs	r5, #3
 800bd2e:	45ac      	cmp	ip, r5
 800bd30:	bf38      	it	cc
 800bd32:	2200      	movcc	r2, #0
 800bd34:	441a      	add	r2, r3
 800bd36:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800bd3a:	b17b      	cbz	r3, 800bd5c <__mdiff+0x108>
 800bd3c:	6107      	str	r7, [r0, #16]
 800bd3e:	e7a3      	b.n	800bc88 <__mdiff+0x34>
 800bd40:	f856 8b04 	ldr.w	r8, [r6], #4
 800bd44:	fa11 f288 	uxtah	r2, r1, r8
 800bd48:	1414      	asrs	r4, r2, #16
 800bd4a:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800bd4e:	b292      	uxth	r2, r2
 800bd50:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800bd54:	f84e 2b04 	str.w	r2, [lr], #4
 800bd58:	1421      	asrs	r1, r4, #16
 800bd5a:	e7e0      	b.n	800bd1e <__mdiff+0xca>
 800bd5c:	3f01      	subs	r7, #1
 800bd5e:	e7ea      	b.n	800bd36 <__mdiff+0xe2>
 800bd60:	0800e2e0 	.word	0x0800e2e0
 800bd64:	0800e383 	.word	0x0800e383

0800bd68 <__ulp>:
 800bd68:	b082      	sub	sp, #8
 800bd6a:	ed8d 0b00 	vstr	d0, [sp]
 800bd6e:	9b01      	ldr	r3, [sp, #4]
 800bd70:	4912      	ldr	r1, [pc, #72]	; (800bdbc <__ulp+0x54>)
 800bd72:	4019      	ands	r1, r3
 800bd74:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 800bd78:	2900      	cmp	r1, #0
 800bd7a:	dd05      	ble.n	800bd88 <__ulp+0x20>
 800bd7c:	2200      	movs	r2, #0
 800bd7e:	460b      	mov	r3, r1
 800bd80:	ec43 2b10 	vmov	d0, r2, r3
 800bd84:	b002      	add	sp, #8
 800bd86:	4770      	bx	lr
 800bd88:	4249      	negs	r1, r1
 800bd8a:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 800bd8e:	ea4f 5021 	mov.w	r0, r1, asr #20
 800bd92:	f04f 0200 	mov.w	r2, #0
 800bd96:	f04f 0300 	mov.w	r3, #0
 800bd9a:	da04      	bge.n	800bda6 <__ulp+0x3e>
 800bd9c:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 800bda0:	fa41 f300 	asr.w	r3, r1, r0
 800bda4:	e7ec      	b.n	800bd80 <__ulp+0x18>
 800bda6:	f1a0 0114 	sub.w	r1, r0, #20
 800bdaa:	291e      	cmp	r1, #30
 800bdac:	bfda      	itte	le
 800bdae:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 800bdb2:	fa20 f101 	lsrle.w	r1, r0, r1
 800bdb6:	2101      	movgt	r1, #1
 800bdb8:	460a      	mov	r2, r1
 800bdba:	e7e1      	b.n	800bd80 <__ulp+0x18>
 800bdbc:	7ff00000 	.word	0x7ff00000

0800bdc0 <__b2d>:
 800bdc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bdc2:	6905      	ldr	r5, [r0, #16]
 800bdc4:	f100 0714 	add.w	r7, r0, #20
 800bdc8:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 800bdcc:	1f2e      	subs	r6, r5, #4
 800bdce:	f855 4c04 	ldr.w	r4, [r5, #-4]
 800bdd2:	4620      	mov	r0, r4
 800bdd4:	f7ff fd48 	bl	800b868 <__hi0bits>
 800bdd8:	f1c0 0320 	rsb	r3, r0, #32
 800bddc:	280a      	cmp	r0, #10
 800bdde:	f8df c07c 	ldr.w	ip, [pc, #124]	; 800be5c <__b2d+0x9c>
 800bde2:	600b      	str	r3, [r1, #0]
 800bde4:	dc14      	bgt.n	800be10 <__b2d+0x50>
 800bde6:	f1c0 0e0b 	rsb	lr, r0, #11
 800bdea:	fa24 f10e 	lsr.w	r1, r4, lr
 800bdee:	42b7      	cmp	r7, r6
 800bdf0:	ea41 030c 	orr.w	r3, r1, ip
 800bdf4:	bf34      	ite	cc
 800bdf6:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800bdfa:	2100      	movcs	r1, #0
 800bdfc:	3015      	adds	r0, #21
 800bdfe:	fa04 f000 	lsl.w	r0, r4, r0
 800be02:	fa21 f10e 	lsr.w	r1, r1, lr
 800be06:	ea40 0201 	orr.w	r2, r0, r1
 800be0a:	ec43 2b10 	vmov	d0, r2, r3
 800be0e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800be10:	42b7      	cmp	r7, r6
 800be12:	bf3a      	itte	cc
 800be14:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800be18:	f1a5 0608 	subcc.w	r6, r5, #8
 800be1c:	2100      	movcs	r1, #0
 800be1e:	380b      	subs	r0, #11
 800be20:	d017      	beq.n	800be52 <__b2d+0x92>
 800be22:	f1c0 0c20 	rsb	ip, r0, #32
 800be26:	fa04 f500 	lsl.w	r5, r4, r0
 800be2a:	42be      	cmp	r6, r7
 800be2c:	fa21 f40c 	lsr.w	r4, r1, ip
 800be30:	ea45 0504 	orr.w	r5, r5, r4
 800be34:	bf8c      	ite	hi
 800be36:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 800be3a:	2400      	movls	r4, #0
 800be3c:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 800be40:	fa01 f000 	lsl.w	r0, r1, r0
 800be44:	fa24 f40c 	lsr.w	r4, r4, ip
 800be48:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800be4c:	ea40 0204 	orr.w	r2, r0, r4
 800be50:	e7db      	b.n	800be0a <__b2d+0x4a>
 800be52:	ea44 030c 	orr.w	r3, r4, ip
 800be56:	460a      	mov	r2, r1
 800be58:	e7d7      	b.n	800be0a <__b2d+0x4a>
 800be5a:	bf00      	nop
 800be5c:	3ff00000 	.word	0x3ff00000

0800be60 <__d2b>:
 800be60:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800be64:	4689      	mov	r9, r1
 800be66:	2101      	movs	r1, #1
 800be68:	ec57 6b10 	vmov	r6, r7, d0
 800be6c:	4690      	mov	r8, r2
 800be6e:	f7ff fc09 	bl	800b684 <_Balloc>
 800be72:	4604      	mov	r4, r0
 800be74:	b930      	cbnz	r0, 800be84 <__d2b+0x24>
 800be76:	4602      	mov	r2, r0
 800be78:	4b25      	ldr	r3, [pc, #148]	; (800bf10 <__d2b+0xb0>)
 800be7a:	4826      	ldr	r0, [pc, #152]	; (800bf14 <__d2b+0xb4>)
 800be7c:	f240 310a 	movw	r1, #778	; 0x30a
 800be80:	f001 fa06 	bl	800d290 <__assert_func>
 800be84:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800be88:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800be8c:	bb35      	cbnz	r5, 800bedc <__d2b+0x7c>
 800be8e:	2e00      	cmp	r6, #0
 800be90:	9301      	str	r3, [sp, #4]
 800be92:	d028      	beq.n	800bee6 <__d2b+0x86>
 800be94:	4668      	mov	r0, sp
 800be96:	9600      	str	r6, [sp, #0]
 800be98:	f7ff fd06 	bl	800b8a8 <__lo0bits>
 800be9c:	9900      	ldr	r1, [sp, #0]
 800be9e:	b300      	cbz	r0, 800bee2 <__d2b+0x82>
 800bea0:	9a01      	ldr	r2, [sp, #4]
 800bea2:	f1c0 0320 	rsb	r3, r0, #32
 800bea6:	fa02 f303 	lsl.w	r3, r2, r3
 800beaa:	430b      	orrs	r3, r1
 800beac:	40c2      	lsrs	r2, r0
 800beae:	6163      	str	r3, [r4, #20]
 800beb0:	9201      	str	r2, [sp, #4]
 800beb2:	9b01      	ldr	r3, [sp, #4]
 800beb4:	61a3      	str	r3, [r4, #24]
 800beb6:	2b00      	cmp	r3, #0
 800beb8:	bf14      	ite	ne
 800beba:	2202      	movne	r2, #2
 800bebc:	2201      	moveq	r2, #1
 800bebe:	6122      	str	r2, [r4, #16]
 800bec0:	b1d5      	cbz	r5, 800bef8 <__d2b+0x98>
 800bec2:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800bec6:	4405      	add	r5, r0
 800bec8:	f8c9 5000 	str.w	r5, [r9]
 800becc:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800bed0:	f8c8 0000 	str.w	r0, [r8]
 800bed4:	4620      	mov	r0, r4
 800bed6:	b003      	add	sp, #12
 800bed8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800bedc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800bee0:	e7d5      	b.n	800be8e <__d2b+0x2e>
 800bee2:	6161      	str	r1, [r4, #20]
 800bee4:	e7e5      	b.n	800beb2 <__d2b+0x52>
 800bee6:	a801      	add	r0, sp, #4
 800bee8:	f7ff fcde 	bl	800b8a8 <__lo0bits>
 800beec:	9b01      	ldr	r3, [sp, #4]
 800beee:	6163      	str	r3, [r4, #20]
 800bef0:	2201      	movs	r2, #1
 800bef2:	6122      	str	r2, [r4, #16]
 800bef4:	3020      	adds	r0, #32
 800bef6:	e7e3      	b.n	800bec0 <__d2b+0x60>
 800bef8:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800befc:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800bf00:	f8c9 0000 	str.w	r0, [r9]
 800bf04:	6918      	ldr	r0, [r3, #16]
 800bf06:	f7ff fcaf 	bl	800b868 <__hi0bits>
 800bf0a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800bf0e:	e7df      	b.n	800bed0 <__d2b+0x70>
 800bf10:	0800e2e0 	.word	0x0800e2e0
 800bf14:	0800e383 	.word	0x0800e383

0800bf18 <__ratio>:
 800bf18:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bf1c:	4688      	mov	r8, r1
 800bf1e:	4669      	mov	r1, sp
 800bf20:	4681      	mov	r9, r0
 800bf22:	f7ff ff4d 	bl	800bdc0 <__b2d>
 800bf26:	a901      	add	r1, sp, #4
 800bf28:	4640      	mov	r0, r8
 800bf2a:	ec55 4b10 	vmov	r4, r5, d0
 800bf2e:	f7ff ff47 	bl	800bdc0 <__b2d>
 800bf32:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800bf36:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800bf3a:	eba3 0c02 	sub.w	ip, r3, r2
 800bf3e:	e9dd 3200 	ldrd	r3, r2, [sp]
 800bf42:	1a9b      	subs	r3, r3, r2
 800bf44:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800bf48:	ec51 0b10 	vmov	r0, r1, d0
 800bf4c:	2b00      	cmp	r3, #0
 800bf4e:	bfd6      	itet	le
 800bf50:	460a      	movle	r2, r1
 800bf52:	462a      	movgt	r2, r5
 800bf54:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800bf58:	468b      	mov	fp, r1
 800bf5a:	462f      	mov	r7, r5
 800bf5c:	bfd4      	ite	le
 800bf5e:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800bf62:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800bf66:	4620      	mov	r0, r4
 800bf68:	ee10 2a10 	vmov	r2, s0
 800bf6c:	465b      	mov	r3, fp
 800bf6e:	4639      	mov	r1, r7
 800bf70:	f7f4 fc7c 	bl	800086c <__aeabi_ddiv>
 800bf74:	ec41 0b10 	vmov	d0, r0, r1
 800bf78:	b003      	add	sp, #12
 800bf7a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800bf7e <__copybits>:
 800bf7e:	3901      	subs	r1, #1
 800bf80:	b570      	push	{r4, r5, r6, lr}
 800bf82:	1149      	asrs	r1, r1, #5
 800bf84:	6914      	ldr	r4, [r2, #16]
 800bf86:	3101      	adds	r1, #1
 800bf88:	f102 0314 	add.w	r3, r2, #20
 800bf8c:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800bf90:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800bf94:	1f05      	subs	r5, r0, #4
 800bf96:	42a3      	cmp	r3, r4
 800bf98:	d30c      	bcc.n	800bfb4 <__copybits+0x36>
 800bf9a:	1aa3      	subs	r3, r4, r2
 800bf9c:	3b11      	subs	r3, #17
 800bf9e:	f023 0303 	bic.w	r3, r3, #3
 800bfa2:	3211      	adds	r2, #17
 800bfa4:	42a2      	cmp	r2, r4
 800bfa6:	bf88      	it	hi
 800bfa8:	2300      	movhi	r3, #0
 800bfaa:	4418      	add	r0, r3
 800bfac:	2300      	movs	r3, #0
 800bfae:	4288      	cmp	r0, r1
 800bfb0:	d305      	bcc.n	800bfbe <__copybits+0x40>
 800bfb2:	bd70      	pop	{r4, r5, r6, pc}
 800bfb4:	f853 6b04 	ldr.w	r6, [r3], #4
 800bfb8:	f845 6f04 	str.w	r6, [r5, #4]!
 800bfbc:	e7eb      	b.n	800bf96 <__copybits+0x18>
 800bfbe:	f840 3b04 	str.w	r3, [r0], #4
 800bfc2:	e7f4      	b.n	800bfae <__copybits+0x30>

0800bfc4 <__any_on>:
 800bfc4:	f100 0214 	add.w	r2, r0, #20
 800bfc8:	6900      	ldr	r0, [r0, #16]
 800bfca:	114b      	asrs	r3, r1, #5
 800bfcc:	4298      	cmp	r0, r3
 800bfce:	b510      	push	{r4, lr}
 800bfd0:	db11      	blt.n	800bff6 <__any_on+0x32>
 800bfd2:	dd0a      	ble.n	800bfea <__any_on+0x26>
 800bfd4:	f011 011f 	ands.w	r1, r1, #31
 800bfd8:	d007      	beq.n	800bfea <__any_on+0x26>
 800bfda:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800bfde:	fa24 f001 	lsr.w	r0, r4, r1
 800bfe2:	fa00 f101 	lsl.w	r1, r0, r1
 800bfe6:	428c      	cmp	r4, r1
 800bfe8:	d10b      	bne.n	800c002 <__any_on+0x3e>
 800bfea:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800bfee:	4293      	cmp	r3, r2
 800bff0:	d803      	bhi.n	800bffa <__any_on+0x36>
 800bff2:	2000      	movs	r0, #0
 800bff4:	bd10      	pop	{r4, pc}
 800bff6:	4603      	mov	r3, r0
 800bff8:	e7f7      	b.n	800bfea <__any_on+0x26>
 800bffa:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800bffe:	2900      	cmp	r1, #0
 800c000:	d0f5      	beq.n	800bfee <__any_on+0x2a>
 800c002:	2001      	movs	r0, #1
 800c004:	e7f6      	b.n	800bff4 <__any_on+0x30>

0800c006 <_calloc_r>:
 800c006:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800c008:	fba1 2402 	umull	r2, r4, r1, r2
 800c00c:	b94c      	cbnz	r4, 800c022 <_calloc_r+0x1c>
 800c00e:	4611      	mov	r1, r2
 800c010:	9201      	str	r2, [sp, #4]
 800c012:	f7fd fc83 	bl	800991c <_malloc_r>
 800c016:	9a01      	ldr	r2, [sp, #4]
 800c018:	4605      	mov	r5, r0
 800c01a:	b930      	cbnz	r0, 800c02a <_calloc_r+0x24>
 800c01c:	4628      	mov	r0, r5
 800c01e:	b003      	add	sp, #12
 800c020:	bd30      	pop	{r4, r5, pc}
 800c022:	220c      	movs	r2, #12
 800c024:	6002      	str	r2, [r0, #0]
 800c026:	2500      	movs	r5, #0
 800c028:	e7f8      	b.n	800c01c <_calloc_r+0x16>
 800c02a:	4621      	mov	r1, r4
 800c02c:	f7fd fc02 	bl	8009834 <memset>
 800c030:	e7f4      	b.n	800c01c <_calloc_r+0x16>

0800c032 <_realloc_r>:
 800c032:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c036:	4680      	mov	r8, r0
 800c038:	4614      	mov	r4, r2
 800c03a:	460e      	mov	r6, r1
 800c03c:	b921      	cbnz	r1, 800c048 <_realloc_r+0x16>
 800c03e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c042:	4611      	mov	r1, r2
 800c044:	f7fd bc6a 	b.w	800991c <_malloc_r>
 800c048:	b92a      	cbnz	r2, 800c056 <_realloc_r+0x24>
 800c04a:	f7fd fbfb 	bl	8009844 <_free_r>
 800c04e:	4625      	mov	r5, r4
 800c050:	4628      	mov	r0, r5
 800c052:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c056:	f001 f987 	bl	800d368 <_malloc_usable_size_r>
 800c05a:	4284      	cmp	r4, r0
 800c05c:	4607      	mov	r7, r0
 800c05e:	d802      	bhi.n	800c066 <_realloc_r+0x34>
 800c060:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800c064:	d812      	bhi.n	800c08c <_realloc_r+0x5a>
 800c066:	4621      	mov	r1, r4
 800c068:	4640      	mov	r0, r8
 800c06a:	f7fd fc57 	bl	800991c <_malloc_r>
 800c06e:	4605      	mov	r5, r0
 800c070:	2800      	cmp	r0, #0
 800c072:	d0ed      	beq.n	800c050 <_realloc_r+0x1e>
 800c074:	42bc      	cmp	r4, r7
 800c076:	4622      	mov	r2, r4
 800c078:	4631      	mov	r1, r6
 800c07a:	bf28      	it	cs
 800c07c:	463a      	movcs	r2, r7
 800c07e:	f7fd fbcb 	bl	8009818 <memcpy>
 800c082:	4631      	mov	r1, r6
 800c084:	4640      	mov	r0, r8
 800c086:	f7fd fbdd 	bl	8009844 <_free_r>
 800c08a:	e7e1      	b.n	800c050 <_realloc_r+0x1e>
 800c08c:	4635      	mov	r5, r6
 800c08e:	e7df      	b.n	800c050 <_realloc_r+0x1e>

0800c090 <__ssputs_r>:
 800c090:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c094:	688e      	ldr	r6, [r1, #8]
 800c096:	429e      	cmp	r6, r3
 800c098:	4682      	mov	sl, r0
 800c09a:	460c      	mov	r4, r1
 800c09c:	4690      	mov	r8, r2
 800c09e:	461f      	mov	r7, r3
 800c0a0:	d838      	bhi.n	800c114 <__ssputs_r+0x84>
 800c0a2:	898a      	ldrh	r2, [r1, #12]
 800c0a4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800c0a8:	d032      	beq.n	800c110 <__ssputs_r+0x80>
 800c0aa:	6825      	ldr	r5, [r4, #0]
 800c0ac:	6909      	ldr	r1, [r1, #16]
 800c0ae:	eba5 0901 	sub.w	r9, r5, r1
 800c0b2:	6965      	ldr	r5, [r4, #20]
 800c0b4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800c0b8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800c0bc:	3301      	adds	r3, #1
 800c0be:	444b      	add	r3, r9
 800c0c0:	106d      	asrs	r5, r5, #1
 800c0c2:	429d      	cmp	r5, r3
 800c0c4:	bf38      	it	cc
 800c0c6:	461d      	movcc	r5, r3
 800c0c8:	0553      	lsls	r3, r2, #21
 800c0ca:	d531      	bpl.n	800c130 <__ssputs_r+0xa0>
 800c0cc:	4629      	mov	r1, r5
 800c0ce:	f7fd fc25 	bl	800991c <_malloc_r>
 800c0d2:	4606      	mov	r6, r0
 800c0d4:	b950      	cbnz	r0, 800c0ec <__ssputs_r+0x5c>
 800c0d6:	230c      	movs	r3, #12
 800c0d8:	f8ca 3000 	str.w	r3, [sl]
 800c0dc:	89a3      	ldrh	r3, [r4, #12]
 800c0de:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c0e2:	81a3      	strh	r3, [r4, #12]
 800c0e4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800c0e8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c0ec:	6921      	ldr	r1, [r4, #16]
 800c0ee:	464a      	mov	r2, r9
 800c0f0:	f7fd fb92 	bl	8009818 <memcpy>
 800c0f4:	89a3      	ldrh	r3, [r4, #12]
 800c0f6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800c0fa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c0fe:	81a3      	strh	r3, [r4, #12]
 800c100:	6126      	str	r6, [r4, #16]
 800c102:	6165      	str	r5, [r4, #20]
 800c104:	444e      	add	r6, r9
 800c106:	eba5 0509 	sub.w	r5, r5, r9
 800c10a:	6026      	str	r6, [r4, #0]
 800c10c:	60a5      	str	r5, [r4, #8]
 800c10e:	463e      	mov	r6, r7
 800c110:	42be      	cmp	r6, r7
 800c112:	d900      	bls.n	800c116 <__ssputs_r+0x86>
 800c114:	463e      	mov	r6, r7
 800c116:	6820      	ldr	r0, [r4, #0]
 800c118:	4632      	mov	r2, r6
 800c11a:	4641      	mov	r1, r8
 800c11c:	f001 f90a 	bl	800d334 <memmove>
 800c120:	68a3      	ldr	r3, [r4, #8]
 800c122:	1b9b      	subs	r3, r3, r6
 800c124:	60a3      	str	r3, [r4, #8]
 800c126:	6823      	ldr	r3, [r4, #0]
 800c128:	4433      	add	r3, r6
 800c12a:	6023      	str	r3, [r4, #0]
 800c12c:	2000      	movs	r0, #0
 800c12e:	e7db      	b.n	800c0e8 <__ssputs_r+0x58>
 800c130:	462a      	mov	r2, r5
 800c132:	f7ff ff7e 	bl	800c032 <_realloc_r>
 800c136:	4606      	mov	r6, r0
 800c138:	2800      	cmp	r0, #0
 800c13a:	d1e1      	bne.n	800c100 <__ssputs_r+0x70>
 800c13c:	6921      	ldr	r1, [r4, #16]
 800c13e:	4650      	mov	r0, sl
 800c140:	f7fd fb80 	bl	8009844 <_free_r>
 800c144:	e7c7      	b.n	800c0d6 <__ssputs_r+0x46>
	...

0800c148 <_svfiprintf_r>:
 800c148:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c14c:	4698      	mov	r8, r3
 800c14e:	898b      	ldrh	r3, [r1, #12]
 800c150:	061b      	lsls	r3, r3, #24
 800c152:	b09d      	sub	sp, #116	; 0x74
 800c154:	4607      	mov	r7, r0
 800c156:	460d      	mov	r5, r1
 800c158:	4614      	mov	r4, r2
 800c15a:	d50e      	bpl.n	800c17a <_svfiprintf_r+0x32>
 800c15c:	690b      	ldr	r3, [r1, #16]
 800c15e:	b963      	cbnz	r3, 800c17a <_svfiprintf_r+0x32>
 800c160:	2140      	movs	r1, #64	; 0x40
 800c162:	f7fd fbdb 	bl	800991c <_malloc_r>
 800c166:	6028      	str	r0, [r5, #0]
 800c168:	6128      	str	r0, [r5, #16]
 800c16a:	b920      	cbnz	r0, 800c176 <_svfiprintf_r+0x2e>
 800c16c:	230c      	movs	r3, #12
 800c16e:	603b      	str	r3, [r7, #0]
 800c170:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800c174:	e0d1      	b.n	800c31a <_svfiprintf_r+0x1d2>
 800c176:	2340      	movs	r3, #64	; 0x40
 800c178:	616b      	str	r3, [r5, #20]
 800c17a:	2300      	movs	r3, #0
 800c17c:	9309      	str	r3, [sp, #36]	; 0x24
 800c17e:	2320      	movs	r3, #32
 800c180:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800c184:	f8cd 800c 	str.w	r8, [sp, #12]
 800c188:	2330      	movs	r3, #48	; 0x30
 800c18a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800c334 <_svfiprintf_r+0x1ec>
 800c18e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800c192:	f04f 0901 	mov.w	r9, #1
 800c196:	4623      	mov	r3, r4
 800c198:	469a      	mov	sl, r3
 800c19a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c19e:	b10a      	cbz	r2, 800c1a4 <_svfiprintf_r+0x5c>
 800c1a0:	2a25      	cmp	r2, #37	; 0x25
 800c1a2:	d1f9      	bne.n	800c198 <_svfiprintf_r+0x50>
 800c1a4:	ebba 0b04 	subs.w	fp, sl, r4
 800c1a8:	d00b      	beq.n	800c1c2 <_svfiprintf_r+0x7a>
 800c1aa:	465b      	mov	r3, fp
 800c1ac:	4622      	mov	r2, r4
 800c1ae:	4629      	mov	r1, r5
 800c1b0:	4638      	mov	r0, r7
 800c1b2:	f7ff ff6d 	bl	800c090 <__ssputs_r>
 800c1b6:	3001      	adds	r0, #1
 800c1b8:	f000 80aa 	beq.w	800c310 <_svfiprintf_r+0x1c8>
 800c1bc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c1be:	445a      	add	r2, fp
 800c1c0:	9209      	str	r2, [sp, #36]	; 0x24
 800c1c2:	f89a 3000 	ldrb.w	r3, [sl]
 800c1c6:	2b00      	cmp	r3, #0
 800c1c8:	f000 80a2 	beq.w	800c310 <_svfiprintf_r+0x1c8>
 800c1cc:	2300      	movs	r3, #0
 800c1ce:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800c1d2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c1d6:	f10a 0a01 	add.w	sl, sl, #1
 800c1da:	9304      	str	r3, [sp, #16]
 800c1dc:	9307      	str	r3, [sp, #28]
 800c1de:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800c1e2:	931a      	str	r3, [sp, #104]	; 0x68
 800c1e4:	4654      	mov	r4, sl
 800c1e6:	2205      	movs	r2, #5
 800c1e8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c1ec:	4851      	ldr	r0, [pc, #324]	; (800c334 <_svfiprintf_r+0x1ec>)
 800c1ee:	f7f4 f807 	bl	8000200 <memchr>
 800c1f2:	9a04      	ldr	r2, [sp, #16]
 800c1f4:	b9d8      	cbnz	r0, 800c22e <_svfiprintf_r+0xe6>
 800c1f6:	06d0      	lsls	r0, r2, #27
 800c1f8:	bf44      	itt	mi
 800c1fa:	2320      	movmi	r3, #32
 800c1fc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c200:	0711      	lsls	r1, r2, #28
 800c202:	bf44      	itt	mi
 800c204:	232b      	movmi	r3, #43	; 0x2b
 800c206:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c20a:	f89a 3000 	ldrb.w	r3, [sl]
 800c20e:	2b2a      	cmp	r3, #42	; 0x2a
 800c210:	d015      	beq.n	800c23e <_svfiprintf_r+0xf6>
 800c212:	9a07      	ldr	r2, [sp, #28]
 800c214:	4654      	mov	r4, sl
 800c216:	2000      	movs	r0, #0
 800c218:	f04f 0c0a 	mov.w	ip, #10
 800c21c:	4621      	mov	r1, r4
 800c21e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c222:	3b30      	subs	r3, #48	; 0x30
 800c224:	2b09      	cmp	r3, #9
 800c226:	d94e      	bls.n	800c2c6 <_svfiprintf_r+0x17e>
 800c228:	b1b0      	cbz	r0, 800c258 <_svfiprintf_r+0x110>
 800c22a:	9207      	str	r2, [sp, #28]
 800c22c:	e014      	b.n	800c258 <_svfiprintf_r+0x110>
 800c22e:	eba0 0308 	sub.w	r3, r0, r8
 800c232:	fa09 f303 	lsl.w	r3, r9, r3
 800c236:	4313      	orrs	r3, r2
 800c238:	9304      	str	r3, [sp, #16]
 800c23a:	46a2      	mov	sl, r4
 800c23c:	e7d2      	b.n	800c1e4 <_svfiprintf_r+0x9c>
 800c23e:	9b03      	ldr	r3, [sp, #12]
 800c240:	1d19      	adds	r1, r3, #4
 800c242:	681b      	ldr	r3, [r3, #0]
 800c244:	9103      	str	r1, [sp, #12]
 800c246:	2b00      	cmp	r3, #0
 800c248:	bfbb      	ittet	lt
 800c24a:	425b      	neglt	r3, r3
 800c24c:	f042 0202 	orrlt.w	r2, r2, #2
 800c250:	9307      	strge	r3, [sp, #28]
 800c252:	9307      	strlt	r3, [sp, #28]
 800c254:	bfb8      	it	lt
 800c256:	9204      	strlt	r2, [sp, #16]
 800c258:	7823      	ldrb	r3, [r4, #0]
 800c25a:	2b2e      	cmp	r3, #46	; 0x2e
 800c25c:	d10c      	bne.n	800c278 <_svfiprintf_r+0x130>
 800c25e:	7863      	ldrb	r3, [r4, #1]
 800c260:	2b2a      	cmp	r3, #42	; 0x2a
 800c262:	d135      	bne.n	800c2d0 <_svfiprintf_r+0x188>
 800c264:	9b03      	ldr	r3, [sp, #12]
 800c266:	1d1a      	adds	r2, r3, #4
 800c268:	681b      	ldr	r3, [r3, #0]
 800c26a:	9203      	str	r2, [sp, #12]
 800c26c:	2b00      	cmp	r3, #0
 800c26e:	bfb8      	it	lt
 800c270:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800c274:	3402      	adds	r4, #2
 800c276:	9305      	str	r3, [sp, #20]
 800c278:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800c344 <_svfiprintf_r+0x1fc>
 800c27c:	7821      	ldrb	r1, [r4, #0]
 800c27e:	2203      	movs	r2, #3
 800c280:	4650      	mov	r0, sl
 800c282:	f7f3 ffbd 	bl	8000200 <memchr>
 800c286:	b140      	cbz	r0, 800c29a <_svfiprintf_r+0x152>
 800c288:	2340      	movs	r3, #64	; 0x40
 800c28a:	eba0 000a 	sub.w	r0, r0, sl
 800c28e:	fa03 f000 	lsl.w	r0, r3, r0
 800c292:	9b04      	ldr	r3, [sp, #16]
 800c294:	4303      	orrs	r3, r0
 800c296:	3401      	adds	r4, #1
 800c298:	9304      	str	r3, [sp, #16]
 800c29a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c29e:	4826      	ldr	r0, [pc, #152]	; (800c338 <_svfiprintf_r+0x1f0>)
 800c2a0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800c2a4:	2206      	movs	r2, #6
 800c2a6:	f7f3 ffab 	bl	8000200 <memchr>
 800c2aa:	2800      	cmp	r0, #0
 800c2ac:	d038      	beq.n	800c320 <_svfiprintf_r+0x1d8>
 800c2ae:	4b23      	ldr	r3, [pc, #140]	; (800c33c <_svfiprintf_r+0x1f4>)
 800c2b0:	bb1b      	cbnz	r3, 800c2fa <_svfiprintf_r+0x1b2>
 800c2b2:	9b03      	ldr	r3, [sp, #12]
 800c2b4:	3307      	adds	r3, #7
 800c2b6:	f023 0307 	bic.w	r3, r3, #7
 800c2ba:	3308      	adds	r3, #8
 800c2bc:	9303      	str	r3, [sp, #12]
 800c2be:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c2c0:	4433      	add	r3, r6
 800c2c2:	9309      	str	r3, [sp, #36]	; 0x24
 800c2c4:	e767      	b.n	800c196 <_svfiprintf_r+0x4e>
 800c2c6:	fb0c 3202 	mla	r2, ip, r2, r3
 800c2ca:	460c      	mov	r4, r1
 800c2cc:	2001      	movs	r0, #1
 800c2ce:	e7a5      	b.n	800c21c <_svfiprintf_r+0xd4>
 800c2d0:	2300      	movs	r3, #0
 800c2d2:	3401      	adds	r4, #1
 800c2d4:	9305      	str	r3, [sp, #20]
 800c2d6:	4619      	mov	r1, r3
 800c2d8:	f04f 0c0a 	mov.w	ip, #10
 800c2dc:	4620      	mov	r0, r4
 800c2de:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c2e2:	3a30      	subs	r2, #48	; 0x30
 800c2e4:	2a09      	cmp	r2, #9
 800c2e6:	d903      	bls.n	800c2f0 <_svfiprintf_r+0x1a8>
 800c2e8:	2b00      	cmp	r3, #0
 800c2ea:	d0c5      	beq.n	800c278 <_svfiprintf_r+0x130>
 800c2ec:	9105      	str	r1, [sp, #20]
 800c2ee:	e7c3      	b.n	800c278 <_svfiprintf_r+0x130>
 800c2f0:	fb0c 2101 	mla	r1, ip, r1, r2
 800c2f4:	4604      	mov	r4, r0
 800c2f6:	2301      	movs	r3, #1
 800c2f8:	e7f0      	b.n	800c2dc <_svfiprintf_r+0x194>
 800c2fa:	ab03      	add	r3, sp, #12
 800c2fc:	9300      	str	r3, [sp, #0]
 800c2fe:	462a      	mov	r2, r5
 800c300:	4b0f      	ldr	r3, [pc, #60]	; (800c340 <_svfiprintf_r+0x1f8>)
 800c302:	a904      	add	r1, sp, #16
 800c304:	4638      	mov	r0, r7
 800c306:	f3af 8000 	nop.w
 800c30a:	1c42      	adds	r2, r0, #1
 800c30c:	4606      	mov	r6, r0
 800c30e:	d1d6      	bne.n	800c2be <_svfiprintf_r+0x176>
 800c310:	89ab      	ldrh	r3, [r5, #12]
 800c312:	065b      	lsls	r3, r3, #25
 800c314:	f53f af2c 	bmi.w	800c170 <_svfiprintf_r+0x28>
 800c318:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c31a:	b01d      	add	sp, #116	; 0x74
 800c31c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c320:	ab03      	add	r3, sp, #12
 800c322:	9300      	str	r3, [sp, #0]
 800c324:	462a      	mov	r2, r5
 800c326:	4b06      	ldr	r3, [pc, #24]	; (800c340 <_svfiprintf_r+0x1f8>)
 800c328:	a904      	add	r1, sp, #16
 800c32a:	4638      	mov	r0, r7
 800c32c:	f000 fba6 	bl	800ca7c <_printf_i>
 800c330:	e7eb      	b.n	800c30a <_svfiprintf_r+0x1c2>
 800c332:	bf00      	nop
 800c334:	0800e4dc 	.word	0x0800e4dc
 800c338:	0800e4e6 	.word	0x0800e4e6
 800c33c:	00000000 	.word	0x00000000
 800c340:	0800c091 	.word	0x0800c091
 800c344:	0800e4e2 	.word	0x0800e4e2

0800c348 <_sungetc_r>:
 800c348:	b538      	push	{r3, r4, r5, lr}
 800c34a:	1c4b      	adds	r3, r1, #1
 800c34c:	4614      	mov	r4, r2
 800c34e:	d103      	bne.n	800c358 <_sungetc_r+0x10>
 800c350:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 800c354:	4628      	mov	r0, r5
 800c356:	bd38      	pop	{r3, r4, r5, pc}
 800c358:	8993      	ldrh	r3, [r2, #12]
 800c35a:	f023 0320 	bic.w	r3, r3, #32
 800c35e:	8193      	strh	r3, [r2, #12]
 800c360:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800c362:	6852      	ldr	r2, [r2, #4]
 800c364:	b2cd      	uxtb	r5, r1
 800c366:	b18b      	cbz	r3, 800c38c <_sungetc_r+0x44>
 800c368:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800c36a:	4293      	cmp	r3, r2
 800c36c:	dd08      	ble.n	800c380 <_sungetc_r+0x38>
 800c36e:	6823      	ldr	r3, [r4, #0]
 800c370:	1e5a      	subs	r2, r3, #1
 800c372:	6022      	str	r2, [r4, #0]
 800c374:	f803 5c01 	strb.w	r5, [r3, #-1]
 800c378:	6863      	ldr	r3, [r4, #4]
 800c37a:	3301      	adds	r3, #1
 800c37c:	6063      	str	r3, [r4, #4]
 800c37e:	e7e9      	b.n	800c354 <_sungetc_r+0xc>
 800c380:	4621      	mov	r1, r4
 800c382:	f000 ff3d 	bl	800d200 <__submore>
 800c386:	2800      	cmp	r0, #0
 800c388:	d0f1      	beq.n	800c36e <_sungetc_r+0x26>
 800c38a:	e7e1      	b.n	800c350 <_sungetc_r+0x8>
 800c38c:	6921      	ldr	r1, [r4, #16]
 800c38e:	6823      	ldr	r3, [r4, #0]
 800c390:	b151      	cbz	r1, 800c3a8 <_sungetc_r+0x60>
 800c392:	4299      	cmp	r1, r3
 800c394:	d208      	bcs.n	800c3a8 <_sungetc_r+0x60>
 800c396:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 800c39a:	42a9      	cmp	r1, r5
 800c39c:	d104      	bne.n	800c3a8 <_sungetc_r+0x60>
 800c39e:	3b01      	subs	r3, #1
 800c3a0:	3201      	adds	r2, #1
 800c3a2:	6023      	str	r3, [r4, #0]
 800c3a4:	6062      	str	r2, [r4, #4]
 800c3a6:	e7d5      	b.n	800c354 <_sungetc_r+0xc>
 800c3a8:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 800c3ac:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c3b0:	6363      	str	r3, [r4, #52]	; 0x34
 800c3b2:	2303      	movs	r3, #3
 800c3b4:	63a3      	str	r3, [r4, #56]	; 0x38
 800c3b6:	4623      	mov	r3, r4
 800c3b8:	f803 5f46 	strb.w	r5, [r3, #70]!
 800c3bc:	6023      	str	r3, [r4, #0]
 800c3be:	2301      	movs	r3, #1
 800c3c0:	e7dc      	b.n	800c37c <_sungetc_r+0x34>

0800c3c2 <__ssrefill_r>:
 800c3c2:	b510      	push	{r4, lr}
 800c3c4:	460c      	mov	r4, r1
 800c3c6:	6b49      	ldr	r1, [r1, #52]	; 0x34
 800c3c8:	b169      	cbz	r1, 800c3e6 <__ssrefill_r+0x24>
 800c3ca:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c3ce:	4299      	cmp	r1, r3
 800c3d0:	d001      	beq.n	800c3d6 <__ssrefill_r+0x14>
 800c3d2:	f7fd fa37 	bl	8009844 <_free_r>
 800c3d6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800c3d8:	6063      	str	r3, [r4, #4]
 800c3da:	2000      	movs	r0, #0
 800c3dc:	6360      	str	r0, [r4, #52]	; 0x34
 800c3de:	b113      	cbz	r3, 800c3e6 <__ssrefill_r+0x24>
 800c3e0:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800c3e2:	6023      	str	r3, [r4, #0]
 800c3e4:	bd10      	pop	{r4, pc}
 800c3e6:	6923      	ldr	r3, [r4, #16]
 800c3e8:	6023      	str	r3, [r4, #0]
 800c3ea:	2300      	movs	r3, #0
 800c3ec:	6063      	str	r3, [r4, #4]
 800c3ee:	89a3      	ldrh	r3, [r4, #12]
 800c3f0:	f043 0320 	orr.w	r3, r3, #32
 800c3f4:	81a3      	strh	r3, [r4, #12]
 800c3f6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800c3fa:	e7f3      	b.n	800c3e4 <__ssrefill_r+0x22>

0800c3fc <__ssvfiscanf_r>:
 800c3fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c400:	460c      	mov	r4, r1
 800c402:	f5ad 7d22 	sub.w	sp, sp, #648	; 0x288
 800c406:	2100      	movs	r1, #0
 800c408:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
 800c40c:	49a6      	ldr	r1, [pc, #664]	; (800c6a8 <__ssvfiscanf_r+0x2ac>)
 800c40e:	91a0      	str	r1, [sp, #640]	; 0x280
 800c410:	f10d 0804 	add.w	r8, sp, #4
 800c414:	49a5      	ldr	r1, [pc, #660]	; (800c6ac <__ssvfiscanf_r+0x2b0>)
 800c416:	4fa6      	ldr	r7, [pc, #664]	; (800c6b0 <__ssvfiscanf_r+0x2b4>)
 800c418:	f8df 9298 	ldr.w	r9, [pc, #664]	; 800c6b4 <__ssvfiscanf_r+0x2b8>
 800c41c:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 800c420:	4606      	mov	r6, r0
 800c422:	91a1      	str	r1, [sp, #644]	; 0x284
 800c424:	9300      	str	r3, [sp, #0]
 800c426:	7813      	ldrb	r3, [r2, #0]
 800c428:	2b00      	cmp	r3, #0
 800c42a:	f000 815a 	beq.w	800c6e2 <__ssvfiscanf_r+0x2e6>
 800c42e:	5dd9      	ldrb	r1, [r3, r7]
 800c430:	f011 0108 	ands.w	r1, r1, #8
 800c434:	f102 0501 	add.w	r5, r2, #1
 800c438:	d019      	beq.n	800c46e <__ssvfiscanf_r+0x72>
 800c43a:	6863      	ldr	r3, [r4, #4]
 800c43c:	2b00      	cmp	r3, #0
 800c43e:	dd0f      	ble.n	800c460 <__ssvfiscanf_r+0x64>
 800c440:	6823      	ldr	r3, [r4, #0]
 800c442:	781a      	ldrb	r2, [r3, #0]
 800c444:	5cba      	ldrb	r2, [r7, r2]
 800c446:	0712      	lsls	r2, r2, #28
 800c448:	d401      	bmi.n	800c44e <__ssvfiscanf_r+0x52>
 800c44a:	462a      	mov	r2, r5
 800c44c:	e7eb      	b.n	800c426 <__ssvfiscanf_r+0x2a>
 800c44e:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800c450:	3201      	adds	r2, #1
 800c452:	9245      	str	r2, [sp, #276]	; 0x114
 800c454:	6862      	ldr	r2, [r4, #4]
 800c456:	3301      	adds	r3, #1
 800c458:	3a01      	subs	r2, #1
 800c45a:	6062      	str	r2, [r4, #4]
 800c45c:	6023      	str	r3, [r4, #0]
 800c45e:	e7ec      	b.n	800c43a <__ssvfiscanf_r+0x3e>
 800c460:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800c462:	4621      	mov	r1, r4
 800c464:	4630      	mov	r0, r6
 800c466:	4798      	blx	r3
 800c468:	2800      	cmp	r0, #0
 800c46a:	d0e9      	beq.n	800c440 <__ssvfiscanf_r+0x44>
 800c46c:	e7ed      	b.n	800c44a <__ssvfiscanf_r+0x4e>
 800c46e:	2b25      	cmp	r3, #37	; 0x25
 800c470:	d012      	beq.n	800c498 <__ssvfiscanf_r+0x9c>
 800c472:	469a      	mov	sl, r3
 800c474:	6863      	ldr	r3, [r4, #4]
 800c476:	2b00      	cmp	r3, #0
 800c478:	f340 8091 	ble.w	800c59e <__ssvfiscanf_r+0x1a2>
 800c47c:	6822      	ldr	r2, [r4, #0]
 800c47e:	7813      	ldrb	r3, [r2, #0]
 800c480:	4553      	cmp	r3, sl
 800c482:	f040 812e 	bne.w	800c6e2 <__ssvfiscanf_r+0x2e6>
 800c486:	6863      	ldr	r3, [r4, #4]
 800c488:	3b01      	subs	r3, #1
 800c48a:	6063      	str	r3, [r4, #4]
 800c48c:	9b45      	ldr	r3, [sp, #276]	; 0x114
 800c48e:	3201      	adds	r2, #1
 800c490:	3301      	adds	r3, #1
 800c492:	6022      	str	r2, [r4, #0]
 800c494:	9345      	str	r3, [sp, #276]	; 0x114
 800c496:	e7d8      	b.n	800c44a <__ssvfiscanf_r+0x4e>
 800c498:	9141      	str	r1, [sp, #260]	; 0x104
 800c49a:	9143      	str	r1, [sp, #268]	; 0x10c
 800c49c:	7853      	ldrb	r3, [r2, #1]
 800c49e:	2b2a      	cmp	r3, #42	; 0x2a
 800c4a0:	bf02      	ittt	eq
 800c4a2:	2310      	moveq	r3, #16
 800c4a4:	1c95      	addeq	r5, r2, #2
 800c4a6:	9341      	streq	r3, [sp, #260]	; 0x104
 800c4a8:	220a      	movs	r2, #10
 800c4aa:	46aa      	mov	sl, r5
 800c4ac:	f81a 1b01 	ldrb.w	r1, [sl], #1
 800c4b0:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 800c4b4:	2b09      	cmp	r3, #9
 800c4b6:	d91d      	bls.n	800c4f4 <__ssvfiscanf_r+0xf8>
 800c4b8:	487e      	ldr	r0, [pc, #504]	; (800c6b4 <__ssvfiscanf_r+0x2b8>)
 800c4ba:	2203      	movs	r2, #3
 800c4bc:	f7f3 fea0 	bl	8000200 <memchr>
 800c4c0:	b140      	cbz	r0, 800c4d4 <__ssvfiscanf_r+0xd8>
 800c4c2:	2301      	movs	r3, #1
 800c4c4:	eba0 0009 	sub.w	r0, r0, r9
 800c4c8:	fa03 f000 	lsl.w	r0, r3, r0
 800c4cc:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800c4ce:	4318      	orrs	r0, r3
 800c4d0:	9041      	str	r0, [sp, #260]	; 0x104
 800c4d2:	4655      	mov	r5, sl
 800c4d4:	f815 3b01 	ldrb.w	r3, [r5], #1
 800c4d8:	2b78      	cmp	r3, #120	; 0x78
 800c4da:	d806      	bhi.n	800c4ea <__ssvfiscanf_r+0xee>
 800c4dc:	2b57      	cmp	r3, #87	; 0x57
 800c4de:	d810      	bhi.n	800c502 <__ssvfiscanf_r+0x106>
 800c4e0:	2b25      	cmp	r3, #37	; 0x25
 800c4e2:	d0c6      	beq.n	800c472 <__ssvfiscanf_r+0x76>
 800c4e4:	d856      	bhi.n	800c594 <__ssvfiscanf_r+0x198>
 800c4e6:	2b00      	cmp	r3, #0
 800c4e8:	d064      	beq.n	800c5b4 <__ssvfiscanf_r+0x1b8>
 800c4ea:	2303      	movs	r3, #3
 800c4ec:	9347      	str	r3, [sp, #284]	; 0x11c
 800c4ee:	230a      	movs	r3, #10
 800c4f0:	9342      	str	r3, [sp, #264]	; 0x108
 800c4f2:	e071      	b.n	800c5d8 <__ssvfiscanf_r+0x1dc>
 800c4f4:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 800c4f6:	fb02 1103 	mla	r1, r2, r3, r1
 800c4fa:	3930      	subs	r1, #48	; 0x30
 800c4fc:	9143      	str	r1, [sp, #268]	; 0x10c
 800c4fe:	4655      	mov	r5, sl
 800c500:	e7d3      	b.n	800c4aa <__ssvfiscanf_r+0xae>
 800c502:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 800c506:	2a20      	cmp	r2, #32
 800c508:	d8ef      	bhi.n	800c4ea <__ssvfiscanf_r+0xee>
 800c50a:	a101      	add	r1, pc, #4	; (adr r1, 800c510 <__ssvfiscanf_r+0x114>)
 800c50c:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800c510:	0800c5c3 	.word	0x0800c5c3
 800c514:	0800c4eb 	.word	0x0800c4eb
 800c518:	0800c4eb 	.word	0x0800c4eb
 800c51c:	0800c621 	.word	0x0800c621
 800c520:	0800c4eb 	.word	0x0800c4eb
 800c524:	0800c4eb 	.word	0x0800c4eb
 800c528:	0800c4eb 	.word	0x0800c4eb
 800c52c:	0800c4eb 	.word	0x0800c4eb
 800c530:	0800c4eb 	.word	0x0800c4eb
 800c534:	0800c4eb 	.word	0x0800c4eb
 800c538:	0800c4eb 	.word	0x0800c4eb
 800c53c:	0800c637 	.word	0x0800c637
 800c540:	0800c60d 	.word	0x0800c60d
 800c544:	0800c59b 	.word	0x0800c59b
 800c548:	0800c59b 	.word	0x0800c59b
 800c54c:	0800c59b 	.word	0x0800c59b
 800c550:	0800c4eb 	.word	0x0800c4eb
 800c554:	0800c611 	.word	0x0800c611
 800c558:	0800c4eb 	.word	0x0800c4eb
 800c55c:	0800c4eb 	.word	0x0800c4eb
 800c560:	0800c4eb 	.word	0x0800c4eb
 800c564:	0800c4eb 	.word	0x0800c4eb
 800c568:	0800c647 	.word	0x0800c647
 800c56c:	0800c619 	.word	0x0800c619
 800c570:	0800c5bb 	.word	0x0800c5bb
 800c574:	0800c4eb 	.word	0x0800c4eb
 800c578:	0800c4eb 	.word	0x0800c4eb
 800c57c:	0800c643 	.word	0x0800c643
 800c580:	0800c4eb 	.word	0x0800c4eb
 800c584:	0800c60d 	.word	0x0800c60d
 800c588:	0800c4eb 	.word	0x0800c4eb
 800c58c:	0800c4eb 	.word	0x0800c4eb
 800c590:	0800c5c3 	.word	0x0800c5c3
 800c594:	3b45      	subs	r3, #69	; 0x45
 800c596:	2b02      	cmp	r3, #2
 800c598:	d8a7      	bhi.n	800c4ea <__ssvfiscanf_r+0xee>
 800c59a:	2305      	movs	r3, #5
 800c59c:	e01b      	b.n	800c5d6 <__ssvfiscanf_r+0x1da>
 800c59e:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800c5a0:	4621      	mov	r1, r4
 800c5a2:	4630      	mov	r0, r6
 800c5a4:	4798      	blx	r3
 800c5a6:	2800      	cmp	r0, #0
 800c5a8:	f43f af68 	beq.w	800c47c <__ssvfiscanf_r+0x80>
 800c5ac:	9844      	ldr	r0, [sp, #272]	; 0x110
 800c5ae:	2800      	cmp	r0, #0
 800c5b0:	f040 808d 	bne.w	800c6ce <__ssvfiscanf_r+0x2d2>
 800c5b4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800c5b8:	e08f      	b.n	800c6da <__ssvfiscanf_r+0x2de>
 800c5ba:	9a41      	ldr	r2, [sp, #260]	; 0x104
 800c5bc:	f042 0220 	orr.w	r2, r2, #32
 800c5c0:	9241      	str	r2, [sp, #260]	; 0x104
 800c5c2:	9a41      	ldr	r2, [sp, #260]	; 0x104
 800c5c4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800c5c8:	9241      	str	r2, [sp, #260]	; 0x104
 800c5ca:	2210      	movs	r2, #16
 800c5cc:	2b6f      	cmp	r3, #111	; 0x6f
 800c5ce:	9242      	str	r2, [sp, #264]	; 0x108
 800c5d0:	bf34      	ite	cc
 800c5d2:	2303      	movcc	r3, #3
 800c5d4:	2304      	movcs	r3, #4
 800c5d6:	9347      	str	r3, [sp, #284]	; 0x11c
 800c5d8:	6863      	ldr	r3, [r4, #4]
 800c5da:	2b00      	cmp	r3, #0
 800c5dc:	dd42      	ble.n	800c664 <__ssvfiscanf_r+0x268>
 800c5de:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800c5e0:	0659      	lsls	r1, r3, #25
 800c5e2:	d404      	bmi.n	800c5ee <__ssvfiscanf_r+0x1f2>
 800c5e4:	6823      	ldr	r3, [r4, #0]
 800c5e6:	781a      	ldrb	r2, [r3, #0]
 800c5e8:	5cba      	ldrb	r2, [r7, r2]
 800c5ea:	0712      	lsls	r2, r2, #28
 800c5ec:	d441      	bmi.n	800c672 <__ssvfiscanf_r+0x276>
 800c5ee:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 800c5f0:	2b02      	cmp	r3, #2
 800c5f2:	dc50      	bgt.n	800c696 <__ssvfiscanf_r+0x29a>
 800c5f4:	466b      	mov	r3, sp
 800c5f6:	4622      	mov	r2, r4
 800c5f8:	a941      	add	r1, sp, #260	; 0x104
 800c5fa:	4630      	mov	r0, r6
 800c5fc:	f000 fb64 	bl	800ccc8 <_scanf_chars>
 800c600:	2801      	cmp	r0, #1
 800c602:	d06e      	beq.n	800c6e2 <__ssvfiscanf_r+0x2e6>
 800c604:	2802      	cmp	r0, #2
 800c606:	f47f af20 	bne.w	800c44a <__ssvfiscanf_r+0x4e>
 800c60a:	e7cf      	b.n	800c5ac <__ssvfiscanf_r+0x1b0>
 800c60c:	220a      	movs	r2, #10
 800c60e:	e7dd      	b.n	800c5cc <__ssvfiscanf_r+0x1d0>
 800c610:	2300      	movs	r3, #0
 800c612:	9342      	str	r3, [sp, #264]	; 0x108
 800c614:	2303      	movs	r3, #3
 800c616:	e7de      	b.n	800c5d6 <__ssvfiscanf_r+0x1da>
 800c618:	2308      	movs	r3, #8
 800c61a:	9342      	str	r3, [sp, #264]	; 0x108
 800c61c:	2304      	movs	r3, #4
 800c61e:	e7da      	b.n	800c5d6 <__ssvfiscanf_r+0x1da>
 800c620:	4629      	mov	r1, r5
 800c622:	4640      	mov	r0, r8
 800c624:	f000 fcbc 	bl	800cfa0 <__sccl>
 800c628:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800c62a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c62e:	9341      	str	r3, [sp, #260]	; 0x104
 800c630:	4605      	mov	r5, r0
 800c632:	2301      	movs	r3, #1
 800c634:	e7cf      	b.n	800c5d6 <__ssvfiscanf_r+0x1da>
 800c636:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800c638:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c63c:	9341      	str	r3, [sp, #260]	; 0x104
 800c63e:	2300      	movs	r3, #0
 800c640:	e7c9      	b.n	800c5d6 <__ssvfiscanf_r+0x1da>
 800c642:	2302      	movs	r3, #2
 800c644:	e7c7      	b.n	800c5d6 <__ssvfiscanf_r+0x1da>
 800c646:	9841      	ldr	r0, [sp, #260]	; 0x104
 800c648:	06c3      	lsls	r3, r0, #27
 800c64a:	f53f aefe 	bmi.w	800c44a <__ssvfiscanf_r+0x4e>
 800c64e:	9b00      	ldr	r3, [sp, #0]
 800c650:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800c652:	1d19      	adds	r1, r3, #4
 800c654:	9100      	str	r1, [sp, #0]
 800c656:	681b      	ldr	r3, [r3, #0]
 800c658:	f010 0f01 	tst.w	r0, #1
 800c65c:	bf14      	ite	ne
 800c65e:	801a      	strhne	r2, [r3, #0]
 800c660:	601a      	streq	r2, [r3, #0]
 800c662:	e6f2      	b.n	800c44a <__ssvfiscanf_r+0x4e>
 800c664:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800c666:	4621      	mov	r1, r4
 800c668:	4630      	mov	r0, r6
 800c66a:	4798      	blx	r3
 800c66c:	2800      	cmp	r0, #0
 800c66e:	d0b6      	beq.n	800c5de <__ssvfiscanf_r+0x1e2>
 800c670:	e79c      	b.n	800c5ac <__ssvfiscanf_r+0x1b0>
 800c672:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800c674:	3201      	adds	r2, #1
 800c676:	9245      	str	r2, [sp, #276]	; 0x114
 800c678:	6862      	ldr	r2, [r4, #4]
 800c67a:	3a01      	subs	r2, #1
 800c67c:	2a00      	cmp	r2, #0
 800c67e:	6062      	str	r2, [r4, #4]
 800c680:	dd02      	ble.n	800c688 <__ssvfiscanf_r+0x28c>
 800c682:	3301      	adds	r3, #1
 800c684:	6023      	str	r3, [r4, #0]
 800c686:	e7ad      	b.n	800c5e4 <__ssvfiscanf_r+0x1e8>
 800c688:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800c68a:	4621      	mov	r1, r4
 800c68c:	4630      	mov	r0, r6
 800c68e:	4798      	blx	r3
 800c690:	2800      	cmp	r0, #0
 800c692:	d0a7      	beq.n	800c5e4 <__ssvfiscanf_r+0x1e8>
 800c694:	e78a      	b.n	800c5ac <__ssvfiscanf_r+0x1b0>
 800c696:	2b04      	cmp	r3, #4
 800c698:	dc0e      	bgt.n	800c6b8 <__ssvfiscanf_r+0x2bc>
 800c69a:	466b      	mov	r3, sp
 800c69c:	4622      	mov	r2, r4
 800c69e:	a941      	add	r1, sp, #260	; 0x104
 800c6a0:	4630      	mov	r0, r6
 800c6a2:	f000 fb6b 	bl	800cd7c <_scanf_i>
 800c6a6:	e7ab      	b.n	800c600 <__ssvfiscanf_r+0x204>
 800c6a8:	0800c349 	.word	0x0800c349
 800c6ac:	0800c3c3 	.word	0x0800c3c3
 800c6b0:	0800e119 	.word	0x0800e119
 800c6b4:	0800e4e2 	.word	0x0800e4e2
 800c6b8:	4b0b      	ldr	r3, [pc, #44]	; (800c6e8 <__ssvfiscanf_r+0x2ec>)
 800c6ba:	2b00      	cmp	r3, #0
 800c6bc:	f43f aec5 	beq.w	800c44a <__ssvfiscanf_r+0x4e>
 800c6c0:	466b      	mov	r3, sp
 800c6c2:	4622      	mov	r2, r4
 800c6c4:	a941      	add	r1, sp, #260	; 0x104
 800c6c6:	4630      	mov	r0, r6
 800c6c8:	f3af 8000 	nop.w
 800c6cc:	e798      	b.n	800c600 <__ssvfiscanf_r+0x204>
 800c6ce:	89a3      	ldrh	r3, [r4, #12]
 800c6d0:	f013 0f40 	tst.w	r3, #64	; 0x40
 800c6d4:	bf18      	it	ne
 800c6d6:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 800c6da:	f50d 7d22 	add.w	sp, sp, #648	; 0x288
 800c6de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c6e2:	9844      	ldr	r0, [sp, #272]	; 0x110
 800c6e4:	e7f9      	b.n	800c6da <__ssvfiscanf_r+0x2de>
 800c6e6:	bf00      	nop
 800c6e8:	00000000 	.word	0x00000000

0800c6ec <__sfputc_r>:
 800c6ec:	6893      	ldr	r3, [r2, #8]
 800c6ee:	3b01      	subs	r3, #1
 800c6f0:	2b00      	cmp	r3, #0
 800c6f2:	b410      	push	{r4}
 800c6f4:	6093      	str	r3, [r2, #8]
 800c6f6:	da08      	bge.n	800c70a <__sfputc_r+0x1e>
 800c6f8:	6994      	ldr	r4, [r2, #24]
 800c6fa:	42a3      	cmp	r3, r4
 800c6fc:	db01      	blt.n	800c702 <__sfputc_r+0x16>
 800c6fe:	290a      	cmp	r1, #10
 800c700:	d103      	bne.n	800c70a <__sfputc_r+0x1e>
 800c702:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c706:	f7fe b91b 	b.w	800a940 <__swbuf_r>
 800c70a:	6813      	ldr	r3, [r2, #0]
 800c70c:	1c58      	adds	r0, r3, #1
 800c70e:	6010      	str	r0, [r2, #0]
 800c710:	7019      	strb	r1, [r3, #0]
 800c712:	4608      	mov	r0, r1
 800c714:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c718:	4770      	bx	lr

0800c71a <__sfputs_r>:
 800c71a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c71c:	4606      	mov	r6, r0
 800c71e:	460f      	mov	r7, r1
 800c720:	4614      	mov	r4, r2
 800c722:	18d5      	adds	r5, r2, r3
 800c724:	42ac      	cmp	r4, r5
 800c726:	d101      	bne.n	800c72c <__sfputs_r+0x12>
 800c728:	2000      	movs	r0, #0
 800c72a:	e007      	b.n	800c73c <__sfputs_r+0x22>
 800c72c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c730:	463a      	mov	r2, r7
 800c732:	4630      	mov	r0, r6
 800c734:	f7ff ffda 	bl	800c6ec <__sfputc_r>
 800c738:	1c43      	adds	r3, r0, #1
 800c73a:	d1f3      	bne.n	800c724 <__sfputs_r+0xa>
 800c73c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800c740 <_vfiprintf_r>:
 800c740:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c744:	460d      	mov	r5, r1
 800c746:	b09d      	sub	sp, #116	; 0x74
 800c748:	4614      	mov	r4, r2
 800c74a:	4698      	mov	r8, r3
 800c74c:	4606      	mov	r6, r0
 800c74e:	b118      	cbz	r0, 800c758 <_vfiprintf_r+0x18>
 800c750:	6983      	ldr	r3, [r0, #24]
 800c752:	b90b      	cbnz	r3, 800c758 <_vfiprintf_r+0x18>
 800c754:	f7fe faf0 	bl	800ad38 <__sinit>
 800c758:	4b89      	ldr	r3, [pc, #548]	; (800c980 <_vfiprintf_r+0x240>)
 800c75a:	429d      	cmp	r5, r3
 800c75c:	d11b      	bne.n	800c796 <_vfiprintf_r+0x56>
 800c75e:	6875      	ldr	r5, [r6, #4]
 800c760:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c762:	07d9      	lsls	r1, r3, #31
 800c764:	d405      	bmi.n	800c772 <_vfiprintf_r+0x32>
 800c766:	89ab      	ldrh	r3, [r5, #12]
 800c768:	059a      	lsls	r2, r3, #22
 800c76a:	d402      	bmi.n	800c772 <_vfiprintf_r+0x32>
 800c76c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c76e:	f7fe fef0 	bl	800b552 <__retarget_lock_acquire_recursive>
 800c772:	89ab      	ldrh	r3, [r5, #12]
 800c774:	071b      	lsls	r3, r3, #28
 800c776:	d501      	bpl.n	800c77c <_vfiprintf_r+0x3c>
 800c778:	692b      	ldr	r3, [r5, #16]
 800c77a:	b9eb      	cbnz	r3, 800c7b8 <_vfiprintf_r+0x78>
 800c77c:	4629      	mov	r1, r5
 800c77e:	4630      	mov	r0, r6
 800c780:	f7fe f942 	bl	800aa08 <__swsetup_r>
 800c784:	b1c0      	cbz	r0, 800c7b8 <_vfiprintf_r+0x78>
 800c786:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c788:	07dc      	lsls	r4, r3, #31
 800c78a:	d50e      	bpl.n	800c7aa <_vfiprintf_r+0x6a>
 800c78c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800c790:	b01d      	add	sp, #116	; 0x74
 800c792:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c796:	4b7b      	ldr	r3, [pc, #492]	; (800c984 <_vfiprintf_r+0x244>)
 800c798:	429d      	cmp	r5, r3
 800c79a:	d101      	bne.n	800c7a0 <_vfiprintf_r+0x60>
 800c79c:	68b5      	ldr	r5, [r6, #8]
 800c79e:	e7df      	b.n	800c760 <_vfiprintf_r+0x20>
 800c7a0:	4b79      	ldr	r3, [pc, #484]	; (800c988 <_vfiprintf_r+0x248>)
 800c7a2:	429d      	cmp	r5, r3
 800c7a4:	bf08      	it	eq
 800c7a6:	68f5      	ldreq	r5, [r6, #12]
 800c7a8:	e7da      	b.n	800c760 <_vfiprintf_r+0x20>
 800c7aa:	89ab      	ldrh	r3, [r5, #12]
 800c7ac:	0598      	lsls	r0, r3, #22
 800c7ae:	d4ed      	bmi.n	800c78c <_vfiprintf_r+0x4c>
 800c7b0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c7b2:	f7fe fecf 	bl	800b554 <__retarget_lock_release_recursive>
 800c7b6:	e7e9      	b.n	800c78c <_vfiprintf_r+0x4c>
 800c7b8:	2300      	movs	r3, #0
 800c7ba:	9309      	str	r3, [sp, #36]	; 0x24
 800c7bc:	2320      	movs	r3, #32
 800c7be:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800c7c2:	f8cd 800c 	str.w	r8, [sp, #12]
 800c7c6:	2330      	movs	r3, #48	; 0x30
 800c7c8:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800c98c <_vfiprintf_r+0x24c>
 800c7cc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800c7d0:	f04f 0901 	mov.w	r9, #1
 800c7d4:	4623      	mov	r3, r4
 800c7d6:	469a      	mov	sl, r3
 800c7d8:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c7dc:	b10a      	cbz	r2, 800c7e2 <_vfiprintf_r+0xa2>
 800c7de:	2a25      	cmp	r2, #37	; 0x25
 800c7e0:	d1f9      	bne.n	800c7d6 <_vfiprintf_r+0x96>
 800c7e2:	ebba 0b04 	subs.w	fp, sl, r4
 800c7e6:	d00b      	beq.n	800c800 <_vfiprintf_r+0xc0>
 800c7e8:	465b      	mov	r3, fp
 800c7ea:	4622      	mov	r2, r4
 800c7ec:	4629      	mov	r1, r5
 800c7ee:	4630      	mov	r0, r6
 800c7f0:	f7ff ff93 	bl	800c71a <__sfputs_r>
 800c7f4:	3001      	adds	r0, #1
 800c7f6:	f000 80aa 	beq.w	800c94e <_vfiprintf_r+0x20e>
 800c7fa:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c7fc:	445a      	add	r2, fp
 800c7fe:	9209      	str	r2, [sp, #36]	; 0x24
 800c800:	f89a 3000 	ldrb.w	r3, [sl]
 800c804:	2b00      	cmp	r3, #0
 800c806:	f000 80a2 	beq.w	800c94e <_vfiprintf_r+0x20e>
 800c80a:	2300      	movs	r3, #0
 800c80c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800c810:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c814:	f10a 0a01 	add.w	sl, sl, #1
 800c818:	9304      	str	r3, [sp, #16]
 800c81a:	9307      	str	r3, [sp, #28]
 800c81c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800c820:	931a      	str	r3, [sp, #104]	; 0x68
 800c822:	4654      	mov	r4, sl
 800c824:	2205      	movs	r2, #5
 800c826:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c82a:	4858      	ldr	r0, [pc, #352]	; (800c98c <_vfiprintf_r+0x24c>)
 800c82c:	f7f3 fce8 	bl	8000200 <memchr>
 800c830:	9a04      	ldr	r2, [sp, #16]
 800c832:	b9d8      	cbnz	r0, 800c86c <_vfiprintf_r+0x12c>
 800c834:	06d1      	lsls	r1, r2, #27
 800c836:	bf44      	itt	mi
 800c838:	2320      	movmi	r3, #32
 800c83a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c83e:	0713      	lsls	r3, r2, #28
 800c840:	bf44      	itt	mi
 800c842:	232b      	movmi	r3, #43	; 0x2b
 800c844:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c848:	f89a 3000 	ldrb.w	r3, [sl]
 800c84c:	2b2a      	cmp	r3, #42	; 0x2a
 800c84e:	d015      	beq.n	800c87c <_vfiprintf_r+0x13c>
 800c850:	9a07      	ldr	r2, [sp, #28]
 800c852:	4654      	mov	r4, sl
 800c854:	2000      	movs	r0, #0
 800c856:	f04f 0c0a 	mov.w	ip, #10
 800c85a:	4621      	mov	r1, r4
 800c85c:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c860:	3b30      	subs	r3, #48	; 0x30
 800c862:	2b09      	cmp	r3, #9
 800c864:	d94e      	bls.n	800c904 <_vfiprintf_r+0x1c4>
 800c866:	b1b0      	cbz	r0, 800c896 <_vfiprintf_r+0x156>
 800c868:	9207      	str	r2, [sp, #28]
 800c86a:	e014      	b.n	800c896 <_vfiprintf_r+0x156>
 800c86c:	eba0 0308 	sub.w	r3, r0, r8
 800c870:	fa09 f303 	lsl.w	r3, r9, r3
 800c874:	4313      	orrs	r3, r2
 800c876:	9304      	str	r3, [sp, #16]
 800c878:	46a2      	mov	sl, r4
 800c87a:	e7d2      	b.n	800c822 <_vfiprintf_r+0xe2>
 800c87c:	9b03      	ldr	r3, [sp, #12]
 800c87e:	1d19      	adds	r1, r3, #4
 800c880:	681b      	ldr	r3, [r3, #0]
 800c882:	9103      	str	r1, [sp, #12]
 800c884:	2b00      	cmp	r3, #0
 800c886:	bfbb      	ittet	lt
 800c888:	425b      	neglt	r3, r3
 800c88a:	f042 0202 	orrlt.w	r2, r2, #2
 800c88e:	9307      	strge	r3, [sp, #28]
 800c890:	9307      	strlt	r3, [sp, #28]
 800c892:	bfb8      	it	lt
 800c894:	9204      	strlt	r2, [sp, #16]
 800c896:	7823      	ldrb	r3, [r4, #0]
 800c898:	2b2e      	cmp	r3, #46	; 0x2e
 800c89a:	d10c      	bne.n	800c8b6 <_vfiprintf_r+0x176>
 800c89c:	7863      	ldrb	r3, [r4, #1]
 800c89e:	2b2a      	cmp	r3, #42	; 0x2a
 800c8a0:	d135      	bne.n	800c90e <_vfiprintf_r+0x1ce>
 800c8a2:	9b03      	ldr	r3, [sp, #12]
 800c8a4:	1d1a      	adds	r2, r3, #4
 800c8a6:	681b      	ldr	r3, [r3, #0]
 800c8a8:	9203      	str	r2, [sp, #12]
 800c8aa:	2b00      	cmp	r3, #0
 800c8ac:	bfb8      	it	lt
 800c8ae:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800c8b2:	3402      	adds	r4, #2
 800c8b4:	9305      	str	r3, [sp, #20]
 800c8b6:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800c99c <_vfiprintf_r+0x25c>
 800c8ba:	7821      	ldrb	r1, [r4, #0]
 800c8bc:	2203      	movs	r2, #3
 800c8be:	4650      	mov	r0, sl
 800c8c0:	f7f3 fc9e 	bl	8000200 <memchr>
 800c8c4:	b140      	cbz	r0, 800c8d8 <_vfiprintf_r+0x198>
 800c8c6:	2340      	movs	r3, #64	; 0x40
 800c8c8:	eba0 000a 	sub.w	r0, r0, sl
 800c8cc:	fa03 f000 	lsl.w	r0, r3, r0
 800c8d0:	9b04      	ldr	r3, [sp, #16]
 800c8d2:	4303      	orrs	r3, r0
 800c8d4:	3401      	adds	r4, #1
 800c8d6:	9304      	str	r3, [sp, #16]
 800c8d8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c8dc:	482c      	ldr	r0, [pc, #176]	; (800c990 <_vfiprintf_r+0x250>)
 800c8de:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800c8e2:	2206      	movs	r2, #6
 800c8e4:	f7f3 fc8c 	bl	8000200 <memchr>
 800c8e8:	2800      	cmp	r0, #0
 800c8ea:	d03f      	beq.n	800c96c <_vfiprintf_r+0x22c>
 800c8ec:	4b29      	ldr	r3, [pc, #164]	; (800c994 <_vfiprintf_r+0x254>)
 800c8ee:	bb1b      	cbnz	r3, 800c938 <_vfiprintf_r+0x1f8>
 800c8f0:	9b03      	ldr	r3, [sp, #12]
 800c8f2:	3307      	adds	r3, #7
 800c8f4:	f023 0307 	bic.w	r3, r3, #7
 800c8f8:	3308      	adds	r3, #8
 800c8fa:	9303      	str	r3, [sp, #12]
 800c8fc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c8fe:	443b      	add	r3, r7
 800c900:	9309      	str	r3, [sp, #36]	; 0x24
 800c902:	e767      	b.n	800c7d4 <_vfiprintf_r+0x94>
 800c904:	fb0c 3202 	mla	r2, ip, r2, r3
 800c908:	460c      	mov	r4, r1
 800c90a:	2001      	movs	r0, #1
 800c90c:	e7a5      	b.n	800c85a <_vfiprintf_r+0x11a>
 800c90e:	2300      	movs	r3, #0
 800c910:	3401      	adds	r4, #1
 800c912:	9305      	str	r3, [sp, #20]
 800c914:	4619      	mov	r1, r3
 800c916:	f04f 0c0a 	mov.w	ip, #10
 800c91a:	4620      	mov	r0, r4
 800c91c:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c920:	3a30      	subs	r2, #48	; 0x30
 800c922:	2a09      	cmp	r2, #9
 800c924:	d903      	bls.n	800c92e <_vfiprintf_r+0x1ee>
 800c926:	2b00      	cmp	r3, #0
 800c928:	d0c5      	beq.n	800c8b6 <_vfiprintf_r+0x176>
 800c92a:	9105      	str	r1, [sp, #20]
 800c92c:	e7c3      	b.n	800c8b6 <_vfiprintf_r+0x176>
 800c92e:	fb0c 2101 	mla	r1, ip, r1, r2
 800c932:	4604      	mov	r4, r0
 800c934:	2301      	movs	r3, #1
 800c936:	e7f0      	b.n	800c91a <_vfiprintf_r+0x1da>
 800c938:	ab03      	add	r3, sp, #12
 800c93a:	9300      	str	r3, [sp, #0]
 800c93c:	462a      	mov	r2, r5
 800c93e:	4b16      	ldr	r3, [pc, #88]	; (800c998 <_vfiprintf_r+0x258>)
 800c940:	a904      	add	r1, sp, #16
 800c942:	4630      	mov	r0, r6
 800c944:	f3af 8000 	nop.w
 800c948:	4607      	mov	r7, r0
 800c94a:	1c78      	adds	r0, r7, #1
 800c94c:	d1d6      	bne.n	800c8fc <_vfiprintf_r+0x1bc>
 800c94e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c950:	07d9      	lsls	r1, r3, #31
 800c952:	d405      	bmi.n	800c960 <_vfiprintf_r+0x220>
 800c954:	89ab      	ldrh	r3, [r5, #12]
 800c956:	059a      	lsls	r2, r3, #22
 800c958:	d402      	bmi.n	800c960 <_vfiprintf_r+0x220>
 800c95a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c95c:	f7fe fdfa 	bl	800b554 <__retarget_lock_release_recursive>
 800c960:	89ab      	ldrh	r3, [r5, #12]
 800c962:	065b      	lsls	r3, r3, #25
 800c964:	f53f af12 	bmi.w	800c78c <_vfiprintf_r+0x4c>
 800c968:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c96a:	e711      	b.n	800c790 <_vfiprintf_r+0x50>
 800c96c:	ab03      	add	r3, sp, #12
 800c96e:	9300      	str	r3, [sp, #0]
 800c970:	462a      	mov	r2, r5
 800c972:	4b09      	ldr	r3, [pc, #36]	; (800c998 <_vfiprintf_r+0x258>)
 800c974:	a904      	add	r1, sp, #16
 800c976:	4630      	mov	r0, r6
 800c978:	f000 f880 	bl	800ca7c <_printf_i>
 800c97c:	e7e4      	b.n	800c948 <_vfiprintf_r+0x208>
 800c97e:	bf00      	nop
 800c980:	0800e2a0 	.word	0x0800e2a0
 800c984:	0800e2c0 	.word	0x0800e2c0
 800c988:	0800e280 	.word	0x0800e280
 800c98c:	0800e4dc 	.word	0x0800e4dc
 800c990:	0800e4e6 	.word	0x0800e4e6
 800c994:	00000000 	.word	0x00000000
 800c998:	0800c71b 	.word	0x0800c71b
 800c99c:	0800e4e2 	.word	0x0800e4e2

0800c9a0 <_printf_common>:
 800c9a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c9a4:	4616      	mov	r6, r2
 800c9a6:	4699      	mov	r9, r3
 800c9a8:	688a      	ldr	r2, [r1, #8]
 800c9aa:	690b      	ldr	r3, [r1, #16]
 800c9ac:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800c9b0:	4293      	cmp	r3, r2
 800c9b2:	bfb8      	it	lt
 800c9b4:	4613      	movlt	r3, r2
 800c9b6:	6033      	str	r3, [r6, #0]
 800c9b8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800c9bc:	4607      	mov	r7, r0
 800c9be:	460c      	mov	r4, r1
 800c9c0:	b10a      	cbz	r2, 800c9c6 <_printf_common+0x26>
 800c9c2:	3301      	adds	r3, #1
 800c9c4:	6033      	str	r3, [r6, #0]
 800c9c6:	6823      	ldr	r3, [r4, #0]
 800c9c8:	0699      	lsls	r1, r3, #26
 800c9ca:	bf42      	ittt	mi
 800c9cc:	6833      	ldrmi	r3, [r6, #0]
 800c9ce:	3302      	addmi	r3, #2
 800c9d0:	6033      	strmi	r3, [r6, #0]
 800c9d2:	6825      	ldr	r5, [r4, #0]
 800c9d4:	f015 0506 	ands.w	r5, r5, #6
 800c9d8:	d106      	bne.n	800c9e8 <_printf_common+0x48>
 800c9da:	f104 0a19 	add.w	sl, r4, #25
 800c9de:	68e3      	ldr	r3, [r4, #12]
 800c9e0:	6832      	ldr	r2, [r6, #0]
 800c9e2:	1a9b      	subs	r3, r3, r2
 800c9e4:	42ab      	cmp	r3, r5
 800c9e6:	dc26      	bgt.n	800ca36 <_printf_common+0x96>
 800c9e8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800c9ec:	1e13      	subs	r3, r2, #0
 800c9ee:	6822      	ldr	r2, [r4, #0]
 800c9f0:	bf18      	it	ne
 800c9f2:	2301      	movne	r3, #1
 800c9f4:	0692      	lsls	r2, r2, #26
 800c9f6:	d42b      	bmi.n	800ca50 <_printf_common+0xb0>
 800c9f8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800c9fc:	4649      	mov	r1, r9
 800c9fe:	4638      	mov	r0, r7
 800ca00:	47c0      	blx	r8
 800ca02:	3001      	adds	r0, #1
 800ca04:	d01e      	beq.n	800ca44 <_printf_common+0xa4>
 800ca06:	6823      	ldr	r3, [r4, #0]
 800ca08:	68e5      	ldr	r5, [r4, #12]
 800ca0a:	6832      	ldr	r2, [r6, #0]
 800ca0c:	f003 0306 	and.w	r3, r3, #6
 800ca10:	2b04      	cmp	r3, #4
 800ca12:	bf08      	it	eq
 800ca14:	1aad      	subeq	r5, r5, r2
 800ca16:	68a3      	ldr	r3, [r4, #8]
 800ca18:	6922      	ldr	r2, [r4, #16]
 800ca1a:	bf0c      	ite	eq
 800ca1c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800ca20:	2500      	movne	r5, #0
 800ca22:	4293      	cmp	r3, r2
 800ca24:	bfc4      	itt	gt
 800ca26:	1a9b      	subgt	r3, r3, r2
 800ca28:	18ed      	addgt	r5, r5, r3
 800ca2a:	2600      	movs	r6, #0
 800ca2c:	341a      	adds	r4, #26
 800ca2e:	42b5      	cmp	r5, r6
 800ca30:	d11a      	bne.n	800ca68 <_printf_common+0xc8>
 800ca32:	2000      	movs	r0, #0
 800ca34:	e008      	b.n	800ca48 <_printf_common+0xa8>
 800ca36:	2301      	movs	r3, #1
 800ca38:	4652      	mov	r2, sl
 800ca3a:	4649      	mov	r1, r9
 800ca3c:	4638      	mov	r0, r7
 800ca3e:	47c0      	blx	r8
 800ca40:	3001      	adds	r0, #1
 800ca42:	d103      	bne.n	800ca4c <_printf_common+0xac>
 800ca44:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800ca48:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ca4c:	3501      	adds	r5, #1
 800ca4e:	e7c6      	b.n	800c9de <_printf_common+0x3e>
 800ca50:	18e1      	adds	r1, r4, r3
 800ca52:	1c5a      	adds	r2, r3, #1
 800ca54:	2030      	movs	r0, #48	; 0x30
 800ca56:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800ca5a:	4422      	add	r2, r4
 800ca5c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800ca60:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800ca64:	3302      	adds	r3, #2
 800ca66:	e7c7      	b.n	800c9f8 <_printf_common+0x58>
 800ca68:	2301      	movs	r3, #1
 800ca6a:	4622      	mov	r2, r4
 800ca6c:	4649      	mov	r1, r9
 800ca6e:	4638      	mov	r0, r7
 800ca70:	47c0      	blx	r8
 800ca72:	3001      	adds	r0, #1
 800ca74:	d0e6      	beq.n	800ca44 <_printf_common+0xa4>
 800ca76:	3601      	adds	r6, #1
 800ca78:	e7d9      	b.n	800ca2e <_printf_common+0x8e>
	...

0800ca7c <_printf_i>:
 800ca7c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800ca80:	7e0f      	ldrb	r7, [r1, #24]
 800ca82:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800ca84:	2f78      	cmp	r7, #120	; 0x78
 800ca86:	4691      	mov	r9, r2
 800ca88:	4680      	mov	r8, r0
 800ca8a:	460c      	mov	r4, r1
 800ca8c:	469a      	mov	sl, r3
 800ca8e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800ca92:	d807      	bhi.n	800caa4 <_printf_i+0x28>
 800ca94:	2f62      	cmp	r7, #98	; 0x62
 800ca96:	d80a      	bhi.n	800caae <_printf_i+0x32>
 800ca98:	2f00      	cmp	r7, #0
 800ca9a:	f000 80d8 	beq.w	800cc4e <_printf_i+0x1d2>
 800ca9e:	2f58      	cmp	r7, #88	; 0x58
 800caa0:	f000 80a3 	beq.w	800cbea <_printf_i+0x16e>
 800caa4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800caa8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800caac:	e03a      	b.n	800cb24 <_printf_i+0xa8>
 800caae:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800cab2:	2b15      	cmp	r3, #21
 800cab4:	d8f6      	bhi.n	800caa4 <_printf_i+0x28>
 800cab6:	a101      	add	r1, pc, #4	; (adr r1, 800cabc <_printf_i+0x40>)
 800cab8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800cabc:	0800cb15 	.word	0x0800cb15
 800cac0:	0800cb29 	.word	0x0800cb29
 800cac4:	0800caa5 	.word	0x0800caa5
 800cac8:	0800caa5 	.word	0x0800caa5
 800cacc:	0800caa5 	.word	0x0800caa5
 800cad0:	0800caa5 	.word	0x0800caa5
 800cad4:	0800cb29 	.word	0x0800cb29
 800cad8:	0800caa5 	.word	0x0800caa5
 800cadc:	0800caa5 	.word	0x0800caa5
 800cae0:	0800caa5 	.word	0x0800caa5
 800cae4:	0800caa5 	.word	0x0800caa5
 800cae8:	0800cc35 	.word	0x0800cc35
 800caec:	0800cb59 	.word	0x0800cb59
 800caf0:	0800cc17 	.word	0x0800cc17
 800caf4:	0800caa5 	.word	0x0800caa5
 800caf8:	0800caa5 	.word	0x0800caa5
 800cafc:	0800cc57 	.word	0x0800cc57
 800cb00:	0800caa5 	.word	0x0800caa5
 800cb04:	0800cb59 	.word	0x0800cb59
 800cb08:	0800caa5 	.word	0x0800caa5
 800cb0c:	0800caa5 	.word	0x0800caa5
 800cb10:	0800cc1f 	.word	0x0800cc1f
 800cb14:	682b      	ldr	r3, [r5, #0]
 800cb16:	1d1a      	adds	r2, r3, #4
 800cb18:	681b      	ldr	r3, [r3, #0]
 800cb1a:	602a      	str	r2, [r5, #0]
 800cb1c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800cb20:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800cb24:	2301      	movs	r3, #1
 800cb26:	e0a3      	b.n	800cc70 <_printf_i+0x1f4>
 800cb28:	6820      	ldr	r0, [r4, #0]
 800cb2a:	6829      	ldr	r1, [r5, #0]
 800cb2c:	0606      	lsls	r6, r0, #24
 800cb2e:	f101 0304 	add.w	r3, r1, #4
 800cb32:	d50a      	bpl.n	800cb4a <_printf_i+0xce>
 800cb34:	680e      	ldr	r6, [r1, #0]
 800cb36:	602b      	str	r3, [r5, #0]
 800cb38:	2e00      	cmp	r6, #0
 800cb3a:	da03      	bge.n	800cb44 <_printf_i+0xc8>
 800cb3c:	232d      	movs	r3, #45	; 0x2d
 800cb3e:	4276      	negs	r6, r6
 800cb40:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800cb44:	485e      	ldr	r0, [pc, #376]	; (800ccc0 <_printf_i+0x244>)
 800cb46:	230a      	movs	r3, #10
 800cb48:	e019      	b.n	800cb7e <_printf_i+0x102>
 800cb4a:	680e      	ldr	r6, [r1, #0]
 800cb4c:	602b      	str	r3, [r5, #0]
 800cb4e:	f010 0f40 	tst.w	r0, #64	; 0x40
 800cb52:	bf18      	it	ne
 800cb54:	b236      	sxthne	r6, r6
 800cb56:	e7ef      	b.n	800cb38 <_printf_i+0xbc>
 800cb58:	682b      	ldr	r3, [r5, #0]
 800cb5a:	6820      	ldr	r0, [r4, #0]
 800cb5c:	1d19      	adds	r1, r3, #4
 800cb5e:	6029      	str	r1, [r5, #0]
 800cb60:	0601      	lsls	r1, r0, #24
 800cb62:	d501      	bpl.n	800cb68 <_printf_i+0xec>
 800cb64:	681e      	ldr	r6, [r3, #0]
 800cb66:	e002      	b.n	800cb6e <_printf_i+0xf2>
 800cb68:	0646      	lsls	r6, r0, #25
 800cb6a:	d5fb      	bpl.n	800cb64 <_printf_i+0xe8>
 800cb6c:	881e      	ldrh	r6, [r3, #0]
 800cb6e:	4854      	ldr	r0, [pc, #336]	; (800ccc0 <_printf_i+0x244>)
 800cb70:	2f6f      	cmp	r7, #111	; 0x6f
 800cb72:	bf0c      	ite	eq
 800cb74:	2308      	moveq	r3, #8
 800cb76:	230a      	movne	r3, #10
 800cb78:	2100      	movs	r1, #0
 800cb7a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800cb7e:	6865      	ldr	r5, [r4, #4]
 800cb80:	60a5      	str	r5, [r4, #8]
 800cb82:	2d00      	cmp	r5, #0
 800cb84:	bfa2      	ittt	ge
 800cb86:	6821      	ldrge	r1, [r4, #0]
 800cb88:	f021 0104 	bicge.w	r1, r1, #4
 800cb8c:	6021      	strge	r1, [r4, #0]
 800cb8e:	b90e      	cbnz	r6, 800cb94 <_printf_i+0x118>
 800cb90:	2d00      	cmp	r5, #0
 800cb92:	d04d      	beq.n	800cc30 <_printf_i+0x1b4>
 800cb94:	4615      	mov	r5, r2
 800cb96:	fbb6 f1f3 	udiv	r1, r6, r3
 800cb9a:	fb03 6711 	mls	r7, r3, r1, r6
 800cb9e:	5dc7      	ldrb	r7, [r0, r7]
 800cba0:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800cba4:	4637      	mov	r7, r6
 800cba6:	42bb      	cmp	r3, r7
 800cba8:	460e      	mov	r6, r1
 800cbaa:	d9f4      	bls.n	800cb96 <_printf_i+0x11a>
 800cbac:	2b08      	cmp	r3, #8
 800cbae:	d10b      	bne.n	800cbc8 <_printf_i+0x14c>
 800cbb0:	6823      	ldr	r3, [r4, #0]
 800cbb2:	07de      	lsls	r6, r3, #31
 800cbb4:	d508      	bpl.n	800cbc8 <_printf_i+0x14c>
 800cbb6:	6923      	ldr	r3, [r4, #16]
 800cbb8:	6861      	ldr	r1, [r4, #4]
 800cbba:	4299      	cmp	r1, r3
 800cbbc:	bfde      	ittt	le
 800cbbe:	2330      	movle	r3, #48	; 0x30
 800cbc0:	f805 3c01 	strble.w	r3, [r5, #-1]
 800cbc4:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800cbc8:	1b52      	subs	r2, r2, r5
 800cbca:	6122      	str	r2, [r4, #16]
 800cbcc:	f8cd a000 	str.w	sl, [sp]
 800cbd0:	464b      	mov	r3, r9
 800cbd2:	aa03      	add	r2, sp, #12
 800cbd4:	4621      	mov	r1, r4
 800cbd6:	4640      	mov	r0, r8
 800cbd8:	f7ff fee2 	bl	800c9a0 <_printf_common>
 800cbdc:	3001      	adds	r0, #1
 800cbde:	d14c      	bne.n	800cc7a <_printf_i+0x1fe>
 800cbe0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800cbe4:	b004      	add	sp, #16
 800cbe6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cbea:	4835      	ldr	r0, [pc, #212]	; (800ccc0 <_printf_i+0x244>)
 800cbec:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800cbf0:	6829      	ldr	r1, [r5, #0]
 800cbf2:	6823      	ldr	r3, [r4, #0]
 800cbf4:	f851 6b04 	ldr.w	r6, [r1], #4
 800cbf8:	6029      	str	r1, [r5, #0]
 800cbfa:	061d      	lsls	r5, r3, #24
 800cbfc:	d514      	bpl.n	800cc28 <_printf_i+0x1ac>
 800cbfe:	07df      	lsls	r7, r3, #31
 800cc00:	bf44      	itt	mi
 800cc02:	f043 0320 	orrmi.w	r3, r3, #32
 800cc06:	6023      	strmi	r3, [r4, #0]
 800cc08:	b91e      	cbnz	r6, 800cc12 <_printf_i+0x196>
 800cc0a:	6823      	ldr	r3, [r4, #0]
 800cc0c:	f023 0320 	bic.w	r3, r3, #32
 800cc10:	6023      	str	r3, [r4, #0]
 800cc12:	2310      	movs	r3, #16
 800cc14:	e7b0      	b.n	800cb78 <_printf_i+0xfc>
 800cc16:	6823      	ldr	r3, [r4, #0]
 800cc18:	f043 0320 	orr.w	r3, r3, #32
 800cc1c:	6023      	str	r3, [r4, #0]
 800cc1e:	2378      	movs	r3, #120	; 0x78
 800cc20:	4828      	ldr	r0, [pc, #160]	; (800ccc4 <_printf_i+0x248>)
 800cc22:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800cc26:	e7e3      	b.n	800cbf0 <_printf_i+0x174>
 800cc28:	0659      	lsls	r1, r3, #25
 800cc2a:	bf48      	it	mi
 800cc2c:	b2b6      	uxthmi	r6, r6
 800cc2e:	e7e6      	b.n	800cbfe <_printf_i+0x182>
 800cc30:	4615      	mov	r5, r2
 800cc32:	e7bb      	b.n	800cbac <_printf_i+0x130>
 800cc34:	682b      	ldr	r3, [r5, #0]
 800cc36:	6826      	ldr	r6, [r4, #0]
 800cc38:	6961      	ldr	r1, [r4, #20]
 800cc3a:	1d18      	adds	r0, r3, #4
 800cc3c:	6028      	str	r0, [r5, #0]
 800cc3e:	0635      	lsls	r5, r6, #24
 800cc40:	681b      	ldr	r3, [r3, #0]
 800cc42:	d501      	bpl.n	800cc48 <_printf_i+0x1cc>
 800cc44:	6019      	str	r1, [r3, #0]
 800cc46:	e002      	b.n	800cc4e <_printf_i+0x1d2>
 800cc48:	0670      	lsls	r0, r6, #25
 800cc4a:	d5fb      	bpl.n	800cc44 <_printf_i+0x1c8>
 800cc4c:	8019      	strh	r1, [r3, #0]
 800cc4e:	2300      	movs	r3, #0
 800cc50:	6123      	str	r3, [r4, #16]
 800cc52:	4615      	mov	r5, r2
 800cc54:	e7ba      	b.n	800cbcc <_printf_i+0x150>
 800cc56:	682b      	ldr	r3, [r5, #0]
 800cc58:	1d1a      	adds	r2, r3, #4
 800cc5a:	602a      	str	r2, [r5, #0]
 800cc5c:	681d      	ldr	r5, [r3, #0]
 800cc5e:	6862      	ldr	r2, [r4, #4]
 800cc60:	2100      	movs	r1, #0
 800cc62:	4628      	mov	r0, r5
 800cc64:	f7f3 facc 	bl	8000200 <memchr>
 800cc68:	b108      	cbz	r0, 800cc6e <_printf_i+0x1f2>
 800cc6a:	1b40      	subs	r0, r0, r5
 800cc6c:	6060      	str	r0, [r4, #4]
 800cc6e:	6863      	ldr	r3, [r4, #4]
 800cc70:	6123      	str	r3, [r4, #16]
 800cc72:	2300      	movs	r3, #0
 800cc74:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800cc78:	e7a8      	b.n	800cbcc <_printf_i+0x150>
 800cc7a:	6923      	ldr	r3, [r4, #16]
 800cc7c:	462a      	mov	r2, r5
 800cc7e:	4649      	mov	r1, r9
 800cc80:	4640      	mov	r0, r8
 800cc82:	47d0      	blx	sl
 800cc84:	3001      	adds	r0, #1
 800cc86:	d0ab      	beq.n	800cbe0 <_printf_i+0x164>
 800cc88:	6823      	ldr	r3, [r4, #0]
 800cc8a:	079b      	lsls	r3, r3, #30
 800cc8c:	d413      	bmi.n	800ccb6 <_printf_i+0x23a>
 800cc8e:	68e0      	ldr	r0, [r4, #12]
 800cc90:	9b03      	ldr	r3, [sp, #12]
 800cc92:	4298      	cmp	r0, r3
 800cc94:	bfb8      	it	lt
 800cc96:	4618      	movlt	r0, r3
 800cc98:	e7a4      	b.n	800cbe4 <_printf_i+0x168>
 800cc9a:	2301      	movs	r3, #1
 800cc9c:	4632      	mov	r2, r6
 800cc9e:	4649      	mov	r1, r9
 800cca0:	4640      	mov	r0, r8
 800cca2:	47d0      	blx	sl
 800cca4:	3001      	adds	r0, #1
 800cca6:	d09b      	beq.n	800cbe0 <_printf_i+0x164>
 800cca8:	3501      	adds	r5, #1
 800ccaa:	68e3      	ldr	r3, [r4, #12]
 800ccac:	9903      	ldr	r1, [sp, #12]
 800ccae:	1a5b      	subs	r3, r3, r1
 800ccb0:	42ab      	cmp	r3, r5
 800ccb2:	dcf2      	bgt.n	800cc9a <_printf_i+0x21e>
 800ccb4:	e7eb      	b.n	800cc8e <_printf_i+0x212>
 800ccb6:	2500      	movs	r5, #0
 800ccb8:	f104 0619 	add.w	r6, r4, #25
 800ccbc:	e7f5      	b.n	800ccaa <_printf_i+0x22e>
 800ccbe:	bf00      	nop
 800ccc0:	0800e4ed 	.word	0x0800e4ed
 800ccc4:	0800e4fe 	.word	0x0800e4fe

0800ccc8 <_scanf_chars>:
 800ccc8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800cccc:	4615      	mov	r5, r2
 800ccce:	688a      	ldr	r2, [r1, #8]
 800ccd0:	4680      	mov	r8, r0
 800ccd2:	460c      	mov	r4, r1
 800ccd4:	b932      	cbnz	r2, 800cce4 <_scanf_chars+0x1c>
 800ccd6:	698a      	ldr	r2, [r1, #24]
 800ccd8:	2a00      	cmp	r2, #0
 800ccda:	bf0c      	ite	eq
 800ccdc:	2201      	moveq	r2, #1
 800ccde:	f04f 32ff 	movne.w	r2, #4294967295	; 0xffffffff
 800cce2:	608a      	str	r2, [r1, #8]
 800cce4:	6822      	ldr	r2, [r4, #0]
 800cce6:	f8df 9090 	ldr.w	r9, [pc, #144]	; 800cd78 <_scanf_chars+0xb0>
 800ccea:	06d1      	lsls	r1, r2, #27
 800ccec:	bf5f      	itttt	pl
 800ccee:	681a      	ldrpl	r2, [r3, #0]
 800ccf0:	1d11      	addpl	r1, r2, #4
 800ccf2:	6019      	strpl	r1, [r3, #0]
 800ccf4:	6816      	ldrpl	r6, [r2, #0]
 800ccf6:	2700      	movs	r7, #0
 800ccf8:	69a0      	ldr	r0, [r4, #24]
 800ccfa:	b188      	cbz	r0, 800cd20 <_scanf_chars+0x58>
 800ccfc:	2801      	cmp	r0, #1
 800ccfe:	d107      	bne.n	800cd10 <_scanf_chars+0x48>
 800cd00:	682a      	ldr	r2, [r5, #0]
 800cd02:	7811      	ldrb	r1, [r2, #0]
 800cd04:	6962      	ldr	r2, [r4, #20]
 800cd06:	5c52      	ldrb	r2, [r2, r1]
 800cd08:	b952      	cbnz	r2, 800cd20 <_scanf_chars+0x58>
 800cd0a:	2f00      	cmp	r7, #0
 800cd0c:	d031      	beq.n	800cd72 <_scanf_chars+0xaa>
 800cd0e:	e022      	b.n	800cd56 <_scanf_chars+0x8e>
 800cd10:	2802      	cmp	r0, #2
 800cd12:	d120      	bne.n	800cd56 <_scanf_chars+0x8e>
 800cd14:	682b      	ldr	r3, [r5, #0]
 800cd16:	781b      	ldrb	r3, [r3, #0]
 800cd18:	f813 3009 	ldrb.w	r3, [r3, r9]
 800cd1c:	071b      	lsls	r3, r3, #28
 800cd1e:	d41a      	bmi.n	800cd56 <_scanf_chars+0x8e>
 800cd20:	6823      	ldr	r3, [r4, #0]
 800cd22:	06da      	lsls	r2, r3, #27
 800cd24:	bf5e      	ittt	pl
 800cd26:	682b      	ldrpl	r3, [r5, #0]
 800cd28:	781b      	ldrbpl	r3, [r3, #0]
 800cd2a:	f806 3b01 	strbpl.w	r3, [r6], #1
 800cd2e:	682a      	ldr	r2, [r5, #0]
 800cd30:	686b      	ldr	r3, [r5, #4]
 800cd32:	3201      	adds	r2, #1
 800cd34:	602a      	str	r2, [r5, #0]
 800cd36:	68a2      	ldr	r2, [r4, #8]
 800cd38:	3b01      	subs	r3, #1
 800cd3a:	3a01      	subs	r2, #1
 800cd3c:	606b      	str	r3, [r5, #4]
 800cd3e:	3701      	adds	r7, #1
 800cd40:	60a2      	str	r2, [r4, #8]
 800cd42:	b142      	cbz	r2, 800cd56 <_scanf_chars+0x8e>
 800cd44:	2b00      	cmp	r3, #0
 800cd46:	dcd7      	bgt.n	800ccf8 <_scanf_chars+0x30>
 800cd48:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800cd4c:	4629      	mov	r1, r5
 800cd4e:	4640      	mov	r0, r8
 800cd50:	4798      	blx	r3
 800cd52:	2800      	cmp	r0, #0
 800cd54:	d0d0      	beq.n	800ccf8 <_scanf_chars+0x30>
 800cd56:	6823      	ldr	r3, [r4, #0]
 800cd58:	f013 0310 	ands.w	r3, r3, #16
 800cd5c:	d105      	bne.n	800cd6a <_scanf_chars+0xa2>
 800cd5e:	68e2      	ldr	r2, [r4, #12]
 800cd60:	3201      	adds	r2, #1
 800cd62:	60e2      	str	r2, [r4, #12]
 800cd64:	69a2      	ldr	r2, [r4, #24]
 800cd66:	b102      	cbz	r2, 800cd6a <_scanf_chars+0xa2>
 800cd68:	7033      	strb	r3, [r6, #0]
 800cd6a:	6923      	ldr	r3, [r4, #16]
 800cd6c:	443b      	add	r3, r7
 800cd6e:	6123      	str	r3, [r4, #16]
 800cd70:	2000      	movs	r0, #0
 800cd72:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800cd76:	bf00      	nop
 800cd78:	0800e119 	.word	0x0800e119

0800cd7c <_scanf_i>:
 800cd7c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cd80:	4698      	mov	r8, r3
 800cd82:	4b76      	ldr	r3, [pc, #472]	; (800cf5c <_scanf_i+0x1e0>)
 800cd84:	460c      	mov	r4, r1
 800cd86:	4682      	mov	sl, r0
 800cd88:	4616      	mov	r6, r2
 800cd8a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800cd8e:	b087      	sub	sp, #28
 800cd90:	ab03      	add	r3, sp, #12
 800cd92:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800cd96:	4b72      	ldr	r3, [pc, #456]	; (800cf60 <_scanf_i+0x1e4>)
 800cd98:	69a1      	ldr	r1, [r4, #24]
 800cd9a:	4a72      	ldr	r2, [pc, #456]	; (800cf64 <_scanf_i+0x1e8>)
 800cd9c:	2903      	cmp	r1, #3
 800cd9e:	bf18      	it	ne
 800cda0:	461a      	movne	r2, r3
 800cda2:	68a3      	ldr	r3, [r4, #8]
 800cda4:	9201      	str	r2, [sp, #4]
 800cda6:	1e5a      	subs	r2, r3, #1
 800cda8:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800cdac:	bf88      	it	hi
 800cdae:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800cdb2:	4627      	mov	r7, r4
 800cdb4:	bf82      	ittt	hi
 800cdb6:	eb03 0905 	addhi.w	r9, r3, r5
 800cdba:	f240 135d 	movwhi	r3, #349	; 0x15d
 800cdbe:	60a3      	strhi	r3, [r4, #8]
 800cdc0:	f857 3b1c 	ldr.w	r3, [r7], #28
 800cdc4:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 800cdc8:	bf98      	it	ls
 800cdca:	f04f 0900 	movls.w	r9, #0
 800cdce:	6023      	str	r3, [r4, #0]
 800cdd0:	463d      	mov	r5, r7
 800cdd2:	f04f 0b00 	mov.w	fp, #0
 800cdd6:	6831      	ldr	r1, [r6, #0]
 800cdd8:	ab03      	add	r3, sp, #12
 800cdda:	7809      	ldrb	r1, [r1, #0]
 800cddc:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 800cde0:	2202      	movs	r2, #2
 800cde2:	f7f3 fa0d 	bl	8000200 <memchr>
 800cde6:	b328      	cbz	r0, 800ce34 <_scanf_i+0xb8>
 800cde8:	f1bb 0f01 	cmp.w	fp, #1
 800cdec:	d159      	bne.n	800cea2 <_scanf_i+0x126>
 800cdee:	6862      	ldr	r2, [r4, #4]
 800cdf0:	b92a      	cbnz	r2, 800cdfe <_scanf_i+0x82>
 800cdf2:	6822      	ldr	r2, [r4, #0]
 800cdf4:	2308      	movs	r3, #8
 800cdf6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800cdfa:	6063      	str	r3, [r4, #4]
 800cdfc:	6022      	str	r2, [r4, #0]
 800cdfe:	6822      	ldr	r2, [r4, #0]
 800ce00:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 800ce04:	6022      	str	r2, [r4, #0]
 800ce06:	68a2      	ldr	r2, [r4, #8]
 800ce08:	1e51      	subs	r1, r2, #1
 800ce0a:	60a1      	str	r1, [r4, #8]
 800ce0c:	b192      	cbz	r2, 800ce34 <_scanf_i+0xb8>
 800ce0e:	6832      	ldr	r2, [r6, #0]
 800ce10:	1c51      	adds	r1, r2, #1
 800ce12:	6031      	str	r1, [r6, #0]
 800ce14:	7812      	ldrb	r2, [r2, #0]
 800ce16:	f805 2b01 	strb.w	r2, [r5], #1
 800ce1a:	6872      	ldr	r2, [r6, #4]
 800ce1c:	3a01      	subs	r2, #1
 800ce1e:	2a00      	cmp	r2, #0
 800ce20:	6072      	str	r2, [r6, #4]
 800ce22:	dc07      	bgt.n	800ce34 <_scanf_i+0xb8>
 800ce24:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 800ce28:	4631      	mov	r1, r6
 800ce2a:	4650      	mov	r0, sl
 800ce2c:	4790      	blx	r2
 800ce2e:	2800      	cmp	r0, #0
 800ce30:	f040 8085 	bne.w	800cf3e <_scanf_i+0x1c2>
 800ce34:	f10b 0b01 	add.w	fp, fp, #1
 800ce38:	f1bb 0f03 	cmp.w	fp, #3
 800ce3c:	d1cb      	bne.n	800cdd6 <_scanf_i+0x5a>
 800ce3e:	6863      	ldr	r3, [r4, #4]
 800ce40:	b90b      	cbnz	r3, 800ce46 <_scanf_i+0xca>
 800ce42:	230a      	movs	r3, #10
 800ce44:	6063      	str	r3, [r4, #4]
 800ce46:	6863      	ldr	r3, [r4, #4]
 800ce48:	4947      	ldr	r1, [pc, #284]	; (800cf68 <_scanf_i+0x1ec>)
 800ce4a:	6960      	ldr	r0, [r4, #20]
 800ce4c:	1ac9      	subs	r1, r1, r3
 800ce4e:	f000 f8a7 	bl	800cfa0 <__sccl>
 800ce52:	f04f 0b00 	mov.w	fp, #0
 800ce56:	68a3      	ldr	r3, [r4, #8]
 800ce58:	6822      	ldr	r2, [r4, #0]
 800ce5a:	2b00      	cmp	r3, #0
 800ce5c:	d03d      	beq.n	800ceda <_scanf_i+0x15e>
 800ce5e:	6831      	ldr	r1, [r6, #0]
 800ce60:	6960      	ldr	r0, [r4, #20]
 800ce62:	f891 c000 	ldrb.w	ip, [r1]
 800ce66:	f810 000c 	ldrb.w	r0, [r0, ip]
 800ce6a:	2800      	cmp	r0, #0
 800ce6c:	d035      	beq.n	800ceda <_scanf_i+0x15e>
 800ce6e:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 800ce72:	d124      	bne.n	800cebe <_scanf_i+0x142>
 800ce74:	0510      	lsls	r0, r2, #20
 800ce76:	d522      	bpl.n	800cebe <_scanf_i+0x142>
 800ce78:	f10b 0b01 	add.w	fp, fp, #1
 800ce7c:	f1b9 0f00 	cmp.w	r9, #0
 800ce80:	d003      	beq.n	800ce8a <_scanf_i+0x10e>
 800ce82:	3301      	adds	r3, #1
 800ce84:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
 800ce88:	60a3      	str	r3, [r4, #8]
 800ce8a:	6873      	ldr	r3, [r6, #4]
 800ce8c:	3b01      	subs	r3, #1
 800ce8e:	2b00      	cmp	r3, #0
 800ce90:	6073      	str	r3, [r6, #4]
 800ce92:	dd1b      	ble.n	800cecc <_scanf_i+0x150>
 800ce94:	6833      	ldr	r3, [r6, #0]
 800ce96:	3301      	adds	r3, #1
 800ce98:	6033      	str	r3, [r6, #0]
 800ce9a:	68a3      	ldr	r3, [r4, #8]
 800ce9c:	3b01      	subs	r3, #1
 800ce9e:	60a3      	str	r3, [r4, #8]
 800cea0:	e7d9      	b.n	800ce56 <_scanf_i+0xda>
 800cea2:	f1bb 0f02 	cmp.w	fp, #2
 800cea6:	d1ae      	bne.n	800ce06 <_scanf_i+0x8a>
 800cea8:	6822      	ldr	r2, [r4, #0]
 800ceaa:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 800ceae:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 800ceb2:	d1bf      	bne.n	800ce34 <_scanf_i+0xb8>
 800ceb4:	2310      	movs	r3, #16
 800ceb6:	6063      	str	r3, [r4, #4]
 800ceb8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800cebc:	e7a2      	b.n	800ce04 <_scanf_i+0x88>
 800cebe:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 800cec2:	6022      	str	r2, [r4, #0]
 800cec4:	780b      	ldrb	r3, [r1, #0]
 800cec6:	f805 3b01 	strb.w	r3, [r5], #1
 800ceca:	e7de      	b.n	800ce8a <_scanf_i+0x10e>
 800cecc:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800ced0:	4631      	mov	r1, r6
 800ced2:	4650      	mov	r0, sl
 800ced4:	4798      	blx	r3
 800ced6:	2800      	cmp	r0, #0
 800ced8:	d0df      	beq.n	800ce9a <_scanf_i+0x11e>
 800ceda:	6823      	ldr	r3, [r4, #0]
 800cedc:	05db      	lsls	r3, r3, #23
 800cede:	d50d      	bpl.n	800cefc <_scanf_i+0x180>
 800cee0:	42bd      	cmp	r5, r7
 800cee2:	d909      	bls.n	800cef8 <_scanf_i+0x17c>
 800cee4:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 800cee8:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800ceec:	4632      	mov	r2, r6
 800ceee:	4650      	mov	r0, sl
 800cef0:	4798      	blx	r3
 800cef2:	f105 39ff 	add.w	r9, r5, #4294967295	; 0xffffffff
 800cef6:	464d      	mov	r5, r9
 800cef8:	42bd      	cmp	r5, r7
 800cefa:	d02d      	beq.n	800cf58 <_scanf_i+0x1dc>
 800cefc:	6822      	ldr	r2, [r4, #0]
 800cefe:	f012 0210 	ands.w	r2, r2, #16
 800cf02:	d113      	bne.n	800cf2c <_scanf_i+0x1b0>
 800cf04:	702a      	strb	r2, [r5, #0]
 800cf06:	6863      	ldr	r3, [r4, #4]
 800cf08:	9e01      	ldr	r6, [sp, #4]
 800cf0a:	4639      	mov	r1, r7
 800cf0c:	4650      	mov	r0, sl
 800cf0e:	47b0      	blx	r6
 800cf10:	6821      	ldr	r1, [r4, #0]
 800cf12:	f8d8 3000 	ldr.w	r3, [r8]
 800cf16:	f011 0f20 	tst.w	r1, #32
 800cf1a:	d013      	beq.n	800cf44 <_scanf_i+0x1c8>
 800cf1c:	1d1a      	adds	r2, r3, #4
 800cf1e:	f8c8 2000 	str.w	r2, [r8]
 800cf22:	681b      	ldr	r3, [r3, #0]
 800cf24:	6018      	str	r0, [r3, #0]
 800cf26:	68e3      	ldr	r3, [r4, #12]
 800cf28:	3301      	adds	r3, #1
 800cf2a:	60e3      	str	r3, [r4, #12]
 800cf2c:	1bed      	subs	r5, r5, r7
 800cf2e:	44ab      	add	fp, r5
 800cf30:	6925      	ldr	r5, [r4, #16]
 800cf32:	445d      	add	r5, fp
 800cf34:	6125      	str	r5, [r4, #16]
 800cf36:	2000      	movs	r0, #0
 800cf38:	b007      	add	sp, #28
 800cf3a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cf3e:	f04f 0b00 	mov.w	fp, #0
 800cf42:	e7ca      	b.n	800ceda <_scanf_i+0x15e>
 800cf44:	1d1a      	adds	r2, r3, #4
 800cf46:	f8c8 2000 	str.w	r2, [r8]
 800cf4a:	681b      	ldr	r3, [r3, #0]
 800cf4c:	f011 0f01 	tst.w	r1, #1
 800cf50:	bf14      	ite	ne
 800cf52:	8018      	strhne	r0, [r3, #0]
 800cf54:	6018      	streq	r0, [r3, #0]
 800cf56:	e7e6      	b.n	800cf26 <_scanf_i+0x1aa>
 800cf58:	2001      	movs	r0, #1
 800cf5a:	e7ed      	b.n	800cf38 <_scanf_i+0x1bc>
 800cf5c:	0800d8ac 	.word	0x0800d8ac
 800cf60:	0800d1fd 	.word	0x0800d1fd
 800cf64:	0800d115 	.word	0x0800d115
 800cf68:	0800e528 	.word	0x0800e528

0800cf6c <_read_r>:
 800cf6c:	b538      	push	{r3, r4, r5, lr}
 800cf6e:	4d07      	ldr	r5, [pc, #28]	; (800cf8c <_read_r+0x20>)
 800cf70:	4604      	mov	r4, r0
 800cf72:	4608      	mov	r0, r1
 800cf74:	4611      	mov	r1, r2
 800cf76:	2200      	movs	r2, #0
 800cf78:	602a      	str	r2, [r5, #0]
 800cf7a:	461a      	mov	r2, r3
 800cf7c:	f7f7 fde8 	bl	8004b50 <_read>
 800cf80:	1c43      	adds	r3, r0, #1
 800cf82:	d102      	bne.n	800cf8a <_read_r+0x1e>
 800cf84:	682b      	ldr	r3, [r5, #0]
 800cf86:	b103      	cbz	r3, 800cf8a <_read_r+0x1e>
 800cf88:	6023      	str	r3, [r4, #0]
 800cf8a:	bd38      	pop	{r3, r4, r5, pc}
 800cf8c:	20001d94 	.word	0x20001d94

0800cf90 <nan>:
 800cf90:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800cf98 <nan+0x8>
 800cf94:	4770      	bx	lr
 800cf96:	bf00      	nop
 800cf98:	00000000 	.word	0x00000000
 800cf9c:	7ff80000 	.word	0x7ff80000

0800cfa0 <__sccl>:
 800cfa0:	b570      	push	{r4, r5, r6, lr}
 800cfa2:	780b      	ldrb	r3, [r1, #0]
 800cfa4:	4604      	mov	r4, r0
 800cfa6:	2b5e      	cmp	r3, #94	; 0x5e
 800cfa8:	bf0b      	itete	eq
 800cfaa:	784b      	ldrbeq	r3, [r1, #1]
 800cfac:	1c48      	addne	r0, r1, #1
 800cfae:	1c88      	addeq	r0, r1, #2
 800cfb0:	2200      	movne	r2, #0
 800cfb2:	bf08      	it	eq
 800cfb4:	2201      	moveq	r2, #1
 800cfb6:	1e61      	subs	r1, r4, #1
 800cfb8:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 800cfbc:	f801 2f01 	strb.w	r2, [r1, #1]!
 800cfc0:	42a9      	cmp	r1, r5
 800cfc2:	d1fb      	bne.n	800cfbc <__sccl+0x1c>
 800cfc4:	b90b      	cbnz	r3, 800cfca <__sccl+0x2a>
 800cfc6:	3801      	subs	r0, #1
 800cfc8:	bd70      	pop	{r4, r5, r6, pc}
 800cfca:	f082 0201 	eor.w	r2, r2, #1
 800cfce:	54e2      	strb	r2, [r4, r3]
 800cfd0:	4605      	mov	r5, r0
 800cfd2:	4628      	mov	r0, r5
 800cfd4:	f810 1b01 	ldrb.w	r1, [r0], #1
 800cfd8:	292d      	cmp	r1, #45	; 0x2d
 800cfda:	d006      	beq.n	800cfea <__sccl+0x4a>
 800cfdc:	295d      	cmp	r1, #93	; 0x5d
 800cfde:	d0f3      	beq.n	800cfc8 <__sccl+0x28>
 800cfe0:	b909      	cbnz	r1, 800cfe6 <__sccl+0x46>
 800cfe2:	4628      	mov	r0, r5
 800cfe4:	e7f0      	b.n	800cfc8 <__sccl+0x28>
 800cfe6:	460b      	mov	r3, r1
 800cfe8:	e7f1      	b.n	800cfce <__sccl+0x2e>
 800cfea:	786e      	ldrb	r6, [r5, #1]
 800cfec:	2e5d      	cmp	r6, #93	; 0x5d
 800cfee:	d0fa      	beq.n	800cfe6 <__sccl+0x46>
 800cff0:	42b3      	cmp	r3, r6
 800cff2:	dcf8      	bgt.n	800cfe6 <__sccl+0x46>
 800cff4:	3502      	adds	r5, #2
 800cff6:	4619      	mov	r1, r3
 800cff8:	3101      	adds	r1, #1
 800cffa:	428e      	cmp	r6, r1
 800cffc:	5462      	strb	r2, [r4, r1]
 800cffe:	dcfb      	bgt.n	800cff8 <__sccl+0x58>
 800d000:	1af1      	subs	r1, r6, r3
 800d002:	3901      	subs	r1, #1
 800d004:	1c58      	adds	r0, r3, #1
 800d006:	42b3      	cmp	r3, r6
 800d008:	bfa8      	it	ge
 800d00a:	2100      	movge	r1, #0
 800d00c:	1843      	adds	r3, r0, r1
 800d00e:	e7e0      	b.n	800cfd2 <__sccl+0x32>

0800d010 <_strtol_l.constprop.0>:
 800d010:	2b01      	cmp	r3, #1
 800d012:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d016:	d001      	beq.n	800d01c <_strtol_l.constprop.0+0xc>
 800d018:	2b24      	cmp	r3, #36	; 0x24
 800d01a:	d906      	bls.n	800d02a <_strtol_l.constprop.0+0x1a>
 800d01c:	f7fc fbc2 	bl	80097a4 <__errno>
 800d020:	2316      	movs	r3, #22
 800d022:	6003      	str	r3, [r0, #0]
 800d024:	2000      	movs	r0, #0
 800d026:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d02a:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 800d110 <_strtol_l.constprop.0+0x100>
 800d02e:	460d      	mov	r5, r1
 800d030:	462e      	mov	r6, r5
 800d032:	f815 4b01 	ldrb.w	r4, [r5], #1
 800d036:	f814 700c 	ldrb.w	r7, [r4, ip]
 800d03a:	f017 0708 	ands.w	r7, r7, #8
 800d03e:	d1f7      	bne.n	800d030 <_strtol_l.constprop.0+0x20>
 800d040:	2c2d      	cmp	r4, #45	; 0x2d
 800d042:	d132      	bne.n	800d0aa <_strtol_l.constprop.0+0x9a>
 800d044:	782c      	ldrb	r4, [r5, #0]
 800d046:	2701      	movs	r7, #1
 800d048:	1cb5      	adds	r5, r6, #2
 800d04a:	2b00      	cmp	r3, #0
 800d04c:	d05b      	beq.n	800d106 <_strtol_l.constprop.0+0xf6>
 800d04e:	2b10      	cmp	r3, #16
 800d050:	d109      	bne.n	800d066 <_strtol_l.constprop.0+0x56>
 800d052:	2c30      	cmp	r4, #48	; 0x30
 800d054:	d107      	bne.n	800d066 <_strtol_l.constprop.0+0x56>
 800d056:	782c      	ldrb	r4, [r5, #0]
 800d058:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800d05c:	2c58      	cmp	r4, #88	; 0x58
 800d05e:	d14d      	bne.n	800d0fc <_strtol_l.constprop.0+0xec>
 800d060:	786c      	ldrb	r4, [r5, #1]
 800d062:	2310      	movs	r3, #16
 800d064:	3502      	adds	r5, #2
 800d066:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 800d06a:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 800d06e:	f04f 0c00 	mov.w	ip, #0
 800d072:	fbb8 f9f3 	udiv	r9, r8, r3
 800d076:	4666      	mov	r6, ip
 800d078:	fb03 8a19 	mls	sl, r3, r9, r8
 800d07c:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 800d080:	f1be 0f09 	cmp.w	lr, #9
 800d084:	d816      	bhi.n	800d0b4 <_strtol_l.constprop.0+0xa4>
 800d086:	4674      	mov	r4, lr
 800d088:	42a3      	cmp	r3, r4
 800d08a:	dd24      	ble.n	800d0d6 <_strtol_l.constprop.0+0xc6>
 800d08c:	f1bc 0f00 	cmp.w	ip, #0
 800d090:	db1e      	blt.n	800d0d0 <_strtol_l.constprop.0+0xc0>
 800d092:	45b1      	cmp	r9, r6
 800d094:	d31c      	bcc.n	800d0d0 <_strtol_l.constprop.0+0xc0>
 800d096:	d101      	bne.n	800d09c <_strtol_l.constprop.0+0x8c>
 800d098:	45a2      	cmp	sl, r4
 800d09a:	db19      	blt.n	800d0d0 <_strtol_l.constprop.0+0xc0>
 800d09c:	fb06 4603 	mla	r6, r6, r3, r4
 800d0a0:	f04f 0c01 	mov.w	ip, #1
 800d0a4:	f815 4b01 	ldrb.w	r4, [r5], #1
 800d0a8:	e7e8      	b.n	800d07c <_strtol_l.constprop.0+0x6c>
 800d0aa:	2c2b      	cmp	r4, #43	; 0x2b
 800d0ac:	bf04      	itt	eq
 800d0ae:	782c      	ldrbeq	r4, [r5, #0]
 800d0b0:	1cb5      	addeq	r5, r6, #2
 800d0b2:	e7ca      	b.n	800d04a <_strtol_l.constprop.0+0x3a>
 800d0b4:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 800d0b8:	f1be 0f19 	cmp.w	lr, #25
 800d0bc:	d801      	bhi.n	800d0c2 <_strtol_l.constprop.0+0xb2>
 800d0be:	3c37      	subs	r4, #55	; 0x37
 800d0c0:	e7e2      	b.n	800d088 <_strtol_l.constprop.0+0x78>
 800d0c2:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 800d0c6:	f1be 0f19 	cmp.w	lr, #25
 800d0ca:	d804      	bhi.n	800d0d6 <_strtol_l.constprop.0+0xc6>
 800d0cc:	3c57      	subs	r4, #87	; 0x57
 800d0ce:	e7db      	b.n	800d088 <_strtol_l.constprop.0+0x78>
 800d0d0:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 800d0d4:	e7e6      	b.n	800d0a4 <_strtol_l.constprop.0+0x94>
 800d0d6:	f1bc 0f00 	cmp.w	ip, #0
 800d0da:	da05      	bge.n	800d0e8 <_strtol_l.constprop.0+0xd8>
 800d0dc:	2322      	movs	r3, #34	; 0x22
 800d0de:	6003      	str	r3, [r0, #0]
 800d0e0:	4646      	mov	r6, r8
 800d0e2:	b942      	cbnz	r2, 800d0f6 <_strtol_l.constprop.0+0xe6>
 800d0e4:	4630      	mov	r0, r6
 800d0e6:	e79e      	b.n	800d026 <_strtol_l.constprop.0+0x16>
 800d0e8:	b107      	cbz	r7, 800d0ec <_strtol_l.constprop.0+0xdc>
 800d0ea:	4276      	negs	r6, r6
 800d0ec:	2a00      	cmp	r2, #0
 800d0ee:	d0f9      	beq.n	800d0e4 <_strtol_l.constprop.0+0xd4>
 800d0f0:	f1bc 0f00 	cmp.w	ip, #0
 800d0f4:	d000      	beq.n	800d0f8 <_strtol_l.constprop.0+0xe8>
 800d0f6:	1e69      	subs	r1, r5, #1
 800d0f8:	6011      	str	r1, [r2, #0]
 800d0fa:	e7f3      	b.n	800d0e4 <_strtol_l.constprop.0+0xd4>
 800d0fc:	2430      	movs	r4, #48	; 0x30
 800d0fe:	2b00      	cmp	r3, #0
 800d100:	d1b1      	bne.n	800d066 <_strtol_l.constprop.0+0x56>
 800d102:	2308      	movs	r3, #8
 800d104:	e7af      	b.n	800d066 <_strtol_l.constprop.0+0x56>
 800d106:	2c30      	cmp	r4, #48	; 0x30
 800d108:	d0a5      	beq.n	800d056 <_strtol_l.constprop.0+0x46>
 800d10a:	230a      	movs	r3, #10
 800d10c:	e7ab      	b.n	800d066 <_strtol_l.constprop.0+0x56>
 800d10e:	bf00      	nop
 800d110:	0800e119 	.word	0x0800e119

0800d114 <_strtol_r>:
 800d114:	f7ff bf7c 	b.w	800d010 <_strtol_l.constprop.0>

0800d118 <_strtoul_l.constprop.0>:
 800d118:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800d11c:	4f36      	ldr	r7, [pc, #216]	; (800d1f8 <_strtoul_l.constprop.0+0xe0>)
 800d11e:	4686      	mov	lr, r0
 800d120:	460d      	mov	r5, r1
 800d122:	4628      	mov	r0, r5
 800d124:	f815 4b01 	ldrb.w	r4, [r5], #1
 800d128:	5de6      	ldrb	r6, [r4, r7]
 800d12a:	f016 0608 	ands.w	r6, r6, #8
 800d12e:	d1f8      	bne.n	800d122 <_strtoul_l.constprop.0+0xa>
 800d130:	2c2d      	cmp	r4, #45	; 0x2d
 800d132:	d12f      	bne.n	800d194 <_strtoul_l.constprop.0+0x7c>
 800d134:	782c      	ldrb	r4, [r5, #0]
 800d136:	2601      	movs	r6, #1
 800d138:	1c85      	adds	r5, r0, #2
 800d13a:	2b00      	cmp	r3, #0
 800d13c:	d057      	beq.n	800d1ee <_strtoul_l.constprop.0+0xd6>
 800d13e:	2b10      	cmp	r3, #16
 800d140:	d109      	bne.n	800d156 <_strtoul_l.constprop.0+0x3e>
 800d142:	2c30      	cmp	r4, #48	; 0x30
 800d144:	d107      	bne.n	800d156 <_strtoul_l.constprop.0+0x3e>
 800d146:	7828      	ldrb	r0, [r5, #0]
 800d148:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 800d14c:	2858      	cmp	r0, #88	; 0x58
 800d14e:	d149      	bne.n	800d1e4 <_strtoul_l.constprop.0+0xcc>
 800d150:	786c      	ldrb	r4, [r5, #1]
 800d152:	2310      	movs	r3, #16
 800d154:	3502      	adds	r5, #2
 800d156:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
 800d15a:	2700      	movs	r7, #0
 800d15c:	fbb8 f8f3 	udiv	r8, r8, r3
 800d160:	fb03 f908 	mul.w	r9, r3, r8
 800d164:	ea6f 0909 	mvn.w	r9, r9
 800d168:	4638      	mov	r0, r7
 800d16a:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 800d16e:	f1bc 0f09 	cmp.w	ip, #9
 800d172:	d814      	bhi.n	800d19e <_strtoul_l.constprop.0+0x86>
 800d174:	4664      	mov	r4, ip
 800d176:	42a3      	cmp	r3, r4
 800d178:	dd22      	ble.n	800d1c0 <_strtoul_l.constprop.0+0xa8>
 800d17a:	2f00      	cmp	r7, #0
 800d17c:	db1d      	blt.n	800d1ba <_strtoul_l.constprop.0+0xa2>
 800d17e:	4580      	cmp	r8, r0
 800d180:	d31b      	bcc.n	800d1ba <_strtoul_l.constprop.0+0xa2>
 800d182:	d101      	bne.n	800d188 <_strtoul_l.constprop.0+0x70>
 800d184:	45a1      	cmp	r9, r4
 800d186:	db18      	blt.n	800d1ba <_strtoul_l.constprop.0+0xa2>
 800d188:	fb00 4003 	mla	r0, r0, r3, r4
 800d18c:	2701      	movs	r7, #1
 800d18e:	f815 4b01 	ldrb.w	r4, [r5], #1
 800d192:	e7ea      	b.n	800d16a <_strtoul_l.constprop.0+0x52>
 800d194:	2c2b      	cmp	r4, #43	; 0x2b
 800d196:	bf04      	itt	eq
 800d198:	782c      	ldrbeq	r4, [r5, #0]
 800d19a:	1c85      	addeq	r5, r0, #2
 800d19c:	e7cd      	b.n	800d13a <_strtoul_l.constprop.0+0x22>
 800d19e:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 800d1a2:	f1bc 0f19 	cmp.w	ip, #25
 800d1a6:	d801      	bhi.n	800d1ac <_strtoul_l.constprop.0+0x94>
 800d1a8:	3c37      	subs	r4, #55	; 0x37
 800d1aa:	e7e4      	b.n	800d176 <_strtoul_l.constprop.0+0x5e>
 800d1ac:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 800d1b0:	f1bc 0f19 	cmp.w	ip, #25
 800d1b4:	d804      	bhi.n	800d1c0 <_strtoul_l.constprop.0+0xa8>
 800d1b6:	3c57      	subs	r4, #87	; 0x57
 800d1b8:	e7dd      	b.n	800d176 <_strtoul_l.constprop.0+0x5e>
 800d1ba:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800d1be:	e7e6      	b.n	800d18e <_strtoul_l.constprop.0+0x76>
 800d1c0:	2f00      	cmp	r7, #0
 800d1c2:	da07      	bge.n	800d1d4 <_strtoul_l.constprop.0+0xbc>
 800d1c4:	2322      	movs	r3, #34	; 0x22
 800d1c6:	f8ce 3000 	str.w	r3, [lr]
 800d1ca:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800d1ce:	b932      	cbnz	r2, 800d1de <_strtoul_l.constprop.0+0xc6>
 800d1d0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d1d4:	b106      	cbz	r6, 800d1d8 <_strtoul_l.constprop.0+0xc0>
 800d1d6:	4240      	negs	r0, r0
 800d1d8:	2a00      	cmp	r2, #0
 800d1da:	d0f9      	beq.n	800d1d0 <_strtoul_l.constprop.0+0xb8>
 800d1dc:	b107      	cbz	r7, 800d1e0 <_strtoul_l.constprop.0+0xc8>
 800d1de:	1e69      	subs	r1, r5, #1
 800d1e0:	6011      	str	r1, [r2, #0]
 800d1e2:	e7f5      	b.n	800d1d0 <_strtoul_l.constprop.0+0xb8>
 800d1e4:	2430      	movs	r4, #48	; 0x30
 800d1e6:	2b00      	cmp	r3, #0
 800d1e8:	d1b5      	bne.n	800d156 <_strtoul_l.constprop.0+0x3e>
 800d1ea:	2308      	movs	r3, #8
 800d1ec:	e7b3      	b.n	800d156 <_strtoul_l.constprop.0+0x3e>
 800d1ee:	2c30      	cmp	r4, #48	; 0x30
 800d1f0:	d0a9      	beq.n	800d146 <_strtoul_l.constprop.0+0x2e>
 800d1f2:	230a      	movs	r3, #10
 800d1f4:	e7af      	b.n	800d156 <_strtoul_l.constprop.0+0x3e>
 800d1f6:	bf00      	nop
 800d1f8:	0800e119 	.word	0x0800e119

0800d1fc <_strtoul_r>:
 800d1fc:	f7ff bf8c 	b.w	800d118 <_strtoul_l.constprop.0>

0800d200 <__submore>:
 800d200:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d204:	460c      	mov	r4, r1
 800d206:	6b49      	ldr	r1, [r1, #52]	; 0x34
 800d208:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800d20c:	4299      	cmp	r1, r3
 800d20e:	d11d      	bne.n	800d24c <__submore+0x4c>
 800d210:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800d214:	f7fc fb82 	bl	800991c <_malloc_r>
 800d218:	b918      	cbnz	r0, 800d222 <__submore+0x22>
 800d21a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800d21e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d222:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d226:	63a3      	str	r3, [r4, #56]	; 0x38
 800d228:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 800d22c:	6360      	str	r0, [r4, #52]	; 0x34
 800d22e:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 800d232:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 800d236:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 800d23a:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800d23e:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 800d242:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 800d246:	6020      	str	r0, [r4, #0]
 800d248:	2000      	movs	r0, #0
 800d24a:	e7e8      	b.n	800d21e <__submore+0x1e>
 800d24c:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 800d24e:	0077      	lsls	r7, r6, #1
 800d250:	463a      	mov	r2, r7
 800d252:	f7fe feee 	bl	800c032 <_realloc_r>
 800d256:	4605      	mov	r5, r0
 800d258:	2800      	cmp	r0, #0
 800d25a:	d0de      	beq.n	800d21a <__submore+0x1a>
 800d25c:	eb00 0806 	add.w	r8, r0, r6
 800d260:	4601      	mov	r1, r0
 800d262:	4632      	mov	r2, r6
 800d264:	4640      	mov	r0, r8
 800d266:	f7fc fad7 	bl	8009818 <memcpy>
 800d26a:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 800d26e:	f8c4 8000 	str.w	r8, [r4]
 800d272:	e7e9      	b.n	800d248 <__submore+0x48>

0800d274 <__ascii_wctomb>:
 800d274:	b149      	cbz	r1, 800d28a <__ascii_wctomb+0x16>
 800d276:	2aff      	cmp	r2, #255	; 0xff
 800d278:	bf85      	ittet	hi
 800d27a:	238a      	movhi	r3, #138	; 0x8a
 800d27c:	6003      	strhi	r3, [r0, #0]
 800d27e:	700a      	strbls	r2, [r1, #0]
 800d280:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 800d284:	bf98      	it	ls
 800d286:	2001      	movls	r0, #1
 800d288:	4770      	bx	lr
 800d28a:	4608      	mov	r0, r1
 800d28c:	4770      	bx	lr
	...

0800d290 <__assert_func>:
 800d290:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800d292:	4614      	mov	r4, r2
 800d294:	461a      	mov	r2, r3
 800d296:	4b09      	ldr	r3, [pc, #36]	; (800d2bc <__assert_func+0x2c>)
 800d298:	681b      	ldr	r3, [r3, #0]
 800d29a:	4605      	mov	r5, r0
 800d29c:	68d8      	ldr	r0, [r3, #12]
 800d29e:	b14c      	cbz	r4, 800d2b4 <__assert_func+0x24>
 800d2a0:	4b07      	ldr	r3, [pc, #28]	; (800d2c0 <__assert_func+0x30>)
 800d2a2:	9100      	str	r1, [sp, #0]
 800d2a4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800d2a8:	4906      	ldr	r1, [pc, #24]	; (800d2c4 <__assert_func+0x34>)
 800d2aa:	462b      	mov	r3, r5
 800d2ac:	f000 f80e 	bl	800d2cc <fiprintf>
 800d2b0:	f000 f862 	bl	800d378 <abort>
 800d2b4:	4b04      	ldr	r3, [pc, #16]	; (800d2c8 <__assert_func+0x38>)
 800d2b6:	461c      	mov	r4, r3
 800d2b8:	e7f3      	b.n	800d2a2 <__assert_func+0x12>
 800d2ba:	bf00      	nop
 800d2bc:	200010ac 	.word	0x200010ac
 800d2c0:	0800e52a 	.word	0x0800e52a
 800d2c4:	0800e537 	.word	0x0800e537
 800d2c8:	0800e565 	.word	0x0800e565

0800d2cc <fiprintf>:
 800d2cc:	b40e      	push	{r1, r2, r3}
 800d2ce:	b503      	push	{r0, r1, lr}
 800d2d0:	4601      	mov	r1, r0
 800d2d2:	ab03      	add	r3, sp, #12
 800d2d4:	4805      	ldr	r0, [pc, #20]	; (800d2ec <fiprintf+0x20>)
 800d2d6:	f853 2b04 	ldr.w	r2, [r3], #4
 800d2da:	6800      	ldr	r0, [r0, #0]
 800d2dc:	9301      	str	r3, [sp, #4]
 800d2de:	f7ff fa2f 	bl	800c740 <_vfiprintf_r>
 800d2e2:	b002      	add	sp, #8
 800d2e4:	f85d eb04 	ldr.w	lr, [sp], #4
 800d2e8:	b003      	add	sp, #12
 800d2ea:	4770      	bx	lr
 800d2ec:	200010ac 	.word	0x200010ac

0800d2f0 <_fstat_r>:
 800d2f0:	b538      	push	{r3, r4, r5, lr}
 800d2f2:	4d07      	ldr	r5, [pc, #28]	; (800d310 <_fstat_r+0x20>)
 800d2f4:	2300      	movs	r3, #0
 800d2f6:	4604      	mov	r4, r0
 800d2f8:	4608      	mov	r0, r1
 800d2fa:	4611      	mov	r1, r2
 800d2fc:	602b      	str	r3, [r5, #0]
 800d2fe:	f7f7 fc6c 	bl	8004bda <_fstat>
 800d302:	1c43      	adds	r3, r0, #1
 800d304:	d102      	bne.n	800d30c <_fstat_r+0x1c>
 800d306:	682b      	ldr	r3, [r5, #0]
 800d308:	b103      	cbz	r3, 800d30c <_fstat_r+0x1c>
 800d30a:	6023      	str	r3, [r4, #0]
 800d30c:	bd38      	pop	{r3, r4, r5, pc}
 800d30e:	bf00      	nop
 800d310:	20001d94 	.word	0x20001d94

0800d314 <_isatty_r>:
 800d314:	b538      	push	{r3, r4, r5, lr}
 800d316:	4d06      	ldr	r5, [pc, #24]	; (800d330 <_isatty_r+0x1c>)
 800d318:	2300      	movs	r3, #0
 800d31a:	4604      	mov	r4, r0
 800d31c:	4608      	mov	r0, r1
 800d31e:	602b      	str	r3, [r5, #0]
 800d320:	f7f7 fc6b 	bl	8004bfa <_isatty>
 800d324:	1c43      	adds	r3, r0, #1
 800d326:	d102      	bne.n	800d32e <_isatty_r+0x1a>
 800d328:	682b      	ldr	r3, [r5, #0]
 800d32a:	b103      	cbz	r3, 800d32e <_isatty_r+0x1a>
 800d32c:	6023      	str	r3, [r4, #0]
 800d32e:	bd38      	pop	{r3, r4, r5, pc}
 800d330:	20001d94 	.word	0x20001d94

0800d334 <memmove>:
 800d334:	4288      	cmp	r0, r1
 800d336:	b510      	push	{r4, lr}
 800d338:	eb01 0402 	add.w	r4, r1, r2
 800d33c:	d902      	bls.n	800d344 <memmove+0x10>
 800d33e:	4284      	cmp	r4, r0
 800d340:	4623      	mov	r3, r4
 800d342:	d807      	bhi.n	800d354 <memmove+0x20>
 800d344:	1e43      	subs	r3, r0, #1
 800d346:	42a1      	cmp	r1, r4
 800d348:	d008      	beq.n	800d35c <memmove+0x28>
 800d34a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800d34e:	f803 2f01 	strb.w	r2, [r3, #1]!
 800d352:	e7f8      	b.n	800d346 <memmove+0x12>
 800d354:	4402      	add	r2, r0
 800d356:	4601      	mov	r1, r0
 800d358:	428a      	cmp	r2, r1
 800d35a:	d100      	bne.n	800d35e <memmove+0x2a>
 800d35c:	bd10      	pop	{r4, pc}
 800d35e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800d362:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800d366:	e7f7      	b.n	800d358 <memmove+0x24>

0800d368 <_malloc_usable_size_r>:
 800d368:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d36c:	1f18      	subs	r0, r3, #4
 800d36e:	2b00      	cmp	r3, #0
 800d370:	bfbc      	itt	lt
 800d372:	580b      	ldrlt	r3, [r1, r0]
 800d374:	18c0      	addlt	r0, r0, r3
 800d376:	4770      	bx	lr

0800d378 <abort>:
 800d378:	b508      	push	{r3, lr}
 800d37a:	2006      	movs	r0, #6
 800d37c:	f000 f82c 	bl	800d3d8 <raise>
 800d380:	2001      	movs	r0, #1
 800d382:	f7f7 fbdb 	bl	8004b3c <_exit>

0800d386 <_raise_r>:
 800d386:	291f      	cmp	r1, #31
 800d388:	b538      	push	{r3, r4, r5, lr}
 800d38a:	4604      	mov	r4, r0
 800d38c:	460d      	mov	r5, r1
 800d38e:	d904      	bls.n	800d39a <_raise_r+0x14>
 800d390:	2316      	movs	r3, #22
 800d392:	6003      	str	r3, [r0, #0]
 800d394:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800d398:	bd38      	pop	{r3, r4, r5, pc}
 800d39a:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800d39c:	b112      	cbz	r2, 800d3a4 <_raise_r+0x1e>
 800d39e:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800d3a2:	b94b      	cbnz	r3, 800d3b8 <_raise_r+0x32>
 800d3a4:	4620      	mov	r0, r4
 800d3a6:	f000 f831 	bl	800d40c <_getpid_r>
 800d3aa:	462a      	mov	r2, r5
 800d3ac:	4601      	mov	r1, r0
 800d3ae:	4620      	mov	r0, r4
 800d3b0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d3b4:	f000 b818 	b.w	800d3e8 <_kill_r>
 800d3b8:	2b01      	cmp	r3, #1
 800d3ba:	d00a      	beq.n	800d3d2 <_raise_r+0x4c>
 800d3bc:	1c59      	adds	r1, r3, #1
 800d3be:	d103      	bne.n	800d3c8 <_raise_r+0x42>
 800d3c0:	2316      	movs	r3, #22
 800d3c2:	6003      	str	r3, [r0, #0]
 800d3c4:	2001      	movs	r0, #1
 800d3c6:	e7e7      	b.n	800d398 <_raise_r+0x12>
 800d3c8:	2400      	movs	r4, #0
 800d3ca:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800d3ce:	4628      	mov	r0, r5
 800d3d0:	4798      	blx	r3
 800d3d2:	2000      	movs	r0, #0
 800d3d4:	e7e0      	b.n	800d398 <_raise_r+0x12>
	...

0800d3d8 <raise>:
 800d3d8:	4b02      	ldr	r3, [pc, #8]	; (800d3e4 <raise+0xc>)
 800d3da:	4601      	mov	r1, r0
 800d3dc:	6818      	ldr	r0, [r3, #0]
 800d3de:	f7ff bfd2 	b.w	800d386 <_raise_r>
 800d3e2:	bf00      	nop
 800d3e4:	200010ac 	.word	0x200010ac

0800d3e8 <_kill_r>:
 800d3e8:	b538      	push	{r3, r4, r5, lr}
 800d3ea:	4d07      	ldr	r5, [pc, #28]	; (800d408 <_kill_r+0x20>)
 800d3ec:	2300      	movs	r3, #0
 800d3ee:	4604      	mov	r4, r0
 800d3f0:	4608      	mov	r0, r1
 800d3f2:	4611      	mov	r1, r2
 800d3f4:	602b      	str	r3, [r5, #0]
 800d3f6:	f7f7 fb91 	bl	8004b1c <_kill>
 800d3fa:	1c43      	adds	r3, r0, #1
 800d3fc:	d102      	bne.n	800d404 <_kill_r+0x1c>
 800d3fe:	682b      	ldr	r3, [r5, #0]
 800d400:	b103      	cbz	r3, 800d404 <_kill_r+0x1c>
 800d402:	6023      	str	r3, [r4, #0]
 800d404:	bd38      	pop	{r3, r4, r5, pc}
 800d406:	bf00      	nop
 800d408:	20001d94 	.word	0x20001d94

0800d40c <_getpid_r>:
 800d40c:	f7f7 bb7e 	b.w	8004b0c <_getpid>

0800d410 <_init>:
 800d410:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d412:	bf00      	nop
 800d414:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d416:	bc08      	pop	{r3}
 800d418:	469e      	mov	lr, r3
 800d41a:	4770      	bx	lr

0800d41c <_fini>:
 800d41c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d41e:	bf00      	nop
 800d420:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d422:	bc08      	pop	{r3}
 800d424:	469e      	mov	lr, r3
 800d426:	4770      	bx	lr
